{"version":3,"file":"default-shared-lib_components_mx-widget_mx-widget_module_ts-shared-lib_modules_orange-money_s-772f2d-es2015.js","mappings":"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AEjD,iDAAiD;AACjD,iDAAiD;;AAEjD,0CAA0C;AAC1C,0CAA0C;;AAE1C,4CAA4C;AAC5C,8CAA8C;;AAE9C,wCAAwC;AACxC,8CAA8C;AAC9C,qCAAqC;;AAErC;;AAEA;;AAEA;;AAEA,CAAC;AAAA,kGAAC;;;;;;;;;;;ACxIF,iCAAO,EAAE,mCAAE;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;;AAIA;AACA,CAAC;AAAA,kGAAC;;;;;;;;;;;;ACvIF,iCAAO,EAAE,mCAAE;AACX;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,0CAA0C;AAC1C,4CAA4C;;AAE5C,uCAAuC;AACvC,yCAAyC;;AAEzC,6CAA6C;AAC7C,+CAA+C;;AAE/C,2CAA2C;AAC3C,6CAA6C;;AAE7C;;AAEA;AACA,CAAC;AAAA,kGAAC;;;;;;;;;;;ACzBF,iCAAO,EAAE,mCAAE;AACX;AACA;AACA;AACA,2CAA2C;AAC3C,wCAAwC;AACxC,uCAAuC;AACvC,wCAAwC;AACxC,wCAAwC;AACxC;;AAEA;;AAEA,gCAAgC;;AAEhC,8CAA8C;AAC9C,4CAA4C;;AAE5C,sCAAsC;AACtC,oCAAoC;;AAEpC,4CAA4C;AAC5C,0CAA0C;;AAE1C,gDAAgD;AAChD,8CAA8C;;AAE9C,8CAA8C;AAC9C,4CAA4C;;AAE5C,mDAAmD;AACnD,iDAAiD;;AAEjD,8CAA8C;AAC9C,qDAAqD;;AAErD;;AAEA;;AAEA;AACA,CAAC;AAAA,kGAAC;;;;;;;;;;;ACzCF,iCAAO,CAAC,gDAAgB,EAAE,gDAAgB,EAAE,+CAAe,EAAE,gDAAgB;AAC7E,SAAS,kDAAkB,CAAC,yDAAyB,EAAE,sDAAsB;AAC7E,SAAS,+CAAe,EAAE,kDAAkB,EAAE,+CAAe,EAAE,qDAAqB,CAAC,mCAErF;AACA;;AAEA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,0CAA0C;AAC1C,gDAAgD;;AAEhD;AACA;AACA;AACA,uCAAuC;;AAEvC;AACA;;AAEA;AACA,4BAA4B,yBAAyB;AACrD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;;AAEb;AACA,4BAA4B,uBAAuB;AACnD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,oEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,uEAAuE;AACvE;AACA;;AAEA;AACA;;AAEA,4BAA4B,yBAAyB;AACrD;AACA;AACA;AACA;;AAEA;AACA,6BAA6B,6BAA6B;;AAE1D;AACA;AACA;;AAEA;AACA;AACA,gCAAgC,uBAAuB;AACvD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,gCAAgC,qBAAqB;AACrD;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,gCAAgC,uBAAuB;AACvD;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,kCAAkC,2BAA2B;AAC7D;AACA,oCAAoC,uBAAuB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,+EAA+E;AAC/E;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,4BAA4B,uBAAuB;AACnD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,4BAA4B,uBAAuB;AACnD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA,4BAA4B,qBAAqB;AACjD;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,4BAA4B,uBAAuB;AACnD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;;;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,wBAAwB;AAChD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA,wBAAwB,wBAAwB;AAChD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mIAAmI;AACnI;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;;AAEA;;AAEA,wBAAwB,wBAAwB;AAChD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wBAAwB,wBAAwB;AAChD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA,wBAAwB,wBAAwB;AAChD;AACA;;AAEA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,wBAAwB,eAAe;AACvC;AACA,wGAAwG;;AAExG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,wBAAwB,iBAAiB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;;AAEA;;AAEA;AACA,wBAAwB,sBAAsB;AAC9C;AACA;AACA;AACA,+DAA+D;AAC/D;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;;AAEA;AACA;;AAEA,yBAAyB,yBAAyB;AAClD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA,yBAAyB,yBAAyB;AAClD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qEAAqE;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,yBAAyB,yBAAyB;AAClD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,yBAAyB,yBAAyB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,yBAAyB,yBAAyB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,yBAAyB,yBAAyB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,yBAAyB,yBAAyB;AAClD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;;AAEA;;AAEA,CAAC;AAAA,kGAAC;;;;;;;;;;;;ACzoBF,iCAAO,EAAE,mCAAE;AACX;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA,oCAAoC;AACpC,qCAAqC;AACrC,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;;AAEzC;AACA,8CAA8C;AAC9C,8CAA8C;;AAE9C,4CAA4C;AAC5C,4CAA4C;;AAE5C,6CAA6C;AAC7C,6CAA6C;;AAE7C,+CAA+C;AAC/C,+CAA+C;;AAE/C,gDAAgD;AAChD,gDAAgD;;AAEhD,kDAAkD;AAClD,kDAAkD;;AAElD,iDAAiD;AACjD,iDAAiD;;AAEjD,0CAA0C;AAC1C,0CAA0C;;AAE1C,sDAAsD;AACtD,uDAAuD;AACvD,wDAAwD;AACxD,yDAAyD;;AAEzD,6CAA6C;AAC7C,6CAA6C;;AAE7C,6CAA6C;AAC7C,6CAA6C;;AAE7C,4CAA4C;AAC5C,8CAA8C;;AAE9C,8CAA8C;AAC9C,oDAAoD;;AAEpD;AACA,iDAAiD;AACjD,8CAA8C;;AAE9C,wDAAwD;AACxD,qDAAqD;AACrD;;;AAGA,6CAA6C;AAC7C,6CAA6C;;AAE7C,6CAA6C;AAC7C,6CAA6C;;AAE7C,gDAAgD;AAChD,gDAAgD;;AAEhD,gDAAgD;AAChD,gDAAgD;;AAEhD,0CAA0C;AAC1C,0CAA0C;;AAE1C,4CAA4C;AAC5C,8CAA8C;;AAE9C,2BAA2B,wBAAwB;;AAEnD;;AAEA;AACA;;AAEA,CAAC;AAAA,kGAAC;;;;;;;;;;;;;ACpGF,iCAAO,CAAC,gDAAgB,EAAE,gDAAgB,EAAE,gDAAgB,EAAE,kDAAkB,EAAE,oDAAoB,CAAC,mCACvG;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wBAAwB,aAAa;AACrC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA,wBAAwB,eAAe;AACvC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,4BAA4B,eAAe;AAC3C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA,kGAAC;;;;;;;;;;;;AC/KF,iCAAO,CAAC,sDAAsB,CAAC,mCAAE;;AAEjC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iCAAiC,6BAA6B;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA;;AAEA,CAAC;AAAA,kGAAC;;;;;;;;;;;AC/HF,iGAAO,CAAC,6DAA6B,CAAC,mCAAE;;AAExC;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA,8HAA8H;AAC9H;AACA;AACA;AACA;AACA,yBAAyB,aAAa;AACtC;AACA;AACA;;AAEA,yBAAyB,WAAW;AACpC;AACA,6BAA6B,oBAAoB;AACjD;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA,CAAC;AAAA,kGAAC;;;;;;;;;;;;AC9EF,iCAAO,EAAE,mCAAE;;AAEX;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qCAAqC;AACrC,qCAAqC;;AAErC,yCAAyC;AACzC,yCAAyC;;AAEzC,6CAA6C;AAC7C,6CAA6C;;AAE7C,8CAA8C;AAC9C,8CAA8C;;AAE9C,qCAAqC;AACrC,qCAAqC;;AAErC,wCAAwC;AACxC,sCAAsC;;AAEtC,uCAAuC;AACvC,yCAAyC;;AAEzC,0CAA0C;AAC1C,0CAA0C;;AAE1C,4CAA4C;AAC5C,8CAA8C;;;AAG9C,sCAAsC;AACtC,wCAAwC;;AAExC,qCAAqC;AACrC,uCAAuC;;AAEvC,+CAA+C,iCAAiC;AAChF,iDAAiD,0BAA0B;;AAE3E,0CAA0C;AAC1C,4CAA4C;;AAE5C;;AAEA;;AAEA;;AAEA,CAAC;AAAA,kGAAC;;;;;;;;;;;AClEF,iCAAO,EAAE,mCAAE;;AAEX;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,CAAC;AAAA,kGAAC;;;;;;;;;;;ACdF,iCAAO,CAAC,gDAAgB,EAAE,gDAAgB,CAAC,mCAAE;;AAE7C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA,6BAA6B;AAC7B;AACA,6BAA6B,kBAAkB;AAC/C;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA,CAAC;AAAA,kGAAC;;;;;;;;;;;;ACxWF,iCAAO,EAAE,mCAAE;;AAEX;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uCAAuC;AACvC,qCAAqC;;AAErC,qCAAqC;AACrC,mCAAmC;;AAEnC,sCAAsC;AACtC,oCAAoC;;AAEpC,wCAAwC;AACxC,sCAAsC;;AAEtC,uCAAuC;AACvC,qCAAqC;;AAErC,wCAAwC;AACxC,sCAAsC;;AAEtC,0CAA0C;;AAE1C,4CAA4C;AAC5C,0CAA0C;;AAE1C,+CAA+C;;AAE/C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,yCAAyC;AACzC,yCAAyC;;;AAGzC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AAC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ACA;AACA;AACA;AACA,wBAAwB,yCAAyC;AACjE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,yCAAyC;AACrE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sBAAsB,0CAA0C;AAChE;AACA;AACA;AACA,oBAAoB;AACpB,YAAY;AACZ,oBAAoB;AACpB;AACA;AACA;AACA;;;AAGA;AACA,sBAAsB,0CAA0C;AAChE;AACA;AACA;AACA,oBAAoB;AACpB,YAAY;AACZ,oBAAoB;AACpB;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,wBAAwB,kBAAkB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,wDAAwD;AACxD;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,wDAAwD;AACxD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA,uBAAuB,yBAAyB;AAChD,yBAAyB,oBAAoB;AAC7C;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;;AAIA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,yBAAyB,sBAAsB;AAC/C;AACA;;AAEA;AACA;;AAEA;AACA,uBAAuB,sBAAsB;AAC7C;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;;AAGA;;AAEA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA,yBAAyB,iBAAiB;AAC1C;AACA;;AAEA;AACA,yBAAyB,iBAAiB;AAC1C,0CAA0C,UAAU;AACpD;;AAEA;AACA;AACA;AACA,yBAAyB,iBAAiB;AAC1C;AACA;AACA,6BAA6B,iBAAiB;AAC9C;AACA;AACA,sCAAsC,UAAU;AAChD;AACA;AACA;AACA;AACA;;AAEA;;AAEA,CAAC;AAAA,kGAAC;;;;;;;;;;;;ACvuBF,iCAAO,CAAC,8CAAc,EAAE,qEAAqC,EAAE,gDAAgB;AAC/E,QAAQ,+CAAe,EAAE,sDAAsB,EAAE,+CAAe,EAAE,qDAAqB,CAAC,mDAAmB,CAAC,kDAAkB,CAAC,iDAAiB,CAAC,mCACjJ;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,2DAA2D;;AAE3D;AACA,+DAA+D;AAC/D;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iCAAiC,0BAA0B;AAC3D;AACA;AACA;;AAEA;AACA;AACA;AACA,qCAAqC,+BAA+B;AACpE;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,+BAA+B;AACpE;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;;AAGA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,+KAA+K;;AAE/K;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,4BAA4B,eAAe;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qGAAqG;AACrG;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,uKAAuK;AACvK;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,4BAA4B,eAAe;AAC3C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,8DAA8D;AAC9D;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mCAAmC;;AAEnC,4BAA4B,wBAAwB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,4BAA4B,wBAAwB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,yBAAyB,yBAAyB;AAClD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,mCAAmC;AACnC,4BAA4B;AAC5B,qCAAqC;;AAErC;AACA;;AAEA;AACA;;AAEA;;AAEA,CAAC;AAAA,kGAAC;;;;;;;;;;;ACjWF,iCAAO,EAAE,mCAAE;;AAEX;;AAEA;AACA,qCAAqC;AACrC,qCAAqC;AACrC,qCAAqC;;AAErC;AACA,+CAA+C;;AAE/C,8CAA8C;;AAE9C,0CAA0C;AAC1C,4CAA4C;;AAE5C;AACA;AACA,mCAAmC;AACnC,mCAAmC;AACnC,SAAS;AACT;;AAEA;AACA,CAAC;AAAA,kGAAC;;;;;;;;;;;;ACzBF,iCAAO,CAAC,gDAAgB,CAAC,6CAAa,CAAC,sDAAsB,CAAC,mCAAE;;AAEhE;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,+CAA+C;AAC/C,oDAAoD;;AAE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AoB,qBAAqB,SAAS;;AAElD;AACA;;AAEA;;AAEA;AACA;AACA,qBAAqB,iBAAiB,SAAS;AAC/C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,+FAA+F;AAC/F;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;;AAEA;;AAEA,CAAC;AAAA,kGAAC;;;;;;;;;;;ACnEF,iCAAO,EAAE,mCAAE;;AAEX;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD,0BAA0B;AAC1B,+CAA+C,gDAAgD;AAC/F,mCAAmC;AACnC,wCAAwC;AACxC,uCAAuC;AACvC,0CAA0C;AAC1C,yCAAyC;AACzC,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,2FAA2F;AAC3F;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,wCAAwC;AACxC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,0EAA0E;AAC1E;AACA;AACA;;AAEA;AACA,yCAAyC,0BAA0B,QAAQ;;AAE3E;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,yCAAyC,0BAA0B,QAAQ;;AAE3E;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,yCAAyC,0BAA0B,QAAQ;;AAE3E;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,iCAAiC,0BAA0B;AAC3D;AACA;AACA;AACA;;AAEA;AACA,8EAA8E;;AAE9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,4GAA4G;AAC5G;AACA;AACA;AACA,wEAAwE;AACxE;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,CAAC;AAAA,kGAAC;;;;;;;;;;;;ACjsBF,iCAAO,CAAC,wCAAQ,CAAC,iDAAiB,CAAC,mCAAE;;AAErC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,CAAC;AAAA,kGAAC;;;;;;;;;;;AClFF,iGAAO,EAAE,mCAAE;;AAEX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,uDAAuD;AACvD;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,CAAC;AAAA,kGAAC;;;;;;;;;;;ACtIF,iCAAO,EAAE,mCAAE;;AAEX;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gCAAgC,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,aAAa,EAAE,MAAM,EAAE,SAAS,EAAE,UAAU,EAAE,uBAAuB,EAAE,SAAS,EAAE;AACrJ;AACA,mCAAmC,sBAAsB;AACzD;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA,CAAC;AAAA,kGAAC;;;;;;;;;;;;ACtOF,iCAAO,CAAC,iDAAiB,CAAC,mCAC1B;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,kDAAkD;AAClD,gDAAgD;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,6BAA6B,YAAY;AACzC;AACA;AACA;;AAEA,mCAAmC;;;AAGnC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA,gCAAgC,sBAAsB;AACtD;AACA;AACA;;AAEA;AACA;AACA,kCAAkC;AAClC,iCAAiC,iBAAiB;AAClD;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,CAAC;AAAA,kGAAC;;;;;;;;;;;;ACzFF,iGAAO,CAAC,wDAAwB,EAAE,yDAAyB,EAAE,+CAAe;AAC5E,QAAQ,iDAAiB,CAAC,kDAAkB,EAAE,0DAA0B;AACxE,QAAQ,iDAAiB,EAAE,gDAAgB,EAAE,iDAAiB,EAAE,+CAAe,EAAE,iDAAiB,EAAE,sDAAsB,CAAC,mCAC3H;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,sDAAsD,qBAAqB;AAC3E;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+GAA+G;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,oCAAoC;AACrD;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe,gBAAgB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,+HAA+H;AAC/H;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA,+HAA+H;AAC/H;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE;AAChE,gEAAgE;AAChE,SAAS;AACT;AACA,iFAAiF;AACjF;AACA;;;AAGA;;AAEA;AACA,sBAAsB,mBAAmB;AACzkDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,6BAA6B;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,kBAAkB,0CAA0C;AAC5D;AACA,oEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yGAAyG;;AAEzG;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA,qDAAqD;;AAErD;AACA,CAAC;AAAA,kGAAC;;;;;;;;;;ACvdF,iGAAO,EAAE,mCAAE;;AAEX;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,oCAAoC;AAC7E;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,qCAAqC,SAAS;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA,CAAC;AAAA,kGAAC;;;;;;;;;;;AC3CF,iCAAO,CAAC,wDAAwB,EAAE,iDAAiB,CAAC,mCACpD;AACA,wEAAwE;AACxE;AACA,CAAC;AAAA,kGAAC;;;;;;;;;;;;ACLF,iGAAO,CAAC,sEAAsC,CAAC,mCAAE;;AAEjD;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA,CAAC;AAAA,kGAAC;;;;;;;;;;;;ACnEF,iCAAO,CAAC,wDAAwB,EAAE,iDAAiB,CAAC,4CAAY,CAAC,mCACjE;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,wCAAwC;AACxC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,4BAA4B;AAC5B,4BAA4B;AAC5B;;AAEA,uDAAuD,QAAQ;AAC/D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,wCAAwC,SAAS;AACjD;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA,kGAAC;;;;;;;;;;;;;AChIF,iCAAO,CAAC,gDAAgB,EAAE,mDAAmB;AAC7C,QAAQ,gDAAgB,EAAE,mDAAmB;AAC7C,QAAQ,yDAAyB,EAAE,oDAAoB;AACvD,QAAQ,iDAAiB,CAAC,mCAC1B;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,CAAC;AAAA,kGAAC;;;;;;;;;;;;;AC/DF,iCAAO,EAAE,mCAAE;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,+CAA+C;AAC/C;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA,kGAAC;;;;;;;;;;;AC7BF,iCAAO,CAAC,gDAAgB,CAAC,mCACzB;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,kDAAkD;AAClD,gDAAgD;;AAEhD,qDAAqD;AACrD,oDAAoD;;AAEpD,qCAAqC;AACrC,uCAAuC;;AAEvC,mCAAmC;AACnC,qCAAqC;;AAErC,qCAAqC;AACrC,uCAAuC;;;AAGvC;;AAEA;AACA,2BAA2B;AAC3B;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,CAAC;AAAA,kGAAC;;;;;;;;;;;;;AC9CF,iCAAO,CAAC,kDAAkB,EAAE,iDAAiB,EAAE,iDAAiB,CAAC,mCACjE;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,iDAAiD,aAAa;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA,kGAAC;;;;;;;;;;;;;AChDF,iCAAO,CAAC,wDAAwB,EAAE,iDAAiB,CAAC,mCACpD;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,eAAe;AACf;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA,kGAAC;;;;;;;;;;;;;AC7FF,iCAAO,CAAC,kDAAkB,EAAE,sEAAsC;AAClE,QAAQ,wDAAwB,EAAE,gDAAgB,EAAE,iDAAiB,CAAC,mCAClE;;AAEJ;;AAEA;AACA;AACA;AACA;AACA,0EAA0E,eAAe;;AAEzF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA,qCAAqC,aAAa;AAClD;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,0EAA0E;;AAE1E,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,iCAAiC,iBAAiB;AAClD;AACA;;AAEA;AACA;;AAEA,SAAS;;AAET;AACA;AACA;AACA;;AAEA;;AAEA,KAAK;AAAA,kGAAC;;;;;;;;;;;;AC7HN,iCAAO,CAAC,kDAAkB,EAAE,wDAAwB;AACpD,QAAQ,iDAAiB,CAAC,mCAC1B;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,eAAe;AACf;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA,kGAAC;;;;;;;;;;;AClGF,iCAAO,CAAC,iDAAiB,CAAC,mCAC1B;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,6BAA6B,iBAAiB;AAC9C;AACA,SAAS;;;AAGT;AACA;AACA;AACA;AACA;;AAEA;AACA,8CAA8C,yBAAyB;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA,kGAAC;;;;;;;;;;;;;ACxHF,iCAAO,CAAC,6CAAa,CAAC,mCACtB;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,yBAAyB;AAC1D;;AAEA;;AAEA;AACA,iCAAiC,iBAAiB;AAClD;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,6BAA6B,iBAAiB;AAC9C;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;;AAEA,CAAC;AAAA,kGAAC;;;;;;;;;;;ACrLF,iCAAO,EAAE,mCAAE;;AAEX;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA,CAAC;AAAA,kGAAC;;;;;;;;;;;;;;;;;;;;;;;AC5D+C;AACJ;AACG;AACzC;AACP,eAAe,4DAAa;AAC5B;;AAEO,eAAe,4DAAS;AACxB,mBAAmB,2DAAa;;;;;;;;;;ACRvC;AACA;AACA;AACA,iCAAO,EAAE,mCAAE;AACX;;AAEA;AACA;AACA,gBAAgB,SAAS;AACzB,gBAAgB,SAAS;AACzB,gBAAgB,SAAS;AACzB,gBAAgB,SAAS;AACzB,gBAAgB,QAAQ;AACxB;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,gBAAgB,QAAQ;AACxB,gBAAgB,SAAS;AACzB,gBAAgB;AAChB;AACA;AAC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oB;;AAEzK;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB;;AAEhB;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB;;AAEhB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,wBAAwB,8BAA8B;AACtD;;AAEA;AACA,uEAAuE,QAAQ,IAAI,QAAQ;AAC3F,mFAAmF;AACnF;AACA;AACA,IAAI;AACJ;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,IAAI;;;AAGJ,wDAAwD;;AAExD;AACA;AACA,IAAI;;;AAGJ;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA,EAAE;;;AAGF;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,QAAQ;AACR;AACA;;AAEA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,IAAI;;AAEJ;AACA;;AAEA;AACA;AACA;AACA,EAAE;;;AAGF;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN;;AAEA;;AAEA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,0CAA0C;;AAE1C;AACA;AACA;AACA,MAAM;;;AAGN;AACA;AACA,MAAM;;;AAGN,mDAAmD;;AAEnD;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA,EAAE;;;AAGF;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,gCAAgC;;AAEhC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,qCAAqC;;AAErC;AACA,kCAAkC;;AAElC,2CAA2C;;AAE3C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd,2CAA2C;;AAE3C;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY,SAAS;AACrB;;;AAGA;AACA,uCAAuC,gBAAgB;AACvD;AACA,oCAAoC,WAAW,gBAAgB;AAC/D;AACA,wCAAwC,aAAa;AACrD;AACA,yCAAyC;AACzC;AACA,yCAAyC,OAAO;;AAEhD;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,IAAI;;;AAGJ;AACA;AACA;AACA,WAAW,QAAQ;AACnB,YAAY,QAAQ;AACpB;;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,CAAC,GAAG;AACJ;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC,GAAG;AACJ;;AAEA;AACA;AACA,CAAC;AACD;;AAEA,kDAAkD,0CAA0C;;AAE5F;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,CAAC,GAAG;AACJ;;AAEA;AACA;AACA,CAAC;AACD;;AAEA,kDAAkD,0CAA0C;;AAE5F;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,CAAC,GAAG;AACJ;;AAEA;AACA;AACA,CAAC;AACD;;AAEA;;AAEA,kDAAkD,0CAA0C;;AAE5F,4CAA4C,gBAAgB,kBAAkB,OAAO,2BAA2B,wDAAwD,gCAAgC,uDAAuD;;AAE/P,8DAA8D,sEAAsE,8DAA8D;;AAElM;AACA;AACA;;AAEA;AACA;AACA;AACA,yGAAyG;;AAEzG;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D;;AAE5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBAAsB,qBAAqB;AAC3C;AACA;AACA,+DAA+D;;AAE/D;AACA;AACA;AACA,UAAU;AACV;AACA,UAAU;;;AAGV;AACA;AACA;AACA,UAAU;AACV;AACA,UAAU;;;AAGV;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;;;AAGV;;AAEA;AACA;AACA;AACA,0DAA0D;;AAE1D;AACA;AACA,UAAU;AACV;AACA,UAAU;;;AAGV;;AAEA;AACA;AACA;AACA,0DAA0D;;AAE1D;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA,CAAC;;AAED;;AAEA,CAAC,EAAE,8BAA8B;AACjC;;AAEA;AACA;AACA,CAAC;AACD;;AAEA;;AAEA,kDAAkD,0CAA0C;;AAE5F,4CAA4C,gBAAgB,kBAAkB,OAAO,2BAA2B,wDAAwD,gCAAgC,uDAAuD;;AAE/P,8DAA8D,sEAAsE,8DAA8D;;AAElM;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,QAAQ;AACR;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA,uDAAuD;;AAEvD;;AAEA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA,CAAC;;AAED;;AAEA,CAAC,EAAE,8BAA8B;AACjC;;AAEA;AACA;AACA,CAAC;AACD;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,kDAAkD,0CAA0C;;AAE5F,4CAA4C,gBAAgB,kBAAkB,OAAO,2BAA2B,wDAAwD,gCAAgC,uDAAuD;;AAE/P,8DAA8D,sEAAsE,8DAA8D;;AAElM;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA,sBAAsB,mBAAmB;AACzC;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA,sBAAsB,mBAAmB;AACzC;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,8KAA8K;;AAE9K,8IAA8I;;AAE9I,6HAA6H;;AAE7H,gHAAgH;;AAEhH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA,CAAC;;AAED;;AAEA,CAAC,EAAE,4HAA4H;AAC/H;;AAEA;AACA;AACA,CAAC;AACD;;AAEA;;AAEA;;AAEA;;AAEA,kDAAkD,0CAA0C;;AAE5F,4CAA4C,gBAAgB,kBAAkB,OAAO,2BAA2B,wDAAwD,gCAAgC,uDAAuD;;AAE/P,8DAA8D,sEAAsE,8DAA8D;;AAElM;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wBAAwB,mEAAmE;AAC3F;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,QAAQ;;;AAGR;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,2IAA2I;;AAE3I;AACA;AACA;AACA;AACA;AACA,OAAO,GAAG;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,GAAG;;AAEV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT,QAAQ;;;AAGR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;AAEA;AACA,qCAAqC;;AAErC,+BAA+B;;AAE/B,wEAAwE;;AAExE;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gEAAgE;;AAEhE,sDAAsD;;AAEtD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA,sBAAsB,mBAAmB;AACzC;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,gBAAgB,QAAQ;AACxB;;AAEA,GAAG;AACH;AACA;AACA;AACA,sDAAsD;;AAEtD;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA,YAAY;AACZ;AACA;AACA;;AAEA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA,sDAAsD;;AAEtD;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gJAAgJ;;AAEhJ;;AAEA,gDAAgD,SAAS;AACzD;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,uBAAuB,mBAAmB;AAC1C;AACA,kFAAkF;;AAElF;AACA;AACA;;AAEA;AACA;AACA,UAAU;;;AAGV,wBAAwB,uCAAuC;AAC/D;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,QAAQ;AACR;AACA;AACA,qCAAqC;;AAErC;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;;AAEvB;AACA;AACA;AACA;AACA,SAAS,GAAG;;AAEZ;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,6EAA6E;;AAE7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA,yBAAyB;;AAEzB,iFAAiF;;AAEjF;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR;;;AAGA;AACA;AACA;AACA,OAA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","sources":["./node_modules/om-js-calc/src/calc/AccountAccum.js","./node_modules/om-js-calc/src/calc/AccountData.js","./node_modules/om-js-calc/src/calc/AccountTypes.js","./node_modules/om-js-calc/src/calc/AccumCensus.js","./node_modules/om-js-calc/src/calc/AccumCommon.js","./node_modules/om-js-calc/src/calc/BaseAccumulator.js","./node_modules/om-js-calc/src/calc/CommonData.js","./node_modules/om-js-calc/src/calc/ErrorUtilities.js","./node_modules/om-js-calc/src/calc/IRSConstants.js","./node_modules/om-js-calc/src/calc/IRSwh.js","./node_modules/om-js-calc/src/calc/IncomeData.js","./node_modules/om-js-calc/src/calc/IncomeTypes.js","./node_modules/om-js-calc/src/calc/LimitUtilities.js","./node_modules/om-js-calc/src/calc/MinMaxLimit.js","./node_modules/om-js-calc/src/calc/OMCalcWrapper.js","./node_modules/om-js-calc/src/calc/OMCalculator.js","./node_modules/om-js-calc/src/calc/OMCalculatorRequest.js","./node_modules/om-js-calc/src/calc/OMCalculatorResponse.js","./node_modules/om-js-calc/src/calc/OMDateTierErMatchData.js","./node_modules/om-js-calc/src/calc/OMErMatchData.js","./node_modules/om-js-calc/src/calc/OMObjFactory.js","./node_modules/om-js-calc/src/calc/OMStandardErMatchData.js","./node_modules/om-js-calc/src/calc/OMValidatorResponse.js","./node_modules/om-js-calc/src/calc/ObjFactory.js","./node_modules/om-js-calc/src/calc/ReplacementIncome.js","./node_modules/om-js-calc/src/calc/RetireBenefitEvalResponse.js","./node_modules/om-js-calc/src/calc/SettleCommon.js","./node_modules/om-js-calc/src/calc/Utilities.js","./node_modules/om-js-calc/src/calc/annuityRate/AnnuityMonthlyBenefit.js","./node_modules/om-js-calc/src/calc/loan/Loan.js","./node_modules/om-js-calc/src/calc/loan/LoanUtil.js","./node_modules/om-js-calc/src/calc/util/CalcUtilities.js","./node_modules/om-js-calc/src/calc/util/DateUtilities.js","./node_modules/om-js-calc/src/calc/util/DoubleScratchPad.js","./node_modules/om-js-calc/src/calc/util/ResponseSerializer.js","./node_modules/om-js-calc/src/calc/util/WithholdingUtilities.js","./node_modules/om-js-calc/src/calc/util/employermatch/CustomERMatch.js","./node_modules/om-js-calc/src/calc/util/employermatch/DateTier.js","./node_modules/om-js-calc/src/calc/util/employermatch/DateTierERMatch.js","./node_modules/om-js-calc/src/calc/util/employermatch/ERMatchFactory.js","./node_modules/om-js-calc/src/calc/util/employermatch/ERMatchTypes.js","./node_modules/om-js-calc/src/calc/util/employermatch/EmployerMatchWrapper.js","./node_modules/om-js-calc/src/calc/util/employermatch/MODC_ERMatch.js","./node_modules/om-js-calc/src/calc/util/employermatch/MandatoryERMatch.js","./node_modules/om-js-calc/src/calc/util/employermatch/StandardERMatch.js","./node_modules/om-js-calc/src/calc/util/employermatch/StandardProfitSharing.js","./node_modules/om-js-calc/src/calc/util/employermatch/match/ConsecutiveTierEmployerMatch.js","./node_modules/om-js-calc/src/calc/util/employermatch/match/EmployerMatch.js","./node_modules/om-js-calc/src/calc/util/employermatch/match/MatchTier.js","./node_modules/om-js-calc/src/index.js","./node_modules/om-js-calc/src/utils/utilities.js","./node_modules/voya-orange-money/build/orangemoneyui/feModelBase.js","./node_modules/voya-orange-money/build/orangemoneyui/nonFEModelBase.js","./shared-lib/components/mx-widget/mx-widget.component.ts","./shared-lib/components/mx-widget/mx-widget.module.ts","./shared-lib/modules/orange-money/services/orange-money.service.ts","./shared-lib/services/account/models/orange-money.model.ts","./shared-lib/services/mx-service/models/widget-type.enum.ts","./shared-lib/components/mx-widget/mx-widget.component.html"],"sourcesContent":["\ndefine(['./AccountTypes', './util/employermatch/EmployerMatchWrapper', './util/CalcUtilities'],\n    function(AccountTypes, EmployerMatchWrapper, CalcUtilities){\n\n    var AccountAccum = function(){\n        //  Private Variable declarations ------------------------------------\n        var _em = null ;    //  of type 'EmployerMatchWrapper'\n        var _mm = null ;    //  of type 'MinMaxLimit'\n        var _loan = null ;    //  of type 'MinMaxLimit'\n        var _planName = \"\" ;\n        var _planLabel = \"\" ;\n        var _planId = \"\" ;\n        var _planIndex = -1 ;\n        var _planType = -1 ;\n        var _name = \"\" ;\n        var _label = \"\" ;\n        var _id = \"\" ;\n        var _index = -1 ;\n        var _type = -1 ;\n        var _irc_code = -1 ;\n        var _priority = -1 ;\n        var _errorCode = -1 ;\n        var _errorString = \"\" ;\n        var _modes = 1 ;\n        var _contribType = AccountTypes.CONTRIB_RATE ;\n        var _startContrib = 0 ;\n        var _immediateOrDue = false ; // \"immediate\": interest applied before payment; \"due\": interest applied after payment\n        var _iterationEeAnnualSalary = 0 ;\n        var _iterationErAnnualSalary = 0 ;\n        var _iterationEeContribAmount = 0 ;\n        var _iterationErContribAmount = 0 ;\n        var _iterationPeriod = -1 ;\n        var _initialEeContribAmount = 0 ;\n        var _initialErContribAmount = 0 ;\n\n        var _contribIterationThreshold = 36500 ;\n\n        var _maxPeriod = -1 ;\n        var _eeLumpAmount = 0 ;\n        var _eeEarningsOnLumpAmount = 0 ;\n        var _eeTaxedEarningsOnLumpAmount = 0 ;\n        var _eeContribBucket = 0 ;\n        var _eeEarningsOnContribs = 0 ;\n        var _eeTaxedEarningsOnContribs = 0 ;\n        var _erLumpAmount = 0 ;\n        var _erEarningsOnLumpAmount = 0 ;\n        var _erTaxedEarningsOnLumpAmount = 0 ;\n        var _erContribBucket = 0 ;\n        var _erEarningsOnContribs = 0 ;\n        var _erTaxedEarningsOnContribs = 0 ;\n        var _rateOfReturn = 0 ;\n        var _rateOfIncrease = 0 ;\n        var _rateOfWithholding = 0 ;\n\t\tvar _irsInfraction = false; //will be set to true if there is any IRS infraction\n\n        //  Privileged Method Declarations ---------------------------------\n        this.reset = function( ) {\n            _eeEarningsOnLumpAmount = 0 ;\n            _eeTaxedEarningsOnLumpAmount = 0;\n            _eeContribBucket = 0;\n            _eeEarningsOnContribs = 0;\n            _eeTaxedEarningsOnContribs = 0;\n            _iterationEeContribAmount = 0;\n            _initialEeContribAmount = 0;\n\n            _erEarningsOnLumpAmount = 0;\n            _erTaxedEarningsOnLumpAmount = 0;\n            _erContribBucket = 0;\n            _erEarningsOnContribs = 0;\n            _erTaxedEarningsOnContribs = 0;\n            _iterationErContribAmount = 0;\n            _initialErContribAmount = 0;\n\n            _contribIterationThreshold = 36500 ;\n\n            _maxPeriod = -1;\n            _errorCode = -1;\n            _errorString = \"\";\n\t\t\t_irsInfraction = false;\n        };\n\n        this.isMinMaxLimit = function( )  { return( ( _mm !== null ) && ( ( _mm.getMinValue() > 0 ) || ( _mm.getMaxValue() > 0 ) ) ) ; } ;\n        this.isLoan = function( )  { return( _loan != null ) ; } ;\n\n        this.atMax = function(){ return( _maxPeriod > -1 ) ; } ;\n\n        this.isEmployerMatch = function() { return( _em !== null ) ; } ;\n\n        this.getEmployerMatchId = function() { return( ( this.isEmployerMatch() ) ? _em.getID() : -1 ) ; } ;\n\n        this.isEmployerMatchPeriodicityModal = function( )  { return( _em.calcPeriodicityIsModal() ) ; } ;\n\n        this.setName = function(s)  { _name = s ; } ;\n        this.getName = function( )  { return( _name ) ; } ;\n\n        this.setLabel = function(s)  { _label = s ; } ;\n        this.getLabel = function( )  { return( _label ) ; } ;\n\n        this.setId = function(s)  { _id = s ; } ;\n        this.getId = function( )  { return( _id ) ; } ;\n\n        this.setIRC = function(n) { _irc_code = n ; };\n        this.getIRC = function( ) { return( _irc_code ) ; };\n\n        this.setIndex = function(n) { _index = n ; } ;\n        this.getIndex = function( ) { return( _index ) ; } ;\n\n        this.setType = function(n) {\n            _type = n ;\n            switch (n){\n                case AccountTypes.TYPE_RECURRING_ER:\n                    this.setImmediateOrDue( true );\n                    break;\n                default:\n                    this.setImmediateOrDue( false );\n                    break;\n            }\n        };\n        this.getType = function( ) { return( _type ) ; };\n\n        this.setPlanName = function(s)  { _planName = s ; } ;\n        this.getPlanName = function( )  { return( _planName ) ; } ;\n\n        this.setPlanLabel = function(s)  { _planLabel = s ; } ;\n        this.getPlanLabel = function( )  { return( _planLabel ) ; } ;\n\n        this.setPlanId = function(s)  { _planId = s ; } ;\n        this.getPlanId = function( )  { return( _planId ) ; } ;\n\n        this.setPlanIndex = function(n) { _planIndex = n ; } ;\n        this.getPlanIndex = function( ) { return( _planIndex ) ; } ;\n\n        this.setPlanType = function(n) { _planType = n ; };\n        this.getPlanType = function( ) { return( _planType ) ; };\n\n        this.setPriority = function(n) { _priority = n ; };\n        this.getPriority = function( ) { return( _priority ) ; };\n\n        this.touchErrorCode = function(n) { _errorCode = ( _errorCode > -1 ) ? _errorCode : n ; };\n        this.getErrorCode = function( ) { return( _errorCode ) ; };\n\n        this.touchErrorString = function( s ) { _errorString = ( _errorString.length > 0 ) ? _errorString : s ; };\n        this.getErrorString = function( ) { return( _errorString ) ; };\n\n        this.compareTo = function( another) { return( _priority - another.getPriority() ) ; };\n\n        this.setModes = function(n) { _modes = ( ( n > 0 ) ? n : 1 ) ; };\n        this.getModes = function( ) { return( _modes ) ; };\n\n        this.getFrequency = function( ) { return( this.getModes() ) ; };\n\n        this.setImmediateOrDue = function(b) { _immediateOrDue = b ; };\n        this.isImmediateOrDue = function( ) { return( _immediateOrDue ) ; };\n\n        this.setStartContrib = function(n, d) { _contribType = n ;  _startContrib = d ; };\n        this.adjustStartContrib = function ( d ) { _startContrib = d ; };\n        this.getStartContrib = function( ) { return( _startContrib ) ; };\n        this.getContribType = function( ) { return( _contribType ) ; };\n\n\t\tthis.setIrsInfraction = function(n) { _irsInfraction = n ; };\n        this.getIrsInfraction = function( ) { return( _irsInfraction ) ; };\n        this.isIrsInfraction = function( ) { return( Boolean( _irsInfraction ) ) ; };\n\n        this.setIterationEeContribAmount = function(period) {\n            var holder = 0 ;\n            var annualSalaryRef = this.getIterationEeAnnualSalary() ;\n            this.setIterationPeriod( period ) ;\n\n            if( !this.atMax() ) {\n                holder = 0 ;\n                switch( this.getContribType() ) {\n                    case AccountTypes.CONTRIB_RATE :\n                        holder = this.getStartContrib() * annualSalaryRef / this.getModes() ;\n                        break ;\n\n                    case AccountTypes.CONTRIB_MODAL :\n                        switch (this.getType()){\n                            case AccountTypes.TYPE_MANDATORY_EE:\n                            case AccountTypes.TYPE_MANDATORY_ER:\n                            case AccountTypes.TYPE_RECURRING_ER:\n                                holder = this.getStartContrib();\n                                break;\n                            default:\n                                holder = ( this.getStartContrib() * Math.pow( ( 1.0 + this.getRateOfIncrease() ), period ) ) ;\n                                break;\n                        }\n                        break ;\n\n                    case AccountTypes.CONTRIB_ANNUAL :\n                        switch( this.getType() ) {\n                            case AccountTypes.TYPE_MANDATORY_EE :\n                            case AccountTypes.TYPE_MANDATORY_ER :\n                            case AccountTypes.TYPE_RECURRING_ER :\n                                holder = this.getStartContrib() / this.getModes() ;\n                                break ;\n                            default :\n                                holder = ( this.getStartContrib() / this.getModes() * Math.pow( ( 1.0 + this.getRateOfIncrease() ), period ) ) ;\n                                break ;\n\n                        }\n                        break ;\n\n                }\n\n                holder = ( this.isEmployerMatch() ) ? _em.modifyEeContrib( holder, annualSalaryRef, this.getModes() ) : holder ;\n\n                _iterationEeContribAmount = holder ;\n            }\n            return( this.getIterationEeContribAmount() ) ;\n        };\n\n        this.getInitialEeContribAmount = function( )     { return( _initialEeContribAmount ) ; };\n        this.getIterationEeContribAmount = function( )     { return( _iterationEeContribAmount ) ; };\n        this.getEvaldEeContrib = function( )   { return( this.getIterationEeContribAmount() ) ; };\n        this.getPeriodicEeContrib = function( ) { return( this.getIterationEeContribAmount() * this.getModes() ) ; } ;\n        this.adjustEeIterationContribAmount = function(d) {\n            _iterationEeContribAmount = d ;\n            return( this.getIterationEeContribAmount() ) ;\n        };\n\n        this.getIterationEeContribPerContribType = function( ) {\n            var holder = 0.0 ;\n            var iterationAmount = this.getIterationEeContribAmount() ;\n            var annualSalaryRef = this.getIterationEeAnnualSalary() ;\n\n            switch( this.getContribType() ) {\n                case AccountTypes.CONTRIB_RATE :\n                    holder = iterationAmount * this.getModes() / annualSalaryRef ;\n                    break ;\n\n                case AccountTypes.CONTRIB_MODAL :\n                    holder = iterationAmount ;\n                    break ;\n\n                case AccountTypes.CONTRIB_ANNUAL :\n                    holder = ( iterationAmount * this.getModes() ) ;\n                    break ;\n            }\n            return( holder ) ;\n        };\n\n        this.getIterationEeAnnualSalary = function( )     { return( _iterationEeAnnualSalary ) ; };\n        this.setIterationEeAnnualSalary = function(d)     { _iterationEeAnnualSalary = d ; };\n\n        this.getIterationErAnnualSalary = function( )     { return( _iterationEeAnnualSalary ) ; };\n        this.setIterationErAnnualSalary = function(d)     { _iterationErAnnualSalary = d ; };\n\n        this.getIterationPeriod = function( )     { return( _iterationPeriod ) ; };\n        this.setIterationPeriod = function(n)     { _iterationPeriod = n ; };\n\n        this.setIterationErContribAmount = function( alreadyMatchedContribs) {\n            var holder = 0; //this.getIterationEeContribAmount() ;\n            if( this.isEmployerMatch() ) {\n                if( _em.calcPeriodicityIsAnnual() ){\n                    holder = _em.getEmployerContrib( this.getIterationEeContribAmount(), alreadyMatchedContribs, this.getIterationErAnnualSalary(), this.getModes() ) ;\n                }else{\n                    holder = _em.getEmployerContrib( this.getIterationEeContribAmount(), alreadyMatchedContribs, this.getIterationErAnnualSalary(), this.getModes(), this.getIterationPeriod(), 0 ) ;\n                }\n            }\n            _iterationErContribAmount = holder ;\n\n            return( this.getIterationErContribAmount() ) ;\n        };\n\n        this.adjustErIterationContribAmount = function( d ) {\n            _iterationErContribAmount = d ;\n            return( this.getIterationErContribAmount() ) ;\n        };\n\n        this.getInitialErContribAmount = function( )   { return( _initialErContribAmount ) ; };\n        this.getIterationErContribAmount = function( )   { return( _iterationErContribAmount ) ; };\n\n        this.getPeriodicErContrib = function( )   { return( this.getIterationErContribAmount() * this.getModes() ) ; } ;\n\n        this.getEvaldErContrib = function( )   { return( this.getIterationErContribAmount() ) ; } ;\n\n        this.getIterationErContribPerContribType = function( ) {\n            var holder = 0.0 ;\n            var iterationAmount = this.getIterationErContribAmount() ;\n            var annualSalaryRef = this.getIterationErAnnualSalary() ;\n\n            switch( this.getContribType() ) {\n                case AccountTypes.CONTRIB_RATE :\n                    holder = iterationAmount * this.getModes() / annualSalaryRef ;\n                    break ;\n\n                case AccountTypes.CONTRIB_MODAL :\n                    holder = iterationAmount ;\n                    break ;\n\n                case AccountTypes.CONTRIB_ANNUAL :\n                    holder = ( iterationAmount * this.getModes() ) ;\n                    break ;\n            }\n            return( holder ) ;\n        };\n\n        this.getContribIterationThreshold = function( )   { return( _contribIterationThreshold ) ; } ;\n        this.setContribIterationThreshold = function( n ) { _contribIterationThreshold = n ; } ;\n\n        this.getMaxPeriod = function( ) { return( _maxPeriod ) ; };\n\n        this.touchMaxPeriod = function(n) { _maxPeriod = ( _maxPeriod > -1 ) ? _maxPeriod : n ; };\n\n        this.setRateOfReturn = function(d) { _rateOfReturn = d ; };\n        this.getRateOfReturn = function( ) { return( _rateOfReturn ) ; };\n\n        this.setRateOfWithholding = function(d) {_rateOfWithholding = d ;};\n        this.getRateOfWithholding = function( ) { return( _rateOfWithholding ) ; };\n\n        this.setRateOfIncrease = function(d) { _rateOfIncrease = d ; };\n        this.getRateOfIncrease = function( ) { return( _rateOfIncrease ) ; };\n\n        this.setEeLumpAmount = function(d) { _eeLumpAmount = d ; };\n        this.getEeLumpAmount = function( ) { return( _eeLumpAmount ) ; };\n\n        this.setErLumpAmount = function(d) { _erLumpAmount = d ; };\n        this.getErLumpAmount = function( ) { return( _erLumpAmount ) ; };\n\n        this.touchEeEarningsOnLumpAmount = function(d) { _eeEarningsOnLumpAmount += d ; };\n        this.getEeEarningsOnLumpAmount = function( ) { return( _eeEarningsOnLumpAmount ) ; };\n\n        this.touchErEarningsOnLumpAmount = function(d) { _erEarningsOnLumpAmount += d ; };\n        this.getErEarningsOnLumpAmount = function( ) { return( _erEarningsOnLumpAmount ) ; };\n\n        this.touchEeTaxedEarningsOnLumpAmount = function(d) { _eeTaxedEarningsOnLumpAmount += d ; };\n        this.getEeTaxedEarningsOnLumpAmount = function( ) { return( _eeTaxedEarningsOnLumpAmount ) ; };\n\n        this.touchErTaxedEarningsOnLumpAmount = function(d) { _erTaxedEarningsOnLumpAmount += d ; };\n        this.getErTaxedEarningsOnLumpAmount = function( ) { return( _erTaxedEarningsOnLumpAmount ) ; };\n\n        this.touchEeContribBucket = function(d) { _eeContribBucket += d ; };\n        this.getEeContribBucket = function( ) { return( _eeContribBucket ) ; };\n\n        this.touchErContribBucket = function(d) { _erContribBucket += d ; };\n        this.getErContribBucket = function( ) { return( _erContribBucket ) ; };\n\n        this.touchEeEarningsOnContribs = function(d) { _eeEarningsOnContribs += d ; };\n        this.getEeEarningsOnContribs = function( ) { return( _eeEarningsOnContribs ) ; };\n\n        this.touchErEarningsOnContribs = function(d) { _erEarningsOnContribs += d ; };\n        this.getErEarningsOnContribs = function( ) { return( _erEarningsOnContribs ) ; };\n\n        this.touchEeTaxedEarningsOnContribs = function(d) { _eeTaxedEarningsOnContribs += d ; };\n        this.getEeTaxedEarningsOnContribs = function( ) { return( _eeTaxedEarningsOnContribs ) ; };\n\n        this.touchErTaxedEarningsOnContribs = function(d) { _erTaxedEarningsOnContribs += d ; };\n        this.getErTaxedEarningsOnContribs = function( ) { return( _erTaxedEarningsOnContribs ) ; };\n\n\n        this.align = function( pp, alreadyMatchedContribs ) {\n            var modalRateOfReturn = ( this.getType() == AccountTypes.TYPE_NOGROWTH ) ? 0.0 : CalcUtilities.getPeriodicRate( this.getModes(), this.getRateOfReturn() ) ;\n            var taxedRateOfReturn = CalcUtilities.getAfterTaxRateOfReturn( modalRateOfReturn, this.getRateOfWithholding() ) ;\n            //var iterationIndex = ( ( this.getIterationPeriod() * this.getModes() ) + pp ) ;\n            var iterationIndex = CalcUtilities.getSerialIndexFromPeriodAndMode( this.getIterationPeriod(), pp, this.getModes() ) ;\n            var applyContribs = ( iterationIndex < this.getContribIterationThreshold() ) ;\n\n            if(this.isEmployerMatch()){\n                if(_em.calcPeriodicityIsModal()){\n                    _iterationErContribAmount = _em.getEmployerContrib( this.getIterationEeContribAmount(), alreadyMatchedContribs, this.getIterationErAnnualSalary(), this.getModes(), this.getIterationPeriod(), pp ) ;\n                }\n            }\n\n            if( this.isLoan() ) {\n                this.touchEeContribBucket( _loan.getPayment( iterationIndex ) ) ;\n            }\n            else if( !this.isImmediateOrDue() && applyContribs ) {\n               // due\n                this.touchEeContribBucket( this.getIterationEeContribAmount() ) ;\n                this.touchErContribBucket( this.getIterationErContribAmount() ) ;\n                if( ( this.getIterationPeriod() < 1 ) && ( pp < 1 ) ) {\n                    _initialEeContribAmount = this.getIterationEeContribAmount() ;\n                    _initialErContribAmount = this.getIterationErContribAmount() ;\n                }\n            }\n\n            // accumulation of earnings\n            this.touchEeEarningsOnLumpAmount( ( this.getEeLumpAmount() + this.getEeEarningsOnLumpAmount() ) * modalRateOfReturn ) ;\n            this.touchEeEarningsOnContribs( ( this.getEeContribBucket() + this.getEeEarningsOnContribs() ) * modalRateOfReturn ) ;\n            this.touchEeTaxedEarningsOnLumpAmount( ( this.getEeLumpAmount() + this.getEeTaxedEarningsOnLumpAmount() ) * taxedRateOfReturn ) ;\n            this.touchEeTaxedEarningsOnContribs( ( this.getEeContribBucket() + this.getEeTaxedEarningsOnContribs() )  * taxedRateOfReturn ) ;\n\n            this.touchErEarningsOnLumpAmount( ( this.getErLumpAmount() + this.getErEarningsOnLumpAmount() ) * modalRateOfReturn ) ;\n            this.touchErEarningsOnContribs( ( this.getErContribBucket() + this.getErEarningsOnContribs() ) * modalRateOfReturn ) ;\n            this.touchErTaxedEarningsOnLumpAmount( ( this.getErLumpAmount() + this.getErTaxedEarningsOnLumpAmount() ) * taxedRateOfReturn ) ;\n            this.touchErTaxedEarningsOnContribs( ( this.getErContribBucket() + this.getErTaxedEarningsOnContribs() )  * taxedRateOfReturn ) ;\n\n            if( this.isImmediateOrDue() && applyContribs && !this.isLoan() ) {\n                // immediate\n                this.touchEeContribBucket( this.getIterationEeContribAmount() ) ;\n                this.touchErContribBucket( this.getIterationErContribAmount() ) ;\n                if( ( this.getIterationPeriod() < 1 ) && ( pp < 1 ) ) {\n                    _initialEeContribAmount = this.getIterationEeContribAmount() ;\n                    _initialErContribAmount = this.getIterationErContribAmount() ;\n                }\n            }\n\n        };\n\n        this.getEmployerMatchWrapper = function( ) { return( _em ) ;  };     // of type 'EmployerMatchWrapper'\n        this.setEmployerMatchWrapper = function(  em ) { _em = em ; };\n\n        this.getMinMaxLimit = function( ) { return( _mm ) ;  };\n        this.setMinMaxLimit = function( mm )    { _mm = mm ; };\n\n        this.getLoan = function( ) { return( _loan ) ;  } ;\n        this.setLoan = function(  l )    { _loan = l ; } ;\n\n    };\n\n    return AccountAccum;\n});\n","\ndefine(['./AccountTypes'], function(AccountTypes){\n    var AccountData = function(){\n        //  Private var declarations ------------------------------------\n        var _error = -1 ;\n        var _errorString = \"\";\n        var _planName = \"\" ;\n        var _planLabel = \"\" ;\n        var _planId = \"\" ;\n        var _planIndex = 0 ;\n        var _planType = -1 ;\n        var _name = \"\" ;\n        var _label = \"\" ;\n        var _id = \"\" ;\n        var _index = -1 ;\n        var _type = -1 ;\n        var _irc = -1 ;\n        var _priority = -1 ;\n        var _rateOfReturn = 0 ;\n        var _frequency = 1 ;\n        var _contribType = AccountTypes.CONTRIB_MODAL ;\n        var _contrib = 0 ;\n\n        var _contribIterationThreshold = 36500 ;\n\n        var _balance = 0 ;\n        var _erBalance = 0 ;   // if distinguished from\n        var _omErMatchData = null;\n        var _erMatchData = null;\n        var _minMaxLimit = null;\n        var _minRate = 0 ;\n        var _maxRate = 0.2 ;\n        var _minDollar = 0 ;  // modal contrib\n        var _maxDollar = 17500 ;  // modal contrib !!\n\t\tvar _irsInfraction = false;\n\n        var _loan = null;\n\n        //  Privileged Method Declarations ---------------------------------\n\n        this.setName = function( s ) { _name = s ; } ;\n        this.getName = function( ) { return( _name ) ; } ;\n\n        this.setLabel = function( s ) { _label = s ; } ;\n        this.getLabel = function( ) { return( _label ) ; } ;\n\n        this.setId = function( s ) { _id = s ; } ;\n        this.getId = function( ) { return( _id ) ; } ;\n\n        this.getIndex = function( ) { return( _index ) ; } ;\n        this.setIndex = function( n ) { _index = n ; } ;\n\n        this.getType = function( ) { return( _type ) ; };\n        this.setType = function(n) { _type = n ; };\n\n        this.getPriority = function( ) { return( _priority ) ; };\n        this.setPriority = function(n) { _priority = n ; };\n\n        this.getIRC = function( ) { return( _irc ) ; };\n        this.setIRC = function(n) { _irc = n ; };\n\n        this.setPlanName = function( s ) { _planName = s ; } ;\n        this.getPlanName = function( ) { return( _planName ) ; } ;\n\n        this.setPlanLabel = function( s ) { _planLabel = s ; } ;\n        this.getPlanLabel = function( ) { return( _planLabel ) ; } ;\n\n        this.setPlanId = function( s ) { _planId = s ; } ;\n        this.getPlanId = function( ) { return( _planId ) ; } ;\n\n        this.getPlanIndex = function( ) { return( _planIndex ) ; } ;\n        this.setPlanIndex = function( n ) { _planIndex = n ; } ;\n\n        this.getPlanType = function( ) { return( _planType ) ; } ;\n        this.setPlanType = function( n ) { _planType = n ; } ;\n\n        this.getContrib = function( ) { return( _contrib ) ; };\n        this.setContrib = function(n, d) { _contribType = n ; _contrib = d ; };\n        this.getContribType = function( ) { return( _contribType ) ; };\n        this.updateContrib = function( d ) { _contrib = d ; };\n\n        this.getRateOfReturn = function( ) { return( _rateOfReturn ) ; };\n        this.setRateOfReturn = function(d) { _rateOfReturn = d ; };\n\n        this.getFrequency = function( ) { return( _frequency ) ; };\n        this.setFrequency = function(n) { _frequency = ( n > 0 ) ? n : 1 ; };\n\n        this.getContribIterationThreshold = function( ) { return( _contribIterationThreshold ) ; } ;\n        this.setContribIterationThreshold = function( n ) { _contribIterationThreshold = n ; } ;\n\n        this.getBalance = function( ) { return( _balance ) ; };\n        this.setBalance = function(d) { _balance = d ; };\n\n        this.getErBalance = function( ) { return( _erBalance ) ; };\n        this.setErBalance = function(d) { _erBalance = d ; };\n\n        this.getMinMaxLimit = function( ) { return( _minMaxLimit ) ; } ;\n        this.setMinMaxLimit = function( mm ) { _minMaxLimit = mm ; } ;\n\n        this.getOmErMatchData = function( ) { return( _omErMatchData ) ; } ;\n        this.setOmErMatchData = function( ermd ) { _omErMatchData = ermd ; } ;\n\n        this.getErMatchData = function( ) { return( _erMatchData ) ; };\n        this.setErMatchData = function( ermd ) { _erMatchData = ermd ; };\n\n        this.getLoan = function( ) { return( _loan ) ; } ;\n        this.setLoan = function( l ) { _loan = l ; } ;\n\n\n        this.getMinContribRate = function( ) { return( _minRate ) ; };\n        this.setMinContribRate = function(d) { _minRate = d ; };\n\n        this.getMaxContribRate = function( ) { return( _maxRate ) ; };\n        this.setMaxContribRate = function(d) { _maxRate = d ; };\n\n        this.getMinContribDollar = function( ) { return( _minDollar ) ; };\n        this.setMinContribDollar = function(d) { _minDollar = d ; };\n\n        this.getMaxContribDollar = function( ) { return( _maxDollar ) ; };\n        this.setMaxContribDollar = function(d) { _maxDollar = d ; };\n\n        this.getErrorCode = function( ) { return( _error ) ; };\n        this.setErrorCode = function(n) { _error = n ; };\n\n        this.getErrorString = function( ) { return( _errorString ) ; } ;\n        this.setErrorString = function( s ) { _errorString = s ; } ;\n\n\t\tthis.setIrsInfraction = function(n) { _irsInfraction = n ; };\n        this.getIrsInfraction = function( ) { return( _irsInfraction ) ; };\n\tthis.isIrsInfraction = function() { return( Boolean( _irsInfraction ) ) ; } ;\n\n    };\n\n    AccountData.serialVersionUID = '0L';\n\n    return AccountData;\n\n});","\ndefine([], function(){\n    var AccountTypes = {};\n\n    AccountTypes.labels = [\n        \"Mandatory EE DB\",\n        \"Mandatory EE ARP/ORP\",\n        \"Mandatory ER ARP/ORP\",\n        \"Aggregate Balance\",\n        \"Voluntary Pre-Tax\",\n        \"Roth\",\n    \t\"Supplemental Pre-Tax\",\n    \t\"Supplemental Roth\",\n    \t\"Voluntary Age Catch-Up\",\n        \"Roth Age Catch-Up\",\n        \"After-Tax\",\n    \t\"Supplemental After-Tax\",\n        \"Recurring ER/Profit Sharing\",\n        \"Pension Cash Balance\",\n        \"Pension Lump Sum\",\n        \"No Increase\",\n        \"No Growth\",\n        \"Existing Loan & Repayment\",\n        \"New Loan & Repayment\"\n    ] ;\n\n    AccountTypes.userLabels = [\n        \"Mandatory Employee DB\",\n        \"Mandatory Employee\",\n        \"Mandatory Employer\",\n        \"Combined Balance\",\n        \"Before-tax\",\n        \"Roth\",\n    \t\"Supplemental Before-tax\",\n    \t\"Supplemental Roth\",\n        \"Before-tax Catch-up\",\n        \"Roth Catch-up\",\n        \"After-tax\",\n    \t\"Supplemental After-Tax\",\n        \"Recurring Employer\",\n        \"Pension Balance\",\n        \"Pension Lump Sum\",\n        \"No Increase\",\n        \"No Growth\",\n        \"Existing Loan & Repayment\",\n        \"New Loan & Repayment\"\n    ] ;\n\n    AccountTypes.matchType = function(type){\n        return AccountTypes[\"TYPE_\" + type];\n    };\n\n    AccountTypes.TYPE_DB_MANDATORY_EE = 0 ;  // required defined benefit (pension) contrib\n    AccountTypes.TYPE_MANDATORY_EE    = 1 ;\n    AccountTypes.TYPE_MANDATORY_ER    = 2 ;\n    AccountTypes.TYPE_AGGREGATE_BALANCE     = 3 ;\n    AccountTypes.TYPE_PRETAX                = AccountTypes.TYPE_BASIC_PRETAX  = 4 ;\n    AccountTypes.TYPE_ROTH                  = AccountTypes.TYPE_BASIC_ROTH  = 5 ;\n    AccountTypes.TYPE_PRETAX_SUPP           = AccountTypes.TYPE_SUPPL_PRETAX = 6 ;\n    AccountTypes.TYPE_ROTH_SUPP             = AccountTypes.TYPE_SUPPL_ROTH = 7 ;\n    AccountTypes.TYPE_PRETAX_AGECATCHUP     = AccountTypes.TYPE_CATCHUP_AGE_PRETAX =  8 ;\n    AccountTypes.TYPE_ROTH_AGECATCHUP       = AccountTypes.TYPE_CATCHUP_AGE_ROTH = 9 ;\n    AccountTypes.TYPE_AFTER_TAX             = AccountTypes.TYPE_AFTERTAX      = AccountTypes.TYPE_AFTERTAX = 10 ;\n    AccountTypes.TYPE_AFTER_TAX_SUPP        = AccountTypes.TYPE_AFTERTAX_SUPP = AccountTypes.TYPE_SUPPL_AFTERTAX = 11 ;\n    AccountTypes.TYPE_RECURRING_ER = 12 ;\n    AccountTypes.TYPE_PENSION_CASH_BAL = 13 ;\n    AccountTypes.TYPE_PENSION_LUMP_SUM = 14 ;\n    AccountTypes.TYPE_NOINCREASE = 15 ;\n    AccountTypes.TYPE_NOGROWTH = 16 ;\n\n    AccountTypes.TYPE_EXISTINGLOAN = 17 ;\n    AccountTypes.TYPE_NEWLOAN = 18 ;\n\n    AccountTypes.CONTRIB_ANNUAL = 0 ;\n    AccountTypes.CONTRIB_MODAL = 1 ;\n    AccountTypes.CONTRIB_RATE = 2 ;\n\n    AccountTypes.getLabel = function(index){\n        return AccountTypes.labels[index];\n    };\n\n    AccountTypes.setLabel = function(index, label){\n        AccountTypes.labels[index] = label;\n    };\n\n    AccountTypes.getUserLabel = function(index){\n        return AccountTypes.userLabels[index];\n    };\n\n\n    AccountTypes.accountTypeEvaluator = function( s ) {\n    \tvar retId = AccountTypes.TYPE_AFTERTAX ;\n    \ts = s.toUpperCase().trim() ;\n    \tvar isCatchUp = ( s.indexOf( \"CATCHUP\" ) > -1 ) || ( s.indexOf( \"CATCH_UP\" ) > -1 ) ;\n    \tvar isSupplemental = ( s.indexOf( \"SUPP\" ) > -1 ) ;\n\n    \tif( ( s.indexOf( \"PRETAX\" ) > -1 ) || ( s.indexOf( \"BEFORE\" ) > -1 ) || ( s.indexOf( \"PRE_\" ) > -1 ) ) {\n    \t\tretId = ( isCatchUp ) ? AccountTypes.TYPE_PRETAX_AGECATCHUP : AccountTypes.TYPE_PRETAX  ;\n    \t\tretId = ( isSupplemental ) ? AccountTypes.TYPE_SUPPL_PRETAX : retId ;\n    \t}\n\n    \tif( s.indexOf( \"ROTH\" ) > -1 ) {\n    \t\tretId = ( isCatchUp ) ? AccountTypes.TYPE_ROTH_AGECATCHUP : AccountTypes.TYPE_ROTH  ;\n    \t\tretId = ( isSupplemental ) ? AccountTypes.TYPE_SUPPL_ROTH : retId ;\n    \t}\n\n    \tif( ( s.indexOf( \"AFTER\" ) > -1 ) || ( s.indexOf( \"POST\" ) > -1 ) ) {\n    \t\tretId = ( isSupplemental ) ? AccountTypes.TYPE_SUPPL_AFTERTAX : AccountTypes.TYPE_AFTERTAX ;\n    \t}\n\n    \treturn( retId ) ;\n    } ;\n\n\n    AccountTypes.contribTypeEvaluator = function( s ) {\n    \tvar retId = AccountTypes.CONTRIB_MODAL ;\n    \ts = s.toUpperCase().trim() ;\n\n    \tif( ( s.indexOf( \"PERC\" ) > -1 ) || ( s.indexOf( \"RATE\" ) > -1 ) || ( s.indexOf( \"PRC\" ) > -1 ) || ( s.indexOf( \"%\" ) > -1 ) ) {\n    \t\tretId = AccountTypes.CONTRIB_RATE  ;\n    \t}\n\n//    \tif( ( s.indexOf( \"DOLL\" ) > -1 ) || ( s.indexOf( \"AMOUN\" ) > -1 ) || ( s.indexOf( \"MONE\" ) > -1 ) ) {\n//    \t\tretId = AccountTypes.CONTRIB_MODAL ;\n//    \t}\n\n    \tif( ( s.indexOf( \"ANNUAL\" ) > -1 ) || ( s.indexOf( \"YEAR\" ) > -1 ) ) {\n    \t\tretId = AccountTypes.CONTRIB_ANNUAL ;\n    \t}\n\n    \treturn( retId ) ;\n    } ;\n\n\n\n    return AccountTypes;\n});\n","\ndefine([], function(){\n\tvar AccumCensus = function(){\n        //  Private var declarations ------------------------------------\n        var _periodRef = -1 ;\n        var _salary = 0.0 ;\n        var _salary401a17 = 0.0 ;\n        var _eeContribs = 0.0 ;\n\n        //  Privileged Method Declarations ---------------------------------\n\n        this.getPeriodRef = function( ) { return( _periodRef ) ; }\n        this.setPeriodRef = function( n ) { _periodRef = n ; }\n\n        this.getSalary = function( ) { return( _salary ) ; }\n        this.setSalary = function( d ) { _salary = d ; }\n\n        this.getSalary401a17 = function( ) { return( _salary401a17 ) ; }\n        this.setSalary401a17 = function( d ) { _salary401a17 = d ; }\n\n        this.getEEContribs = function( ) { return( _eeContribs ) ; }\n        this.setEEContribs = function( d ) { _eeContribs = d ; }\n\n    };\n\n    return AccumCensus;\n});","\ndefine([], function(){\n\tvar AccumCommon = function(){\n        //  Private var declarations ------------------------------------\n        var _annualSalary        = 0;\n        var _full                = 0;      // whole years until retirement\n        var _fractional          = 0;   // partial years until retirement\n        var _rateOfIncrease      = 0;  // annual\n        var _rateOfReturn        = 0;   // annual\n        var _rateOfWithholding   = 0;   // annual: for inside build-up of taxable amounts\n        var _minMaxLimitList     = null;\n\n        //  Privileged Method Declarations ---------------------------------\n\n        this.init = function(){ _minMaxLimitList = []; };\n\n        this.setAnnualSalary = function( d ){ _annualSalary = d ; };\n        this.getAnnualSalary = function( ){ return( _annualSalary ) ; };\n\n        this.setFull = function( n ){ _full = n ; };\n        this.getFull = function( ){ return( _full ) ; };\n\n        this.setFractional = function( d ){ _fractional = d ; };\n        this.getFractional = function( ){ return( _fractional ) ; };\n\n        this.setRateOfIncrease = function( d ){ _rateOfIncrease = d ; };\n        this.getRateOfIncrease = function( ){ return( _rateOfIncrease ) ; };\n\n        this.setRateOfReturn = function( d ){ _rateOfReturn = d ; };\n        this.getRateOfReturn = function( ){ return( _rateOfReturn ) ; };\n\n        this.setRateOfWithholding = function( d ){ _rateOfWithholding = d ; };\n        this.getRateOfWithholding = function( ){ return( _rateOfWithholding ) ; };\n\n        this.getMinMaxLimitList = function(){ return _minMaxLimitList; };\n        this.setMinMaxLimitList = function( mmll ) { _minMaxLimitList = mmll; };\n\n        this.init();\n\n    };\n\n    return AccumCommon;\n});","\ndefine(['./AccountAccum', './IRSConstants', './AccumCommon', './AccountTypes',\n         './LimitUtilities','./util/DoubleScratchPad', './util/CalcUtilities',\n         './MinMaxLimit', './ErrorUtilities', './AccumCensus', './ReplacementIncome'],\n\nfunction(AccountAccum, IRSConstants, AccumCommon, AccountTypes, LimitUtilities,\n         DoubleScratchPad, CalcUtilities, MinMaxLimit, ErrorUtilities, AccumCensus, ReplacementIncome){\n\n    //  Constructor  ------------------------------------\n    var BaseAccumulator = function() {\n        //  Private var declarations ------------------------------------\n        var _accountList = null ;\n        var _accumCommon = null ;  // of type 'AccumCommon'\n        var _censusList = null ;\n        var _holder = DoubleScratchPad.newInstance();\n        var _aggregateFrequency = 1 ;\n\n        //  Privileged Method Declarations ------------------------------------\n        this.init = function(ac, al) {\n            _accountList = al ;\n            _accumCommon = ac ;\n            reset();\n        };\n\n        this.getCensusList = function() { return( _censusList ) ; } ;\n        this.getAccountAccumList = function() { return( _accountList ) ; } ;\n\n        //  Private Method Declarations ------------------------------------\n        function reset( ) {\n            // aggregate frequency starting point (at least > 0)\n            _aggregateFrequency = 1 ;  // _accumCommon.getFrequency() ;\n\n            // empty-out census list\n            _censusList = [] ;\n\n            // prepare for sort\n            for (var i = 0; i < _accountList.length; i++) {\n                var aa = _accountList[i];\n                // algorithm for setting primacy: evaluate accounts/money sources and figure out which are least susceptible to\n                // limit or change (setPriority() prep for sort)\n                // TODO:  make this more sophisticated\n                aa.setPriority( aa.getPlanIndex() + (aa.getType()*10) ) ;\n            }\n\n            // sort to put in descending order of primacy\n            _accountList.sort(function(a, b){\n                if(a.getPriority() > b.getPriority()){\n                    return 1;\n                }else if (a.getPriority() < b.getPriority()){\n                    return -1;\n                }else{\n                    return 0;\n                }\n            });\n\n            // set one-time, start-up configurations\n            for (var i = 0; i<_accountList.length; i++) {\n                var aa = _accountList[i];\n                // set/reset aggregate frequency with each account\n                _aggregateFrequency = CalcUtilities.getAggregateModes( _aggregateFrequency, aa.getModes() ) ;\n\n                // assuming a single rate of return for all money sources, establish rate for each account.\n                aa.setRateOfReturn( _accumCommon.getRateOfReturn() ) ;\n                switch( aa.getType() ) {\n                    case AccountTypes.TYPE_NOGROWTH :\n                    //case AccountTypes.TYPE_PENSION_LUMP_SUM :  // this looks like it was included in error: not in Java version\n                        aa.setRateOfReturn( 0.0 ) ;\n                        break ;\n                    default :\n                        break ;\n                }\n\n                // consistent rate of increase for all contribs.\n                aa.setRateOfIncrease( _accumCommon.getRateOfIncrease() ) ;\n                // NB For these, only the contribution dollar AMOUNTs (AccountTypes.CONTRIB_ANNUAL and AccountTypes.CONTRIB_MODAL)\n                // will be constrained to NO rate of increase (0%); contribution RATEs (AccountTypes.CONTRIB_RATE),\n                // however, will be governed by the salary reference, which increases with the rate of increase.\n                switch( aa.getType() ) {\n                    case AccountTypes.TYPE_MANDATORY_EE :  // see NB above\n                    case AccountTypes.TYPE_MANDATORY_ER :\n                    case AccountTypes.TYPE_RECURRING_ER :\n                    case AccountTypes.TYPE_NOINCREASE :\n                    case AccountTypes.TYPE_NOGROWTH :\n                    case AccountTypes.TYPE_PENSION_LUMP_SUM :\n                    case AccountTypes.TYPE_EXISTINGLOAN :\n                    case AccountTypes.TYPE_NEWLOAN :\n                        aa.setRateOfIncrease( 0.0 ) ;\n                        break ;\n                    default :\n                        break ;\n                }\n\n                // set withholding rate for each account (this is for build-up in taxable accounts and for reference in tax-deferred accounts)\n                aa.setRateOfWithholding( _accumCommon.getRateOfWithholding() ) ;\n\n                // set immediate for recurring employer contrib\n                if( AccountTypes.TYPE_RECURRING_ER == aa.getType() ) { aa.setImmediateOrDue( true ) ; }\n            }\n        }\n\n        this.align = function( ){\n            // for (AccountAccum aa : _accountList) {\n\n            for (var i = 0; i < _accountList.length; i++) {\n                var aa = _accountList[i];\n                // reset account objects (zero-out principle, earnings for all buckets)\n                aa.reset() ;\n            }\n\n            // through years\n            for( var n = 0 ; n < _accumCommon.getFull() ; n++ ) {\n\n                // (1) get salary according to increase rate and apply compensation limit\n                var annualSalaryRef = _accumCommon.getAnnualSalary() * Math.pow( ( 1.0 + _accumCommon.getRateOfIncrease() ), n ) ;\n                var annualSalary401a17Ref = Math.min( annualSalaryRef, IRSConstants.getLimit(IRSConstants._401a17) ) ;\n\n                // (2) establish contribs\n            //resolveSalaryTo401a17Limits( accountList, annualSalaryRef, annualSalary401a17Ref ) ;\n                for (var i = 0; i<_accountList.length; i++) {\n                    var aa = _accountList[i];\n                    // apply right annual salary ref\n       \t            aa.setIterationEeAnnualSalary( ( LimitUtilities.apply401a17SalaryLimit( aa.getType(), aa.getIRC(), true ) ) ? annualSalary401a17Ref : annualSalaryRef ) ;\n                    aa.setIterationErAnnualSalary( ( LimitUtilities.apply401a17SalaryLimit( aa.getType(), aa.getIRC(), false ) ) ? annualSalary401a17Ref : annualSalaryRef ) ;\n\n                    // set ee contrib\n                    aa.setIterationEeContribAmount( n ) ;\n                }\n\n                // (3) enforce money source non-IRS limits\n                BaseAccumulator.resolveContribsToNonIRSLimits(_accountList);\n\n                // (4) enforce global non-IRS limits\n                var mmlimits = _accumCommon.getMinMaxLimitList();\n                for (var i = 0; i < mmlimits.length; i++) {\n                    var mml = mmlimits[i];\n                    if( (mml.getMinValue() > 0) || (mml.getMaxValue() > 0) ){\n                        BaseAccumulator.resolveContribsToGlobalNonIRSLimit(mml, _accountList, annualSalary401a17Ref);\n                    }\n                }\n\n                // (5) enforce to IRS 402g1, 457e15, 414v, and 415c1A limits - \"single\" or idividual pass\n                BaseAccumulator.resolveContribsToIRSLimits(_accountList);\n\n                // (6) enforce collaboratively to IRS 402g1, 457e15, and 414v limits\n                BaseAccumulator.resolveContribsTo_402g1_457e15_414vLimits( _accountList );\n\n                // (7) establish er match contrib\n                _holder.zero();\n\n                for (var i = 0; i<_accountList.length; i++) {\n                    var aa = _accountList[i];\n                    if(aa.isEmployerMatch()){\n                        aa.setIterationErContribAmount( _holder.get( aa.getEmployerMatchId() ) )  ;\n                        _holder.touch( aa.getEmployerMatchId(), ( aa.getIterationEeContribAmount() * aa.getModes() ) );\n                    }\n\n                }\n\n                // (8) enforce 415c1A limits\n                BaseAccumulator.resolveContribsTo_415c1ALimits( _accountList );\n\n                // (9) enforce salary as limit\n                BaseAccumulator.resolveContribsToSalaryAsLimit( _accountList, annualSalaryRef ) ;\n\n                // (10) ?? if n==0 do fractional years at beginning\n\n                // (11) accum the year via aggregate frequency\n                var translatedMode = -1 ;\n                for( var nn = 0 ; nn < _aggregateFrequency ; nn++ ) {\n                    _holder.zero();\n                    for (var i = 0; i<_accountList.length; i++) {\n                        var aa = _accountList[i];\n                        // only if an active mode\n                        translatedMode = CalcUtilities.translateMode( _aggregateFrequency, aa.getModes(), nn ) ;\n                        if( translatedMode > -1 ) {\n                            var alreadyMatchedContribs = 0.0 ;\n                            if( aa.isEmployerMatch() && aa.isEmployerMatchPeriodicityModal() ) {\n                                alreadyMatchedContribs = _holder.get( aa.getEmployerMatchId() ) ;\n                                _holder.touch( aa.getEmployerMatchId(), ( aa.getIterationEeContribAmount() * aa.getModes() ) ) ;\n                            }\n                            aa.align( translatedMode, alreadyMatchedContribs ) ;\n                        }\n                    }\n                }\n\n                // (12) ?? n < _accumCommon.getFull() do fractional years at end\n           \n                // (13) census capture\n                if( ( n == 0 ) || ( n == ( _accumCommon.getFull() - 1 ) ) ) {  // first or last year\n                    var ac = new AccumCensus() ;\n                    ac.setPeriodRef( n ) ;\n                    ac.setSalary( annualSalaryRef ) ;\n                    ac.setSalary401a17( annualSalary401a17Ref ) ;\n                    ac.setEEContribs( BaseAccumulator.getAnnualEEContribs( _accountList, ReplacementIncome.LifeStyleTypes ) ) ;\n\n                    _censusList.push( ac ) ;\n                }\n            }\n        };\n\n        this.validate = function( )\n        {\n            for (var i = 0; i<_accountList.length; i++) {\n                var aa = _accountList[i];\n                // reset account objects (zero-out principle, earnings for all buckets)\n                aa.reset() ;\n            }\n\n            // (1) get salary according to increase rate and apply compensation limit\n            var annualSalaryRef = _accumCommon.getAnnualSalary() * Math.pow( ( 1.0 + _accumCommon.getRateOfIncrease() ), 0 ) ;\n            var annualSalary401a17Ref = Math.min( annualSalaryRef, IRSConstants.getLimit(IRSConstants._401a17) ) ;\n\n            // (2) establish contribs\n        //resolveSalaryTo401a17Limits( accountList, annualSalaryRef, annualSalary401a17Ref ) ;\n            for (var i = 0; i<_accountList.length; i++) {\n                var aa = _accountList[i];\n                // apply right annual salary ref\n                aa.setIterationEeAnnualSalary( ( LimitUtilities.apply401a17SalaryLimit( aa.getType(), aa.getIRC(), true ) ) ? annualSalary401a17Ref : annualSalaryRef ) ;\n                aa.setIterationErAnnualSalary( ( LimitUtilities.apply401a17SalaryLimit( aa.getType(), aa.getIRC(), false ) ) ? annualSalary401a17Ref : annualSalaryRef ) ;\n\n                // set ee contrib\n                aa.setIterationEeContribAmount( 0 ) ;\n            }\n\n            // (3) enforce money source non-IRS limits\n            BaseAccumulator.resolveContribsToNonIRSLimits( _accountList ) ;\n\n\n            // (4) enforce global non-IRS limits\n            var mmlimits = _accumCommon.getMinMaxLimitList();\n            for (var i = 0; i < mmlimits.length; i++) {\n                var mml = mmlimits[i];\n                if( (mml.getMinValue() > 0) || (mml.getMaxValue() > 0) ){\n                    BaseAccumulator.resolveContribsToGlobalNonIRSLimit(mml, _accountList, annualSalary401a17Ref);\n                }\n            }\n\n            // (5) enforce to IRS 402g1, 457e15, 414v, and 415c1A limits - \"single\" or individual pass\n            BaseAccumulator.resolveContribsToIRSLimits( _accountList ) ;\n\n            // (6) enforce collaboratively to IRS 402g1, 457e15, and 414v limits\n            BaseAccumulator.resolveContribsTo_402g1_457e15_414vLimits( _accountList ) ;\n\n            // (7) establish er match contrib\n            _holder.zero() ;\n            for (var i = 0; i<_accountList.length; i++) {\n                var aa = _accountList[i];\n                if( aa.isEmployerMatch() ) {\n                    aa.setIterationErContribAmount( _holder.get( aa.getEmployerMatchId() ) ) ;\n                    _holder.touch( aa.getEmployerMatchId(), ( aa.getIterationEeContribAmount() * aa.getModes() ) ) ;\n                }\n            }\n\n            // (8) enforce 415c1A limits\n            BaseAccumulator.resolveContribsTo_415c1ALimits( _accountList ) ;\n\n            // (9) enforce salary as limit\n            BaseAccumulator.resolveContribsToSalaryAsLimit( _accountList, annualSalaryRef ) ;\n        };\n\n    };\n\n\n\n    //  Static Method Declarations ------------------------------------\n\n    BaseAccumulator.resolveContribsTo_402g1_457e15_414vLimits = function(accountList) {\n        var index = -1;\n        var limits = [\n            IRSConstants.getLimit(IRSConstants._402g1) ,\n            IRSConstants.getLimit(IRSConstants._457e15) ,\n            IRSConstants.getLimit(IRSConstants._414v) ,\n            IRSConstants.getLimit(IRSConstants._414v),\n            0,\n            0\n        ];\n        //\n        for (var i = 0; i < accountList.length; i++) {\n            var aa = accountList[i];\n            index = -1 ;\n            index = LimitUtilities.getIndexForGrouped_402g1_457e15_414_vLimits( aa.getType(), aa.getIRC() ) ;\n\n            if( index > -1 ) {\n                if( ( aa.getIterationEeContribAmount() * aa.getModes() ) > limits[index] ) {\n                    aa.adjustEeIterationContribAmount( limits[index] / aa.getModes() ) ;\n                    aa.touchMaxPeriod( aa.getIterationPeriod() ) ;\n                    aa.touchErrorCode( aa.getIterationPeriod() ) ;\n\n                    if( BaseAccumulator.REPORTABLE == aa.getIterationPeriod() ) {\n                        aa.setIrsInfraction(true);\n                        aa.touchErrorString( ErrorUtilities.createErrorStringForMultipleAccountIRSInfraction( aa, accountList ) ) ;\n                    }\n                    limits[index] = 0.0 ;\n                }else {\n                    limits[index] = limits[index] - ( aa.getIterationEeContribAmount() * aa.getModes() ) ;\n                }\n            }\n        }\n    } ;\n\n\n    BaseAccumulator.resolveContribsTo_415c1ALimits = function( accountList ) {\n        var limits = [ 0, 0, 0, 0, IRSConstants.getLimit(IRSConstants._415c1A), IRSConstants.getLimit(IRSConstants._415c1A) ] ;\n        var index = -1 ;\n\n        for (var i = 0; i < accountList.length; i++) {\n            var aa = accountList[i];\n            index = -1 ;\n            index =  LimitUtilities.getIndexForGrouped_415c1A_Limit( aa.getType(), aa.getIRC() ) ;\n\n            if( index > -1 ) {\n                var annualEe = aa.getIterationEeContribAmount() * aa.getModes() ;\n                var annualEr = aa.getIterationErContribAmount() * aa.getModes() ;\n                if( ( annualEe + annualEr ) > limits[index] ) {\n                    if( annualEr > 0.0 ) {\n                        BaseAccumulator.resolveEEaccordingToER( accountList, aa.getIndex(), ( limits[index] / aa.getModes() ) ) ;  // 140513 JSS  in\n// 140513 JSS out                        var contribs = LimitUtilities.resolveEEandERcontribs( annualEe, annualEr, limits[index] ) ;\n// 140513 JSS out                        aa.adjustEeIterationContribAmount( contribs[0] / aa.getModes() ) ;\n// 140513 JSS out                        aa.adjustErIterationContribAmount( contribs[1] / aa.getModes() ) ;\n                    } else {\n                        aa.adjustEeIterationContribAmount( limits[index] / aa.getModes() ) ;\n                    }\n                    aa.touchMaxPeriod( aa.getIterationPeriod() ) ;\n                    aa.touchErrorCode( aa.getIterationPeriod() ) ;\n                    if( BaseAccumulator.REPORTABLE == aa.getIterationPeriod() ) {\n                        aa.setIrsInfraction(true);\n                        aa.touchErrorString( ErrorUtilities.createErrorStringFor415IRSInfraction( limits[index], aa,  accountList ) ) ;\n                    }\n                    limits[index] = 0.0 ;\n                } else {\n                    limits[index] = limits[index] - ( ( aa.getIterationEeContribAmount() + aa.getIterationErContribAmount() ) * aa.getModes() ) ;\n                }\n            }\n        }\n    };\n\n    BaseAccumulator.resolveContribsToNonIRSLimits = function( accountList ) {\n\n        for (var i = 0; i < accountList.length; i++) {\n            var aa = accountList[i];\n            if( aa.isMinMaxLimit() ) {\n                var max = aa.getMinMaxLimit().getEvaldMax( aa.getFrequency(), aa.getIterationEeAnnualSalary() ) ;\n// 140507 JSS out                var min = aa.getMinMaxLimit().getEvaldMin( aa.getFrequency(), aa.getIterationAnnualSalary() ) ;\n\n                if( max < aa.getIterationEeContribAmount() ) {\n                    aa.adjustEeIterationContribAmount( max ) ;\n                    aa.touchMaxPeriod( aa.getIterationPeriod() ) ;\n                    aa.touchErrorCode( aa.getIterationPeriod() ) ;\n                    if( BaseAccumulator.REPORTABLE == aa.getIterationPeriod() ) {\n                        aa.touchErrorString( ErrorUtilities.createErrorStringForSingleAccountNonIRSInfraction( aa ) ) ;\n                    }\n                }\n// 140507 JSS out                if( min > aa.getIterationEeContribAmount() ) {\n// 140507 JSS out                    aa.adjustEeIterationContribAmount( min ) ;\n// 140507 JSS out                }\n\n            }\n        }\n    };\n\n    BaseAccumulator.resolveContribsToIRSLimits = function( accountList ) {\n\n        var limits = [\n            IRSConstants.getLimit(IRSConstants._402g1),\n            IRSConstants.getLimit(IRSConstants._457e15),\n            IRSConstants.getLimit(IRSConstants._414v),\n            IRSConstants.getLimit(IRSConstants._415c1A)\n        ] ;\n        var index = -1 ;\n\n        for (var i = 0; i < accountList.length; i++) {\n            var aa = accountList[i];\n            index = LimitUtilities.getIndexFor_402g1_457e15_414v_Limits( aa.getType(), aa.getIRC() ) ;\n\n            if( index > -1 ) {\n                if( ( aa.getIterationEeContribAmount() * aa.getModes() ) > limits[index] ) {\n                    aa.adjustEeIterationContribAmount( limits[index] / aa.getModes() ) ;\n                    aa.touchMaxPeriod( aa.getIterationPeriod() ) ;\n                    aa.touchErrorCode( aa.getIterationPeriod() ) ;\n                    if( BaseAccumulator.REPORTABLE == aa.getIterationPeriod() ) {\n                        aa.setIrsInfraction(true);\n                        aa.touchErrorString( ErrorUtilities.createErrorStringForSingleAccountIRSInfraction( aa ) ) ;\n                    }\n                }\n            }\n        }\n    };\n\n    BaseAccumulator.resolveContribsToSalaryAsLimit = function( accountList, annualSalary ) {\n\n        var limits = [\n                annualSalary\n        ] ;\n        var index = -1 ;\n\n        for (var i = 0; i < accountList.length; i++) {\n            var aa = accountList[i];\n            index = LimitUtilities.getIndexFor_402g1_457e15_414v_Limits( aa.getType(), aa.getIRC() ) ;\n\n            if( index > -1 ) {\n                index = 0 ;  // common value\n                if( ( aa.getIterationEeContribAmount() * aa.getModes() ) > limits[index] ) {\n                    aa.adjustEeIterationContribAmount( limits[index] / aa.getModes() ) ;\n                    aa.touchMaxPeriod( aa.getIterationPeriod() ) ;\n                    aa.touchErrorCode( aa.getIterationPeriod() ) ;\n                    if( BaseAccumulator.REPORTABLE == aa.getIterationPeriod() ) {\n                        aa.touchErrorString( ErrorUtilities.createErrorStringForExceedingSalary( ) ) ;\n                    }\n\n                    limits[index] = 0.0 ;\n                } else {\n                    limits[index] = limits[index] - ( aa.getIterationEeContribAmount() * aa.getModes() ) ;\n                }\n            }\n        }\n    };\n\n    BaseAccumulator.resolveContribsToGlobalNonIRSLimit = function( mml, al, annualSalary ) {\n\n        var annualMax = mml.getAnnualMax(annualSalary) ;\n        //var annualMin = mml.getAnnualMin(annualSalary) ;\n\n        var index = -1 ;\n        for (var i = 0; i < al.length; i++ ) {\n            var aa = al[i];\n            index = LimitUtilities.getIndexFor_402g1_457e15_414v_Limits( aa.getType(), aa.getIRC() ) ;  // 140130 TODO: use another method to derive index?\n\n            // handle conditions of application\n            if( ( index > -1 ) && ( ( mml.getPlanIndex() < 0 ) || ( ( mml.getPlanIndex() > -1 ) && ( mml.getPlanIndex() == aa.getPlanIndex() ) ) ) )   {\n                if( ( aa.getIterationEeContribAmount() * aa.getModes() ) > annualMax ) {\n                    aa.adjustEeIterationContribAmount( annualMax / aa.getModes() ) ;\n                    aa.touchMaxPeriod( aa.getIterationPeriod() ) ;\n                    aa.touchErrorCode( aa.getIterationPeriod() ) ;\n                    if( BaseAccumulator.REPORTABLE == aa.getIterationPeriod() ) {\n                        var limit = mml.getAnnualMax( annualSalary ) ;\n                        aa.touchErrorString( ErrorUtilities.createErrorStringForMultiple( ( limit / aa.getIterationEeAnnualSalary() ), ( limit / aa.getModes() ) ) ) ;\n                    }\n                    annualMax = 0.0 ;\n                }\n                else {\n                    annualMax = annualMax - ( aa.getIterationEeContribAmount() * aa.getModes() ) ;\n                }\n\n            }\n        }\n    };\n\n    BaseAccumulator.sumTotalAccum = function( list ) {\n        var total = 0.0 ;\n\n        for (var i = 0; i < list.length; i++) {\n            var aa = list[i];\n            total += (\n                aa.getEeLumpAmount() +\n                aa.getEeEarningsOnLumpAmount() +\n                aa.getErLumpAmount() +\n                aa.getErEarningsOnLumpAmount() +\n                aa.getEeContribBucket() + aa.getEeEarningsOnContribs() +\n                aa.getErContribBucket() + aa.getErEarningsOnContribs() ) ;\n        }\n\n        return( total ) ;\n    };\n\n    BaseAccumulator.resolveEEaccordingToER = function( accountList, index, target ) {\n        // vars for iterations\n        var iterator = 0 ;\n        var high = target ;\n        var low = 0.0 ;\n        var test = -1.0 ; // seeded to force iteration\n        var solve = 0.0 ;\n\n        var _holder = DoubleScratchPad.newInstance();\n\n        _holder.zero();\n        for (var i = 0; i<accountList.length; i++) {\n            var aa = accountList[i];\n            if( aa.isEmployerMatch() ) {\n                if( index == aa.getIndex() ) {\n                    high = aa.getIterationEeContribAmount() ;  // set sensible high and low values\n                    low = aa.getIterationErContribAmount() * 0.5 ;\n\n                    while( ( Math.abs( test ) > 0.0049 ) && ( iterator < 15 ) ) {\n                        iterator++ ;\n\n                        if( test < 0.0 )\n                            low = solve ;\n                        else\n                            high = solve ;\n\n                        //\n                        solve = ( ( high + low ) / 2.0 ) ;\n\n                        aa.adjustEeIterationContribAmount( solve ) ;\n                        aa.setIterationErContribAmount( _holder.get( aa.getEmployerMatchId() ) ) ;\n                        //\n                        test = ( solve + aa.getIterationErContribAmount() - target ) ;\n                     }\n                }\n                _holder.touch( aa.getEmployerMatchId(), aa.getIterationEeContribAmount() );\n            }\n        }\n    };\n\n\n// 170530 ///////////////////////////////////////////\n\n    BaseAccumulator.getAnnualEEContribs = function( accountList, typeList ) {\n\n        var retValue = 0. ;\n        var index = -1 ;\n\n        for( var i = 0 ; i < accountList.length ; i++ ) {\n            var aa = accountList[i] ;\n            index = LimitUtilities.checkList( aa.getType(), typeList, true ) ;\n\n            if( index > -1 ) {\n                retValue += ( aa.getPeriodicEeContrib() ) ;\n            }\n        }\n        return( retValue ) ;\n    } ;\n\n\n  // let's get this in!  ...\n    BaseAccumulator.resolveSalaryTo401a17Limits = function( accountList, annualSalaryRef, annualSalary401a17Ref ) {\n\n        // apply annual salary ref\n        var eeOrEr = true ;\n        for( var i = 0 ; i < accountList.length ; i++ ) {\n            var aa = accountList[i] ;\n            aa.setIterationEeAnnualSalary( annualSalaryRef ) ;\n            aa.setIterationErAnnualSalary( annualSalaryRef ) ;\n\n            if( annualSalaryRef > annualSalary401a17Ref ) {\n                eeOrEr = true ;\n                if( LimitUtilities.apply401a17SalaryLimit( aa.getType(), aa.getIRC(), eeOrEr ) ) {\n                    aa.setIterationEeAnnualSalary( annualSalary401a17Ref ) ;\n                    aa.touchErrorCode( aa.getIterationPeriod() ) ;\n                    //if( REPORTABLE == aa.getIterationPeriod() ) {  // presently, this is not reportable\n                        //aa.setIRSInfraction( true ) ;\n                        aa.touchErrorString( ErrorUtilities.createErrorStringFor401a17SalaryLimit( aa ) ) ;\n                    //}\n                }\n                eeOrEr = false ;\n                if( LimitUtilities.apply401a17SalaryLimit( aa.getType(), aa.getIRC(), eeOrEr ) ) {\n                    aa.setIterationErAnnualSalary( annualSalary401a17Ref ) ;\n                    aa.touchErrorCode( aa.getIterationPeriod() ) ;\n                    //if( REPORTABLE == aa.getIterationPeriod() ) {  // presently, this is not reportable\n                        //aa.setIRSInfraction( true ) ;\n                        aa.touchErrorString( ErrorUtilities.createErrorStringFor401a17SalaryLimit( aa ) ) ;\n                    //}\n                }\n            }\n        }\n    } ;\n\n\n/*\n    // use getPlanId() [?? and getPlanIndex()] to confirm whether multiple plans or not\n    BaseAccumulator.isMultiPlan = function( accountList ) {\n        var ret = false ;\n        var planIndex = -1 ;\n        var planId = \"\" ;\n        var count = 0 ;\n\n        for( var i = 0 ; i < accountList.length ; i++ ) {\n            var aa = accountList[i] ;\n            if( count < 1 ) {\n                planIndex = aa.getPlanIndex() ;\n                planId = aa.getPlanId() ;\n            }\n\n            //if( ( planIndex != aa.getPlanIndex() ) || !planId.equals( aa.getPlanId() ) ) {\n            if( !planId.equals( aa.getPlanId() ) ) {\n                ret = true ;\n                break ;\n            }\n            count++ ;\n        }\n        return( ret ) ;\n    } ;\n\n    BaseAccumulator.getPlanIdList = function( accountList ) {\n        var ret = [] ;\n        var count = 0 ;\n\n        for( var i = 0 ; i < accountList.length ; i++ ) {\n            var aa = accountList[i] ;\n            if( count < 1 ) {\n                ret.push( aa.getPlanId() ) ;\n            }\n            if( !ret.contains( aa.getPlanId() ) ) {\n                ret.push( aa.getPlanId() ) ;\n            }\n            count++ ;\n        }\n        return( ret ) ;\n    } ;\n\n*/\n\n    BaseAccumulator.getModelledLoanPlanId = function( accountList ) {\n        var ret = \"\" ;\n\n        for( var i = 0 ; i < accountList.length ; i++ ) {\n            var aa = accountList[i] ;\n            if( aa.isLoan() && ( aa.getType() == AccountTypes.TYPE_NEWLOAN ) ) {\n                ret = aa.getPlanId() ;\n                break ;\n            }\n        }\n        return( ret ) ;\n    } ;\n\n    BaseAccumulator.getModelledLoanPlanIndex = function( accountList ) {\n        var ret = -1 ;\n\n        for( var i = 0 ; i < accountList.length ; i++ ) {\n            var aa = accountList[i] ;\n            if( aa.isLoan() && ( aa.getType() == AccountTypes.TYPE_NEWLOAN ) ) {\n                ret = aa.getPlanIndex() ;\n                break ;\n            }\n        }\n        return( ret ) ;\n    } ;\n\n    BaseAccumulator.getLumpAmountAccordingToType = function( accountList, typeList ) {\n\n        var retValue = 0.0 ;\n        var index = -1 ;\n\n        for( var i = 0 ; i < accountList.length ; i++ ) {\n            var aa = accountList[i] ;\n            index = LimitUtilities.checkList( aa.getType(), typeList, true ) ;\n\n            if( index > -1 ) {\n                retValue += ( aa.getEeLumpAmount() + aa.getErLumpAmount() ) ;\n            }\n        }\n        return( retValue ) ;\n    } ;\n\n\n\n    BaseAccumulator.REPORTABLE = 0;\n\n    return BaseAccumulator;\n\n});\n","\ndefine([], function(){\n    var CommonData = function(){\n        //  Private Variable declarations ------------------------------------\n        var _error = -1 ;\n        var _errorString = \"\";\n        var _refDate = new Date() ;    // current date, usually today\n        var _dateOfBirth = new Date() ;\n        var _annualSalary = 30000 ;\n        var _rateOfIncrease = 0 ;   // salary and contribution increase\n        var _rateOfInflation = 0 ;   // future inflation for discounting\n        var _rateOfWithholding = 0 ;  // tax withholding\n        var _replacementRatio = 0.7 ;\n        var _retireAge = 67 ;\n        var _preRetireRateOfReturn = 0.05 ;\n        var _postRetireRateOfReturn = 0.05 ;\n        var _ssBenefitAge = 67 ;\n        var _ssIndicator = true ;\n        var _minMaxLimitList = [];\n        var _minRetireAge = 62 ;\n        var _maxRetireAge = 80 ;\n        var _minRateOfReturn = 0 ;\n        var _maxRateOfReturn = 0.12 ;\n        var _rateOfRothBump = 0.25 ;\n        var _replacementIncomeType = 0 ; // ReplacementIncome.TYPE_STANDARD\n\n        //  Privileged Method Declarations ------------------------------------\n        this.getReferenceDate = function( ) { return( _refDate ) ; };\n        this.setReferenceDate = function(d) { _refDate = d ; };\n\n        this.getDateOfBirth = function( ) { return( _dateOfBirth ) ; };\n        this.setDateOfBirth = function(d) { _dateOfBirth = d ; };\n\n        this.getAnnualSalary = function( ) { return( _annualSalary ) ; };\n        this.setAnnualSalary = function(d) { _annualSalary = d ; };\n\n        this.getRateOfIncrease = function( ) { return( _rateOfIncrease ) ; };\n        this.setRateOfIncrease = function(d) { _rateOfIncrease = d ; };\n\n        this.getRateOfInflation = function( ) { return( _rateOfInflation ) ; };\n        this.setRateOfInflation = function(d) { _rateOfInflation = d ; };\n\n        this.getRateOfWithholding = function( ) { return( _rateOfWithholding ) ; };\n        this.setRateOfWithholding = function(d) { _rateOfWithholding = d ;};\n\n        this.getReplacementRatio = function( ) { return( _replacementRatio ) ; };\n        this.setReplacementRatio = function(d) { _replacementRatio = d ; };\n\n        this.getRetireAge = function( ) { return( _retireAge ) ; };\n        this.setRetireAge = function(n) { _retireAge = n ; };\n\n        this.getPreRetireRateOfReturn = function( ) { return( _preRetireRateOfReturn ) ; };\n        this.getPostRetireRateOfReturn = function( ) { return( _postRetireRateOfReturn ) ; };\n        this.setPreRetireRateOfReturn = function( d ) { _preRetireRateOfReturn = d ; } ;\n        this.setPostRetireRateOfReturn = function( d ) { _postRetireRateOfReturn = d ; } ;\n\n        this.getRateOfReturn = function( ) { return( _preRetireRateOfReturn ) ; };\n        this.setRateOfReturn = function(d) { _preRetireRateOfReturn = d ; };\n\n        this.getSSBenefitAge = function( ) { return( _ssBenefitAge ) ; };\n        this.setSSBenefitAge = function(n) { _ssBenefitAge = n ; };\n\n        this.setSSIndicator = function(b) { _ssIndicator = b ; };\n        this.isSocialSecurity = function( ) { return( _ssIndicator ) ; };\n\n        this.getMinMaxLimitList = function(){ return _minMaxLimitList; };\n        this.setMinMaxLimitList = function( mmll ){ _minMaxLimitList = mmll; };\n\n        // 170512 LA items\n        this.setRateOfRothBump = function( d ) { _rateOfRothBump = d ; }\n        this.getRateOfRothBump = function() { return( _rateOfRothBump ) ; }\n\n        this.setReplacementIncomeType = function( n ) { _replacementIncomeType = n ; }\n        this.getReplacementIncomeType = function() { return( _replacementIncomeType ) ; }\n        // end 170512 LA items\n\n\n        this.getMinRetireAge = function( ) { return( _minRetireAge ) ; };\n        this.setMinRetireAge = function(n) { _minRetireAge = n ; };\n\n        this.getMaxRetireAge = function( ) { return( _maxRetireAge ) ; };\n        this.setMaxRetireAge = function(n) { _maxRetireAge = n ; };\n\n        this.getMinRateOfReturn = function( ) { return( _minRateOfReturn ) ; };\n        this.setMinRateOfReturn = function(d) { _minRateOfReturn = d ; };\n\n        this.getMaxRateOfReturn = function( ) { return( _maxRateOfReturn ) ; };\n        this.setMaxRateOfReturn = function(d) { _maxRateOfReturn = d ; };\n\n        this.getErrorCode = function( ) { return( _error ) ; };\n        this.setErrorCode = function(n) { _error = n ; };\n\n        this.getErrorString = function( ) { return( _errorString ) ; } ;\n        this.setErrorString = function( s ) { _errorString = s ; } ;\n\n        (function init() { _minMaxLimitList = []; })();\n\n    };\n\n    CommonData.serialVersionUID = '0L' ;\n    return CommonData;\n\n});\n","\n\ndefine(['./AccountAccum', './AccountTypes', './IRSConstants', './LimitUtilities', '../utils/utilities'],\nfunction(AccountAccum, AccountTypes, IRSConstants, LimitUtilities, Utilities){\n\n    var ErrorUtilities = { } ;\n\n    ErrorUtilities.createErrorStringForSingleAccountIRSInfraction = function( aa ) {\n        var errorBuffer = \"\";\n        var maxes = null ;\n\n        errorBuffer += (\"\" + AccountTypes.getUserLabel(aa.getType()) + \" \" + IRSConstants.getIRClabel(aa.getIRC())) ;\n        errorBuffer +=  \" contributions may not exceed \"  ;\n\n        //double limit = LimitUtilities.transIRSContribMax2ContribType( aa.getContribType(), aa.getType(), aa.getIRC(), aa.getFrequency(), aa.getIterationAnnualSalary() ) ;\n        maxes = LimitUtilities.getIRSContribMaxes( aa.getType(), aa.getIRC(), aa.getFrequency(), aa.getIterationEeAnnualSalary() ) ;\n        if( aa.getContribType() == AccountTypes.CONTRIB_RATE ) {\n            errorBuffer += ErrorUtilities.formatPercent( maxes[LimitUtilities.MAX_RATE], 2 ) ;\n            errorBuffer += \" of pay.\"  ;\n\n        }\n        else {\n            errorBuffer += ErrorUtilities.formatMoney( maxes[LimitUtilities.MAX_DOLLAR] )  ;\n            errorBuffer += \" per pay period.\"  ;\n        }\n        errorBuffer += \"  Please adjust contributions before proceeding.\" ;\n\n        return( errorBuffer ) ;\n    };\n\n\n    ErrorUtilities.createErrorStringForMultipleAccountIRSInfraction = function( prime, al ) {\n        var errorBuffer = \"\";\n        var maxes = null ;\n        var index = -1 ;\n        var primeIndex = LimitUtilities.getIndexForGrouped_402g1_457e15_414_vLimits( prime.getType(), prime.getIRC() ) ;\n        var count = 0 ;\n\n        errorBuffer +=  \"The total of \"  ;\n        for (var i = 0; i<al.length; i++) {\n            var aa=al[i];\n            index = -1 ;\n            index = LimitUtilities.getIndexForGrouped_402g1_457e15_414_vLimits( aa.getType(), aa.getIRC() ) ;\n\n            if( ( index > -1 ) && ( primeIndex == index ) && ( aa.getStartContrib() > 0 ) ) {\n                errorBuffer +=  (( count > 0 )?\" and \": \"\") + ( AccountTypes.getUserLabel(aa.getType()) +  \" \" + IRSConstants.getIRClabel(aa.getIRC()))  ;\n                count++ ;\n            }\n        }\n        errorBuffer +=  \" contributions may not exceed \"  ;\n\n        maxes = LimitUtilities.getIRSContribMaxes( prime.getType(), prime.getIRC(), prime.getFrequency(), prime.getIterationEeAnnualSalary() ) ;\n        if( prime.getContribType() == AccountTypes.CONTRIB_RATE ) {\n            errorBuffer +=  ErrorUtilities.formatPercent( maxes[LimitUtilities.MAX_RATE], 2 ) ;\n            errorBuffer +=  \" of pay.\" ;\n        }\n        else {\n            errorBuffer +=  ErrorUtilities.formatMoney( maxes[LimitUtilities.MAX_DOLLAR] ) ;\n            errorBuffer +=  \" per pay period.\" ;\n        }\n        errorBuffer +=  \"  Please adjust contributions before proceeding.\" ;\n\n        return( errorBuffer) ;\n    };\n\n\n    ErrorUtilities.createErrorStringForMultiple = function( rate, amount ) {\n        var errorBuffer = \"\" ;\n            errorBuffer +=  \"The total plan contributions may not exceed \" ;\n            errorBuffer +=  ErrorUtilities.formatMoney( amount ) ;\n            errorBuffer +=  \" per pay period or \" ;\n            errorBuffer +=  ErrorUtilities.formatPercent( rate, 2 ) ;\n            errorBuffer +=  \" of pay.\" ;\n            errorBuffer +=  \"  Please adjust contributions before proceeding.\" ;\n\n        return( errorBuffer) ;\n    };\n\n\n    ErrorUtilities.createErrorStringForExceedingSalary = function( ) {\n        var errorBuffer = \"\" ;\n            errorBuffer +=  \"The total contributions may not exceed salary.\" ;\n            errorBuffer +=  \"  Please adjust contributions before proceeding.\" ;\n\n        return( errorBuffer) ;\n    };\n\n\n    ErrorUtilities.createErrorStringForSingleAccountNonIRSInfraction = function( aa ) {\n        var errorBuffer = \"\" ;\n        var max = 0 ;\n\n        //errorBuffer +=  \"Your \" ;\n        errorBuffer +=  (\"\" + AccountTypes.getUserLabel(aa.getType()) +  \" \" + IRSConstants.getIRClabel(aa.getIRC())) ;\n        errorBuffer +=  \" contributions may not exceed \" ;\n\n        max = aa.getMinMaxLimit().getAnnualMax( aa.getIterationEeAnnualSalary() ) ;\n        if( aa.getContribType() == AccountTypes.CONTRIB_RATE ) {\n            errorBuffer +=  ErrorUtilities.formatPercent( max / aa.getIterationEeAnnualSalary(), 2 ) ;\n            errorBuffer +=  \" of pay.\" ;\n\n        }\n        else {\n            errorBuffer +=  ErrorUtilities.formatMoney( max / aa.getFrequency() ) ;\n            errorBuffer +=  \" per pay period.\" ;\n        }\n        errorBuffer +=  \"  Please adjust contributions before proceeding.\" ;\n\n        return( errorBuffer ) ;\n    };\n\n\n    ErrorUtilities.createErrorStringFor415IRSInfraction = function( remainingLimit, prime, al ) {\n        var errorBuffer = \"\" ;\n        var index = -1 ;\n        var count = 0 ;\n        var delineate = true ;\n\n        for (var i = 0; i < al.length; i++) {\n            var aa = al[i];\n            index = -1 ;\n            index = LimitUtilities.getIndexForGrouped_415c1A_Limit( aa.getType(), aa.getIRC() ) ;\n\n            if( ( index > -1 ) && !(    ( aa.getType() == AccountTypes.TYPE_PRETAX ) ||\n                                        ( aa.getType() == AccountTypes.TYPE_ROTH ) ||\n                                        ( aa.getType() == AccountTypes.TYPE_AFTERTAX ))) {\n                delineate = false ;\n            }\n        }\n\n        var maxes = LimitUtilities.getIRSContribMaxes( prime.getType(), prime.getIRC(), prime.getFrequency(), prime.getIterationEeAnnualSalary() ) ;\n\n        if( delineate ) {\n            errorBuffer +=  \"The total of \"  ;\n            for (var i = 0; i < al.length; i++) {\n                var aa = al[i];\n                index = -1 ;\n                index = LimitUtilities.getIndexForGrouped_415c1A_Limit( aa.getType(), aa.getIRC() ) ;\n\n                if( index > -1 ) {\n                    errorBuffer +=  (( count > 0 )?\" and \":\"\") + ( AccountTypes.getUserLabel(aa.getType()) +  \" \" + IRSConstants.getIRClabel(aa.getIRC())) ;\n                    count++ ;\n                }\n            }\n            errorBuffer +=  \" contributions may not exceed \" ;\n\n            if( prime.getContribType() == AccountTypes.CONTRIB_RATE ) {\n                errorBuffer +=  ErrorUtilities.formatPercent( maxes[LimitUtilities.MAX_RATE], 2 ) ;\n                errorBuffer +=  \" of pay.\" ;\n            }\n            else {\n                errorBuffer +=  ErrorUtilities.formatMoney( maxes[LimitUtilities.MAX_DOLLAR] ) ;\n                errorBuffer +=  \" per pay period.\" ;\n            }\n            errorBuffer +=  \"  Please adjust contributions before proceeding.\" ;\n        }\n        else {\n            //var limit = IRSConstants.getInstance().getLimit(IRSConstants._415c1A) ;\n            errorBuffer +=  ErrorUtilities.createErrorStringForMultiple( maxes[LimitUtilities.MAX_RATE], maxes[LimitUtilities.MAX_DOLLAR] ) ;\n        }\n        return( errorBuffer ) ;\n    };\n\n\n    ErrorUtilities.formatPercent = function( d, nDecimalDigits )\n    {\n        var rtn = Utilities.cleanNumber(d>1?d:d*100);\n        return( rtn + \"%\" ) ;\n    } ;\n\n    ErrorUtilities.formatMoney = function( d )\n    {\n        return( \"$\" + d.toFixed(2) ) ;\n    };\n\n    return ErrorUtilities;\n});\n","\ndefine(['./util/DateUtilities'], function(DateUtilities){\n\n    //  Constructor\n    var IRSConstants = { };\n\n    //  Static var declarations ------------------------------------\n    IRSConstants.CATCHUP  =  0 ;\n    IRSConstants._415c1A  =  1 ;\n    IRSConstants._402g1   =  2 ;\n    IRSConstants._457e15  =  3 ;\n    IRSConstants._414v    =  4 ;\n    IRSConstants._401a17  =  5 ;\n    IRSConstants.UNSET    = -1 ;\n    IRSConstants.UNKNOWN  =  0 ;\n    IRSConstants._401a    =  1 ;\n    IRSConstants._401k    =  2 ;\n    IRSConstants._403b    =  3 ;\n    IRSConstants._457b    =  4 ;\n\n    //  Private var declarations ------------------------------------\n    var irsValues = { };\n    var doubleArray = [ 0, 0, 0, 0, 0, 0 ] ;\n    var limit_labels = [ \"Catch Up Age\",\"415(c)(1)(A)\",\"402(g)(1)\",\"457(e)(15)\",\"414(v)\",\"401(a)(17)\" ] ;\n    var limit_properties_entries = [ \"age\",\"415c1A\",\"402g1\",\"457e15\",\"414v\",\"401a17\" ] ;\n    var irc_code_labels = [ \"\",\"401(a)\",\"401(k)\",\"403(b)\",\"457(b)\" ] ;\n\n    //  Private method Declarations ------------------------------------\n    var _getLimit = function(index) {\n        var d = doubleArray[index] ;\n        return(d) ;\n    };\n\n    //  Static method Declarations ------------------------------------\n    IRSConstants.init = function(){\n        this.reset();\n    };\n\n    IRSConstants.reset = function(){\n        //doubleArray[this.CATCHUP ] = irsValues[ 'age' ] ;\n        doubleArray[this.CATCHUP ] = irsValues[ limit_properties_entries[ IRSConstants.CATCHUP ] ] ;\n        doubleArray[this._415c1A ] = irsValues[ limit_properties_entries[ IRSConstants._415c1A ] ] ;\n        doubleArray[this._402g1  ] = irsValues[ limit_properties_entries[ IRSConstants._402g1 ] ] ;\n        doubleArray[this._457e15 ] = irsValues[ limit_properties_entries[ IRSConstants._457e15 ] ] ;\n        doubleArray[this._414v   ] = irsValues[ limit_properties_entries[ IRSConstants._414v ] ] ;\n        doubleArray[this._401a17 ] = irsValues[ limit_properties_entries[ IRSConstants._401a17 ] ] ;\n    };\n\n    IRSConstants.getLimit = function(index, frequency ) {\n        var _limit = _getLimit(index);\n\n        if(frequency){\n            frequency = ( frequency < 1 ) ? 1 : frequency ;\n            _limit = _limit/frequency;\n        }\n        return _limit;\n    };\n\n    IRSConstants.getIRClabel = function(index) {\n        var s = irc_code_labels[index] ;\n        return(s) ;\n    };\n\n    IRSConstants.getIRCconst = function(label) {\n        var r = IRSConstants.UNKNOWN ;\n        if( label !== null ) {\n            r = IRSConstants.UNKNOWN;\n            if(  label !== \"\" ) {\n                for( var n = 0 ; n < irc_code_labels.length ; n++ ) {\n                    if( irc_code_labels[n] == label ) {\n                        r = n ;\n                        break ;\n                    }\n                }\n            }\n\t\t}\n        return( r ) ;\n    };\n\n    IRSConstants.getLimitLabel = function(index) {\n        return limit_labels[index] ;\n    };\n\n    IRSConstants.getIRSLimits = function(){\n        return doubleArray;\n    };\n\n    IRSConstants.setIRSLimits = function(limits){\n        irsValues = limits;\n        IRSConstants.reset();\n    };\n\n    IRSConstants.getIRSLimitLabels = function(){\n        return limit_labels;\n    };\n\n\n    IRSConstants.irsCodeEvaluator = function( s ) {\n    \tvar retId = IRSConstants.UNKNOWN ;\n    \ts = s.toUpperCase().trim() ;\n\n    \tif( ( s.indexOf( \"401\" ) > -1 ) ) {\n    \t\tretId = IRSConstants._401k  ;\n    \t}\n\n    \tif( ( s.indexOf( \"401\" ) > -1 ) && ( s.indexOf( \"a\" ) > -1 ) ) {\n    \t\tretId = IRSConstants._401a  ;\n    \t}\n\n    \tif( ( s.indexOf( \"401\" ) > -1 ) && ( s.indexOf( \"k\" ) > -1 ) ) {\n    \t\tretId = IRSConstants._401k  ;\n    \t}\n\n    \tif( ( s.indexOf( \"403\" ) > -1 ) ) {\n    \t\tretId = IRSConstants._403b  ;\n    \t}\n\n    \tif( ( s.indexOf( \"457\" ) > -1 ) ) {\n    \t\tretId = IRSConstants._457b  ;\n    \t}\n\n    \treturn( retId ) ;\n    } ;\n\n\n    return IRSConstants;\n\n});\n","define(['./util/WithholdingUtilities'], function(WithholdingUtilities) {\n\n    //  Constructor\n    var IRSwh = { } ;\n\n    //  Static var declarations ------------------------------------\n    IRSwh.MC     =  0 ;\n\n\n    //  Private var declarations ------------------------------------\n    var loadValues = { } ;\n    //var medicare = [ [ 0.0, 0.0, 0.0145 ], [ 200000.0, 0.0, 0.0235 ] ] ;\n    var medicare = [] ;\n    var properties_entries = [ \"irs.wh.medicare\" ] ;\n\n\n    //  Static method Declarations ------------------------------------\n    IRSwh.init = function(){\n        this.reset();\n    };\n\n    IRSwh.reset = function(){\n//        medicare = loadValues[ properties_entries[ IRSwh.MC ] ] ;\n        medicare = setBrackets( properties_entries[ IRSwh.MC ], loadValues )\n    };\n\n\n    IRSwh.set = function( loadJson ){\n        loadValues = loadJson ;\n        IRSwh.reset();\n    };\n\n    IRSwh.getIRSLimitLabels = function(){\n        return limit_labels;\n    };\n\n    IRSwh.getWithholding = function( taxEntity, taxable ) {\n    \tvar ret = 0.0 ;\n\n    \tswitch( taxEntity ) {\n    \t    case IRSwh.MC :\n    \t   \tret = WithholdingUtilities.baseBracketCalc( taxable, medicare ) ;\n    \t\tbreak ;\n\t    default :\n    \t}\n\n    \treturn( ret ) ;\n    } ;\n\n\n    var setBrackets = function ( id, loadValues ) {\n        var tier = 0 ;\n        var ret = [[]] ;\n        var inValue = null ;\n\n        // get first dimension count\n        while( ( inValue = loadValues[ id + \".\" + tier + \".\" + WithholdingUtilities.property_labels[ 0 ] ] ) != undefined ) { tier++ ; }\n        //if( tier > 0 ) ret = new Array(tier).fill([]) ;\n        //As Mobile is failing with 'Fill' temporarily using below.\n        if( tier > 0 ) {\n            ret = new Array(tier);\n            for(var x=0; x<ret.length;x++){\n                ret[x] = [];\n            }\n        }\n\n        for( var n = 0 ; n < tier ; n++ ) {\n            ret[n] = new Array( WithholdingUtilities.property_labels.length ) ;\n            for( var m = 0 ; m < ret[n].length ; m++ ) {\n                inValue = loadValues[ id + \".\" + n + \".\" + WithholdingUtilities.property_labels[ m ] ] ;\n                ret[n][m] = ( inValue == undefined ) ? 0.0 : inValue ;\n            }\n        }\n\n        return( ret ) ;\n    } ;\n\n    return IRSwh ;\n\n});\n","\ndefine([], function(){\n\n    //  Constructor\n    var IncomeData = function(){\n\n        //  Private Variable Declarations ------------------------------------\n        var _error = -1 ;\n        var _errorString = \"\";\n        var _name = \"\" ;\n        var _label = \"\" ;\n        var _id_code = -1 ;\n        var _type = -1 ;\n        var _priority = -1 ;\n        var _annualAmount = 0 ;\n        var _rateOfIncrease = 0.0 ;\n        var _rateOfTax = 0.0 ;\n        var _start = -1 ;\n        var _stop = -1 ;\n\n        //  Privileged Method Declarations ------------------------------------\n        this.getType = function( ) { return( _type ) ; };\n        this.setType = function(n) { _type = n ; };\n\n        this.getPriority = function( ) { return( _priority ) ; };\n        this.setPriority = function(n) { _priority = n ; };\n\n        this.getAnnualAmount = function( ) { return( _annualAmount ) ; };\n        this.setAnnualAmount = function(d) { _annualAmount = d ; };\n\n        this.getMonthlyAmount = function( ) { return( _annualAmount / 12.0 ) ; };\n        this.setMonthlyAmount = function(d) { _annualAmount = ( d * 12.0 ) ; };\n\n        this.setName = function(s) { _name = s ; };\n        this.getName = function( ) { return( _name ) ; };\n\n        this.setLabel = function( s ) { _label = s ; } ;\n        this.getLabel = function( ) { return( _label ) ; } ;\n\n        this.getIdCode = function( ) { return( _id_code ) ; } ;\n        this.setIdCode = function( n ) { _id_code = n ; } ;\n\n        this.getErrorCode = function( ) { return( _error ) ; };\n        this.setErrorCode = function(n) { _error = n ; };\n\n        this.getErrorString = function( ) { return( _errorString ) ; } ;\n        this.setErrorString = function( s ) { _errorString = s ; } ;\n\n\n        this.getStart = function( ) { return( _start ) ; } ;\n        this.setStart = function( n ) { _start = n ; } ;\n\n        this.getStop = function( ) { return( _stop ) ; } ;\n        this.setStop = function( n ) { _stop = n ; } ;\n\n        this.getRateOfIncrease = function( ) { return( _rateOfIncrease ) ; } ;  // annual\n        this.setRateOfIncrease = function( d ) { _rateOfIncrease = d ; } ; // annual\n\n        this.getRateOfTax = function( ) { return( _rateOfTax ) ; } ;\n        this.setRateOfTax = function( d ) { _rateOfTax = d ; } ;\n\n    };\n\n    IncomeData.serialVersionUID = '0L' ;\n\n    return IncomeData;\n\n});","\ndefine([], function(){\n\n\tvar IncomeTypes = {};\n\t\tIncomeTypes.SOCIALSECURITY = 0 ;\n\t\tIncomeTypes.PENSION = 1 ;\n\tIncomeTypes.ANNUITY = 2 ;\n\tIncomeTypes.ASSET = 3 ;\n\tIncomeTypes.EMPLOYMENT  = 4 ;\n\tIncomeTypes.OTHER  = 5 ;\n\n\tIncomeTypes.INCOME_MONTHLY   = 0 ;\n\tIncomeTypes.INCOME_ANNUALLY  = 1 ;\n\n\treturn IncomeTypes;\n});","\ndefine(['./IRSConstants', './AccountTypes'], function(IRSConstants, AccountTypes){\n\n    //  Constructor\n    var LimitUtilities = { };\n\n    //  Static Variable Declaration\n    LimitUtilities.limit_labels_grouped   = [ \"402(g)(1)\",        \"457(e)(15)\",        \"414(v)\",          \"414(v)\",          \"415(c)(1)(A)\",      \"415(c)(1)(A)\"] ;\n    LimitUtilities.limit_irstype_grouped  = [ IRSConstants._402g1,IRSConstants._457e15,IRSConstants._414v,IRSConstants._414v,IRSConstants._415c1A,IRSConstants._415c1A ] ;\n    LimitUtilities.limit_labels           = [ \"402(g)(1)\",\"457(e)(15)\",\"414(v)\",\"415(c)(1)(A)\" ] ;\n    LimitUtilities._402g1_401k_403b       = 0 ;\n    LimitUtilities._457e15_457b           = 1 ;\n    LimitUtilities._414v_401k_403b        = 2 ;\n    LimitUtilities._414v_457b             = 3 ;\n    LimitUtilities._415c1A_401a_401k      = 4 ;\n    LimitUtilities._415c1A_403b           = 5 ;\n    LimitUtilities._402g1                 = 0 ;\n    LimitUtilities._457e15                = 1 ;\n    LimitUtilities._414v                  = 2 ;\n    LimitUtilities._415c1A                = 3 ;\n    LimitUtilities.MAX_RATE               = 0 ;\n    LimitUtilities.MAX_DOLLAR             = 1 ;\n\n    LimitUtilities.getIndexForGrouped_402g1_457e15_414_vLimits = function( type, irc ) {\n        var index = -1 ;\n        switch( irc ) {\n            // case IRSConstants.UNSET :\n            case IRSConstants.UNKNOWN :\n            case IRSConstants._401k :\n            case IRSConstants._403b :\n                switch( type ) {\n                case AccountTypes.TYPE_PRETAX :\n                case AccountTypes.TYPE_ROTH :\n                case AccountTypes.TYPE_SUPPL_PRETAX :\n                case AccountTypes.TYPE_SUPPL_ROTH :\n                    index = LimitUtilities._402g1_401k_403b ;\n                    break ;\n                case AccountTypes.TYPE_PRETAX_AGECATCHUP :\n                case AccountTypes.TYPE_ROTH_AGECATCHUP :\n                    index = LimitUtilities._414v_401k_403b ;\n                    break ;\n                }\n                break ;\n\n            case IRSConstants._457b :\n                switch( type ) {\n                case AccountTypes.TYPE_PRETAX:\n                case AccountTypes.TYPE_ROTH:\n                case AccountTypes.TYPE_SUPPL_PRETAX:\n                case AccountTypes.TYPE_SUPPL_ROTH:\n                    index = LimitUtilities._457e15_457b ;\n                    break;\n                case AccountTypes.TYPE_PRETAX_AGECATCHUP :\n                case AccountTypes.TYPE_ROTH_AGECATCHUP :\n                    index = LimitUtilities._414v_457b ;\n                    break ;\n                }\n                break ;\n\n            default :\n                index = -1 ;\n                break ;\n        }\n\n        return( index ) ;\n    };\n\n    LimitUtilities.getIndexFor_402g1_457e15_414v_Limits = function( type, irc ) {\n        var index = -1 ;\n\n        switch( irc ) {\n            // case IRSConstants.UNSET :\n            case IRSConstants.UNKNOWN :\n            case IRSConstants._401k :\n            case IRSConstants._403b :\n                switch( type ) {\n                case AccountTypes.TYPE_PRETAX :\n                case AccountTypes.TYPE_ROTH :\n                case AccountTypes.TYPE_SUPPL_PRETAX :\n                case AccountTypes.TYPE_SUPPL_ROTH :\n                    index = LimitUtilities._402g1 ;\n                    break ;\n                case AccountTypes.TYPE_PRETAX_AGECATCHUP :\n                case AccountTypes.TYPE_ROTH_AGECATCHUP :\n                    index = LimitUtilities._414v ;\n                    break ;\n                }\n                break ;\n\n            case IRSConstants._457b :\n                switch( type ) {\n                case AccountTypes.TYPE_PRETAX:\n                case AccountTypes.TYPE_ROTH:\n                case AccountTypes.TYPE_SUPPL_PRETAX :\n                case AccountTypes.TYPE_SUPPL_ROTH :\n                    index = LimitUtilities._457e15 ;\n                    break;\n                case AccountTypes.TYPE_PRETAX_AGECATCHUP :\n                case AccountTypes.TYPE_ROTH_AGECATCHUP :\n                    index = LimitUtilities._414v ;\n                    break ;\n                }\n                break ;\n\n            default :\n                index = -1 ;\n                break ;\n        }\n\n        return( index ) ;\n    };\n\n    LimitUtilities.getIndexForGrouped_415c1A_Limit = function( type, irc ) {\n        var index = -1 ;\n\n        switch( irc ) {\n            //case IRSConstants.UNSET :\n            case IRSConstants.UNKNOWN :\n            case IRSConstants._401k :\n            case IRSConstants._401a :\n                switch( type ) {\n                case AccountTypes.TYPE_MANDATORY_EE :\n                case AccountTypes.TYPE_MANDATORY_ER :\n                case AccountTypes.TYPE_RECURRING_ER :\n                case AccountTypes.TYPE_PRETAX :\n                case AccountTypes.TYPE_ROTH :\n                case AccountTypes.TYPE_SUPPL_PRETAX :\n                case AccountTypes.TYPE_SUPPL_ROTH :\n                case AccountTypes.TYPE_AFTERTAX :\n                case AccountTypes.TYPE_SUPPL_AFTERTAX :\n                    index = LimitUtilities._415c1A_401a_401k ;\n                    break ;\n                }\n                break ;\n\n            case IRSConstants._403b :\n                switch( type ) {\n                case AccountTypes.TYPE_MANDATORY_EE :\n                case AccountTypes.TYPE_MANDATORY_ER :\n                case AccountTypes.TYPE_RECURRING_ER :\n                case AccountTypes.TYPE_PRETAX :\n                case AccountTypes.TYPE_ROTH :\n                case AccountTypes.TYPE_SUPPL_PRETAX :\n                case AccountTypes.TYPE_SUPPL_ROTH :\n                case AccountTypes.TYPE_AFTERTAX :\n                case AccountTypes.TYPE_SUPPL_AFTERTAX :\n                    index = LimitUtilities._415c1A_403b ;\n                    break ;\n                }\n                break ;\n\n            default :\n                index = -1 ;\n                break ;\n        }\n\n        return( index ) ;\n    };\n\n    LimitUtilities.getIndexForMutable = function( type ) {\n        var index = -1 ;\n\n        switch( type ) {\n            case AccountTypes.TYPE_PRETAX :\n            case AccountTypes.TYPE_ROTH :\n            case AccountTypes.TYPE_SUPPL_PRETAX :\n            case AccountTypes.TYPE_SUPPL_ROTH :\n            case AccountTypes.TYPE_PRETAX_AGECATCHUP :\n            case AccountTypes.TYPE_ROTH_AGECATCHUP :\n            case AccountTypes.TYPE_AFTERTAX :\n            case AccountTypes.TYPE_SUPPL_AFTERTAX :\n                index = type ;\n                break ;\n\n            default :\n                index = -1 ;\n                break ;\n        }\n\n        return( index ) ;\n    };\n\n\n// 140513 JSS out\n//    LimitUtilities.resolveEEandERcontribs = function( ee, er, target ) {\n//        // vars for iterations\n//        var r = [ 0.0, 0.0 ] ;\n//        var iterator = 0 ;\n//        var high = target ;\n//        var low = 0.0 ;\n//        var test = -1.0 ; // seeded to force iteration\n//        var solve = 0.0 ;\n//\n//        if( ee > 0.0 ) {\n//            while( ( Math.abs( test ) > 0.0049 ) && ( iterator < 15 ) )  // ?? increase precision\n//            {\n//                iterator++ ;\n//\n//                if( test < 0.0 )\n//                    low = solve ;\n//                else\n//                    high = solve ;\n//\n//                //\n//                solve = ( ( high + low ) / 2.0 ) ;\n//\n//                //\n//                test = ( solve + ( er / ee * solve ) - target ) ;\n//            }\n//\n//            r[0] = solve ;\n//            r[1] = ( er / ee * solve ) ;\n//        }\n//\n//        return( r ) ;\n//    };\n\n\n    LimitUtilities.getNonIRSContribMaxes = function( mml, frequency, annualSalary ) {\n        var ret = [ 0.0, 0.0 ] ;\n\n        if( ( mml !== null ) && ( mml.getMaxValue() > 0.0 ) ) {\n            ret[LimitUtilities.MAX_RATE] = mml.getRateMax(annualSalary) ;\n            ret[LimitUtilities.MAX_DOLLAR] = mml.getModalMax(frequency, annualSalary) ;\n        }\n\n        return( ret ) ;\n    };\n\n    LimitUtilities.getNonIRSContribMins = function(mml, frequency, annualSalary){\n        var ret = [ 0.0, 0.0 ] ;\n\n        if( ( mml !== null ) && ( mml.getMinValue() > 0.0 ) ) {\n            ret[LimitUtilities.MAX_RATE] = mml.getRateMin(annualSalary) ;\n            ret[LimitUtilities.MAX_DOLLAR] = mml.getModalMin(frequency, annualSalary) ;\n        }\n\n        return( ret ) ;\n    };\n\n    LimitUtilities.getIRSContribMaxes = function( accountType, irc, frequency, annualSalary ) {\n        var ret = [ 0.0, 0.0 ] ;\n\n        var limits = [\n            IRSConstants.getLimit(IRSConstants._402g1),\n            IRSConstants.getLimit(IRSConstants._457e15),\n            IRSConstants.getLimit(IRSConstants._414v),\n            IRSConstants.getLimit(IRSConstants._415c1A)\n        ] ;\n\n        var\tindex = LimitUtilities.getIndexFor_402g1_457e15_414v_Limits( accountType, irc ) ;\n        index = ( index < 0 ) ? 3 : index ;\n\n        if( index > -1 ) {\n            ret[LimitUtilities.MAX_RATE] = ( limits[index] / annualSalary ) ;\n            ret[LimitUtilities.MAX_DOLLAR] = ( limits[index] / frequency ) ;\n\n            return( ret ) ;\n        }\n\n    };\n\n    LimitUtilities.transMax2ContribType = function( contribType, mml, frequency, annualSalary ) {\n        var ret = 0.0 ;\n\n        if( ( mml !== null ) && ( mml.getMaxValue() > 0.0 ) ) {\n            switch( contribType ) {\n                case AccountTypes.CONTRIB_RATE :\n                    ret = mml.getRateMax( annualSalary ) ;\n                    break ;\n                case AccountTypes.CONTRIB_MODAL :\n                    ret = mml.getModalMax( frequency, annualSalary ) ;\n                    break ;\n                case AccountTypes.CONTRIB_ANNUAL :\n                    ret = mml.getAnnualMax( annualSalary ) ;\n                    break ;\n            }\n        }\n\n        return( ret ) ;\n    };\n\n    LimitUtilities.transIRSContribMax2ContribType = function( contribType, accountType, irc, frequency, annualSalary ) {\n        var ret = 0.0 ;\n\n        var limits = [\n            IRSConstants.getLimit(IRSConstants._402g1),\n            IRSConstants.getLimit(IRSConstants._457e15),\n            IRSConstants.getLimit(IRSConstants._414v),\n            IRSConstants.getLimit(IRSConstants._415c1A)\n        ] ;\n\n        var index = LimitUtilities.getIndexFor_402g1_457e15_414v_Limits( accountType, irc ) ;\n        index = ( index < 0 ) ? 3 : index ;\n\n        if( index > -1 ) {\n            switch( contribType ) {\n            case AccountTypes.CONTRIB_RATE :\n                ret = ( limits[index] / annualSalary ) ;\n                break ;\n            case AccountTypes.CONTRIB_MODAL :\n                ret = ( limits[index] / frequency ) ;\n                break ;\n            case AccountTypes.CONTRIB_ANNUAL :\n                ret = limits[index] ;\n                break ;\n            }\n        }\n        return( ret ) ;\n    };\n\n\n    LimitUtilities.apply401a17SalaryLimit = function( type, irc, eeOrEr ) {\n        var ret = false ;\n\n        switch( irc ) {\n            case IRSConstants._457b :\n                break ;\n\n            case IRSConstants._401a :\n            case IRSConstants._403b :\n                if( eeOrEr ) {\n                    switch( type ) {\n                        case AccountTypes.TYPE_MANDATORY_EE :\n                        case AccountTypes.TYPE_MANDATORY_ER :\n                            ret = true ;\n                            break ;\n                    }\n                } else {\n                    ret = true ;\n                }\n                break ;\n\n            case IRSConstants.UNKNOWN :\n            case IRSConstants._401k :\n                ret = true ;\n                break ;\n        }\n\n        return( ret ) ;\n    };\n\n\n    // 170530 ///////////////////////////////////////////\n    // return item int if null list, either index or item if in list\n    LimitUtilities.checkList = function( item, list, indexOrItem ) {\n        var ret = -1 ;\n\n        if( list == null ) { ret = item ; }\n        else {\n            for( var n = 0 ; n < list.length ; n++ ) {\n                ret = ( item == list[n] ) ? ( ( indexOrItem ) ? n : item ) : ret ;\n                if( ret > -1 ) break ;\n            }\n        }\n\n        return( ret ) ;\n    };\n\n\n    return LimitUtilities;\n});\n","\ndefine([], function(){\n\n    //  Constructor\n    var MinMaxLimit = function(){\n\n        //  Private Variable Declaration ----------------------------------\n        var that = this;\n        var _name = \"\" ;\n        var _id = \"\" ;\n        var _irc = -1 ;\n        var _index = -1 ;\n        var _type = MinMaxLimit.ANNUAL ;\n        var _modes = 1 ;\n        var _planIndex = -1 ;\n        var _max = 0 ;\n        var _min = 0 ;\n\n        //  Privileged Method Declaration ----------------------------------\n        this.setName = function( s ) { _name = s ; } ;\n        this.getName = function( ) { return( _name ) ; } ;\n\n        this.setId = function( s ) { _id = s ; } ;\n        this.getId = function( ) { return( _id ) ; } ;\n\n        this.setIRC = function( n ) { _irc = n ; } ;\n        this.getIRC = function( ) { return( _irc ) ; } ;\n\n        this.setIndex = function( n ) { _index = n ; } ;\n        this.getIndex = function( ) { return( _index ) ; } ;\n\n        this.setType = function( n ) { _type = n ; } ;\n        this.getType = function( ) { return( _type ) ; } ;\n\n        this.setModes = function( n ) { _modes = ( n > 0 ) ? n : 1 ; } ;\n        this.getModes = function( ) { return( _modes ) ; } ;\n\n        this.getFrequency = function( ) { return( _modes ) ; } ;\n\n        this.setPlanIndex = function( n ) { _planIndex = n ; } ;\n        this.getPlanIndex = function( ) { return( _planIndex ) ; } ;\n\n        this.compareTo = function( another ) { return( _index - another.getIndex() ) ; } ;\n\n        this.setAnnual = function( min, max ) {\n            this.setType(MinMaxLimit.ANNUAL);\n            this.setModes( 1 );\n            _min = min ;\n            _max = max ;\n            return( this ) ;\n        } ;\n\n        this.setModal = function( min, max, frequency ) {\n            this.setType(MinMaxLimit.MODAL);\n            this.setModes( frequency );\n            _min = min ;\n            _max = max ;\n            return( this ) ;\n        } ;\n\n        this.setRate = function( min, max ) {\n            this.setType(MinMaxLimit.RATE);\n            this.setModes( 1 );\n            _min = min ;\n            _max = max ;\n            return( this ) ;\n        } ;\n\n        this.getEvaldMin = function( frequency, annualSalary ) {\n            return( evald( this.getMinValue(), frequency, annualSalary ) )  ;\n        } ;\n\n        this.getAnnualMin = function( annualSalary ) {\n            return( annual( this.getMinValue(), annualSalary ) )  ;\n        } ;\n\n        this.getModalMin = function( frequency, annualSalary ) {\n            return( modal( this.getMinValue(), frequency, annualSalary ) )  ;\n        } ;\n\n        this.getRateMin = function( annualSalary ) {\n            return( rate( this.getMinValue(), annualSalary ) )  ;\n        } ;\n\n        this.getEvaldMax = function( frequency, annualSalary ) {\n            return( evald( this.getMaxValue(), frequency, annualSalary ) ) ;\n        } ;\n\n        this.getAnnualMax = function( annualSalary ) {\n            return( annual( this.getMaxValue(), annualSalary ) )  ;\n        } ;\n\n        this.getModalMax = function( frequency, annualSalary ) {\n            return( modal( this.getMaxValue(), frequency, annualSalary ) )  ;\n        } ;\n\n        this.getRateMax = function( annualSalary ) {\n            return( rate( this.getMaxValue(), annualSalary ) )  ;\n        } ;\n\n        this.getMinValue = function( ) { return( _min ) ; } ;\n        this.getMaxValue = function( ) { return( _max ) ; } ;\n\n\n        //  Privileged Method Declaration ----------------------------------\n        function evald( _in, frequency, annualSalary ) {\n            var ret = _in ;\n\n            switch( that.getType() ) {\n            case MinMaxLimit.ANNUAL :\n                ret = ret / frequency ;\n                break ;\n            case MinMaxLimit.RATE :\n                ret = ret * annualSalary / frequency ;\n                break ;\n            case MinMaxLimit.MODAL :\n                break ;\n            default :\n                ret = ret * that.getModes() / frequency ;\n                break ;\n            }\n            return( ret ) ;\n        }\n\n        function annual( _in,  annualSalary ) {\n            var ret = _in ;\n\n            switch( that.getType() ) {\n            case MinMaxLimit.ANNUAL :\n                break ;\n            case MinMaxLimit.RATE :\n                ret = ret * annualSalary ;\n                break ;\n            case MinMaxLimit.MODAL :\n                break ;\n            default :\n                ret = ret * that.getModes() ;\n                break ;\n            }\n            return( ret ) ;\n        }\n\n        function modal( _in, frequency, annualSalary ) {\n            return( evald( _in, frequency, annualSalary ) ) ;\n        }\n\n        function rate( _in,  annualSalary ) {\n            var ret = _in ;\n\n            switch( that.getType() ) {\n            case MinMaxLimit.ANNUAL :\n                ret = ret / annualSalary ;\n                break ;\n            case MinMaxLimit.RATE :\n                break ;\n\n            case MinMaxLimit.MODAL :\n                break ;\n\n            default :\n                ret = ret * that.getModes() / annualSalary ;\n                break ;\n            }\n            return( ret ) ;\n        }\n    };\n\n    MinMaxLimit.ANNUAL = 0 ;\n    MinMaxLimit.MODAL = 1 ;\n    MinMaxLimit.RATE = 2 ;\n\n    return MinMaxLimit;\n});\n","define(['./OMCalculator', './ObjFactory', './OMCalculatorResponse', './util/CalcUtilities',\n    './util/DateUtilities', './util/employermatch/ERMatchFactory',\n    './util/employermatch/ERMatchTypes', './util/employermatch/StandardERMatch',\n    './util/employermatch/DateTierERMatch', './util/employermatch/CustomERMatch',\n    './SettleCommon', './OMValidatorResponse', './LimitUtilities', './util/ResponseSerializer',\n    './util/employermatch/MandatoryERMatch', './annuityRate/AnnuityMonthlyBenefit', './IRSConstants', './IncomeTypes',\n    './AccountTypes', './OMObjFactory', './IRSwh'],\n\n  function (OMCalculator, ObjFactory, OMCalculatorResponse, CalcUtilities, DateUtilities,\n        ERMatchFactory, ERMatchTypes, StandardERMatch, DateTierERMatch, CustomERMatch,\n        SettleCommon, OMValidatorResponse, LimitUtilities, ResponseSerializer, MandatoryERMatch,\n        AnnuityMonthlyBenefit, IRSConstants, IncomeTypes,\n        AccountTypes, OMObjFactory, IRSwh ) {\n\n    var _serializer = new ResponseSerializer();\n    var _request;\n\n    var OMCalcWrapper = function (data, preSerialized) {\n      this.reserialize(data, preSerialized);\n    };\n\n    //  ------------------------------------------------------------------------------\n    //  ----------------------  PUBLIC METHODS ---------------------------------------\n    //\n    OMCalcWrapper.prototype.reserialize = function (data, preSerialized) {\n      if (preSerialized) {\n        AnnuityMonthlyBenefit.setMultiple(\n[{\"age\": 18, \"factor\": 2.49 },\n{\"age\": 19, \"factor\": 2.50 },\n{\"age\": 20, \"factor\": 2.52 },\n{\"age\": 21, \"factor\": 2.53 },\n{\"age\": 22, \"factor\": 2.55 },\n{\"age\": 23, \"factor\": 2.57 },\n{\"age\": 24, \"factor\": 2.59 },\n{\"age\": 25, \"factor\": 2.61 },\n{\"age\": 26, \"factor\": 2.63 },\n{\"age\": 27, \"factor\": 2.65 },\n{\"age\": 28, \"factor\": 2.67 },\n{\"age\": 29, \"factor\": 2.69 },\n{\"age\": 30, \"factor\": 2.71 },\n{\"age\": 31, \"factor\": 2.74 },\n{\"age\": 32, \"factor\": 2.76 },\n{\"age\": 33, \"factor\": 2.79 },\n{\"age\": 34, \"factor\": 2.82 },\n{\"age\": 35, \"factor\": 2.85 },\n{\"age\": 36, \"factor\": 2.88 },\n{\"age\": 37, \"factor\": 2.91 },\n{\"age\": 38, \"factor\": 2.94 },\n{\"age\": 39, \"factor\": 2.98 },\n{\"age\": 40, \"factor\": 3.01 },\n{\"age\": 41, \"factor\": 3.05 },\n{\"age\": 42, \"factor\": 3.09 },\n{\"age\": 43, \"factor\": 3.14 },\n{\"age\": 44, \"factor\": 3.18 },\n{\"age\": 45, \"factor\": 3.22 },\n{\"age\": 46, \"factor\": 3.27 },\n{\"age\": 47, \"factor\": 3.32 },\n{\"age\": 48, \"factor\": 3.38 },\n{\"age\": 49, \"factor\": 3.43 },\n{\"age\": 50, \"factor\": 3.49 },\n{\"age\": 51, \"factor\": 3.55 },\n{\"age\": 52, \"factor\": 3.62 },\n{\"age\": 53, \"factor\": 3.68 },\n{\"age\": 54, \"factor\": 3.75 },\n{\"age\": 55, \"factor\": 3.83 },\n{\"age\": 56, \"factor\": 3.91 },\n{\"age\": 57, \"factor\": 3.99 },\n{\"age\": 58, \"factor\": 4.08 },\n{\"age\": 59, \"factor\": 4.18 },\n{\"age\": 60, \"factor\": 4.28 },\n{\"age\": 61, \"factor\": 4.39 },\n{\"age\": 62, \"factor\": 4.50 },\n{\"age\": 63, \"factor\": 4.62 },\n{\"age\": 64, \"factor\": 4.75 },\n{\"age\": 65, \"factor\": 4.89 },\n{\"age\": 66, \"factor\": 5.04 },\n{\"age\": 67, \"factor\": 5.20 },\n{\"age\": 68, \"factor\": 5.37 },\n{\"age\": 69, \"factor\": 5.55 },\n{\"age\": 70, \"factor\": 5.74 },\n{\"age\": 71, \"factor\": 5.95 },\n{\"age\": 72, \"factor\": 6.17 },\n{\"age\": 73, \"factor\": 6.41 },\n{\"age\": 74, \"factor\": 6.66 },\n{\"age\": 75, \"factor\": 6.93 },\n{\"age\": 76, \"factor\": 7.22 },\n{\"age\": 77, \"factor\": 7.54 },\n{\"age\": 78, \"factor\": 7.87 },\n{\"age\": 79, \"factor\": 8.23 },\n{\"age\": 80, \"factor\": 8.62 },\n{\"age\": 81, \"factor\": 9.04 },\n{\"age\": 82, \"factor\": 9.48 },\n{\"age\": 83, \"factor\": 9.95 },\n{\"age\": 84, \"factor\": 10.46 },\n{\"age\": 85, \"factor\": 11.00 },\n{\"age\": 86, \"factor\": 11.58 },\n{\"age\": 87, \"factor\": 12.19 }]\n);\n        IRSConstants.setIRSLimits({\n          \"402g1\": 18000,\n          \"457e15\": 18000,\n          \"age\": 50,\n          \"401a17\": 270000,\n          \"415c1A\": 54000,\n          \"414v\": 6000\n        });\n\n\n        IRSwh.set({\n            \"irs.wh.medicare.0.threshold\": 0.0,\n            \"irs.wh.medicare.0.rate\": 0.0145,\n            \"irs.wh.medicare.1.threshold\": 200000.0,\n            \"irs.wh.medicare.1.rate\": 0.0235\n\t    });\n\n\n        _request = data;\n      } else {\n        if (data.orangeData) {\n          // Non-FE Calc\n          if (data.orangeData.annuityFactors) {\n            AnnuityMonthlyBenefit.setMultiple(data.orangeData.annuityFactors);\n          }\n          if (data.orangeData.irsLimits) {\n            IRSConstants.setIRSLimits(data.orangeData.irsLimits);\n            IRSwh.set(data.orangeData.irsLimits);\n          }\n          _request = _serializer.serialize(data);\n        } else if (data.feData) {\n          // FE calc\n          if (data.feData.annuityFactors) {\n            AnnuityMonthlyBenefit.setMultiple(data.feData.annuityFactors);\n          }\n          if (data.feData.irsLimits) {\n            IRSConstants.setIRSLimits(data.feData.irsLimits);\n          }\n          _request = _serializer.serializeFE(data);\n        }\n      }\n    };\n\n    /*\n     *  Run the calculation logic\n     *  return: The evaluated Retirement Benefit response\n     */\n    OMCalcWrapper.prototype.compute = function ( request ) {\n      _request = request ? request : _request;\n\n      var response = getOMCalculatorResponse(_request);\n      return response;\n    };\n\n\n    /*\n     *  Run the validation logic\n     *  return: The evaluated Retirement Benefit response\n     */\n    OMCalcWrapper.prototype.validate = function (request) {\n      _request = request ? request : _request;\n      var validation = getOMValidatorResponse(_request);\n      return validation;\n    };\n\n    /*\n     *  Update whether or not to include\n     *  the Employer Match Data object in\n     *  the response\n     */\n    // OMCalcWrapper.prototype.includeErMatchData = function(planId, include){\n    //  var _include = include;\n    //  _include = _include == \"false\" ? false : _include;\n    //  _include = _include == \"true\" ? true : _include;\n    //  var accts = _request.getAccountDataList();\n    //  for (var i = 0; i < accts.length; i++) {\n    //    if(accts[i].getPlanId() == planId){\n    //      if(accts[i].getOmErMatchData())\n    //        _include = accts[i].getOmErMatchData().includeInCalculation(_include);\n    //    }\n    //  }\n    //  return _include;\n    // };\n\n    OMCalcWrapper.prototype.getAccountList = function () {\n      return _request.getAccountDataList();\n    };\n\n\n    /*\n     *  Update a plan's contribution\n     *  @sourceUID: Index of the plan to update\n     *  @contrib:   The new contribution value\n     *  @format:    '%' or '$'\n     */\n    OMCalcWrapper.prototype.setContribution = function (sourceUID, contrib, format) {\n      var sourceID = AccountTypes.matchType(sourceUID.split(\"|\")[0]);\n      var planID = sourceUID.split(\"|\")[1];\n      var srcMatch;\n      var aList = _request.getAccountDataList();\n      for (var i = 0; i < aList.length; i++) {\n        var src = aList[i];\n        if (src.getType() == sourceID && src.getPlanId() == planID) {\n          aList[i].updateContrib(contrib);\n          break;\n        }\n      }\n    };\n\n    /*\n     *  Get a plan's contribution\n     *  @planIndex: Index of the plan to retrieve contribution amount for\n     */\n    OMCalcWrapper.prototype.getContribution = function (planIndex) {\n      var aList = _request.getAccountDataList();\n      var rtn = aList[planIndex] ? aList[planIndex].getContrib() * 100 : 0;\n      return rtn;\n    };\n\n    /*\n     *  Update the user's retirement age\n     *  @age: Updated age value\n     */\n    OMCalcWrapper.prototype.setRetirementAge = function (age, benefit) {\n      if (age) {\n        _request.getCommonData().setRetireAge(age);\n        _request.getCommonData().setSSBenefitAge(age);\n        for (var i = 0; i < _request.getIncomeDataList().length; i++) {\n          if (_request.getIncomeDataList()[i].getType() === IncomeTypes.SOCIALSECURITY) {\n            _request.getIncomeDataList()[i].setMonthlyAmount(benefit);\n          }\n        }\n      }\n    };\n\n    /*\n     *  Update the user's pension amount\n     *  @benefit: Updated benefit value\n     */\n    OMCalcWrapper.prototype.setPensionAmount = function (benefit) {\n        if (benefit !== undefined) {\n            for (var i = 0; i < _request.getIncomeDataList().length; i++) {\n                if (_request.getIncomeDataList()[i].getType() === IncomeTypes.PENSION) {\n                    _request.getIncomeDataList()[i].setMonthlyAmount(benefit);\n                }\n            }\n        }\n    };\n\n    /*\n     *  Set the user's choice to include SocialSecurity\n     *  in their response.\n     */\n    OMCalcWrapper.prototype.setSSIndicator = function (include) {\n      _request.getCommonData().setSSIndicator(include);\n    };\n\n    /*\n     *  Get the user's retirement age\n     *  return: Users retirement age value\n     */\n    OMCalcWrapper.prototype.getRetirementAge = function (age) {\n      return _request.getCommonData().getRetireAge();\n    };\n\n    /*\n     *  Update the user's investment style\n     *  @style: Updated style value (decimal value);\n     */\n    OMCalcWrapper.prototype.setInvestmentStyle = function (style) {\n      //\n      if (style || style === 0) { _request.getCommonData().setRateOfReturn(style); }\n    };\n\n    /*\n     *  Update the user's investment style\n     *  return: User's investment style value (integer format);\n     */\n    OMCalcWrapper.prototype.getInvestmentStyle = function (style) {\n      //\n      return _request.getCommonData().getRateOfReturn() * 100;\n    };\n\n    /*\n     *  Update the user's salary\n     *  @income: Updated salary value\n     */\n    OMCalcWrapper.prototype.setSalary = function (income) {\n      //\n      if (income) { _request.getCommonData().setAnnualSalary(income); }\n    };\n\n    /*\n     *  Update the user's salary\n     *  @income: Updated salary value\n     */\n    OMCalcWrapper.prototype.getSalary = function () {\n      //\n      return _request.getCommonData().getAnnualSalary();\n    };\n\n    OMCalcWrapper.prototype.getMandatoryEeContribLimits = function (type) {\n      for (var i = 0; i < _request.getAccountDataList().length; i++) {\n        var acd = _request.getAccountDataList()[i];\n        if (acd.getType() === AccountTypes.TYPE_MANDATORY_EE) {\n          if (type === \"PERCENT\") {\n            return {'min': acd.getMinContribRate(), 'max': acd.getMaxContribRate()};\n          } else {\n            return {'min': acd.getMinContribDollar(), 'max': acd.getMaxContribDollar()};\n          }\n        }\n      }\n    };\n\n\n    OMCalcWrapper.prototype.getMandatoryErContribLimits = function (type) {\n      for (var i = 0; i < _request.getAccountDataList().length; i++) {\n        var acd = _request.getAccountDataList()[i];\n        if (acd.getType() === AccountTypes.TYPE_MANDATORY_ER) {\n          if (type === \"PERCENT\") {\n            return {'min': acd.getMinContribRate(), 'max': acd.getMaxContribRate()};\n          } else {\n            return {'min': acd.getMinContribDollar(), 'max': acd.getMaxContribDollar()};\n          }\n        }\n      }\n    };\n\n\n    /*\n     *  Create / update the new loan model data to the request\n     */\n    OMCalcWrapper.prototype.setNewLoanModelData = function (lmd) {\n      // Create new Loan instance & add to the request.\n      if (lmd.loanPayment > 0.0 || lmd.loanAmount > 0.0) {\n        var loan = OMObjFactory.getLoanInstance() ;\n\n        if (lmd.loanAmount > 0.0) {\n          loan.initPaymentInstance(lmd.loanOrientation, lmd.loanInterestRate, lmd.loanPayFrequency, lmd.loanTerm, lmd.loanAmount);\n        } else {\n          loan.initLoanAmountInstance(lmd.loanOrientation, lmd.loanInterestRate, lmd.loanPayFrequency, lmd.loanTerm, lmd.loanPayment);\n        }\n        lmd.loanInitialFee > 0.0 ? loan.setInitialFee(lmd.loanInitialFee) : loan.setInitialFee(0.0);\n        lmd.loanAnnualFee > 0.0 ? loan.setAnnualFee(lmd.loanAnnualFee) : loan.setAnnualFee(0.0);\n        lmd.loanAer ? loan.setInterestTypeToAER() : loan.setInterestTypeToSimple();\n        (lmd.loanUpfrontInterest && lmd.loanDaysUpfrontInterest > 0) ? loan.setDaysOfUpFrontInterest(lmd.loanDaysUpfrontInterest) : loan.setDaysOfUpFrontInterest(0);\n\n        var aList = _request.getAccountDataList();\n        var isLoanInstanceFound = false;\n        var oldLoanInstance;\n        for (var i = 0; i < aList.length; i++) {\n          var accountDataInstance = aList[i];\n          if (accountDataInstance.getType() == AccountTypes.TYPE_NEWLOAN) {\n            isLoanInstanceFound = true;\n            oldLoanInstance = accountDataInstance;\n            break;\n          }\n        }\n\n        if (!isLoanInstanceFound) {\n          // Add new loan instance to the request\n          var newLoanInstance = OMObjFactory.getOMAccountDataInstance();\n          newLoanInstance.setType(AccountTypes.TYPE_NEWLOAN);\n          newLoanInstance.setBalance(-loan.getLoanAmount());\n          newLoanInstance.setFrequency(loan.getFrequency());\n          newLoanInstance.setLoan(loan);\n          _request.getAccountDataList().push(newLoanInstance);\n        } else {\n          // Update the existing loan instance object\n          oldLoanInstance.setType(AccountTypes.TYPE_NEWLOAN);\n          oldLoanInstance.setBalance(-loan.getLoanAmount());\n          oldLoanInstance.setFrequency(loan.getFrequency());\n          oldLoanInstance.setLoan(loan);\n        }\n      }\n    };\n\n\n\n\n\n\n\n    //  ------------------------------------------------------------------------------\n    //  ----------------------  PRIVATE METHODS ---------------------------------------\n    //\n    /*\n     *  Retrieve OMCalculator response based on user data\n     *  @request:OMCalculatorRequest  - Valid request object\n     *  return:OMCalculatorResponse - Valid response object\n     */\n    var getOMCalculatorResponse = function (request) {\n\n      var accumCommon = prepareAccumCommonFromCommonData(request.getCommonData());\n      var settleCommon = prepareSettleCommonFromCommonData(request.getCommonData());\n      var accountList = prepareAccumListFromDataList(request.getAccountDataList());\n      var incomeList = prepareIncomeListFromDataList(request.getIncomeDataList(), settleCommon );\n\n      // do the heavy lifting: accumulate all accounts; set error codes\n      var calcx = new OMCalculator();\n      calcx.init(accumCommon, settleCommon, accountList, incomeList);\n      calcx.align();\n\n      return ( prepareResponse(request, accountList, incomeList, calcx.getRetireBenefitEvalResponse()) );\n    };\n\n    /*\n     *  Retrieve OMValidator response based on user data\n     *  @request:OMCalculatorRequest  - Valid request object\n     *  return:OMValidatorResponse - Valid response object\n     */\n    var getOMValidatorResponse = function (request) {\n\n      var accumCommon = prepareAccumCommonFromCommonData(request.getCommonData());\n      var accountList = prepareAccumListFromDataList(request.getAccountDataList());\n\n      // do the heavy lifting: accumulate all accounts; set error codes\n      var ba = ObjFactory.getBaseAccumulatorInstance();\n      ba.init(accumCommon, accountList);\n      ba.validate();\n\n      // set up response object\n      var response = new OMValidatorResponse();\n      prepareReturnData(request.getCommonData(), request.getAccountDataList(), accountList);\n      response.setCommonData(request.getCommonData());\n      response.setAccountDataList(request.getAccountDataList());\n\n      return ( response );\n    };\n\n\n    var prepareResponse = function (request, accountList, incomeList, rber) {\n      var currentAge = DateUtilities.getAgePrecise(request.getCommonData().getDateOfBirth(),\n        request.getCommonData().getReferenceDate());\n\n      // set up response object\n      var response = new OMCalculatorResponse();\n      response.setCommonData(request.getCommonData());\n      response.setAccountDataList(request.getAccountDataList());\n      response.setIncomeDataList(request.getIncomeDataList());\n\n      prepareReturnData(response.getCommonData(), response.getAccountDataList(), accountList);\n\n      response.setRetireBenefitEvalResponse(rber);\n      return ( response );\n    };\n\n\n    var prepareReturnData = function (cd, adList, accountList) {\n      var currentAge = DateUtilities.getAgePrecise(cd.getDateOfBirth(), cd.getReferenceDate());\n\n      // set return members of request objects to supply response\n      cd.setMinRateOfReturn(0.0);\n      cd.setMaxRateOfReturn(0.12);\n      cd.setMinRetireAge(currentAge + 1);\n      cd.setMaxRetireAge(99);\n      cd.setErrorCode(-1);\n      cd.setErrorString(\"\");\n\n\n      // set return members of request objects to supply response - account details\n      var contribMaxs;\n      var contribMins = [0, 0];\n      var annualSalaryRef = cd.getAnnualSalary();\n      var annualSalary401a17Ref = Math.min(annualSalaryRef, IRSConstants.getLimit(IRSConstants._401a17));\n      var evalSalary = annualSalaryRef;\n\n      for (var aa = 0; aa < accountList.length; aa++) {\n        for (var ad = 0; ad < adList.length; ad++) {\n          if (accountList[aa].getIndex() == adList[ad].getIndex()) {\n\n            // establish min/maxes\n            contribMins[0] = 0;\n            contribMins[1] = 0;\n            evalSalary = ( LimitUtilities.apply401a17SalaryLimit(accountList[aa].getType(), accountList[aa].getIRC(), true) ) ? annualSalary401a17Ref : annualSalaryRef;\n\n            contribMaxs = LimitUtilities.getIRSContribMaxes(accountList[aa].getType(), accountList[aa].getIRC(), accountList[aa].getModes(), evalSalary);\n            if (accountList[aa].isMinMaxLimit()) {\n              var temp = LimitUtilities.getNonIRSContribMaxes(accountList[aa].getMinMaxLimit(), accountList[aa].getModes(), evalSalary);\n              if ((temp[LimitUtilities.MAX_DOLLAR] < contribMaxs[LimitUtilities.MAX_DOLLAR] ) && ( temp[LimitUtilities.MAX_DOLLAR] > 0.0 )) {\n                contribMaxs[LimitUtilities.MAX_RATE] = temp[LimitUtilities.MAX_RATE];\n                contribMaxs[LimitUtilities.MAX_DOLLAR] = temp[LimitUtilities.MAX_DOLLAR];\n              }\n              temp = LimitUtilities.getNonIRSContribMins(accountList[aa].getMinMaxLimit(), accountList[aa].getModes(), evalSalary);\n              if (temp[LimitUtilities.MAX_DOLLAR] > 0.0) {\n                contribMins[LimitUtilities.MAX_RATE] = temp[LimitUtilities.MAX_RATE];\n                contribMins[LimitUtilities.MAX_DOLLAR] = temp[LimitUtilities.MAX_DOLLAR];\n              }\n            }\n\n            adList[ad].setMinContribRate(CalcUtilities.roundAndTruncate(contribMins[LimitUtilities.MAX_RATE], 3));\n            adList[ad].setMaxContribRate(CalcUtilities.truncate(contribMaxs[LimitUtilities.MAX_RATE], 3));\n            adList[ad].setMinContribDollar(CalcUtilities.roundAndTruncate(contribMins[LimitUtilities.MAX_DOLLAR], 2));\n            adList[ad].setMaxContribDollar(CalcUtilities.truncate(contribMaxs[LimitUtilities.MAX_DOLLAR], 2));\n            adList[ad].setErrorCode(accountList[aa].getErrorCode());\n            adList[ad].setErrorString(accountList[aa].getErrorString());\n            adList[ad].setIrsInfraction(accountList[aa].getIrsInfraction());\n          }\n        }\n      }\n    };\n\n\n    var prepareAccumCommonFromCommonData = function (omcd) {\n      var currentAge, retireAge;\n\n      // establish age, accumulation range\n      currentAge = DateUtilities.getAgePrecise(omcd.getDateOfBirth(), omcd.getReferenceDate());\n      retireAge = omcd.getRetireAge();\n      // confirm retireAge >= currentAge + 1\n\n      var accumCommon = ObjFactory.getAccumCommonInstance();\n\n      // set common matters\n      accumCommon.setAnnualSalary(omcd.getAnnualSalary());\n      accumCommon.setFull(retireAge - currentAge);\n      //accumCommon.setFractional( d ) ;  // only if taking a different approach than MRO\n      accumCommon.setRateOfIncrease(omcd.getRateOfIncrease());\n      accumCommon.setRateOfReturn(omcd.getRateOfReturn());\n      accumCommon.setRateOfWithholding(omcd.getRateOfWithholding());\n      accumCommon.setMinMaxLimitList(omcd.getMinMaxLimitList());\n\n      return ( accumCommon );\n    };\n\n\n    var prepareSettleCommonFromCommonData = function (omcd) {\n      var currentAge, retireAge;\n      var currentYear ;\n\n      // establish age, accumulation range\n      currentAge = DateUtilities.getAgePrecise(omcd.getDateOfBirth(), omcd.getReferenceDate());\n      retireAge = omcd.getRetireAge();\n      // confirm retireAge >= currentAge + 1\n\n      currentYear = DateUtilities.getYearInteger( omcd.getReferenceDate() ) ;\n\n      var settleCommon = ObjFactory.getSettleCommonInstance() ;\n\n      // set common matters\n      settleCommon.setCurrentAge(currentAge);\n      settleCommon.setRetireAge(retireAge);\n      settleCommon.setRateOfInflation(omcd.getRateOfInflation());\n\n      // rate of return is 2% less, but zero or greater\n      settleCommon.setRateOfReturn( Math.max( omcd.getRateOfReturn() - 0.02, 0.0 ) ) ;\n\n      settleCommon.setReplacementRatio(omcd.getReplacementRatio());\n      settleCommon.setSSIndicator(omcd.isSocialSecurity());\n\n      settleCommon.setCurrentYear( currentYear ) ;\n      settleCommon.setSSBenefitAge( omcd.getSSBenefitAge() ) ;\n      settleCommon.setRateOfWithholding( omcd.getRateOfWithholding() ) ;\n      settleCommon.setCurrentAnnualSalary( omcd.getAnnualSalary() ) ;\n\n      // annuity benefit per $1000 of premium: is this best here or elsewhere?\n      settleCommon.setSpiaMonthlyValuePer1000( AnnuityMonthlyBenefit.getInstance().get( retireAge ) ) ;\n\n      // 170530 LA\n      settleCommon.setRateOfIncrease( omcd.getRateOfIncrease() ) ;\n      settleCommon.setRateOfRothBump( omcd.getRateOfRothBump() ) ;\n      settleCommon.setReplacementIncomeType( omcd.getReplacementIncomeType() ) ;\n\n      return ( settleCommon );\n    };\n\n\n\n    var prepareAccumListFromDataList = function (omadList) {\n\n      //List<OMAccountData> adList = this.request.getAccountDataList() ;\n      var accountList = [];\n\n      // set id to link account objects for return min/max values and error info\n      omadList = assureUniqueAccountDataIndex( omadList ) ;\n//      var index = 0;\n//      for (var ad = 0; ad < omadList.length; ad++) {\n//        omadList[ad].setIndex(index++);\n//      }\n\n      var emData = null;\n      var aaTemp = null;\n\n      // loop through accounts and load calculator objs from data objs\n      for (var ad = 0; ad < omadList.length; ad++) {\n        aaTemp = ObjFactory.getAccountAccumInstance();\n\n        aaTemp.setPlanName(omadList[ad].getPlanName());\n        aaTemp.setPlanLabel(omadList[ad].getPlanLabel());\n        aaTemp.setPlanId(omadList[ad].getPlanId());\n        aaTemp.setPlanIndex(omadList[ad].getPlanIndex());\n        aaTemp.setPlanType(omadList[ad].getPlanType());\n\n        aaTemp.setName(omadList[ad].getName());\n        aaTemp.setLabel(omadList[ad].getLabel());\n        aaTemp.setId(omadList[ad].getId());\n        aaTemp.setIndex(omadList[ad].getIndex());\n        aaTemp.setType(omadList[ad].getType());\n        aaTemp.setIRC(omadList[ad].getIRC());\n        aaTemp.setStartContrib(omadList[ad].getContribType(), omadList[ad].getContrib());\n\n        aaTemp.setContribIterationThreshold( omadList[ad].getContribIterationThreshold() ) ;\n\n        aaTemp.setModes(omadList[ad].getFrequency());\n        aaTemp.setEeLumpAmount(omadList[ad].getBalance());\n        aaTemp.setErLumpAmount(omadList[ad].getErBalance());\n        aaTemp.setMinMaxLimit(omadList[ad].getMinMaxLimit());\n\n        aaTemp.setLoan( omadList[ad].getLoan() ) ;\n\n        emData = omadList[ad].getOmErMatchData();\n\n        // construct employer match object\n        if (emData !== null && emData.includeInCalculation()) {\n          var em;\n          switch (emData.getType()) {\n            case ERMatchTypes.STANDARD :\n            {\n              em = ERMatchFactory.getStandardInstance(emData.getName());\n              em.setID(emData.getID());\n              em.set(emData.getTier1Match(), emData.getTier1Range(),\n                emData.getTier2Match(), emData.getTier2Range(),\n                emData.getAnnualMax(), emData.getTierAnnualMax());\n\n              aaTemp.setEmployerMatchWrapper(em);\n            }\n              break;\n\n            case ERMatchTypes.MANDATORY :\n            {\n              em = ERMatchFactory.getMandatoryInstance(emData.getName());\n              em.setID(emData.getID());\n              em.set(emData.getFlatAnnualContrib(), emData.getRateOfSalary());\n\n              aaTemp.setEmployerMatchWrapper(em);\n            }\n              break;\n\n\n            case ERMatchTypes.DATETIER :\n            {\n              em = ERMatchFactory.getDateTierInstance(emData.getName());\n              em.setID(emData.getID());\n              if (emData.getTier1Match() > 0.0) {\n                em.addTier(\n                  aaTemp.getModes(),\n                  DateUtilities.today(),\n                  emData.getTier1Date(),\n                  emData.getTier1Range(),\n                  emData.getTier1Match()\n                );\n                if (emData.getTier2Match() > 0.0) {\n                  em.addTier(\n                    aaTemp.getModes(),\n                    DateUtilities.today(),\n                    emData.getTier2Date(),\n                    emData.getTier2Range(),\n                    emData.getTier2Match()\n                  );\n                }\n              }\n              aaTemp.setEmployerMatchWrapper(em);\n            }\n              break;\n\n            case ERMatchTypes.CUSTOM :\n            {\n              em = ERMatchFactory.getCustomInstance(emData.getName());\n              em.setID(emData.getID());\n              aaTemp.setEmployerMatchWrapper(em);\n            }\n              break;\n\n            default :\n              break;\n          }\n\n        }\n\n        accountList.push(aaTemp);\n      }\n\n      return ( accountList );\n    };\n\n\n    var prepareIncomeListFromDataList = function (omidList, settleCommon ) {\n\n      var idTemp = null;\n      var incomeDataList = [];\n      for (var id = 0; id < omidList.length; id++) {\n        idTemp = ObjFactory.getIncomeDataInstance();\n\n        idTemp.setAnnualAmount(omidList[id].getAnnualAmount());\n        idTemp.setType(omidList[id].getType());\n        idTemp.setPriority(omidList[id].getPriority());\n        idTemp.setName(omidList[id].getName());\n\n\n// 160726\n       \tif( ( IncomeTypes.SOCIALSECURITY === omidList[id].getType() ) && ( 0 > omidList[id].getStart() ) ) {\n       \t    omidList[id].setStart( settleCommon.getSSBenefitAge() ) ;\n       \t}\n       \tidTemp.setStart( omidList[id].getStart() ) ;\n       \tidTemp.setStop( omidList[id].getStop() ) ;\n       \tidTemp.setRateOfIncrease( omidList[id].getRateOfIncrease() ) ;\n\n        incomeDataList.push(idTemp);\n      }\n      return ( incomeDataList );\n    };\n\n\n    var assureUniqueAccountDataIndex = function( accountDataList ) {\n        // set unique index for each object based on those indexes that may be already set\n        var index = -1 ;\n        var adl = accountDataList ;\n\n    \t// set index var\n        for( var i = 0 ; i < adl.length ; i++ ) {\n            index = Math.max( index, adl[i].getIndex() ) ;\n        }\n\n    \t// replace \"-1\" indexes\n        for( var j = 0 ; j < adl.length ; j++ ) {\n            if( 0 > adl[j].getIndex() ) { index++ ; adl[j].setIndex( index ) ; }\n    \t}\n\n    \t// replace any duplicates to make each index unique\n        var check ;\n        var count ;\n        for( var k = 0 ; k < adl.length ; k++ ) {\n            check = adl[k].getIndex() ;\n            count = 0 ;\n            for( var n = 0 ; n < adl.length ; n++ ) {\n                if( check === adl[n].getIndex() ) {\n                    count++ ;\n                    if( count > 1 ) { index++ ; adl[n].setIndex( index ) ; }\n                }\n            }\n        }\n        return( adl ) ;\n    } ;\t\n\n    return OMCalcWrapper;\n\n});\n","\ndefine(['./ObjFactory', './annuityRate/AnnuityMonthlyBenefit', './AccountTypes',\n        './IncomeTypes', './util/CalcUtilities', './AccumCensus', './ReplacementIncome','./BaseAccumulator','./LimitUtilities','./loan/LoanUtil'],\nfunction(ObjFactory, AnnuityMonthlyBenefit, AccountTypes, IncomeTypes, CalcUtilities, AccumCensus, ReplacementIncome, BaseAccumulator, LimitUtilities, LoanUtil ){\n\n    //  Constructor\n    var OMCalculator = function (){\n\n        //  Private var declarations ------------------------------------\n        var _accountList = null;\n        var _accumCommon = null;\n        var _settleCommon = null;\n        var _incomeList = null;\n        var _rber = null;\n\n        //  Privileged method declarations ------------------------------------\n        this.init = function( ac, sc, al, il  ) {\n            _accountList = al ;\n            _accumCommon = ac ;\n            _settleCommon = sc ;\n            _incomeList = il ;\n            _rber = null ;\n        };\n\n        this.getRetireBenefitEvalResponse = function ( ) { return( _rber ) ; } ;\n\n        this.align = function() {\n            var ba = ObjFactory.getBaseAccumulatorInstance() ; //  ba:BaseAccumulator\n            ba.init( _accumCommon, _accountList ) ;\n            ba.align() ;\n\n            _rber = legacyRetirementHandler( _accumCommon, _settleCommon, _accountList, _incomeList, ba.getCensusList() ) ;\n\n            // 170612   set loan drop amount if there is a loan (handling multiple plan situation\n            var loanPlanIndex = BaseAccumulator.getModelledLoanPlanIndex( _accountList ) ;\n            if( loanPlanIndex > -1 ) {\n                var index = -1 ;\n                var loanDropRber = null ;\n                var loanPlanId = BaseAccumulator.getModelledLoanPlanId( _accountList ) ;\n\n                // clone accountList\n                var clonedAccountList = [];\n                for( var i = 0 ; i < _accountList.length ; i++ ) {\n                    var cl = OMCalculator.cloneAccount( _accountList[i] ) ;\n                    clonedAccountList.push( cl ) ;\n                }\n\n                // reduce contrib amounts to 0. for appropriate account types\n                // use plan id if it set...\n                if( loanPlanId != \"\" ) {\n                    for( var i = 0 ; i < clonedAccountList.length ; i++ ) {\n                        var aa = clonedAccountList[i] ;\n                        index = LimitUtilities.checkList( aa.getType(), LoanUtil.LoanRepaymentImpactTypes, true ) ;\n\n                        if( ( index > -1 ) && ( loanPlanId == aa.getPlanId() ) ) {\n                            aa.adjustStartContrib( 0.0 ) ;\n                        }\n                    }\n                }\n                // else use plan index\n                else {\n                    for( var i = 0 ; i < clonedAccountList.length ; i++ ) {\n                        var aa = clonedAccountList[i] ;\n                        index = LimitUtilities.checkList( aa.getType(), LoanUtil.LoanRepaymentImpactTypes, true ) ;\n\n                        if( ( index > -1 ) && ( loanPlanIndex == aa.getPlanIndex() ) ) {\n                            aa.adjustStartContrib( 0.0 ) ;\n                        }\n                    }\n                }\n\n                ba.init( _accumCommon, clonedAccountList ) ;\n                ba.align() ;\n\n                loanDropRber = legacyRetirementHandler( _accumCommon, _settleCommon, clonedAccountList, _incomeList, ba.getCensusList() ) ;\n                _rber.setLoanContribDropValue( CalcUtilities.roundAndTruncate( _rber.getSumOfMonthlySources() - loanDropRber.getSumOfMonthlySources(), 2 ) ) ;\n            }\n\n        };\n\n\n        function legacyRetirementHandler( ac, sc, al, il, cl ) {\n\n            var rber = ObjFactory.getRetireBenefitEvalResponseInstance() ;\n\n            var inflationDiscount = CalcUtilities.discountingRate( ac.getFull(), sc.getRateOfInflation() ) ;\n            var spiaMonthlyValuePer1000 = AnnuityMonthlyBenefit.getInstance().get( sc.getRetireAge() ) ;\n            var currentAnnualSalary = sc.getCurrentAnnualSalary() ;\n            var replacementRatio = sc.getReplacementRatio() ;\n            var rateOfRothEnhancement = ( ( sc.getRateOfRothBump() > 0.0 ) && ( sc.getRateOfRothBump() != 1.0 ) ) ? ( 1.0 / ( 1.0 - sc.getRateOfRothBump() ) ) - 1.0 : 0.0 ;   // rate for Roth bump\n\n            // gather results for retirement return\n            var balance = 0 ;\n            var eeContribs = 0 ;\n            var erContribs = 0 ;\n            var other = 0 ;\n            var socialsec = 0 ;\n            var income = 0 ;\n            var pensionBalance = 0 ;\n            var pensionIncome = 0 ;\n\n            var newLoanBalanceImpact = 0 ;\n            var newLoanRepayment = 0 ;\n            var existingLoanRepayment = 0 ;\n\n            // 170811   get roth component of balance to handle roth bump in loans\n            var rothProportion = getRothProportion( al, OMCalculator.TYPE_ROTHPROPORTION_DEFERRALS ) ;\n            OMCalculator.adjustBalances( al, rothProportion ) ;\n\n            // 170531  new salary replacement requirements\n            var adjustedAnnualSalary = ReplacementIncome.getAdjustedCurrentDollarSalary(\n                sc.getReplacementIncomeType()\n                , sc.getCurrentAnnualSalary()\n                , ac.getFull()\n                , sc.getRateOfIncrease()\n                , sc.getRateOfInflation()\n                , cl ) ;\n\n            //  gather account calculations/data\n            for( var i = 0; i < al.length; i++ ) {\n                var aa = al[i];\n                switch( aa.getType() ) {\n                    case AccountTypes.TYPE_DB_MANDATORY_EE :  // not a contribution\n                        break ;\n                    case AccountTypes.TYPE_NOINCREASE :\n                    case AccountTypes.TYPE_NOGROWTH :\n                        other += aa.getEeLumpAmount() + aa.getEeEarningsOnLumpAmount() + aa.getErLumpAmount() + aa.getErEarningsOnLumpAmount() ;\n                        other +=  aa.getEeContribBucket() + aa.getEeEarningsOnContribs() ;\n                        other +=  aa.getErContribBucket() + aa.getErEarningsOnContribs() ;\n                        break ;\n                    case AccountTypes.TYPE_MANDATORY_ER :\n                    case AccountTypes.TYPE_RECURRING_ER :\n                        balance += aa.getEeLumpAmount() + aa.getEeEarningsOnLumpAmount() + aa.getErLumpAmount() + aa.getErEarningsOnLumpAmount();\n                        erContribs += aa.getEeContribBucket() + aa.getEeEarningsOnContribs() + aa.getErContribBucket() + aa.getErEarningsOnContribs() ;\n                        break ;\n                    case AccountTypes.TYPE_PENSION_CASH_BAL :\n                    case AccountTypes.TYPE_PENSION_LUMP_SUM :\n                        pensionBalance +=   aa.getEeLumpAmount() +    aa.getEeEarningsOnLumpAmount() + aa.getErLumpAmount() + aa.getErEarningsOnLumpAmount() +\n                                            aa.getEeContribBucket() + aa.getEeEarningsOnContribs()  +\n                                            aa.getErContribBucket() + aa.getErEarningsOnContribs() ; // note this behavior\n                        break ;\n\n                    // 170531 roth enhancement\n                    case AccountTypes.TYPE_ROTH :\n                    case AccountTypes.TYPE_SUPPL_ROTH :\n                    case AccountTypes.TYPE_ROTH_AGECATCHUP :\n                        // enhance accumulations for roth by a tax rate\n                        balance += ( ( 1.0 + rateOfRothEnhancement ) * ( aa.getEeLumpAmount() + aa.getEeEarningsOnLumpAmount() + aa.getErLumpAmount() + aa.getErEarningsOnLumpAmount() ) ) ;\n                        eeContribs += ( ( 1.0 + rateOfRothEnhancement ) * ( aa.getEeContribBucket() + aa.getEeEarningsOnContribs() ) ) ;\n                        erContribs += ( ( 1.0 + rateOfRothEnhancement ) * ( aa.getErContribBucket() + aa.getErEarningsOnContribs() ) ) ;\n                        break ;\n\n                    case AccountTypes.TYPE_EXISTINGLOAN :\n                        // enhance accumulations proportionately for roth bump\n                        existingLoanRepayment += ( ( 1.0 + ( rothProportion * rateOfRothEnhancement ) ) * ( aa.getEeContribBucket() + aa.getEeEarningsOnContribs() ) ) ; \n                        break ;\n                    case AccountTypes.TYPE_NEWLOAN :\n                        // enhance accumulations proportionately for roth bump\n                        newLoanBalanceImpact += ( ( 1.0 + ( rothProportion * rateOfRothEnhancement ) ) * ( aa.getEeLumpAmount() + aa.getEeEarningsOnLumpAmount() ) ) ; // always(?) negative\n                        newLoanRepayment += ( ( 1.0 + ( rothProportion * rateOfRothEnhancement ) ) * ( aa.getEeContribBucket() + aa.getEeEarningsOnContribs() ) ) ; \n                        break ;\n\n                    default :\n                        balance += aa.getEeLumpAmount() + aa.getEeEarningsOnLumpAmount() + aa.getErLumpAmount() + aa.getErEarningsOnLumpAmount();\n                        eeContribs += aa.getEeContribBucket() + aa.getEeEarningsOnContribs() ;\n                        erContribs += aa.getErContribBucket() + aa.getErEarningsOnContribs() ;\n                        break ;\n                }\n            }\n\n            for( var j = 0; j < il.length; j++ ) {\n                var id = il[j] ;\n                switch( id.getType() ) {\n                    case IncomeTypes.SOCIALSECURITY :\n                        socialsec += _settleCommon.doSocialSecurity() ? id.getMonthlyAmount() : 0 ;\n                        break ;\n\n                    case IncomeTypes.PENSION :\n                        pensionIncome += id.getMonthlyAmount() ;\n                        break ;\n\n                    case IncomeTypes.ASSET :\n                    case IncomeTypes.EMPLOYMENT :\n                    case IncomeTypes.OTHER :\n                        income += id.getMonthlyAmount() ;\n                        break ;\n                    default :\n                        income += id.getMonthlyAmount() ;\n                        break ;\n                }\n            }\n\n            rber.setInflationDiscount( inflationDiscount ) ;\n            rber.setAnnuityRate( spiaMonthlyValuePer1000 ) ;\n            rber.setYearsToRetire( ac.getFull() ) ;\n\n            rber.setCurrentAnnualSalary( currentAnnualSalary ) ;\n            rber.setReplacementRatio( replacementRatio ) ;\n            rber.setAdjustedAnnualSalary( adjustedAnnualSalary ) ;\n\n            rber.setMonthlyEstimateFromDCBalance( CalcUtilities.roundAndTruncate( ( balance * inflationDiscount / 1000 * spiaMonthlyValuePer1000 ),2 ) ) ;\n            rber.setMonthlyEstimateFromEmployee( CalcUtilities.roundAndTruncate( ( eeContribs * inflationDiscount / 1000 * spiaMonthlyValuePer1000 ),2 ) ) ;\n            rber.setMonthlyEstimateFromEmployer( CalcUtilities.roundAndTruncate( ( erContribs * inflationDiscount / 1000 * spiaMonthlyValuePer1000 ),2 ) ) ;\n            rber.setMonthlyEstimateFromSocialSecurity( CalcUtilities.roundAndTruncate( ( socialsec ), 2 ) ) ;\n            rber.setMonthlyEstimateFromPensionAsIncome( CalcUtilities.roundAndTruncate( pensionIncome, 2 ) ) ;\n            rber.setMonthlyEstimateFromPension( CalcUtilities.roundAndTruncate( ( pensionBalance * inflationDiscount / 1000.0 * spiaMonthlyValuePer1000 ), 2 ) ) ;\n            rber.setMonthlyEstimateFromOther( CalcUtilities.roundAndTruncate( ( other * inflationDiscount / 1000 * spiaMonthlyValuePer1000 ), 2 ) ) ;\n            rber.setMonthlyEstimateFromIncome( CalcUtilities.roundAndTruncate( ( income ), 2 ) ) ;\n            rber.setMonthlySalaryReplacementRequirement( CalcUtilities.roundAndTruncate( ( adjustedAnnualSalary * replacementRatio / 12 ), 2 ) ) ;\n\n            rber.setMonthlyEstimateFromExistingLoanRepayment( CalcUtilities.roundAndTruncate( ( existingLoanRepayment * inflationDiscount / 1000. * spiaMonthlyValuePer1000 ), 2 ) ) ;\n            rber.setMonthlyEstimateFromNewLoanRepayment( CalcUtilities.roundAndTruncate( ( newLoanRepayment * inflationDiscount / 1000. * spiaMonthlyValuePer1000 ), 2 ) ) ;\n            rber.setMonthlyEstimateFromNewLoanBalanceImpact( CalcUtilities.roundAndTruncate( ( newLoanBalanceImpact * inflationDiscount / 1000. * spiaMonthlyValuePer1000 ), 2 ) ) ;\n\n            return( rber ) ;\n        }\n\n        function getRothProportion( al, type ) {\n\n            var retValue = 0.0 ;\n            var total = 0.0 ;\n            var totalRoth = 0.0 ;\n\n            switch( type ) {\n                case OMCalculator.TYPE_ROTHPROPORTION_BALANCES :\n                    total = BaseAccumulator.getLumpAmountAccordingToType( al, LoanUtil.LoanRepaymentImpactTypes ) ;\n                    totalRoth = BaseAccumulator.getLumpAmountAccordingToType( al, LoanUtil.RothTypes ) ;\n                    break ;\n            \n                case OMCalculator.TYPE_ROTHPROPORTION_DEFERRALS :\n                default :\n                    total = OMCalculator.getInitialContribs( al, LoanUtil.LoanRepaymentImpactTypes ) ;\n                    totalRoth = OMCalculator.getInitialContribs( al, LoanUtil.RothTypes ) ;\n                    break ;\n            }\n\n            retValue = ( total > 0.009 ) ? ( totalRoth / total ) : 0.0 ;\n            return( retValue ) ;\n        }\n\n    };\n\n    // adjust aggregate balance according to roth proportion; insert roth balance according to roth proportion\n    OMCalculator.adjustBalances = function( accountList, rothProportion ) {\n\n        var eeLump = 0.0, erLump = 0.0, eeEarnings = 0.0, erEarnings = 0.0 ; \n        var isAggregate = false, isRothBalance = false ;\n        var typeIndex = -1 ;\n        var rothIndex = -1 ;\n\n        if( rothProportion > 0.0 ) {\n            var objectIndex = 0 ;  // index of objects\n\n            for( var i = 0; i < accountList.length; i++ ) {\n                var aa = accountList[i];\n                typeIndex = LimitUtilities.checkList( aa.getType(), LoanUtil.RothTypes, true ) ;\n                if( typeIndex > -1 ) {\n                    rothIndex = objectIndex ;\n                    if( aa.getEeLumpAmount() + aa.getEeEarningsOnLumpAmount() + aa.getErLumpAmount() + aa.getErEarningsOnLumpAmount() > 0. ) {\n                        isRothBalance = true ;\n                    }\n                }\n                objectIndex++ ;\n            }\n\n            for( var i = 0; i < accountList.length; i++ ) {\n                var aa = accountList[i];\n                if( AccountTypes.TYPE_AGGREGATE_BALANCE == aa.getType() ) {\n                    if( aa.getEeLumpAmount() + aa.getEeEarningsOnLumpAmount() + aa.getErLumpAmount() + aa.getErEarningsOnLumpAmount() > 0. ) {\n                        isAggregate = true ;\n                        eeLump = aa.getEeLumpAmount() ;\n                        eeEarnings = aa.getEeEarningsOnLumpAmount() ;\n                        erLump = aa.getErLumpAmount() ;\n                        erEarnings = aa.getErEarningsOnLumpAmount() ;\n\n                        if( !isRothBalance ) {\n                            aa.setEeLumpAmount( eeLump * ( 1.0 - rothProportion ) ) ;\n                            aa.touchEeEarningsOnLumpAmount( - eeEarnings + ( eeEarnings * ( 1.0 - rothProportion ) ) ) ;\n                            aa.setErLumpAmount( erLump * ( 1.0 - rothProportion ) ) ;\n                            aa.touchErEarningsOnLumpAmount( - erEarnings + ( erEarnings * ( 1.0 - rothProportion ) ) ) ;\n                        }\n                    }\n\n                }\n            }\n            \n            if( isAggregate && !isRothBalance && ( rothIndex > -1 ) ) {\n                var aa = accountList[rothIndex] ;\n                aa.setEeLumpAmount( eeLump * rothProportion ) ;\n                aa.touchEeEarningsOnLumpAmount( eeEarnings * rothProportion ) ;\n                aa.setErLumpAmount( erLump * rothProportion ) ;\n                aa.touchErEarningsOnLumpAmount( erEarnings * rothProportion ) ;\n                \n            }\n        }\n    } ;\n\n    OMCalculator.getInitialContribs = function( accountList, typeList ) {\n\n        var retValue = 0. ;\n        var index = -1 ;\n\n        for( var i = 0 ; i < accountList.length ; i++ ) {\n            var aa = accountList[i] ;\n            index = LimitUtilities.checkList( aa.getType(), typeList, true ) ;\n\n            if( index > -1 ) {\n                retValue += aa.getInitialEeContribAmount() ;\n            }\n        }\n        return( retValue ) ;\n    } ;\n\n    OMCalculator.cloneAccount = function( ac ) {\n        var cl = ObjFactory.getAccountAccumInstance() ;\n\n        cl.setPlanName( ac.getPlanName() );\n        cl.setPlanLabel( ac.getPlanLabel() );\n        cl.setPlanId( ac.getPlanId() );\n        cl.setPlanIndex( ac.getPlanIndex() );\n        cl.setPlanType( ac.getPlanType() );\n        cl.setPriority( ac.getPriority() );\n\n        cl.setName( ac.getName() );\n        cl.setLabel( ac.getLabel() );\n        cl.setId( ac.getId() );\n        cl.setIndex( ac.getIndex() );\n        cl.setType( ac.getType() );\n        cl.setIRC( ac.getIRC() );\n        cl.setStartContrib( ac.getContribType(), ac.getStartContrib() ) ;\n        cl.setRateOfReturn( ac.getRateOfReturn() ) ;\n        cl.setRateOfWithholding( ac.getRateOfWithholding() ) ;\n\n        cl.setRateOfIncrease( ac.getRateOfIncrease() ) ;\n\n        cl.setContribIterationThreshold(  ac.getContribIterationThreshold() ) ;\n\n        cl.setModes( ac.getModes() );\n        cl.setEeLumpAmount( ac.getEeLumpAmount() );\n        cl.setErLumpAmount( ac.getErLumpAmount() );\n\n        // by reference on these...\n        if( ac.isMinMaxLimit() ) { cl.setMinMaxLimit( ac.getMinMaxLimit() ); }\n        if( ac.isLoan() ) { cl.setLoan( ac.getLoan() ); }\n        if( ac.isEmployerMatch() ) { cl.setEmployerMatchWrapper( ac.getEmployerMatchWrapper() ) ; }\n\n        return( cl ) ;\n    } ;\n\n    OMCalculator.TYPE_ROTHPROPORTION_BALANCES = 0 ;\n    OMCalculator.TYPE_ROTHPROPORTION_DEFERRALS = 1 ;\n\n    return OMCalculator;\n\n});","\ndefine([], function(){\n\n    var OMCalculatorRequest = function(){\n\n        //  Private var declarations ------------------------------------\n        var _accountData = null ;    //  List<Or$AccountData>\n        var _incomeData = null ;     //  OMIncomeData\n        var _commonData = null ;     //  OMCommonData\n\n        //  Privileged method Declarations ------------------------------------\n        this.getAccountDataList = function() { return( _accountData ) ; };\n\n        this.getIncomeDataList = function() { return( _incomeData ) ; };\n\n        this.getCommonData = function() { return( _commonData ) ; };\n        this.setCommonData = function(cd) { _commonData = cd ; };\n\n        //  Private method Declarations ------------------------------------\n        (function init() {\n            _accountData = [] ;    //  new ArrayList<Or$AccountData>()\n            _incomeData  = [] ;    //  new ArrayList<Or$AccountData>()\n        })();\n    };\n\n    return OMCalculatorRequest;\n});\n","\ndefine(['./AccountTypes','./loan/Loan','./util/CalcUtilities'], function( AccountTypes, Loan, CalcUtilities ){\n\n    var OMCalculatorResponse = function(){\n\n        //  Private Variable Declarations ------------------------------------\n        var _accountData          = null ;\n        var _incomeData           = null ;\n        var _commonData           = null ;\n        var _benefitEvalResponse  = null ;\n\n        //  Privileged method Declarations ------------------------------------\n        this.getAccountDataList = function() { return( _accountData ) ; };\n        this.setAccountDataList = function( lad ) { _accountData = lad ; };\n\n        this.getIncomeDataList = function() { return( _incomeData ) ; };\n        this.setIncomeDataList = function( lid ) { _incomeData = lid ; };\n\n        this.getCommonData = function() { return( _commonData ) ; };\n        this.setCommonData = function( cd ) { _commonData = cd ; };\n\n        this.getRetireBenefitEvalResponse = function() { return( _benefitEvalResponse ) ; };\n        this.setRetireBenefitEvalResponse = function( ber ) { _benefitEvalResponse = ber ; };\n\n        this.getLoans = function( type ) {\n            var _loans = new Array() ;\n            var _loan = null ;\n\n            for( var i = 0; i < _accountData.length; i++ ) {\n                var ad = _accountData[i] ;\n                _loan = null ;\n                if( ( type == ad.getType() ) ) {\n                    _loan = ad.getLoan() ;\n                    if( _loan != null ) {\n                        _loans.push( _loan ) ;\n                    }\n                }\n            }\n\n            return( _loans ) ;\n        };\n\n\n        this.getLoanBalanceAtRetirement = function( type ) {\n            var balance = 0.0 ;\n            var loan = null ;\n\n            for( var i = 0; i < _accountData.length; i++ ) {\n                var ad = _accountData[i] ;\n                loan = null ;\n                if( ( type == ad.getType() ) ) {\n                    loan = ad.getLoan() ;\n                    if( loan != null ) {\n                        balance += loan.getBalance(\n                            CalcUtilities.getSerialIndexFromPeriodAndMode(\n                                Math.max( _benefitEvalResponse.getYearsToRetire() - 1, 0 ),\n                                Math.max( ad.getFrequency() - 1, 0 ),\n                                ad.getFrequency()\n                            )\n                        ) ;\n                    }\n                }\n            }\n\n            return( CalcUtilities.roundAndTruncate( balance, 2 ) ) ;\n        };\n\n\n\n        this.getTotalStartingBalance = function( excludedType ) {\n            var retValue = 0.0 ;\n\n            for (var i = 0; i < _accountData.length; i++) {\n                var ad = _accountData[i];\n                if( ( excludedType != ad.getType() ) ) {\n                    retValue += ad.getBalance() ;\n                }\n            }\n\n            return( retValue ) ;\n        };\n\n    };\n\n    return OMCalculatorResponse;\n\n});","\ndefine(['./OMStandardErMatchData', './Utilities'],\nfunction(OMStandardErMatchData, Utilities){\n\n    //  Constructor\n    var OMDateTierErMatchData  = Utilities.extend(OMStandardErMatchData, function(){\n\n        //  Private var Declarations ------------------------------------\n        var that = this;\n        var _tier1Date = \"\" ;\n        var _tier2Date = \"\" ;\n\n        //  Privileged method Declarations ------------------------------------\n        this.getTier1Date = function( ) { return( _tier1Date ) ; };\n        this.setTier1Date = function( s ) { _tier1Date = s ; };\n\n        this.getTier2Date = function( ) { return( _tier2Date ) ; };\n        this.setTier2Date = function( s ) { _tier2Date = s ; };\n\n        (function init() { that.setType( OMStandardErMatchData.DATETIER ) ; })();\n    });\n\n    return OMDateTierErMatchData;\n\n});\n","\ndefine([], function(){\n\n    //  Constructor\n    var OMErMatchData = function(){\n\n        //  Private var declarations ------------------------------------\n        var _type = OMErMatchData.UNDEFINED ;\n        var _id = OMErMatchData.ID_0 ;\n        var _name = \"\" ;\n        var _includeInCalculation = true;\n\n        //  Privileged Method declarations ------------------------------------\n        this.getType = function( ) { return( _type ); };\n        this.setType = function( n ) { _type = n  ; };\n\n        this.getID = function( ) { return( _id ); };\n        this.setID = function( n ) { _id = ( n > -1 && n <= OMErMatchData.ID_5 ) ? n : OMErMatchData.ID_0 ; };\n\n        this.getName = function( ) { return( _name ); };\n        this.setName = function( s ) { _name = s  ; };\n\n        this.includeInCalculation = function(include){\n            if(include !== undefined){\n                _includeInCalculation = include;\n            }\n            return _includeInCalculation;\n        };\n\n    };\n\n    //  Static Method declarations ------------------------------------\n    OMErMatchData.UNDEFINED = -1 ;\n    OMErMatchData.STANDARD = 0 ;\n    OMErMatchData.DATETIER = 1 ;\n    OMErMatchData.PROFITSH = 2 ;\n    OMErMatchData.CUSTOM  = 3 ;\n    OMErMatchData.MANDATORY = 4 ;\n\n    OMErMatchData.ID_NONE  = -1 ;\n    OMErMatchData.ID_0  = 0 ;\n    OMErMatchData.ID_1  = 1 ;\n    OMErMatchData.ID_2  = 2 ;\n    OMErMatchData.ID_3  = 3 ;\n    OMErMatchData.ID_4  = 4 ;\n    OMErMatchData.ID_5  = 5 ;\n\n    OMErMatchData.STANDARD_TIER_COUNT = 2 ;\n    OMErMatchData.STANDARD_TIER_COUNT_2  = 2 ;\n    OMErMatchData.STANDARD_TIER_COUNT_3  = 3 ;\n\n    OMErMatchData.MAX_TIER_DEFAULT  = 99 ;  // default to non-tier specific\n    OMErMatchData.MAX_TIER_ONE = 0 ;\n    OMErMatchData.MAX_TIER_TWO = 1 ;\n    OMErMatchData.MAX_TIER_1 = 0 ;\n    OMErMatchData.MAX_TIER_2 = 1 ;\n\n    return OMErMatchData;\n});\n","\ndefine(['./OMCalculatorRequest', './OMCalculatorResponse', './AccountData',\n        './CommonData', './IncomeData','./SettleCommon','./OMErMatchData',\n        './OMDateTierErMatchData', './OMStandardErMatchData', './OMValidatorResponse',\n        './MinMaxLimit', './loan/Loan'],\nfunction(OMCalculatorRequest, OMCalculatorResponse, AccountData, CommonData, IncomeData,\n         SettleCommon, OMErMatchData, OMDateTierErMatchData, OMStandardErMatchData,\n         OMValidatorResponse, MinMaxLimit, Loan) {\n\n    var omObjFactory = {};\n\n    // omObjFactory.getOMCalcWrapperInstance = function( ) {\n    //     return( new OMCalcWrapper() ) ;\n    // };\n\n    omObjFactory.getOMCalculatorInstance = function( ) {\n        return( new OmCalculator() ) ;\n    };\n\n    omObjFactory.getOMCalculatorRequestInstance = function( ) {\n        return( new OMCalculatorRequest() ) ;\n    };\n\n    omObjFactory.getOMCalculatorResponseInstance = function( ) {\n        return( new OMCalculatorResponse() ) ;\n    };\n\n    omObjFactory.getOMValidatorResponseInstance = function( ) {\n        return( new OMValidatorResponse() ) ;\n    };\n\n    omObjFactory.getOMAccountDataInstance = function( ) {\n        return( new AccountData() ) ;\n    };\n\n    omObjFactory.getOMCommonDataInstance = function( ) {\n        return( new CommonData() ) ;\n    };\n\n    omObjFactory.getOMIncomeDataInstance = function( ) {\n        return( new IncomeData() ) ;\n    };\n\n    omObjFactory.getMinMaxLimitInstance = function(){\n        return( new MinMaxLimit() ) ;\n    };\n\n    omObjFactory.getLoanInstance = function(){\n        return( new Loan() );\n    };\n\n    omObjFactory.getErMatchDataInstance = function( type, name ) {\n        var r = null ;  //  r:OMErMatchData\n        switch( type ) {\n        case OMErMatchData.DATETIER :\n            r = new OMDateTierErMatchData() ;\n            break ;\n\n        case OMErMatchData.MANDATORY :\n            r = new OmMandatoryErMatchData() ;\n            break ;\n\n        case OMErMatchData.STANDARD :\n            r = new OMStandardErMatchData() ;\n            break ;\n\n        default :\n            r = new OMStandardErMatchData() ;\n            break ;\n        }\n        return r;\n    };\n\n    omObjFactory.getSettleCommonInstance = function(){\n        return( new SettleCommon() ) ;\n    };\n\n    return omObjFactory;\n\n});","\ndefine(['./OMErMatchData', './Utilities'],\nfunction(OMErMatchData, Utilities){\n\n    //  Constructor (Extends OMErMatchData)\n    var OMStandardErMatchData = Utilities.extend(OMErMatchData, function(){\n\n        //  Private Variable Declarations ------------------------------------\n        var that = this;\n        var _match1 = 0 ;\n        var _range1 = 0 ;\n        var _match2 = 0 ;\n        var _range2 = 0 ;\n        var _annualMax = 0 ;\n        var _tierAnnualMax = OMErMatchData.MAX_TIER_DEFAULT ;\n\n        //  Privileged Method Declarations ------------------------------------\n\n        this.getTier1Match = function( ) { return( _match1 ) ; };\n        this.setTier1Match = function(d) { _match1 = d ; };\n\n        this.getTier1Range = function( )  { return( _range1 ) ; };\n        this.setTier1Range = function(d) { _range1 = d ; };\n\n        this.getTier2Match = function( ) { return( _match2 ) ; };\n        this.setTier2Match = function(d) { _match2 = d ; };\n\n        this.getTier2Range = function( ) { return( _range2 ) ; };\n        this.setTier2Range = function(d) { _range2 = d ; };\n\n        this.getAnnualMax  = function( ) { return( _annualMax ) ; };\n        this.setAnnualMax  = function(d) { _annualMax = d ; };\n\n        this.getTierAnnualMax = function( ) { return( _tierAnnualMax ) ; };\n        this.setTierAnnualMax = function(n) { _tierAnnualMax = n ; };\n\n        //  Private Method Declaration -----------------------------------------\n        (function init() { that.setType( OMErMatchData.STANDARD ) ; } )();\n\n    });\n\n    return OMStandardErMatchData;\n});\n","\ndefine([], function(){\n\n    //  Constructor\n    var OMValidatorResponse = function(){\n\n        //  Private Variable Declarations -------------------------------------\n        var _accountDataList = null ;\n        var _commonData = null ;\n\n        //  Privileged Method Declarations ------------------------------------\n        this.getAccountDataList = function() { return( _accountDataList ) ; };\n        this.setAccountDataList = function( lad ) { _accountDataList = lad ; };\n\n        this.getCommonData = function() { return( _commonData ) ; };\n        this.setCommonData = function( cd ) { _commonData = cd ; };\n\n        this.isValid = function() {\n            var r = true ;\n            var aList = this.getAccountDataList();\n            for( var i = 0; i < aList.length; i++  ) {\n                var ad = aList[i];\n                if( ad.getErrorCode() === 0 ) r = false ;\n            }\n            return( r ) ;\n        };\n    };\n\n    return OMValidatorResponse;\n});\n","\ndefine(['./AccumCensus', './AccumCommon', './SettleCommon', './AccountAccum', './BaseAccumulator',\n        './IncomeData', './RetireBenefitEvalResponse', './MinMaxLimit'],\nfunction(AccumCensus, AccumCommon, SettleCommon, AccountAccum, BaseAccumulator, IncomeData,\n         RetireBenefitEvalResponse, MinMaxLimit) {\n\n    var ObjFactory = {};\n\n    ObjFactory.getAccumCensusInstance = function( ) {\n        return( new AccumCensus() ) ;\n    } ;\n\n    ObjFactory.getAccumCommonInstance = function( ) {\n        return( new AccumCommon() ) ;\n    };\n\n    ObjFactory.getSettleCommonInstance = function( ) {\n        return( new SettleCommon() ) ;\n    };\n\n    ObjFactory.getAccountAccumInstance = function( ) {\n        return( new AccountAccum() ) ;\n    };\n\n    ObjFactory.getIncomeDataInstance = function( ) {\n        return( new IncomeData() ) ;\n    };\n\n    ObjFactory.getBaseAccumulatorInstance = function( ) {\n        return( new BaseAccumulator() ) ;\n    };\n\n    ObjFactory.getRetireBenefitEvalResponseInstance = function( ) {\n        return( new RetireBenefitEvalResponse() ) ;\n    };\n\n    ObjFactory.getMinMaxLimitInstance = function(){\n        return( new MinMaxLimit() );\n    };\n\n    return ObjFactory;\n\n});","\ndefine(['./AccountTypes', './IRSwh', './util/CalcUtilities', './AccumCensus'],\nfunction(AccountTypes, IRSwh, CalcUtilities, AccumCensus ){\n\n    //  Constructor\n    var ReplacementIncome = function () { } ;\n\n    ReplacementIncome.getAdjustedCurrentDollarSalary = function( type, current, years, rateOfIncrease, rateOfInflation, censusList ) { \n        var ret = 0.0 ;\n        var census = null ;\n        years = Math.max( years - 1, 0 ) ;  // adjust to year prior to retirement: this is the last year of salary reductions and is reference for salary manipulations\n\n        // new default: balance increase and inflation rates to establish an at-retirement view of salary in current dollars\n        ret = current * ReplacementIncome.getBalancedRate( years, rateOfIncrease, rateOfInflation ) ;\n\n        switch( type ) {\n            case ReplacementIncome.TYPE_LIFESTYLE_CURRENT :\n                census = censusList[0] ;  // first object in list\n                if( census != null ) {\n                    ret = ReplacementIncome.getLifeStyleAdjustedSalary( census ) * ReplacementIncome.getBalancedRate( years, rateOfIncrease, rateOfInflation ) ;\n                }\n                break ;\n\n            case ReplacementIncome.TYPE_LIFESTYLE_FUTURE :\n                census = censusList[censusList.length - 1] ; // last object in list\n                if( census != null ) {\n                    ret = ReplacementIncome.getLifeStyleAdjustedSalary( census ) * CalcUtilities.discountingRate( census.getPeriodRef(), rateOfInflation ) ;\n                }\n                break ;\n\n            case ReplacementIncome.TYPE_OLD :  // as done prior to 2017/07\n                ret = current ;\n                break ;\n\n            case ReplacementIncome.TYPE_STANDARD :\n            default :\n                break ;\n        }\n\n        return( CalcUtilities.roundAndTruncate( ret, 2 ) ) ;\n    } ;\n\n\n    ReplacementIncome.getBalancedRate = function( years, rateOfIncrease, rateOfInflation ) {\n        return( Math.pow( ( 1.0 + rateOfIncrease ), years ) * Math.pow( ( 1.0 / ( 1.0 + rateOfInflation ) ), years ) ) ;\n    } ;\n\n\n    ReplacementIncome.getLifeStyleAdjustedSalary = function( census ) {\n        var salary = census.getSalary() ;\n        var mediWh = IRSwh.getWithholding( IRSwh.MC, salary ) ;  // withholding for Medicare\n        var eeContribs = census.getEEContribs() ;\n        return( salary - eeContribs - mediWh ) ;\n    } ;\n\n\n    ReplacementIncome.getReplacementIncomeCalcType = function( typeText ) {\n        var ret = ReplacementIncome.TYPE_STANDARD ;\n        var s = \"\" ;\n        \n        if( typeof( typeText ) === 'string' ) {\n            s = typeText.toUpperCase().trim() ;\n        }\n\n        if( s.indexOf( \"CURRENT\" ) > -1 ) {\n            ret = ReplacementIncome.TYPE_LIFESTYLE_CURRENT ;\n        }\n        else {\n            if( s.indexOf( \"FUTURE\" ) > -1 ) {\n                ret = ReplacementIncome.TYPE_LIFESTYLE_FUTURE ;\n            }\n            else {\n                if( s.indexOf( \"OLD\" ) > -1 ) {\n                    ret = ReplacementIncome.TYPE_OLD ;\n                }\n            }\n        }\n\n        return( ret ) ;\n    } ;\n\n\n\n    ReplacementIncome.TYPE_STANDARD           = 0 ;  // default (cf. next description)\n    ReplacementIncome.TYPE_BALANCED           = 0 ;  // (default) current salary adjusted by both increase and inflation rates to produce current dollars (orienting to future purchasing power)\n    ReplacementIncome.TYPE_LIFESTYLE_CURRENT  = 1 ;  // LA \"LifeStyle\" salary definition captured for current (first) year, then adjusted as above\n    ReplacementIncome.TYPE_LIFESTYLE_FUTURE   = 2 ;  // LA \"LifeStyle\" salary definition captured in year prior to retirement (the last year of salary and reductions), then adjusted by inflation\n    ReplacementIncome.TYPE_OLD                = 9 ;  // current salary remains unadjusted (today's behavior)\n\n\n    // account types that define \"Life Style\" salary\n    ReplacementIncome.LifeStyleTypes = [\n        AccountTypes.TYPE_DB_MANDATORY_EE\n        , AccountTypes.TYPE_MANDATORY_EE\n        , AccountTypes.TYPE_PRETAX\n        , AccountTypes.TYPE_ROTH\n        , AccountTypes.TYPE_SUPPL_PRETAX\n        , AccountTypes.TYPE_SUPPL_ROTH\n        , AccountTypes.TYPE_PRETAX_AGECATCHUP\n        , AccountTypes.TYPE_ROTH_AGECATCHUP\n        , AccountTypes.TYPE_AFTERTAX\n        , AccountTypes.TYPE_SUPPL_AFTERTAX\n    ] ;\n\n    return ReplacementIncome ;\n\n});","\ndefine(['./util/CalcUtilities'],\nfunction(CalcUtilities){\n\n    //  Constructor\n    var RetireBenefitEvalResponse = function(){\n\n        //  Private var declarations ------------------------------------\n        var _estFromDCBalance        = 0 ;\n        var _estFromEmployee         = 0 ;\n        var _estFromEmployer         = 0 ;\n        var _estFromSocialSecurity   = 0 ;\n        var _estFromPension          = 0 ;\n        var _estFromPensionAsIncome  = 0 ;\n        var _estFromOther            = 0 ;\n        var _estFromIncome           = 0 ;\n\n        var _fromNewLoanBalanceImpact  = 0 ;\n        var _fromNewLoanRepayment      = 0 ;\n        var _fromExistingLoanRepayment = 0 ;\n\n        var _annuityRate = 0 ;\n        var _inflationDiscount = 0 ;\n        var _yearsToRetire = 0 ; // accumulation years\n\n        var _monthlySalaryReplacement = 0.0 ; // adjusted and monthly replacement salary\n\n        // 170530\n        var _replacementRatio = 0.0 ;\n        var _currentAnnualSalary = 0.0 ;  // original salary\n        // 170612\n        var _loanContribDropValue = 0.0 ;  // benefit value drop (or difference) from stopping contributions to account with modeled loan \n        var _adjustedAnnualSalary = 0.0 ; \n\n\n        //  Privileged Method Declarations ------------------------------------\n        this.getInflationDiscount = function( ) { return( _inflationDiscount ) ; };\n        this.setInflationDiscount = function( d ) { _inflationDiscount = d ; };\n\n        this.getAnnuityRate = function( ) { return( _annuityRate ) ; };\n        this.setAnnuityRate = function( d ) { _annuityRate = d ; };\n\n        this.getYearsToRetire = function( ) { return( _yearsToRetire ) ; };\n        this.setYearsToRetire = function( n ) { _yearsToRetire = n ; };\n\n        this.getReplacementRatio = function( ) { return( _replacementRatio ) ; } ;\n        this.setReplacementRatio = function( d ) { _replacementRatio = d ; } ;\n\n        this.getCurrentAnnualSalary = function( ) { return( _currentAnnualSalary ) ; } ;\n        this.setCurrentAnnualSalary = function( d ) { _currentAnnualSalary = d ; } ;\n\n        this.getAdjustedAnnualSalary = function( ) { return( _adjustedAnnualSalary ) ; } ;\n        this.setAdjustedAnnualSalary = function( d ) { _adjustedAnnualSalary = d ; } ;\n\n\n        this.getMonthlyEstimateFromDCBalance = function( ) { return( _estFromDCBalance ) ; };\n        this.setMonthlyEstimateFromDCBalance = function(d) { _estFromDCBalance = d ; };\n\n        this.getMonthlyEstimateFromEmployee = function( ) { return( _estFromEmployee ) ; };\n        this.setMonthlyEstimateFromEmployee = function(d) { _estFromEmployee = d ; };\n\n        this.getMonthlyEstimateFromEmployer = function( ) { return( _estFromEmployer ) ; };\n        this.setMonthlyEstimateFromEmployer = function(d) { _estFromEmployer = d ; };\n\n        this.getMonthlyEstimateFromSocialSecurity = function( ) { return( _estFromSocialSecurity ) ; };\n        this.setMonthlyEstimateFromSocialSecurity = function(d) { _estFromSocialSecurity = d ; };\n\n        this.getMonthlyEstimateFromPension = function( ) { return( _estFromPension ) ; };\n        this.setMonthlyEstimateFromPension = function(d) { _estFromPension = d ; };\n\n        this.getMonthlyEstimateFromPensionAsIncome = function( ) { return( _estFromPensionAsIncome ) ; };\n        this.setMonthlyEstimateFromPensionAsIncome = function( d ) { _estFromPensionAsIncome = d ; };\n\n        this.getMonthlyEstimateFromOther = function( ) { return( _estFromOther ) ; };\n        this.setMonthlyEstimateFromOther = function(d) { _estFromOther = d ; };\n\n        this.getMonthlyEstimateFromIncome = function( ) { return( _estFromIncome ) ; };\n        this.setMonthlyEstimateFromIncome = function(d) { _estFromIncome = d ; };\n\n        this.getMonthlySalaryReplacementRequirement = function( ) { return( _monthlySalaryReplacement ) ; };\n        this.setMonthlySalaryReplacementRequirement = function(d) { _monthlySalaryReplacement = d ; };\n\n        this.getLoanContribDropValue = function( ) { return( _loanContribDropValue ) ; } ;\n        this.setLoanContribDropValue = function( d ) { _loanContribDropValue = d ; } ;\n\n        this.getMonthlyEstimateFromExistingLoanRepayment = function( ) { return( _fromExistingLoanRepayment ) ; };\n        this.setMonthlyEstimateFromExistingLoanRepayment = function( d ) { _fromExistingLoanRepayment = d ; };\n\n        this.getMonthlyEstimateFromNewLoanRepayment = function( ) { return( _fromNewLoanRepayment ) ; };\n        this.setMonthlyEstimateFromNewLoanRepayment = function( d ) { _fromNewLoanRepayment = d ; };\n\n        this.getMonthlyEstimateFromNewLoanBalanceImpact = function( ) { return( _fromNewLoanBalanceImpact ) ; };\n        this.setMonthlyEstimateFromNewLoanBalanceImpact = function( d ) { _fromNewLoanBalanceImpact = d ; };\n\n\n        this.getSumOfMonthlySources = function( ) {\n            var _sum = 0.0 ;\n\n            _sum += (\n                _estFromDCBalance\n                + _estFromEmployee\n                + _estFromEmployer\n                + _estFromSocialSecurity\n                + _estFromPensionAsIncome\n                + _estFromPension\n                + _estFromOther\n                + _estFromIncome\n// do NOT include loan impact\n//              + _fromNewLoanBalanceImpact  // exclude modelled loan by default\n//              + _fromNewLoanRepayment      // exclude modelled loan by default\n//              + _fromExistingLoanRepayment  // include existing loan by default\n            ) ;\n\n            return( CalcUtilities.roundAndTruncate( _sum, 2 ) ) ;\n        };\n\n        this.getMonthlyGap = function( ) {\n            return( Math.max( CalcUtilities.roundAndTruncate( this.getMonthlySalaryReplacementRequirement(), 2) - CalcUtilities.roundAndTruncate( this.getSumOfMonthlySources(), 2 ), 0 ) ) ;\n        };\n\n        this.getReplacementScore = function( ) {\n            var required = this.getMonthlySalaryReplacementRequirement() ;\n            var sumOfSources = this.getSumOfMonthlySources( ) ;\n            return( ( required !== 0 ) ? Math.max( CalcUtilities.roundAndTruncate( sumOfSources / required, 5 ), 0 ) : 0 ) ;\n        };\n\n\n        //  Private method declarations ------------------------------------\n        (function init( ) {\n            _estFromDCBalance =\n            _estFromEmployee =\n            _estFromEmployer =\n            _estFromSocialSecurity =\n            _estFromPension =\n            _estFromPensionAsIncome =\n            _estFromOther =\n            _estFromIncome =\n            _monthlySalaryReplacement\n\n            = _fromNewLoanBalanceImpact\n            = _fromNewLoanRepayment\n            = _fromExistingLoanRepayment\n\n            = _annuityRate\n            = _inflationDiscount\n\n            = _replacementRatio\n            = _currentAnnualSalary\n            = _adjustedAnnualSalary\n\n            = _loanContribDropValue\n            = 0 ;\n        })();\n\n    };\n\n    return RetireBenefitEvalResponse;\n\n});","\ndefine([], function(){\n\n    //  Constructor\n    var SettleCommon = function(){\n\n        //  Private Variable Declarations ------------------------------------\n        var _ssIndicator        = true ;\n        var _currentAge         = 35 ;\n        var _retireAge          = 67 ;\n        var _rateOfInflation    = 0.0246 ;\n        var _rateOfReturn       = 0.0 ;\n        var _replacementRatio   = 1.0 ;\n\n        //  Privileged Method Declarations ------------------------------------\n        this.setSSIndicator = function( b ) { _ssIndicator = b ; } ;\n        this.doSocialSecurity = function( ) { return( _ssIndicator ) ; } ;\n\n        this.setCurrentAge = function( n ) { _currentAge = n ; } ;\n        this.getCurrentAge = function( )   { return( _currentAge ) ; } ;\n\n        this.setRetireAge = function( n ) { _retireAge = n ; } ;\n        this.getRetireAge = function( )   { return( _retireAge ) ; } ;\n\n        this.setRateOfInflation = function( d ) { _rateOfInflation = d ; } ;\n        this.getRateOfInflation = function( )   { return( _rateOfInflation ) ; } ;\n\n        this.setRateOfReturn = function( d ) { _rateOfReturn = d ; } ;\n        this.getRateOfReturn = function( )   { return( _rateOfReturn ) ; } ;\n\n        this.setReplacementRatio = function( d ) { _replacementRatio = d ; } ;\n        this.getReplacementRatio = function( )   { return( _replacementRatio ) ; } ;\n\n\n    var _currentYear   = 2018 ;\n    this.setCurrentYear = function( n ) { _currentYear = n ; } ;\n    this.getCurrentYear = function( )        { return( _currentYear ) ; } ;\n\n    var _ssBenefitAge   = 67 ;\n    this.setSSBenefitAge = function( n ) { _ssBenefitAge = n ; } ;\n    this.getSSBenefitAge = function( )        { return( this.ssBenefitAge ) ; } ;\n\n    var _currentAnnualSalary = 30000.0 ;\n    this.setCurrentAnnualSalary = function( d ) { _currentAnnualSalary = d ; } ;\n    this.getCurrentAnnualSalary = function( ) { return( _currentAnnualSalary ) ; } ;\n\n    var _spiaMonthlyValuePer1000 = 6.22 ;\n    this.setSpiaMonthlyValuePer1000 = function( d ) { _spiaMonthlyValuePer1000 = d ; } ;\n    this.getSpiaMonthlyValuePer1000 = function( ) { return( _spiaMonthlyValuePer1000 ) ; } ;\n\n    var _rateOfWithholding  = 0.0 ;\n    this.setRateOfWithholding = function( d ) { _rateOfWithholding = d ; } ;\n    this.getRateOfWithholding = function( )   { return( _rateOfWithholding ) ; } ;\n\n    // 170530 LA etc\n    var _rateOfRothBump = 0.3 ;\n    this.setRateOfRothBump = function( d ) { _rateOfRothBump = d ; } ;\n    this.getRateOfRothBump = function() { return( _rateOfRothBump ) ; } ;\n\n    var _replacementIncomeType = 0 ;\n    this.setReplacementIncomeType = function( n ) { _replacementIncomeType = n ; } ;\n    this.getReplacementIncomeType = function() { return( _replacementIncomeType ) ; } ;\n\n    var _rateOfIncrease = 0.0343 ;   // salary and contribution increase--more for accumulation than settlement\n    this.getRateOfIncrease = function( ) { return( _rateOfIncrease ) ; } ;\n    this.setRateOfIncrease = function( d ) { _rateOfIncrease = d ; } ;\n\n\n    };\n\n    return SettleCommon;\n});\n","define([], function(){\n\n\tvar Utilities = {};\n    /**\n     * class creator\n     * @param  {function} Parent parent function\n     * @param  {function} Child  child function\n     * @return {function}        constructor for child function\n     */\n    Utilities.extend = function(Parent, Child){\n        var constructor =  function(){\n            Child.prototype = new Parent();\n            Child.prototype.constructor = Child;\n\n\n            //pass any prototype extended functions created after the extend \n            //to the new class object\n            var constructedClass = new Child;\n            for(var i in constructor.prototype)\n            {\n                constructedClass[i] = constructor.prototype[i];\n            }\n            return constructedClass;\n        };\n\n        //pass any public parent or child variables to the constructor\n        for(var i in Parent)\n        {\n            constructor[i] = Parent[i];\n        }\n        for(var i in Child)\n        {\n            constructor[i] = Child[i];\n        }\n\n        return constructor;\n    };\n\n\treturn Utilities;\n});","\ndefine([], function(){\n\n\n\tvar AnnuityMonthlyBenefit = function(){\n\n        //  Private Instance declarations --------------------------------------\n\t\tfunction init(){\n\n\t\t\tfor( var n = 0 ; n < _values.length ; n ++ ) { _values[n] = 0.0 ; }\n\n\t\t\t_values[0] = new Date().getTime()  ;\n\t\t}\n\n        //  Privileged Method Declarations --------------------------------\n\n\t\tthis.reset = function( _in ) {\n\t\t\tif( _in !== null ) {\n\t\t\t\tfor( var n = 0 ; n < _in.length ; n ++ ) { _values[n] = _in[n] ; }\n\t\t\t}\n\t\t\tvar now = new Date() ;\n\t\t\t_values[0] = now.getTime();\n\t\t};\n\n\t\tthis.test = function( ) {\n\t\t\tvar b = false ;\n\t\t\tvar now = new Date() ;\n\t\t\tif( ( ( now.getTime() - _values[0] ) < ( 86400000.0 * 30.0 ) ) && ( _values[67] > 0.0 ) ) { b = true ; }\n\t\t\treturn( b ) ;\n\t\t};\n\n\t\tthis.get = function(age) {\n\t\t\tvar retValue = 0 ;\n\t\t\tage = Math.min( _values.length - 1, age ) ;\n\t\t\tretValue = _values[age] ;\n\n\t\t\treturn( retValue ) ;\n\t\t};\n\n\t\tthis.set = function( age, d ) {\n\t\t\tage = Math.min( _values.length - 1, age ) ;\n\t\t\t_values[age] = d ;\n\t\t};\n\n\t\tinit();\n\t};\n\n\n\t//\tPrivate Class variable  -------------------------------------------\n\tvar _values = new Array(AnnuityMonthlyBenefit.MAXVALUES);\n\tvar _instance = new AnnuityMonthlyBenefit();\n\tAnnuityMonthlyBenefit.MAXVALUES = 101 ;\n\t//AnnuityMonthlyBenefit.MINVALUES = 10 ;\n\n    //  Static method declarations ------------------------------------\n\n    AnnuityMonthlyBenefit.getInstance = function(){\n\t\treturn _instance;\n    };\n\n\tAnnuityMonthlyBenefit.setMultiple = function ( d ) {\n\t\tfor( var i = 0 ; i < d.length ; i++ ) {\n\t\t\t_values[d[i].age] = d[i].factor ;\n\t\t}\n\t};\n\n\treturn AnnuityMonthlyBenefit;\n\n});","\ndefine([], function() {\n\n    //  Constructor\n    var Loan = function() {\n        var that = this;\n        this.__ALIGNED = false ;\n        this._loanId = \"\" ;\n        this._loanType = Loan.LOANTYPE_GENERAL ;\n        this._orientation = Loan.ORIENTATION_MONTHLY ;  // the orientation of term, that is, term is expressed in x increments per annum (default is monthly or 12)\n        this._term = 1 ;  // the loan term according to \"orientation\" (term in monthly orientation = num of months repayment)\n        this._frequency = this._orientation ;  // the actual payment frequency of participant; default is per orientation\n        this._numOfPayments = 0 ;  // the total number of payments to term\n        this._appliedPrincipal = null ; // array\n        this._appliedInterest = null ; // array\n        this._remainingPrincipal = null ; // array\n        this._remainingInterest = null ; // array\n        this._payment = null ; // array\n        this._originatingLoanAmount = 0. ;\n        this._functionalLoanAmount = 0. ;\n        this._specifiedPayment = 0. ;\n        this._initialFee = 0. ;\n        this._annualFee = 0. ;\n        this._totalPrincipal = 0. ;\n        this._totalPayments = 0. ;\n        this._totalInterest = 0. ;\n        this._totalAnnualFees = 0. ;\n        this._daysOfUpFrontInterest = 0 ;\n        this._rate = 0. ;  // annual\n        this._solveType = Loan.LOANSOLVEFOR_NONE ;\n        this._interestType = Loan.INTEREST_TYPE_SIMPLE ;\n\n        this.initPaymentInstance = function(orientation, annualRate, paymentFrequency, term, loanAmount) {\n            this.setOrientation( orientation ) ;\n            this.setRate( annualRate ) ;\n            this.setFrequency( paymentFrequency ) ;\n            this.setTerm( term ) ;\n            this.setLoanAmount( loanAmount ) ;\n            this.setSolveType( Loan.LOANSOLVEFOR_PAYMENT ) ;\n            this.markNotAligned() ;\n        };\n\n        this.initTermInstance = function(orientation, annualRate, paymentFrequency, loanAmount, payment) {\n            this.setOrientation( orientation ) ;\n            this.setRate( annualRate ) ;\n            this.setFrequency( paymentFrequency ) ;\n            this.setLoanAmount( loanAmount ) ;\n            this.setSpecifiedPayment( payment ) ;\n            this.setSolveType( Loan.LOANSOLVEFOR_TERM ) ;\n            this.markNotAligned() ;\n        };\n\n        this.initLoanAmountInstance = function(orientation, annualRate, paymentFrequency, term, payment) {\n            this.setOrientation( orientation ) ;\n            this.setRate( annualRate ) ;\n            this.setTerm( term ) ;\n            this.setFrequency( paymentFrequency ) ;\n            this.setSpecifiedPayment( payment ) ;\n            this.setSolveType( Loan.LOANSOLVEFOR_AMOUNT ) ;\n            this.markNotAligned() ;\n        };\n\n        this.initPaymentInstanceForExistingLoan = function(orientation, annualRate, paymentFrequency, existingLoanBalanceAmount, daysDiff) {\n            this.setOrientation( orientation ) ;\n            this.setRate( annualRate ) ;\n            this.setFrequency( paymentFrequency ) ;\n            this.setTerm( Loan.duration( daysDiff, orientation, Loan.ORIENTATION_DAYLY )); //this.setTerm( term ) ;\n            this.setLoanAmount( existingLoanBalanceAmount ) ;\n            this.setSolveType( Loan.LOANSOLVEFOR_PAYMENT ) ;\n            this.markNotAligned() ;\n        };\n\n        \n        // Begin Setter methods\n        this.setLoanType = function( n ) {\n            this._loanType = n ;\n        };\n\n        this.setLoanId = function( s ) {\n            this._loanId = s ;\n        };\n\n        this.setLoanAmount = function( d ) {\n            if( this._solveType == Loan.LOANSOLVEFOR_AMOUNT ) {\n                this.markNotAligned() ;\n                this._solveType = Loan.LOANSOLVEFOR_PAYMENT ;\n            }\n\n            if( d != this._originatingLoanAmount ) {\n                this.markNotAligned() ;\n                this._originatingLoanAmount = d ;\n            }\n        };\n\n        this.setSpecifiedPayment = function( d ) {\n            if( this._solveType == Loan.LOANSOLVEFOR_PAYMENT ) {\n                this.markNotAligned() ;\n                this._solveType = Loan.LOANSOLVEFOR_AMOUNT ;\n            }\n\n            if( d != this._specifiedPayment ) {\n                this.markNotAligned() ;\n                this._specifiedPayment = d ;\n            }\n        };\n\n        this.setPayment = function( n, d ) {\n            align() ;\n            this._solveType = Loan.LOANSOLVEFOR_NONE ;\n\n            if( ( n > -1 ) && ( n < this._payment.length ) ) {\n                if( d != this.payment[n] ) {\n                    this.markNotAligned() ;\n                    this.payment[n] = d ;\n                }\n            }\n        };\n\n\n        this.setDaysOfUpFrontInterest = function( n ) {\n            if( n != this._daysOfUpFrontInterest ) {\n                this.markNotAligned() ;\n                this._daysOfUpFrontInterest = Math.max( n, 0 ) ;\n            }\n        } ;\n\n\n        this.setOrientation = function(n) {\n            if( n != this._orientation ) {\n                this.markNotAligned() ;\n                if( n < 1 ) {\n                    this._orientation = 1 ;\n                }\n                else {\n                    this._orientation = n ;\n                }\n            }\n        };\n\n        this.setFrequency = function( n ) {\n            if( n != this._frequency ) {\n                this.markNotAligned() ;\n                if( n < 1 ) {\n                    this._frequency = 1 ;\n                }\n                else {\n                    this._frequency = n ;\n                }\n            }\n        };\n\n        this.setTerm = function( n ) {\n            if( this._solveType == Loan.LOANSOLVEFOR_TERM ) {\n                this.markNotAligned() ;\n                this._solveType = Loan.LOANSOLVEFOR_PAYMENT ;\n            }\n\n            if( n != this._term ) {\n                this.markNotAligned() ;\n                if( n < 1 ) {\n                    this._term = 1 ;\n                }\n                else {\n                    this._term = n;\n                }\n            }\n        };\n\n        this.setRate = function ( d ) {\n            if( d != this._rate ) {\n                this.markNotAligned() ;\n                this._rate = d ;\n            }\n        };\n\n        this.setInitialFee = function( d ) {\n            if( d != this._initialFee ) {\n                this.markNotAligned() ;\n                this._initialFee = d ;\n            }\n        };\n\n        this.setAnnualFee = function( d ) {\n            if( d != this._annualFee ) {\n                this.markNotAligned() ;\n                this._annualFee = d ;\n            }\n        };\n\n        this.setInterestType = function( n ) {\n            if( n != this._interestType ) {\n                this.markNotAligned() ;\n                this._interestType = n ;\n            }\n        };\n\n        this.setInterestTypeToAER = function() {\n            if( Loan.INTEREST_TYPE_AER != this._interestType ) {\n                this.markNotAligned() ;\n                this._interestType = Loan.INTEREST_TYPE_AER ;\n            }\n        };\n\n        this.setInterestTypeToSimple = function() {\n            if( Loan.INTEREST_TYPE_SIMPLE != this._interestType ) {\n                this.markNotAligned() ;\n                this._interestType = Loan.INTEREST_TYPE_SIMPLE ;\n            }\n        };\n        // End Setter methods\n\n        // Begin Getter methods\n        this.getLoanType = function( ) {\n            return( this._loanType ) ;\n        };\n\n        this.getLoanId = function( ) {\n            return( this._loanId ) ;\n        };\n\n        this.getNumOfPayments = function( ) {\n            align(); \n            return( this._numOfPayments ) ; \n        };\n\n        this.getOrientation = function( ) {\n            return( this._orientation ) ; \n        };\n\n        this.getOrientationAsLabel = function() {\n            return( Loan.modeToLabel( this._orientation ) ) ;\n        };\n\n        this.getTerm = function( ) {\n            align(); \n            return( this._term ) ;\n        };\n\n        this.getRate = function( ) {\n            return( this._rate ) ; \n        };\n\n        this.getTotalFees = function( ) {\n            align(); \n            return( Loan.roundAndTruncate( this._initialFee, 2 ) + Loan.roundAndTruncate( this._totalAnnualFees, 2 ) ) ;\n        };\n\n        this.getTotalAnnualFees = function( ) {\n            align(); \n            return( Loan.roundAndTruncate( this._totalAnnualFees, 2 ) ) ;\n        };\n\n        this.getTotalPrincipal = function( ) {\n            align(); \n            return( Loan.roundAndTruncate( this._totalPrincipal, 2 ) ) ;\n        };\n\n        this.getTotalInterest = function( ) {\n            align(); \n            //return( Loan.roundAndTruncate( this._totalInterest, 2 ) ) ;\n            return( Loan.roundAndTruncate( this._totalPayments - this._totalPrincipal, 2 ) ) ;\n        };\n\n        this.getTotalPayments = function( ) {\n            align(); \n            return( Loan.roundAndTruncate( this._totalPayments, 2 ) ) ;\n        };\n\n        this.getTotalCost = function( ) {\n            align(); \n            return( Loan.roundAndTruncate( this.getTotalFees() + this.getTotalInterest() + this.getTotalPrincipal(), 2 ) ) ;\n        };\n\n        this.getDaysOfUpFrontInterest = function( ) {\n            return( this._daysOfUpFrontInterest ) ;\n        };\n\n        this.getRemainingPrincipal = function( p ) {\n            align() ;\n            var d = ( ( p > -1 ) && ( p < this._remainingPrincipal.length ) ) ? this._remainingPrincipal[p] : 0.0 ;\n            return( d ) ;\n        };\n\n        this.getRemainingInterest = function( p ) {\n            align() ;\n            var d = ( ( p > -1 ) && ( p < this._remainingInterest.length ) ) ? this._remainingInterest[p] : 0.0 ;\n            return( d ) ;\n        };\n\n        this.getAppliedPrincipal = function( p ) {\n            align() ;\n            var d = ( ( p > -1 ) && ( p < this._appliedPrincipal.length ) ) ? this._appliedPrincipal[p] : 0.0 ;\n        };\n\n        this.getAppliedInterest = function( p ) {\n            align() ;\n            var d = ( ( p > -1 ) && ( p < this._appliedInterest.length ) ) ? this._appliedInterest[p] : 0.0 ;\n            return( d ) ;\n        };\n\n        this.getPayment = function( p ) {\n            align() ;\n            var d = ( ( p > -1 ) && ( p < this._payment.length ) ) ? this._payment[p] : 0.0 ;\n            return( d ) ;\n        };\n\n        this.getYear = function( p ) {  // year index\n            return( ( this._frequency != 0 ) ? Math.floor( p / this._frequency ) : 0 ) ;\n        };\n\n        this.getBalance = function( p ) {\n            return( this.getRemainingPrincipal( p ) + this.getRemainingInterest( p ) ) ;\n        };\n\n        this.getLoanAmount = function() {\n            align(); \n            return( this._originatingLoanAmount ) ;\n        };\n\n        this.getFunctionalLoanAmount = function() {\n            align(); \n            return( this._functionalLoanAmount ) ;\n        };\n\n        this.getSpecifiedPayment = function() {\n            align(); \n            return( this._specifiedPayment ) ;\n        };\n\n        this.getInitialFee = function() {\n            return( this._initialFee ) ;\n        };\n\n        this.getAnnualFee = function() {\n            return( this._annualFee ) ;\n        };\n\n        this.getFrequency = function() {\n            return( this._frequency ) ;\n        };\n\n        this.getFrequencyAsLabel = function() {\n            return( Loan.modeToLabel( this._frequency ) ) ;\n        };\n\n        this.getInterestType = function() {\n            return( this._interestType ) ;\n        };\n        // End Getter methods\n\n        // Begin dirty check\n        this.aligned = function() {\n            return( this.__ALIGNED ) ; \n        };\n\n        this.notAligned = function() {\n            return( !this.__ALIGNED ) ; \n        };\n\n        this.markNotAligned = function() {\n            this.__ALIGNED = false ; \n        };\n\n        this.markAligned = function() {\n            this.__ALIGNED = true ; \n        };\n\n        this.setSolveType = function( n ) {\n            that._solveType = n ;\n        };\n        // End dirty check\n\n        // Other methods\n        function align() {\n            if( that.notAligned() ) {\n                var modalRate = Loan._getModalRate( that._frequency, that._rate, that._interestType ) ;\n                var dailyRate = Loan._getModalRate( Loan.ORIENTATION_DAYLY, that._rate, Loan.INTEREST_TYPE_AER ) ;\n\n                // modify for up front interest\n                that._functionalLoanAmount = that._originatingLoanAmount + Loan.roundAndTruncate( that._originatingLoanAmount * ( Math.pow( ( 1.0 + dailyRate ), that._daysOfUpFrontInterest ) - 1.0 ), 2 ) ;\n\n                switch( that._solveType ) {\n                    case Loan.LOANSOLVEFOR_TERM :\n                        that._numOfPayments = Loan.roundAndTruncate( Loan.term( that._specifiedPayment, modalRate, that._functionalLoanAmount ), 0 ) ;\n                        if( isNaN( that._numOfPayments ) ) {\n                            that._numOfPayments = that._frequency * 50 ;  // place holder number of years when specified payment is zero\n                            //that._specifiedPayment = 0 ;\n                        }\n                        that._term = Loan.duration( that._numOfPayments, that._orientation, that._frequency ) ;\n\n                        that._payment = new Array(that._numOfPayments) ;\n                        for( var n = 0 ; n < that._numOfPayments ; n++ ) { that._payment[n] = that._specifiedPayment ; }\n\n                        break ;\n                    case Loan.LOANSOLVEFOR_PAYMENT :\n                        that._numOfPayments = Loan.numOfPayments( that._term, that._orientation, that._frequency ) ;\n                        var temp = Loan.payment( that._functionalLoanAmount, modalRate, that._numOfPayments ) ;\n\n                        // n.b. for matching pweb...\n                        that._specifiedPayment = Loan.specialRoundAndTruncate( temp, 2 ) ;\n\n                        that._payment = new Array(that._numOfPayments) ;\n                        for( var n = 0 ; n < that._numOfPayments ; n++ ) { that._payment[n] = that._specifiedPayment ; }\n\n                        break ;\n                    case Loan.LOANSOLVEFOR_AMOUNT :\n                        that._numOfPayments = Loan.numOfPayments( that._term, that._orientation, that._frequency ) ;\n                        that._functionalLoanAmount = Loan.roundAndTruncate( Loan.loanAmount( that._specifiedPayment, modalRate, that._numOfPayments ), 2 ) ;\n\n                        // modify for up front interest\n                        that._originatingLoanAmount = Loan.roundAndTruncate( that._functionalLoanAmount * ( Math.pow( ( 1.0 / ( 1.0 + dailyRate ) ), that._daysOfUpFrontInterest ) ), 2 ) ;\n\n                        that._payment = new Array(that._numOfPayments) ;\n                        for( var n = 0 ; n < that._numOfPayments ; n++ ) { that._payment[n] = that._specifiedPayment ; }\n\n                        break ;\n                    case Loan.LOANSOLVEFOR_NONE :\n                        break ;\n                }\n\n                that._remainingPrincipal = new Array(that._numOfPayments) ;\n                that._remainingInterest = new Array(that._numOfPayments) ;\n\n                that._appliedPrincipal = new Array(that._numOfPayments) ;\n                that._appliedInterest = new Array(that._numOfPayments) ;\n\n                that._totalPrincipal = 0.0 ;\n                that._totalPayments = 0.0 ;\n                that._totalInterest = 0.0 ;\n                that._totalAnnualFees = 0.0 ;\n\n                var tPrincipal = 0. ;\n                var tInterest = 0. ;\n                var tPayment = 0. ;\n\n                for( var n = 0 ; n < that._numOfPayments ; n++ ) {\n                    //\n                    tPrincipal = ( n == 0 ) ? that._functionalLoanAmount : that._remainingPrincipal[n - 1] ;\n                    tInterest = ( n == 0 ) ? 0. : that._remainingInterest[n - 1] ;\n                    tPayment = that._payment[n] ;\n\n                    // establish interest\n                    tInterest += ( ( tInterest + tPrincipal ) * modalRate ) ; // n.b.\n\n                    if( tInterest > tPayment ) {\n                        that._appliedInterest[n] = tPayment ;\n                        that._appliedPrincipal[n] = 0. ;\n                        that._remainingInterest[n] = ( tInterest - tPayment ) ;\n                        that._remainingPrincipal[n] = tPrincipal ;\n                    }\n                    else {\n                        tPrincipal -= ( tPayment - tInterest ) ;\n                        that._appliedInterest[n] = tInterest ;\n                        that._remainingInterest[n] = 0. ;\n                        if( tPrincipal < 0. ) {\n                            that._appliedPrincipal[n] = ( tPayment - tInterest ) + tPrincipal ;\n                            that._appliedInterest[n] += tPrincipal ;\n                            that._remainingPrincipal[n] = 0. ;\n                        }\n                        else {\n                            that._appliedPrincipal[n] = ( tPayment - tInterest ) ;\n                            that._remainingPrincipal[n] = tPrincipal ;\n                            if( n == ( that._numOfPayments - 1 ) ) {\n                                that._appliedPrincipal[n] += that._remainingPrincipal[n] ;\n                                that._remainingPrincipal[n] = 0. ;\n                            }\n                        }\n                    }\n\n                    that._totalPrincipal += that._appliedPrincipal[n] ;\n                    that._totalPayments += that._payment[n] ;\n                    that._totalInterest += that._appliedInterest[n] ;\n                    that._totalAnnualFees += ( ( ( n % that._frequency ) == 0 ) && ( n > 0 ) ) ? that._annualFee : 0. ;\n                }\n\n                that.markAligned() ;\n            }\n        };\n    };\n\n        Loan.payment = function( amount, rate, duration ) {\n            return( amount * ( rate / ( 1.0 - Math.pow( ( 1.0 + rate ), ( duration * -1. ) ) ) ) ) ;\n            //equivalent  return( amount * ( rate / ( 1.0 - ( 1.0 / Math.pow ( 1.0 + rate, duration ) ) ) ) ) ;\n        };\n\n        Loan.loanAmount = function( payment, rate, duration ) {\n            return( payment * ( ( 1.0 - Math.pow( ( 1.0 + rate ), ( duration * -1. ) ) ) / ( rate ) ) ) ;\n            //NOT equivalent!!  return( payment / rate / ( 1.0 - ( 1.0 / Math.pow( 1.0 + rate, duration ) ) ) ) ;\n        };\n\n        Loan.term = function( payment, rate, amount ) {\n            return( - Math.log( ( 1.0 - ( ( amount * rate ) / payment ) ) ) / Math.log( 1.0 + rate ) ) ;\n        };\n\n        // calculate number of payments to term (duration) of orientation (base) given pay period frequency (frequency)\n        Loan.numOfPayments = function( duration, base, frequency ) {\n            return( ( base > 0 ) ? ( Loan.roundAndTruncate( ( ( duration * frequency ) / base ), 0 ) ) : 0 ) ;\n            //return( ( base > 0 ) ? ( Math.ceil( ( ( duration * frequency ) / base ) ) ) : 0 ) ;\n        };\n\n        // calculate term or loan duration according to orientation (base) given the number of payments (numOf) of pay period frequency (frequency)\n        Loan.duration = function( numOf, base, frequency ) {\n            return( ( frequency > 0 ) ? ( Loan.roundAndTruncate( ( ( numOf * base ) / frequency ), 0 ) ) : 0 ) ;\n            //return( ( frequency > 0 ) ? ( Math.ceil( ( ( numOf * base ) / frequency ) ) ) : 0 ) ;\n        };\n\n        Loan.getModalRate = function( modalPeriods, rateOfReturn ) {\n            return( Loan._getModalRate( modalPeriods, rateOfReturn, 0 ) ) ;\n        };\n\n        Loan._getModalRate = function( modalPeriods, rateOfReturn, type ) {\n            var retValue = 0. ;\n\n            if( modalPeriods > 0. ) {\n                switch( type ) {\n                    case Loan.INTEREST_TYPE_AER :\n                        retValue = ( Math.pow( ( 1.0 + rateOfReturn ), ( 1.0 / modalPeriods ) ) - 1.0 ) ;   // annual effective rate\n                        break ;\n                    case Loan.INTEREST_TYPE_SIMPLE :\n                    default :\n                        retValue = ( rateOfReturn / modalPeriods ) ;    // generic method  (Melissa's)\n                        break ;\n                }\n            }\n            return( retValue ) ;\n        };\n\n        Loan.getPaymentFrequencyInDays = function( payFrequency ) {\n            var retValue = 30 ;\n\n            switch( payFrequency ) {\n                case Loan.ORIENTATION_QUARTERLY :\n                    retValue = 90 ;\n                    break ;\n                default :\n                    retValue = Math.floor( Loan.ORIENTATION_DAYLY / payFrequency ) ;\n                    break ;\n            }\n            return( retValue ) ;\n        };\n\n        Loan.roundAndTruncate = function( number, decimals ) {\n            // round and truncate\n            var interim = 0.0;\n            var decimalFactor = Math.pow(10.0, decimals);\n\n            // round\n            number += (0.500000001 / decimalFactor);\n\n            // truncate\n            number *= decimalFactor;\n            interim = Math.floor(number);\n            return( interim / decimalFactor ) ;\n        };\n\n        Loan.round = function( number, decimals ) {\n            // rounding only\n            if( decimals < 0 ) {\n                decimals = 0 ;\n            }\n\n            return(number + (0.500000001 / Math.pow(10.0, decimals)));\n        };\n\n        Loan.truncate = function(number, decimals) {\n            var interim = 0.0;\n            var decimalFactor = Math.pow(10.0, decimals);\n\n            // truncate\n            number *= decimalFactor;\n            interim = Math.floor(number);\n            return( interim / decimalFactor);\n        };\n\n\n        Loan.specialRoundAndTruncate = function( number, decimals ) {\n            var ret = 0.0 ;\n            var decimalFactor = Math.pow( 10.0, decimals ) ;\n            number *= decimalFactor ;\n            var high = Math.ceil( number ) ;\n            var low = Math.floor( number ) ;\n            if( ( number - low ) > 0.499 ) {    // adjust this to target pweb rounding\n                ret = ( high / decimalFactor ) ;\n            }\n            else {\n                ret = ( low / decimalFactor ) ;\n            }\n            return( ret ) ;\n        };\n\n\n        Loan.modeToLabel = function( mode ) {\n            var ret = \"\" + mode ;\n\n            switch( mode ) {\n            case Loan.ORIENTATION_MONTHLY     :\n                ret = \"Monthly\" ;\n                break ;\n            case Loan.ORIENTATION_YEARLY      :\n                ret = \"Yearly\" ;\n                break ;\n            case Loan.ORIENTATION_WEEKLY      :\n                ret = \"Weekly\" ;\n                break ;\n            case Loan.ORIENTATION_DAYLY       :\n                ret = \"Dayly\" ;\n                break ;\n            case Loan.ORIENTATION_QUARTERLY   :\n                ret = \"Quarterly\" ;\n                break ;\n            case Loan.ORIENTATION_FORTNIGHTLY :\n                ret = \"Bi-Weekly\" ;\n                //ret = \"Fortnightly\" ;\n                break ;\n            case Loan.ORIENTATION_BIFORTNIGHTLY :\n                ret = \"Bi-Fortnightly\" ;\n                break ;\n            case Loan.ORIENTATION_HALFMONTHLY   :\n                ret = \"Semi-Monthly\" ;\n                break ;\n            case Loan.ORIENTATION_BIMONTHLY   :\n                ret = \"Bi-Monthly\" ;\n                break ;\n            case Loan.ORIENTATION_SEMIANNUALLY :\n                ret = \"Semi-Annually\" ;\n                break ;\n            default :\n                ret = \"\" + mode + \" times per year\" ;\n                break ;\n            }\n            return( ret ) ;\n        };\n\n        Loan.labelToMode = function( s ) {\n            var ret = Loan.ORIENTATION_MONTHLY ;\n            s = s.toUpperCase().trim() ;\n            var isBI = ( s.indexOf( \"BI\" ) > -1 ) || ( s.indexOf( \"HALF\" ) > -1 ) || ( s.indexOf( \"SEMI\" ) > -1 ) || ( s.indexOf( \"TWICE\" ) > -1 ) ;\n\n            if( s.indexOf( \"MONTH\" ) > -1 ) {\n                ret = ( isBI ) ? Loan.ORIENTATION_HALFMONTHLY : Loan.ORIENTATION_MONTHLY  ;\n                ret = ( s.indexOf( \"BI\" ) > -1 ) ? Loan.ORIENTATION_BIMONTHLY : ret  ;\n            }\n            else {\n                if( s.indexOf( \"WEEK\" ) > -1 ) {\n                    ret = ( isBI ) ? Loan.ORIENTATION_FORTNIGHTLY : Loan.ORIENTATION_WEEKLY  ;\n                }\n                else {\n                    if( ( s.indexOf( \"YEAR\" ) > -1 ) || ( s.indexOf( \"ANNUAL\" ) > -1 ) ) {\n                        ret = ( isBI ) ? Loan.ORIENTATION_SEMIANNUALLY : Loan.ORIENTATION_YEARLY  ;\n                    }\n                    else {\n                        if( s.indexOf( \"FORT\" ) > -1 ) {\n                            ret = ( isBI ) ? Loan.ORIENTATION_BIFORTNIGHTLY : Loan.ORIENTATION_FORTNIGHTLY  ;\n                        }\n                        else {\n                            if( s.indexOf( \"QUART\" ) > -1 ) {\n                                ret = Loan.ORIENTATION_QUARTERLY  ;\n                            }\n                            else {\n                                if( s.indexOf( \"DAY\" ) > -1 ) {\n                                    ret = Loan.ORIENTATION_DAYLY  ;\n                                }\n                                else {\n                                    try {\n                                        ret = Integer.parseInt( s.substring( 0, 2 ) ) ;\n                                    }\n                                    catch( e ) {\n                                        ret = Loan.ORIENTATION_MONTHLY ;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            return( ret ) ;\n        };\n\n    //};\n\n\n    Loan.ORIENTATION_MONTHLY     = 12 ;\n    Loan.ORIENTATION_YEARLY      = 1 ;\n    Loan.ORIENTATION_WEEKLY      = 52 ;\n    Loan.ORIENTATION_DAYLY       = 365 ;\n    Loan.ORIENTATION_QUARTERLY   = 4 ;\n    Loan.ORIENTATION_FORTNIGHTLY = 26 ;\n    Loan.ORIENTATION_BIFORTNIGHTLY = 13 ;\n    Loan.ORIENTATION_BIMONTHLY   = 6 ;\n    Loan.ORIENTATION_HALFMONTHLY = 24 ;\n    Loan.ORIENTATION_SEMIANNURALLY = 1 ;\n\n    // \"solve for\" flag\n    Loan.LOANSOLVEFOR_NONE       = 0 ;\n    Loan.LOANSOLVEFOR_TERM       = 1 ;\n    Loan.LOANSOLVEFOR_PAYMENT    = 2 ;\n    Loan.LOANSOLVEFOR_AMOUNT     = 3 ;\n\n    Loan.INTEREST_TYPE_SIMPLE    = 0 ;\n    Loan.INTEREST_TYPE_AER       = 1 ;\n\n    Loan.LOANTYPE_GENERAL        = 0 ;\n    Loan.LOANTYPE_RESIDENTIAL    = 1 ;\n\n    return Loan;\n});\n","\ndefine(['./Loan','../AccountTypes'], function(Loan, AccountTypes) {\n\n    var LoanUtil = {};\n\n    LoanUtil.CONSTANTS = {};\n    LoanUtil.CONSTANTS.ORIENTATION_MONTHLY     \t\t= Loan.ORIENTATION_MONTHLY ;\n    LoanUtil.CONSTANTS.ORIENTATION_YEARLY      \t\t= Loan.ORIENTATION_YEARLY ;\n    LoanUtil.CONSTANTS.ORIENTATION_WEEKLY      \t\t= Loan.ORIENTATION_WEEKLY ;\n    LoanUtil.CONSTANTS.ORIENTATION_DAYLY       \t\t= Loan.ORIENTATION_DAYLY ;\n    LoanUtil.CONSTANTS.ORIENTATION_QUARTERLY   \t\t= Loan.ORIENTATION_QUARTERLY ;\n    LoanUtil.CONSTANTS.ORIENTATION_FORTNIGHTLY \t\t= Loan.ORIENTATION_FORTNIGHTLY ;\n    LoanUtil.CONSTANTS.ORIENTATION_BIFORTNIGHTLY \t= Loan.ORIENTATION_BIFORTNIGHTLY ;\n    LoanUtil.CONSTANTS.ORIENTATION_BIMONTHLY   \t\t= Loan.ORIENTATION_BIMONTHLY ;\n    LoanUtil.CONSTANTS.ORIENTATION_HALFMONTHLY \t\t= Loan.ORIENTATION_HALFMONTHLY ;\n    LoanUtil.CONSTANTS.ORIENTATION_SEMIANNURALLY \t= Loan.ORIENTATION_SEMIANNURALLY ;\n\n    // \"solve for\" flag\n    LoanUtil.CONSTANTS.LOANSOLVEFOR_NONE       = Loan.LOANSOLVEFOR_NONE ;\n    LoanUtil.CONSTANTS.LOANSOLVEFOR_TERM       = Loan.LOANSOLVEFOR_TERM ;\n    LoanUtil.CONSTANTS.LOANSOLVEFOR_PAYMENT    = Loan.LOANSOLVEFOR_PAYMENT ;\n    LoanUtil.CONSTANTS.LOANSOLVEFOR_AMOUNT     = Loan.LOANSOLVEFOR_AMOUNT ;\n\n    LoanUtil.CONSTANTS.INTEREST_TYPE_SIMPLE    = Loan.INTEREST_TYPE_SIMPLE ;\n    LoanUtil.CONSTANTS.INTEREST_TYPE_AER       = Loan.INTEREST_TYPE_AER ;\n\n    LoanUtil.CONSTANTS.LOANTYPE_GENERAL        = Loan.LOANTYPE_GENERAL ;\n    LoanUtil.CONSTANTS.LOANTYPE_RESIDENTIAL    = Loan.LOANTYPE_RESIDENTIAL ;\n\n    // account types effected by loan\n    LoanUtil.LoanRepaymentImpactTypes = [\n        AccountTypes.TYPE_AGGREGATE_BALANCE\n      , AccountTypes.TYPE_PRETAX\n      , AccountTypes.TYPE_ROTH\n      , AccountTypes.TYPE_SUPPL_PRETAX\n      , AccountTypes.TYPE_SUPPL_ROTH\n      , AccountTypes.TYPE_PRETAX_AGECATCHUP\n      , AccountTypes.TYPE_ROTH_AGECATCHUP\n      , AccountTypes.TYPE_AFTERTAX\n      , AccountTypes.TYPE_SUPPL_AFTERTAX\n    ] ;\n\n    // account types effected by loan\n    LoanUtil.LoanRepaymentImpactTypesLessAggregateType = [\n        AccountTypes.TYPE_PRETAX\n      , AccountTypes.TYPE_ROTH\n      , AccountTypes.TYPE_SUPPL_PRETAX\n      , AccountTypes.TYPE_SUPPL_ROTH\n      , AccountTypes.TYPE_PRETAX_AGECATCHUP\n      , AccountTypes.TYPE_ROTH_AGECATCHUP\n      , AccountTypes.TYPE_AFTERTAX\n      , AccountTypes.TYPE_SUPPL_AFTERTAX\n    ] ;\n\n    // roth account types \n    LoanUtil.RothTypes = [\n        AccountTypes.TYPE_ROTH\n      , AccountTypes.TYPE_SUPPL_ROTH\n      , AccountTypes.TYPE_ROTH_AGECATCHUP\n    ] ;\n\n    /*\n     *  Calculate the loan repayment amount for the given params:\n     *    loanAmount -> 50000.00\n     *    rate -> 0.045\n     *    term -> 48 (4 Years / 48 months)\n     *    termOrientation -> 12 (in Months.  i.e., 48 months)\n     *    paymentOrientation -> 52 (in Weeks.  Calculate the loan repayment in Weeks)\n     */\n    LoanUtil.getLoanPayment = function (loanAmount, rate, term, termOrientation, paymentOrientation) {\n      if (termOrientation === undefined) {\n        termOrientation = Loan.ORIENTATION_MONTHLY;\n      }\n\n      if (paymentOrientation === undefined) {\n        paymentOrientation = Loan.ORIENTATION_MONTHLY;\n      }\n\n      return Loan.payment( loanAmount, Loan.getModalRate( paymentOrientation, rate ), Loan.numOfPayments( term, termOrientation, paymentOrientation ) ); \n    };\n\n    return LoanUtil;\n});\n","define([], function(){\n\n    var CalcUtilities = {};\n\n    CalcUtilities.getStaticPayout = function(dCV, dRate, dPayPeriods, dYearsPO)\n    {\n        if( dRate === 0.0 ){\n            return( dCV / ( dYearsPO * dPayPeriods ) ) ;\n        }\n        return( dCV / ( ( 1.0 - Math.pow( ( 1.0 + dRate ), - dYearsPO ) ) / ( 1.0 - Math.pow( ( 1.0 / ( 1.0 + dRate ) ), ( 1.0 / dPayPeriods ) ) ) ) ) ;\n    };\n\n    CalcUtilities.getAfterTaxRateOfReturn = function(dRateOfReturn, dTaxRate)\n    {\n        return( dRateOfReturn * ( 1.0 - dTaxRate ) ) ;\n    };\n\n    CalcUtilities.compoundingRate = function(dYearsOfAccum, dAnnualRate)\n    {\n        return( Math.pow( ( 1.0 + dAnnualRate ), dYearsOfAccum ) ) ;\n    };\n\n    CalcUtilities.discountingRate = function(dYears, dAnnualRate)\n    {\n        return( Math.pow( ( 1.0 / ( 1.0 + dAnnualRate ) ), dYears ) ) ;\n    };\n\n    CalcUtilities.convertMthlyRate = function(dModalPeriods, dRatePerModalPeriod)\n    {\n        // purpose: returns rate of return for period\n        // example: convertMthlyRate( 365.0, 0.00000085 )\n        //          equals the annual effective rate of a daily rate of 0.000085% percent\n        //\n        //\n        return( Math.pow( ( 1.0 + dRatePerModalPeriod ), dModalPeriods ) - 1.0 ) ;\n    };\n\n    CalcUtilities.getPeriodicRate = function(dModalPeriods, dRateOfReturn)\n    {\n        // purpose: returns periodic rate of return\n        // example: 100.00 x getPeriodicRate( 12.0, 0.085 )\n        //          equals the monthly return on $100 invested at an annual effective\n        //          rate of 8 1/2 percent % (i.e., $0.68)\n        //\n        //\n        //return( ( dModalPeriods > 0.0 ) ? ( dRateOfReturn / dModalPeriods ) : 0.0 ) ;\n        return( ( dModalPeriods > 0.0 ) ? ( Math.pow( ( 1.0 + dRateOfReturn ), ( 1.0 / dModalPeriods ) ) - 1.0 ) : 0.0 ) ;\n    };\n\n    CalcUtilities.roundAndTruncate = function(dNumber, iDecimals)\n    {\n        // round and truncate\n        var dInterim = 0.0 ;\n        var dDecimalFactor = Math.pow( 10.0, /*(double)*/iDecimals ) ;\n        // round\n        dNumber += ( 0.500000001 / dDecimalFactor ) ;\n\n        // truncate\n        dNumber *= dDecimalFactor ;\n        dInterim = Math.floor( dNumber ) ;\n        return( dInterim / dDecimalFactor ) ;\n    };\n\n    CalcUtilities.round = function(dNumber, iDecimals )\n    {\n        // rounding only\n        if( iDecimals < 0 )\n            iDecimals = 0 ;\n\n        return( dNumber + ( 0.500000001 / Math.pow( 10.0, /*(double)*/iDecimals ) ) ) ;\n    };\n\n    CalcUtilities.truncate = function( dNumber, iDecimals )\n    {\n        var dInterim = 0.0 ;\n        var dDecimalFactor = Math.pow( 10.0, /*(double)*/iDecimals ) ;\n\n        // truncate\n        dNumber *= dDecimalFactor ;\n        dInterim = Math.floor( dNumber ) ;\n        return( dInterim / dDecimalFactor ) ;\n\n    };\n\n    CalcUtilities.roundToNearest = function( dTargetIncrement, dNumber )\n    {\n        var dCeiling = dNumber - ( dNumber % dTargetIncrement ) ;\n        var dFloor = 0 ;\n\n        while( dCeiling < dNumber )\n        {\n            dFloor = dCeiling ;\n            dCeiling += dTargetIncrement ;\n        }\n\n        return( ( Math.abs( dNumber - dFloor ) < Math.abs( dNumber - dCeiling ) ) ? dFloor : dCeiling ) ;\n    };\n\n    // index is zero-based\n    CalcUtilities.isActiveMode = function( aggregateModes, granularModes, index )\n    {\n        return( ( ( index + 1 ) % ( aggregateModes / granularModes ) ) === 0 ) ;\n    };\n\n    // index is zero-based\n    // translate to mode for account\n    CalcUtilities.translateMode = function( aggregateMode, granularMode, index )\n    {\n        var r = -1 ; // inactive mode\n        // equivalent of isActiveMode()\n        if( ( ( index + 1 ) % ( aggregateMode / granularMode ) ) === 0 ) {\n            r = /*(int)*/( ( index + 1 ) / ( aggregateMode / granularMode ) ) - 1 ;\n        }\n        return( r ) ;\n    };\n\n    CalcUtilities.getAggregateModes = function( one, other )\n    {\n        var lower = Math.min( one, other ) ;\n        var higher = Math.max( one, other ) ;\n        var n = 1 ;\n        while( ( ( lower * n ) % higher !== 0 ) && ( n < higher ) ) n++ ;\n\n        return( Math.max( ( lower * n ), higher ) ) ;  // additional check\n    };\n\n    CalcUtilities.getModesPerFractionalPeriod = function( fraction, modes ) {\n        return( Math.floor( modes * fraction ) ) ;\n    };\n\n    CalcUtilities.getSerialIndexFromPeriodAndMode = function( period, mode, modesPer ) {\n        return( ( period * modesPer ) + mode ) ;\n    };\n\n    return CalcUtilities;\n});","\ndefine([], function(){\n\n    var DateUtilities = {};\n\n    DateUtilities.getAgePrecise = function( dob, ref )\n    {\n        var today = ( ref === null  || ref === undefined) ? new Date() : ref ;\n        var age = this.getDateDiffInYears( today, Date.parse(dob) ) ;\n\n        return( age ) ;\n    };\n\n    DateUtilities.getDateDiffInYears = function( f, s )\n    {\n        var first = new Date(f);\n        /*\n        We are struggling here with IE8. The date can't be converted from a string and the\n        'getDateFromStirng' method does not work in IE8. Custom solution is in 'parse' polyfill.\n         */\n        var second = new Date(s);\n\n        var earlier = new Date();\n        var later = new Date();\n\n        // assure positive difference\n        if( first.getTime() < second.getTime() ) {\n            earlier.setTime( first ) ;\n            later.setTime( second ) ;\n        }\n        else {  // reverse\n            earlier.setTime( second ) ;\n            later.setTime( first ) ;\n        }\n\n        var dif  =  later.getFullYear() - earlier.getFullYear();\n            dif += (later.getMonth() - earlier.getMonth()) / 12;\n            dif += (later.getDate() - earlier.getDate()) / 361;\n            dif += 0.001;\n\n        // from George Mazaitis\n        return (Math.floor(dif)) ;\n    };\n\n    //  Return Today's date in YYYYMMDD format\n    DateUtilities.today = function( ){\n        var today = new Date();\n        var yyyy = today.getFullYear().toString();\n        var mm = today.getMonth() + 1 ;\n            mm = mm < 10 ? \"0\" + mm : mm;\n        var dd = today.getDate() < 10 ? \"0\" + today.getDate().toString() : today.getDate().toString();\n        return( yyyy + mm + dd ) ;\n    };\n\n    // current year string YYYY\n    DateUtilities.getCurrentYearString = function() {\n        var d = new Date().getFullYear().toString() ;\n        return d;\n    };\n\n    DateUtilities.getCurrentYearInteger = function() {\n        var d = new Date().getFullYear();\n        return d;\n    };\n\n    DateUtilities.getYearString = function( d ) {\n        var dd = ( typeof( d ) === \"string\" ) ? new Date( d ) : d ;\n        return( dd.getFullYear().toString() ) ;\n    } ;\n\n    DateUtilities.getYearInteger = function( d ) {\n        var dd = ( typeof( d ) === \"string\" ) ? new Date( d ) : d ;\n        return( dd.getFullYear() ) ;\n    } ;\n\n\n    // return Date object from string formated as \"YYYY-MM-DDT00:00:00\"\n    DateUtilities.getDateFromString = function(dateString,includeTime){\n        var date;\n        var _dateString;\n        var _datePieces;\n        var _tIndex = dateString.indexOf(\"T\");\n        if(_tIndex > -1){\n            _dateString = dateString.substr(0,_tIndex);\n            _datePieces = _dateString.split(\"-\");\n            if(!includeTime)\n            {\n                date = new Date(_datePieces[0], _datePieces[1]-1, _datePieces[2]);\n            }\n            else\n            {\n                var _timeString = dateString.substr(_tIndex+1);\n                var _timePieces = _timeString.split(\":\");\n                date = new Date(_datePieces[0], _datePieces[1]-1, _datePieces[2],\n                                _timePieces[0],_timePieces[1],_timePieces[2]);\n            }\n        }else{\n            date = new Date(dateString);\n        }\n        return date;\n    };\n\n    // return The time (as a string) from string formated as \"YYYY-MM-DDT00:00:00\"\n    DateUtilities.getTimeFromString = function(dateString){\n        var _timeString = undefined;\n        var _timePieces;\n        var _period = \"AM\";\n        var _tIndex = dateString.indexOf(\"T\");\n        if(_tIndex > -1){\n            // First, get the Time part of the string\n            _timeString = dateString.substr(_tIndex+1);\n            _timePieces = _timeString.split(\":\");\n\n            // If HH is greater than 12, subtract 12 and flip to PM\n            if(_timePieces[0] >= 12){\n                 _period = \"PM\";\n                _timePieces[0] = _timePieces[0]-12;\n            }\n\n            //Make sure that the hour is shown as 12 not 0\n            if(_timePieces[0]===0)\n            {\n                _timePieces[0] = 12;\n            }\n\n            // truncate the 0 off the beginning if necessary\n            _timePieces[0] = parseInt(_timePieces[0], 10);\n\n            //    put them back together\n            _timeString = _timePieces.join(\":\") + \" \" + _period;\n        }\n        return _timeString;\n    };\n\n    // Return string in the format \"YYYY-MM-DDT00:00:00\" from valid Date Object\n    DateUtilities.getStringFromDate = function(dateObj){\n        return DateUtilities.getShortStringFromDate(dateObj)+\"T00:00:00\";\n    };\n\n    DateUtilities.formatDateTimeString = function(dateString)\n    {\n        var _tIndex = dateString.indexOf(\"T\");\n\n        _dateString = dateString.substr(0,_tIndex);\n        _datePieces = _dateString.split(\"-\");\n\n        var returnString = parseInt(_datePieces[1], 10) + \"/\" +\n                            parseInt(_datePieces[2], 10) + \"/\" +\n                             _datePieces[0].substr(2) + \" \";\n\n        return returnString + DateUtilities.getTimeFromString(dateString);\n    };\n\n    // Return string in the format \"YYYY-MM-DD\" from valid Date Object\n    // Also allows you to optionally define a separator character\n    DateUtilities.getShortStringFromDate = function(dateObj, separator){\n        var _separator = separator || \"-\";\n        var _mm = dateObj.getMonth()+1;\n        var _dd = dateObj.getDate();\n        var _yy = dateObj.getFullYear();\n        if(_mm < 10){\n            _mm = \"0\"+_mm;\n        }\n        if(_dd < 10){\n            _dd = \"0\"+_dd;\n        }\n        return _yy + _separator + _mm + _separator + _dd;\n    };\n\n    /**\n     * Returns the difference between date2 & date1 in number of days\n     * Ex: date2 - date1 = x Days\n     */\n    DateUtilities.getDateDiffInDays = function(date1, date2) {\n        //Get 1 day in milliseconds\n        var one_day = 1000 * 60 * 60 * 24 ;\n\n        // convert both dates to milliseconds\n        var date1_ms = date1.getTime() ;\n        var date2_ms = date2.getTime() ;\n\n        // calculate the difference in milliseconds\n        var difference_ms = date2_ms - date1_ms ;\n\n        // convert back to days and return\n        return( Math.round( difference_ms/one_day ) ) ;\n    };\n\n    /**\n     * Date.parse with progressive enhancement for ISO 8601 <https://github.com/csnover/js-iso8601>\n     * © 2011 Colin Snover <http://zetafleet.com>\n     * Released under MIT license.\n     */\n    (function (Date, undefined) {\n        var origParse = Date.parse, numericKeys = [ 1, 4, 5, 6, 7, 10, 11 ];\n        Date.parse = function (date) {\n            var timestamp, struct, minutesOffset = 0;\n\n            // ES5 §15.9.4.2 states that the string should attempt to be parsed as a Date Time String Format string\n            // before falling back to any implementation-specific date parsing, so that’s what we do, even if native\n            // implementations could be faster\n            //              1 YYYY                2 MM       3 DD           4 HH    5 mm       6 ss        7 msec        8 Z 9 ±    10 tzHH    11 tzmm\n            if ((struct = /^(\\d{4}|[+\\-]\\d{6})(?:-(\\d{2})(?:-(\\d{2}))?)?(?:T(\\d{2}):(\\d{2})(?::(\\d{2})(?:\\.(\\d{3}))?)?(?:(Z)|([+\\-])(\\d{2})(?::(\\d{2}))?)?)?$/.exec(date))) {\n                // avoid NaN timestamps caused by “undefined” values being passed to Date.UTC\n                for (var i = 0, k; (k = numericKeys[i]); ++i) {\n                    struct[k] = +struct[k] || 0;\n                }\n\n                // allow undefined days and months\n                struct[2] = (+struct[2] || 1) - 1;\n                struct[3] = +struct[3] || 1;\n\n                if (struct[8] !== 'Z' && struct[9] !== undefined) {\n                    minutesOffset = struct[10] * 60 + struct[11];\n\n                    if (struct[9] === '+') {\n                        minutesOffset = 0 - minutesOffset;\n                    }\n                }\n\n                timestamp = Date.UTC(struct[1], struct[2], struct[3], struct[4], struct[5] + minutesOffset, struct[6], struct[7]);\n            }\n            else {\n                timestamp = origParse ? origParse(date) : NaN;\n            }\n\n            return timestamp;\n        };\n    }(Date));\n\n    return DateUtilities;\n});\n","\ndefine(['../AccountAccum'],\nfunction(AccountAccum){\n\n    //  Constructor\n    var DoubleScratchPad = function(){\n\n        //  Private Variable Declarations -------------------------------------\n        var _ad = null ;\n        var _initialCapacity = 10 ;\n\n        //  Privileged Method Declarations ------------------------------------\n        this.setInitialCapacity = function( n ) { _initialCapacity = n ; };\n        this.getInitialCapacity = function( ) { return( _initialCapacity ) ; };\n\n        this.get = function( index ) {\n            var d = 0 ;\n            if( within( index ) ) {\n                d = _ad[index] ;\n            }\n            return( d ) ;\n        };\n\n\n        this.set = function( index, d ) {\n            if( !( within(index) ) ) create( index ) ;\n            _ad[index] = d ;\n        };\n\n        this.touch = function( index, d ) {\n            if( !( within(index) ) ) create( index ) ;\n            _ad[index] += d ;\n        };\n\n\n        this.zero = function( )\n        {\n            var count = getCount() ;\n            for( var n = 0 ; n < count ; n++ ) {\n                _ad[n] = 0 ;\n            }\n        };\n\n        this.close = function( ) { _ad = null ; };\n\n\n        //  Private Method Declarations ------------------------------------\n        function getCount() {\n            var n = 0 ;\n\n            if( _ad !== null )\n                n = _ad.length ;\n\n            return( n ) ;\n        }\n\n\n        function create( newIndex ) {\n            if( _ad === null ) {\n                _ad = [];\n                for (var i = 0; i < _initialCapacity; i++) {\n                    _ad[i] = 0;\n                }\n            }\n\n            if( _ad.length <= newIndex ) {\n                // create new array\n                var nad = [] ;    //\n                for( var n = 0 ; n < _ad.length ; n++ ) {\n                    nad[n] = _ad[n] ;\n                }\n                _ad = nad ;\n            }\n        }\n\n\n        function within( index ) {\n            return( ( index > -1 ) && ( index < getCount() ) ) ;\n        }\n\n    };\n\n    DoubleScratchPad.newInstance = function( )\n    {\n        return( new DoubleScratchPad() ) ;\n    };\n\n    return DoubleScratchPad;\n\n});\n\n","define(['../OMCalculatorRequest', '../OMCalculatorResponse', '../ObjFactory',\n        '../OMObjFactory','../OMErMatchData', '../OMStandardErMatchData',\n        '../AccountTypes', '../IncomeTypes', '../IRSConstants', '../IncomeData', './DateUtilities', '../ReplacementIncome'],\nfunction(OMCalculatorRequest, OMCalculatorResponse, ObjFactory, OMObjFactory, OMErMatchData,\n         OMStandardErMatchData, AccountTypes, IncomeTypes, IRSConstants, IncomeData, DateUtilities, ReplacementIncome){\n\n  var ResponseSerializer = function( ){};\n\n  ResponseSerializer.prototype.serialize = function(response){\n    var request;\n    var plans;\n    var paycheckNum;\n    // var acctInstance;\n    // var incomeInstance;\n    var sourceIndex = 0;\n    var appData;\n\n    appData = response.orangeData;\n    request = OMObjFactory.getOMCalculatorRequestInstance() ;\n    plans = appData.participantDefinedContributionAccounts;\n    // payFrequency = appData.participantData.payrollFrequency;\n    paycheckNum = plans[0].planInfo.payrollFrequency;\n\n    // stupid IE...\n    var ieDob = appData.participantData.dob;\n    var yyyy = ieDob.slice(0,4);\n    var mm = parseInt(ieDob.slice(5,7), 10) - 1;\n    var dd = ieDob.slice(8,10);\n\n\n    //  Get a CommonData instance\n        var cd = OMObjFactory.getOMCommonDataInstance() ;\n      //  Parse user's PersonalData into the CommonData instance...\n            cd.setReferenceDate(new Date()) ;\n            cd.setDateOfBirth(new Date(yyyy, mm, dd)) ;\n            cd.setAnnualSalary( appData.participantData.currentAnnualSalary ) ;\n            cd.setRateOfIncrease( appData.participantData.annualSalaryIncrementRate ) ;\n            cd.setRetireAge( appData.participantData.retirementAge ) ;\n            cd.setRateOfReturn( appData.participantData.investmentRateOfReturn ) ;\n            cd.setReplacementRatio( appData.participantData.incomeReplacementRatio ) ;\n            cd.setRateOfInflation( appData.participantData.inflationRate ) ;\n            cd.setSSIndicator( appData.participantData.includeSocialSecurity ) ;\n            cd.setSSBenefitAge( appData.participantData.retirementAge ) ;\n            cd.setRateOfRothBump(appData.participantData.rothBumpRate);\n            cd.setReplacementIncomeType( ReplacementIncome.getReplacementIncomeCalcType( appData.participantData.replacementIncomeCalcType ) ) ;\n      request.setCommonData( cd ) ;\n\n    //  Create AccountData object for the participant's Account Balance\n    if(appData.participantData.currentDcBalance){\n      var dcAcctInstance = OMObjFactory.getOMAccountDataInstance();\n        dcAcctInstance.setFrequency(paycheckNum);\n        dcAcctInstance.setType(AccountTypes.TYPE_AGGREGATE_BALANCE);\n        //dcAcctInstance.setIRC(IRSConstants._401k);  // no longer needed; want this to be inspecific for aggregate balance\n        dcAcctInstance.setBalance(appData.participantData.currentDcBalance);\n      request.getAccountDataList().push(dcAcctInstance);\n    }\n\n        //\tParse Pension data into CommonData instance\n\t\tif(appData.pension && appData.pension.enabled){\n\n\t\t\tif( appData.pension.monthlyPension && ( appData.pension.monthlyPension > 0 ) ) {\n\t\t\t\tvar pensionInstance = OMObjFactory.getOMIncomeDataInstance() ;\n\t\t\t\tpensionInstance.setType( IncomeTypes.PENSION ) ;\n\t\t\t\tpensionInstance.setMonthlyAmount( appData.pension.monthlyPension ) ;\n\t\t\t\trequest.getIncomeDataList().push( pensionInstance ) ;\n\t\t\t}\n\t\t\tif( appData.pension.annualPension && ( appData.pension.annualPension > 0 ) ) {\n\t\t\t\tvar pensionInstance = OMObjFactory.getOMIncomeDataInstance() ;\n\t\t\t\tpensionInstance.setType( IncomeTypes.PENSION ) ;\n\t\t\t\tpensionInstance.setAnnualAmount( appData.pension.annualPension ) ;\n\t\t\t\trequest.getIncomeDataList().push( pensionInstance ) ;\n\t\t\t}\n\t\t\tif( appData.pension.lumpSumPension && ( appData.pension.lumpSumPension > 0 ) ) {\n\t\t\t\tvar acctInstance = OMObjFactory.getOMAccountDataInstance() ;\n\t\t\t\tacctInstance.setFrequency(1) ;\n\t\t\t\tacctInstance.setType( AccountTypes.TYPE_PENSION_LUMP_SUM ) ;\n\t\t\t\tacctInstance.setBalance( appData.pension.lumpSumPension ) ;\n\t\t\t\trequest.getAccountDataList().push( acctInstance ) ;\n\t\t\t}\n\t\t\t//This is unique and unlike the other account type contributions: TYPE_DB_MANDATORY_EE does not accumulate; use is isolated\n      // to deferral and paycheck aspects.\n            if( appData.pension.dbMandatoryContrib && appData.pension.dbMandatoryContrib > 0.0 ) {\n                var acctInstance = OMObjFactory.getOMAccountDataInstance();\n                acctInstance.setType(AccountTypes.TYPE_DB_MANDATORY_EE);\n                acctInstance.setFrequency( paycheckNum ) ;\n                acctInstance.setContrib( AccountTypes.CONTRIB_RATE, appData.pension.dbMandatoryContrib ) ;\n                request.getAccountDataList().push( acctInstance ) ;\n            }\n\n        }\n\n        //  Parse OtherAssets into CommonData instances\n    if(appData.otherAssets.monthlyIncome && appData.otherAssets.monthlyIncome > 0){\n      var assetsInstance = OMObjFactory.getOMIncomeDataInstance() ;\n        assetsInstance.setType(IncomeTypes.OTHER) ;\n        assetsInstance.setMonthlyAmount( appData.otherAssets.monthlyIncome ) ;\n      request.getIncomeDataList().push( assetsInstance ) ;\n    }\n    //  Parse SS Benefits into an Income Data instance\n    // Always adding the Social to our Response, UI determins whether to display it\n    incomeInstance = OMObjFactory.getOMIncomeDataInstance() ;\n    incomeInstance.setType(IncomeTypes.SOCIALSECURITY) ;\n    incomeInstance.setMonthlyAmount(appData.ssBenefits[ Math.max( appData.participantData.retirementAge, 62 )]);\n    request.getIncomeDataList().push( incomeInstance ) ;\n\n\t\tif(appData.otherAssets.futureBalance && appData.otherAssets.futureBalance > 0){\n\t\t\tvar futureBalInstance = OMObjFactory.getOMAccountDataInstance() ;\n\t\t\t\tfutureBalInstance.setType(AccountTypes.TYPE_NOGROWTH) ;\n\t\t\t\tfutureBalInstance.setBalance( appData.otherAssets.futureBalance ) ;\n\t\t\trequest.getAccountDataList().push(futureBalInstance);\n\t\t}\n\t\tif(appData.otherAssets.cashBalance){\n\t\t\tif(appData.otherAssets.cashBalance.annualAdditions > 0 || appData.otherAssets.cashBalance.currentBalance > 0){\n\t\t\t\tvar cashBalInstance = OMObjFactory.getOMAccountDataInstance() ;\n\t\t\t\tcashBalInstance.setFrequency(1);\n\t\t\t\tcashBalInstance.setType(AccountTypes.TYPE_NOINCREASE) ;\n\t\t\t\tif(appData.otherAssets.cashBalance.currentBalance > 0){\n\t\t\t\t\tcashBalInstance.setBalance( appData.otherAssets.cashBalance.currentBalance ) ;\n\t\t\t\t}\n\t\t\t\tif(appData.otherAssets.cashBalance.annualAdditions > 0){\n\t\t\t\t\tcashBalInstance.setContrib(AccountTypes.CONTRIB_MODAL, appData.otherAssets.cashBalance.annualAdditions);\n\t\t\t\t}\n\t\t\t\trequest.getAccountDataList().push(cashBalInstance);\n\t\t\t}\n\t\t}\n\n\t\tif (appData.voyaOtherAccounts !== null && appData.voyaOtherAccounts !== undefined && appData.voyaOtherAccounts.length > 0) {\n\t\t\tvar balTotal = 0.0;\n\t\t\tvar mthTotal = 0.0;\n\t\t\tfor (var k=0; k<appData.voyaOtherAccounts.length; k++) {\n\t\t\t\tvar voa = appData.voyaOtherAccounts[k];\n\t\t\t\tif (voa.accountType === 'BAL' && voa.displayFlag === 'Y' && voa.accountBalance > 0.0) {\n\t\t\t\t\tbalTotal += voa.accountBalance;\n\t\t\t\t} else if (voa.accountType === 'MTH' && voa.displayFlag === 'Y' && voa.accountBalance > 0.0) {\n\t\t\t\t\tmthTotal += voa.accountBalance;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (balTotal > 0.0) {\n\t\t\t\tvar cashBalInstance2 = OMObjFactory.getOMAccountDataInstance();\n\t\t\t\tcashBalInstance2.setFrequency(1);\n\t\t\t\tcashBalInstance2.setType(AccountTypes.TYPE_NOINCREASE) ;\n\t\t\t\tcashBalInstance2.setBalance(balTotal);\n\t\t\t\trequest.getAccountDataList().push(cashBalInstance2);\n\t\t\t}\n\n\t\t\tif (mthTotal > 0.0) {\n\t\t\t\tvar assetsInstance2 = OMObjFactory.getOMIncomeDataInstance() ;\n\t\t\t\tassetsInstance2.setType(IncomeTypes.OTHER) ;\n\t\t\t\tassetsInstance2.setMonthlyAmount(mthTotal) ;\n\t\t\t\trequest.getIncomeDataList().push(assetsInstance2) ;\n\t\t\t}\n\t\t}\n\n        //\tLoop through pptDCAccount object\n\t\tfor(var i=0; i<plans.length; i++){\n\t\t\t//\t7.1) Setup vars\n\t\t\tvar plan = plans[i];\n\t\t\tvar sources = plans[i].planInfo.sources;\n\t\t\tvar planIndex = i;\n\t\t\tvar ermd = null;\n\t\t\tvar rContribType = plan.contributionData.regularContributionUnit;\n\t\t\tvar cContribType = plan.contributionData.catchupContributionUnit;\n\t\t\tvar crcAllowed = plan.planInfo.crcAllowed;\n\t\t\tvar ermdType = plan.matchData.erMatch.matchType.toUpperCase();\n\t\t\tvar payFrequency = plan.planInfo.payrollFrequency;\n\n      //  7.2) Create ERMatchData if it exists\n      /*if(ermdType !== \"NONE\"){\n        ermd = OMObjFactory.getErMatchDataInstance( OMErMatchData[plan.matchData.erMatch.matchType.toUpperCase()], \"\" ) ;      //  OMErMatchData\n        ermd.setID( planIndex );\n        ermd.setTier1Range( plan.matchData.erMatch.range1) ;\n        ermd.setTier2Range( plan.matchData.erMatch.range2) ;\n        ermd.setTier1Match( plan.matchData.erMatch.percent1 ) ;\n        ermd.setTier2Match( plan.matchData.erMatch.percent2 ) ;\n        ermd.includeInCalculation(plan.matchData.includeErMatch);\n        ermd.setAnnualMax(plan.matchData.erMatch.maxErAnnualMatch);\n      }*/\n\n      //  Awaiting discussion with Walt/Manish/Sundet\n      if(ermdType !== \"NONE\"){\n        ermd = OMObjFactory.getErMatchDataInstance( OMErMatchData[plan.matchData.erMatch.matchType.toUpperCase()], \"\" ) ;      //  OMErMatchData\n        ermd.includeInCalculation(plan.matchData.includeErMatch);\n        ermd.setID( planIndex );\n        ermd.setTier1Range( plan.matchData.erMatch.range1) ;\n        ermd.setTier2Range( plan.matchData.erMatch.range2) ;\n        ermd.setTier1Match( plan.matchData.erMatch.percent1 ) ;\n        ermd.setTier2Match( plan.matchData.erMatch.percent2 ) ;\n        if(ermdType === \"DATETIER\"){\n          ermd.setTier1Date(plan.matchData.erMatch.tierDate1);  // Should come from JSON in YYYYMMDD format\n          ermd.setTier2Date(plan.matchData.erMatch.tierDate2);  // Should come from JSON in YYYYMMDD format\n        }else{\n          ermd.setAnnualMax(plan.matchData.erMatch.maxErAnnualMatch);\n          ermd.setTierAnnualMax(plan.matchData.erMatch.tierForAnnualMax - 1 ) ;  // note decrement of JSON originating index, in order to have zero as first tier counter\n        }\n       }\n\n\n      //  Need to handle DateTier scenario\n\n      //  7.3) Create one Account Data object for each Source\n      for (var j = 0; j<sources.length;  j++) {\n        var source = sources[j];\n        var sourceType = source.type;\n        var isCatchup = sourceType.indexOf(\"CATCHUP\") > -1 ? true : false;\n        var contributionType = isCatchup ? cContribType : rContribType;\n        var accountContributionType = contributionType == \"PERCENT\" ? \"RATE\" : \"MODAL\";\n\n        var acctInstance = OMObjFactory.getOMAccountDataInstance();\n\n        if(source.name)           acctInstance.setName(source.name);\n        if(source.id)           acctInstance.setId(source.id);\n                          acctInstance.setIndex(sourceIndex++);\n                          acctInstance.setType(AccountTypes.matchType(sourceType));\n                          acctInstance.setIRC(IRSConstants.getIRCconst(source.ircCode));\n        if(plan.planInfo.planName)      acctInstance.setPlanName(plan.planInfo.planName);\n        if(plan.planInfo.planId)      acctInstance.setPlanId(plan.planInfo.planId);\n                          acctInstance.setPlanIndex(planIndex);\n                          acctInstance.setContrib(AccountTypes[\"CONTRIB_\"+accountContributionType], source.contribution);\n        if(payFrequency)          acctInstance.setFrequency(payFrequency);\n\n        //  Set ER Match Data to the AccountData object...\n        if(ermd){\n          if(sourceType == \"PRETAX\" || sourceType == \"ROTH\")  {\n            acctInstance.setOmErMatchData(ermd);\n          }\n          if((sourceType == \"AFTER_TAX\" || sourceType == \"AFTERTAX\") && plan.matchData.erMatch.matchTotalContrib){\n            acctInstance.setOmErMatchData(ermd);\n          }\n        }\n\n        //  Set the MinMax Rate Limits\n        //  create this object every time to grab the correct min and max limits for modal just in case.\n        if( source.percentLimits  && source.percentLimits.max && source.percentLimits.max > 0){\n          limit = ObjFactory.getMinMaxLimitInstance();\n          limit.setRate(source.percentLimits.min,source.percentLimits.max);\n          limit.setPlanIndex(planIndex);\n          acctInstance.setMinMaxLimit( limit ) ;\n        }\n\n        //  Set the MinMax Modal Limits\n        if(accountContributionType == \"MODAL\" && source.limits  && source.limits.max && source.limits.max > 0){\n          limit = ObjFactory.getMinMaxLimitInstance();\n          //Grab the correct min and max values from the percent based minmaxlimit object if non-crc\n          if(!crcAllowed)\n          {\n            var maxLim = (limit.getModalMax(payFrequency,appData.participantData.currentAnnualSalary));\n            var minLim = (limit.getModalMin(payFrequency,appData.participantData.currentAnnualSalary));\n            limit.setModal(minLim,maxLim, payFrequency);\n          }\n          else\n          {\n            limit.setModal(source.limits.min,source.limits.max, payFrequency);\n          }\n          limit.setPlanIndex(planIndex);\n          acctInstance.setMinMaxLimit( limit ) ;\n        }\n\n        //  Add AccountData instance to the request\n        request.getAccountDataList().push(acctInstance);\n      }\n\n      //  7.4) Create AccountData object if participant has an Annual ER Contribution set\n      if(plan.matchData.annualErContribution){\n        var erContribInstance = OMObjFactory.getOMAccountDataInstance();\n        erContribInstance.setContrib(AccountTypes.CONTRIB_ANNUAL, plan.matchData.annualErContribution);\n        erContribInstance.setPlanIndex(planIndex);\n        erContribInstance.setIndex(sourceIndex++);\n        request.getAccountDataList().push(erContribInstance);\n      }\n\n      //  7.5) Create AccountData object if participant's EE ContributionRate is mandatory\n      if(plan.matchData.mandatoryEeContribution){\n        var eeContribType = plan.matchData.mandatoryEeContribution.unit.toUpperCase() == \"PERCENT\" ? AccountTypes.CONTRIB_RATE : AccountTypes.CONTRIB_MODAL;\n        var eeContribInstance = OMObjFactory.getOMAccountDataInstance();\n        eeContribInstance.setFrequency(payFrequency);\n        eeContribInstance.setContrib(eeContribType, plan.matchData.mandatoryEeContribution.value);\n        eeContribInstance.setPlanIndex(planIndex);\n        eeContribInstance.setIndex(sourceIndex++);\n        eeContribInstance.setType(AccountTypes.TYPE_MANDATORY_EE);\n          if (plan.planInfo.sources.length > 0) {\n              eeContribInstance.setIRC(IRSConstants.getIRCconst(plan.planInfo.sources[0].ircCode));\n          }\n        request.getAccountDataList().push(eeContribInstance);\n      }\n\n      //  7.6) Create AccountData object if participant's ER ContributionRate is mandatory\n      if(plan.matchData.mandatoryErContribution){\n        var erContribType = plan.matchData.mandatoryErContribution.unit.toUpperCase() == \"PERCENT\" ? AccountTypes.CONTRIB_RATE : AccountTypes.CONTRIB_MODAL;\n        var mandatoryContribInstance = OMObjFactory.getOMAccountDataInstance();\n        mandatoryContribInstance.setFrequency(payFrequency);\n        mandatoryContribInstance.setContrib(erContribType, plan.matchData.mandatoryErContribution.value);\n        mandatoryContribInstance.setPlanIndex(planIndex);\n        mandatoryContribInstance.setIndex(sourceIndex++);\n        mandatoryContribInstance.setType(AccountTypes.TYPE_MANDATORY_ER);\n          if (plan.planInfo.sources.length > 0) {\n              mandatoryContribInstance.setIRC(IRSConstants.getIRCconst(plan.planInfo.sources[0].ircCode));\n          }\n        request.getAccountDataList().push(mandatoryContribInstance);\n      }\n\n      //  7.7) Create Min/Max Rate Limit object for\n      // if(plan.planInfo.totalContributionAmount){\n      //  var rateLimit = OMObjFactory.getMinMaxLimitInstance();\n      //    rateLimit.setPlanIndex(planIndex);\n      //    rateLimit.setModal( plan.planInfo.totalContributionAmount.min,\n      //              plan.planInfo.totalContributionAmount.max,\n      //              payFrequency);\n      //  cd.getMinMaxLimitList().push( rateLimit ) ;\n      // }\n\n      // // 7.8) Create Min/Max Dollar Limit object for\n      // if(plan.planInfo.totalContributionPercent){\n      //  var dollarLimit = OMObjFactory.getMinMaxLimitInstance();\n      //    dollarLimit.setPlanIndex(planIndex);\n      //    dollarLimit.setRate(  plan.planInfo.totalContributionPercent.min,\n      //                plan.planInfo.totalContributionPercent.max );\n      //  cd.getMinMaxLimitList().push( dollarLimit );\n      // }\n\n      //  7.9) Create AccountData object for Employer ProfitSharing (As a Dollar amount)\n      if(plan.matchData.profitSharingContributionAmount){\n        var profitSharingDollarInstance = OMObjFactory.getOMAccountDataInstance();\n        profitSharingDollarInstance.setFrequency(1);\n        profitSharingDollarInstance.setContrib(AccountTypes.CONTRIB_MODAL, plan.matchData.profitSharingContributionAmount.value);\n        profitSharingDollarInstance.setPlanIndex(planIndex);\n        profitSharingDollarInstance.setIndex(sourceIndex++);\n        profitSharingDollarInstance.setType(AccountTypes.TYPE_RECURRING_ER);\n          if (plan.planInfo.sources.length > 0) {\n              profitSharingDollarInstance.setIRC(IRSConstants.getIRCconst(plan.planInfo.sources[0].ircCode));\n          }\n        request.getAccountDataList().push(profitSharingDollarInstance);\n      }\n\n      //  7.10) Create AccountData object for Employer ProfitSharing (As a Rate amount)\n      if(plan.matchData.profitSharingContributionRate){\n        var profitSharingRateInstance = OMObjFactory.getOMAccountDataInstance();\n        profitSharingRateInstance.setFrequency(1);\n        profitSharingRateInstance.setContrib(AccountTypes.CONTRIB_RATE, plan.matchData.profitSharingContributionRate.value);\n        profitSharingRateInstance.setPlanIndex(planIndex);\n        profitSharingRateInstance.setIndex(sourceIndex++);\n        profitSharingRateInstance.setType(AccountTypes.TYPE_RECURRING_ER);\n          if (plan.planInfo.sources.length > 0) {\n              profitSharingRateInstance.setIRC(IRSConstants.getIRCconst(plan.planInfo.sources[0].ircCode));\n          }\n        request.getAccountDataList().push(profitSharingRateInstance);\n      }\n\n      // Begin - New Loan modeling\n      // This below logic is moved to OMCalcWrapper.setNewLoanModelData()\n      /*if (plan.loanData && plan.loanData.newLoanModelData) {\n        var lmd = plan.loanData.newLoanModelData;\n        if (lmd.loanPayment > 0.0 || lmd.loanAmount > 0.0) {\n          var loan = OMObjFactory.getLoanInstance() ;\n          if (lmd.loanAmount > 0.0) {\n            loan.initPaymentInstance(lmd.loanOrientation, lmd.loanInterestRate, lmd.loanPayFrequency, lmd.loanTerm, lmd.loanAmount);\n          } else {\n            loan.initLoanAmountInstance(lmd.loanOrientation, lmd.loanInterestRate, lmd.loanPayFrequency, lmd.loanTerm, lmd.loanPayment);\n          }\n          lmd.loanInitialFee > 0.0 ? loan.setInitialFee(lmd.loanInitialFee) : loan.setInitialFee(0.0);\n          lmd.loanAnnualFee > 0.0 ? loan.setAnnualFee(lmd.loanAnnualFee) : loan.setAnnualFee(0.0);\n          lmd.loanAer ? loan.setInterestTypeToAER() : loan.setInterestTypeToSimple();\n          (lmd.loanUpfrontInterest && lmd.loanDaysUpfrontInterest > 0) ? loan.setDaysOfUpFrontInterest(lmd.loanDaysUpfrontInterest) : loan.setDaysOfUpFrontInterest(0);\n\n          var loanInstance = OMObjFactory.getOMAccountDataInstance();\n          loanInstance.setType(AccountTypes.TYPE_NEWLOAN);\n          loanInstance.setBalance(-loan.getLoanAmount());\n          loanInstance.setFrequency(loan.getFrequency());\n          loanInstance.setLoan(loan);\n\n          request.getAccountDataList().push( loanInstance ) ;\n        }\n      }*/\n      // End - New Loan modeling\n\n      // Begin - Outstanding (Existing) Loan \n      if (plan.loanData && plan.loanData.outstandingLoan) {\n        var oLData = plan.loanData.outstandingLoan;\n        if (oLData.data.outstandingLoanDtls) {\n          setExistingActiveLoansToRequest(request, oLData);\n        }\n      }\n      // End - Outstanding (Existing) Loan\n    }\n\n        return request;\n\n  };\n\n  ResponseSerializer.prototype.serializeFE = function(response) {\n    var appData = response.feData;\n    var request = OMObjFactory.getOMCalculatorRequestInstance() ;\n    var cd = OMObjFactory.getOMCommonDataInstance() ;\n    //var acctInstance = null ;\n\n    // this is much the same as non-FE\n    cd.setReferenceDate( new Date() ) ;\n\n    var ieDob = appData.participantData.birthDates.CLIENT;\n    var yyyy = ieDob.slice(0,4);\n    var mm = parseInt(ieDob.slice(5,7), 10) - 1;\n    var dd = ieDob.slice(8,10);\n    cd.setDateOfBirth(new Date(yyyy, mm, dd)) ;\n\n    // cd.setAnnualSalary( params.salary ) ;\n    //cd.setRateOfIncrease( 10 /*params.roi*/ ) ; // salary increase\n    \n    cd.setRetireAge( appData.participantData.selectedRetirementAge ) ; \n    \n    if (appData.investmentRateOfReturn !== undefined) {\n      cd.setRateOfReturn( appData.investmentRateOfReturn ) ;\n    } else {\n      cd.setRateOfReturn( 0.06 ) ;\n    }\n    \n    // cd.setReplacementRatio( params.replace ) ;\n    if (appData.inflationRate !== undefined) {\n        cd.setRateOfInflation( appData.inflationRate );\n    }else{\n        cd.setRateOfInflation(0.03);\n    }\n    \n    request.setCommonData( cd ) ;\n\n    //  Loop through all plans object\n    for(var i=0; i<appData.dcPlanData.length; i++){\n      var plan = appData.dcPlanData[i];\n      // Begin - Outstanding (Existing) Loan \n      if (plan.loanData && plan.loanData.outstandingLoan) {\n        var oLData = plan.loanData.outstandingLoan;\n        if (oLData.data.outstandingLoanDtls) {\n          setExistingActiveLoansToRequest(request, oLData);\n        }\n      }\n      // End - Outstanding (Existing) Loan\n    }\n\n    return request;\n  };\n\n  /* Use this common function to read the existing loans from both FE & NonFE.  And set to REQUEST. */\n  setExistingActiveLoansToRequest = function(request, oLData) {\n    for (var k=0; k<oLData.data.outstandingLoanDtls.length; k++) {\n      var oLDtlData = oLData.data.outstandingLoanDtls[k];\n      if (oLDtlData.loanStatus == 'A' && oLDtlData.balance > 0.0) { // Active Loan & remaining loan balance > 0.0\n        var loan = OMObjFactory.getLoanInstance() ;\n        var daysDiff = DateUtilities.getDateDiffInDays(new Date(), DateUtilities.getDateFromString(oLDtlData.payoffDate));\n        loan.initPaymentInstanceForExistingLoan(\n            ResponseSerializer.Loan.ORIENTATION_MONTHLY\n            , oLDtlData.interestRate / 100\n            , oLDtlData.loanPaymentFrequency\n            , oLDtlData.balance\n            , daysDiff\n          ) ;\n          // oLDtlData.existing_loan_aer ? loan.setInterestTypeToAER() : loan.setInterestTypeToSimple(); // Not required\n\n          var oustandLoanInstance = OMObjFactory.getOMAccountDataInstance();\n          oustandLoanInstance.setType( AccountTypes.TYPE_EXISTINGLOAN ) ;\n          oustandLoanInstance.setFrequency( loan.getFrequency() ) ;\n          oustandLoanInstance.setLoan( loan ) ;\n\n          request.getAccountDataList().push( oustandLoanInstance ) ;\n      }\n    }\n  };\n\n\n  ResponseSerializer.Loan = {};\n  ResponseSerializer.Loan.ORIENTATION_MONTHLY = 12 ; // Always Monthly for OrangeMoney Loan Module.\n\n  return ResponseSerializer;\n});","define([], function(){\n\n    var WithholdingUtilities = {};\n\n\n    /**  bracket withholding calculation\n    */\n    WithholdingUtilities.baseBracketCalc = function( taxable, bracket ) {\n        var portion, remaining, workingTax = 0.0 ;\n        var arraySize = bracket.length ; \n        remaining = taxable ;\n        for( var n = ( arraySize - 1 ) ; ( n > -1 ) && ( remaining > 0.0 ) ; n-- ) {\n            portion = ( bracket[n][WithholdingUtilities.THRESHOLD] < remaining ) ? ( remaining - bracket[n][WithholdingUtilities.THRESHOLD] ) : 0.0 ;\n            workingTax += ( bracket[n][WithholdingUtilities.RATE] * portion ) ;\n            remaining -= portion ;\n        }\n        return( workingTax ) ;\n    };\n\n\n    /**  standard bracket calculation (most circumstances)\n     */\n    WithholdingUtilities.standardBracketCalc = function( taxable, bracket ) {\n        var arraySize = bracket.length ; \n        var workingTax = 0.0 ;\n        for( var n = arraySize - 1 ; n > -1 ; n-- ) {\n            if( taxable > bracket[n][WithholdingUtilities.THRESHOLD] ) {\n                workingTax = bracket[n][WithholdingUtilities.ADDITIVE] + ( bracket[n][WithholdingUtilities.RATE] * ( taxable - bracket[n][WithholdingUtilities.THRESHOLD] ) ) ;\n                break ;\n            }\n        }\n        return( workingTax ) ;\n    };\n\n\n    //  statics ------------------------------------\n    WithholdingUtilities.THRESHOLD = 0 ;\n    WithholdingUtilities.ADDITIVE = 1 ;\n    WithholdingUtilities.SUBTRACTIVE = 2 ;\n    WithholdingUtilities.RATE = 3 ;\n    WithholdingUtilities.property_labels = [ \"threshold\",\"additive\",\"subtractive\",\"rate\" ] ;\n\n\n    return WithholdingUtilities ;\n});","\ndefine(['./EmployerMatchWrapper', '../../Utilities'],\nfunction(EmployerMatchWrapper, Utilities){\n\tvar CustomERMatch = Utilities.extend(EmployerMatchWrapper, function(){});\n\treturn CustomERMatch;\n});\n\n","define(['./match/ConsecutiveTierEmployerMatch'], function(ConsecutiveTierEmployerMatch){\n\n    var DateTier = function(){\n        this.em =  new ConsecutiveTierEmployerMatch( 1 ) ;\n        this.nYearOffset = 0 ;\n        this.nPayPeriodOffset = 0 ;\n    };\n\n\n    DateTier.prototype.set = function( nPayPeriods, sCurrentYYYYMMDD, sTierDateYYYYMMDD, dRangeOfSalary, dRateOfMatch ) {\n        var nYearDiff = 0 ;\n        var nMonthDiff = 0 ;\n        var nDayDiff = 0 ;\n\n        // set range of salary and rate of match\n        this.nYearOffset = this.nPayPeriodOffset = 0 ;\n        this.em.setFirstTier( dRangeOfSalary, dRateOfMatch ) ;\n\n        if( ( sTierDateYYYYMMDD === null ) || ( sTierDateYYYYMMDD === \"\" ) ) {\n            return ;\n        }\n\n        // year, month, and day strings into integers\n        var nCurrentYear  = parseInt( sCurrentYYYYMMDD.substring( 0, 4 ), 10 ) ;\n        var nCurrentMonth = parseInt( sCurrentYYYYMMDD.substring( 4, 6 ), 10 ) ;\n        var nCurrentDay   = parseInt( sCurrentYYYYMMDD.substring( 6, 8 ), 10 ) ;\n\n        var nTierYear   = parseInt( sTierDateYYYYMMDD.substring( 0, 4 ), 10 ) ;\n        var nTierMonth  = parseInt( sTierDateYYYYMMDD.substring( 4, 6 ), 10 ) ;\n        var nTierDay    = parseInt( sTierDateYYYYMMDD.substring( 6, 8 ), 10 ) ;\n\n        nYearDiff = ( nTierYear - nCurrentYear ) ;\n        nMonthDiff = ( nTierMonth - nCurrentMonth ) ;\n        nDayDiff = ( nTierDay - nCurrentDay ) ;\n\n        // is definitely past (or today) ...\n        if( ( nYearDiff < 0 ) || ( ( nYearDiff === 0 ) && ( nMonthDiff < 0 ) )|| ( ( nYearDiff === 0 ) && ( nMonthDiff === 0 ) && ( nDayDiff <=0 ) ) ) {\n            return ;\n        }\n\n        // is definitely future\n        var gcTier  = new Date( nTierYear, ( nTierMonth - 1 ), nTierDay ) ;\n        var gcTest  = new Date( nTierYear, ( nCurrentMonth - 1 ), nCurrentDay ) ;\n\t\n        var nDayOfYearTier = DateTier.getDOY( gcTier ) ;\n        var nDayOfYearTest = DateTier.getDOY( gcTest ) ;\n        var nDayOfYearDiff = Math.abs( nDayOfYearTest - nDayOfYearTier ) + 1 ;\n\n        this.nPayPeriodOffset = Math.floor( nDayOfYearDiff / ( 365 / nPayPeriods ) ) ;\n\n        if( nDayOfYearTest > nDayOfYearTier ) {\n            nYearDiff-- ;\n            this.nPayPeriodOffset = Math.max( nPayPeriods - this.nPayPeriodOffset, 0 ) ;\n        }\n\n        this.nYearOffset = nYearDiff ;\n\n    };\n\n\n    // static method to handle .java Calendar.DAY_OF_YEAR function\n    DateTier.getDOY = function( jsDate ) {\n        var janOne = new Date(jsDate.getFullYear(),0,1);\n        return Math.ceil((jsDate - janOne) / 86400000);\n    };\n\n\n    return DateTier;\n});\n","\ndefine(['./EmployerMatchWrapper', '../../Utilities','./DateTier'],\nfunction(EmployerMatchWrapper, Utilities,DateTier){\n\n    //  Constructor\n    var DateTierERMatch = Utilities.extend(EmployerMatchWrapper, function(){\n\n        //  Private var declarations ------------------------------------\n        var that = this;\n        var _dAnnualMaxContrib = 0 ;\n        var _alDateTiers = null ;\n\n        //  Privileged Method Declarations ------------------------------------\n\n        this.addTier = function( nPayPeriods, sCurrentYYYYMMDD, sTierDateYYYYMMDD, dRangeOfSalary, dRateOfMatch ){\n            var dt = new DateTier() ;   //  dt:DateTier\n                dt.set( nPayPeriods, sCurrentYYYYMMDD, sTierDateYYYYMMDD, dRangeOfSalary, dRateOfMatch ) ;\n            _alDateTiers.push( dt ) ;\n        };\n\n        this.setAnnualMaxContrib = function( d ){\n            if( _dAnnualMaxContrib != d ){\n                _dAnnualMaxContrib = d ;\n            }\n        };\n\n        this.sort = function( )\n        {\n            var bChanged = true ;\n\n            while( bChanged )\n            {\n                var o = [] ;\n                var dth ;   //  DateTier\n                var dtl ;   //  DateTier\n                bChanged = false ;\n\n                for( var n = _alDateTiers.length - 1 ; n > 0 ; n-- )\n                {\n                    o = _alDateTiers;\n                    dth = o[n] ;\n                    dtl = o[n - 1] ;\n\n                    if( ( dtl.nYearOffset > dth.nYearOffset ) || ( ( dtl.nYearOffset == dth.nYearOffset ) && ( dtl.nPayPeriodOffset > dth.nPayPeriodOffset ) ) )\n                    {\n                        _alDateTiers[n] = dtl  ;\n                        _alDateTiers[n - 1] = dth  ;\n                        bChanged = true ;\n                    }\n                    else\n                    {\n                    if( ( dtl.nYearOffset === 0 && dth.nYearOffset === 0 ) && ( dtl.nPayPeriodOffset === 0 && dth.nPayPeriodOffset === 0 ) )\n                    {\n                        if( dtl.em.getTierMatchRate( 1 ) > dth.em.getTierMatchRate( 1 ) )\n                            {\n                                _alDateTiers[n] = dtl ;\n                                _alDateTiers[n - 1] = dth ;\n                                bChanged = true ;\n                            }\n                        }\n                    }\n                }\n            }\n        };\n\n        this.getEmployerContrib = function( dModalEeContrib, dAnnualEeContribAscribed, dAnnualSalary, nPayPeriods, _nYearOffset, _nPayPeriodOffset )\n        {\n            var nYearOffset =  _nYearOffset || 0;\n            var nPayPeriodOffset = _nPayPeriodOffset || 0;\n            var dReturn = 0 ;\n\n            nPayPeriods = Math.max(nPayPeriods, 1) ;\n\n            var dMatchingContribThreshold = 0 ;\n            var o = _alDateTiers ;\n            var dt ;\n\n            // 1. step backward through the array\n            for( var n = o.length - 1 ; n > -1 ; n-- )\n            {\n                dt = o[n] ;\n\n                dMatchingContribThreshold = ( dt.em.getTierMatchRange( 1 ) * dAnnualSalary / nPayPeriods ) ;\n                dMatchingContribThreshold -= dAnnualEeContribAscribed / nPayPeriods ;\n                dMatchingContribThreshold = Math.max( dMatchingContribThreshold, 0 ) ;\n\n                // 2. if (years).(pay period) > (array.years).(array.payperiod) then...\n                if( nYearOffset > dt.nYearOffset )\n                {\n                    // 3. calculate match\n                    dReturn = Math.min( dModalEeContrib, dMatchingContribThreshold ) * dt.em.getTierMatchRate( 1 ) ;\n                    break ;\n                }\n\n                if( ( nYearOffset == dt.nYearOffset ) && ( nPayPeriodOffset >= dt.nPayPeriodOffset ) )\n                {\n                    dReturn = Math.min( dModalEeContrib, dMatchingContribThreshold ) * dt.em.getTierMatchRate( 1 ) ;\n                    break ;\n                }\n            }\n            // check against annual max\n            dReturn = ( _dAnnualMaxContrib > 0 ) ? Math.min( ( _dAnnualMaxContrib / nPayPeriods ), dReturn ) : dReturn ;\n\n            return( dReturn ) ;\n        };\n\n        this.reset = function( ) {\n            if( _alDateTiers === null )\n                _alDateTiers = new Array() ;\n            else\n                _alDateTiers = [];\n        };\n\n        //  Private Method Declarations ------------------------------------\n        (function init( ){\n            _alDateTiers = new Array() ;\n            that.setAnnualMaxContrib( 0 ) ;\n            that.setCalcPeriodicity( EmployerMatchWrapper.ERMATCHCALC_MODAL ) ;\n        })();\n\n    });\n\n    //  Public Method Declarations ------------------------------------\n    DateTierERMatch.prototype.modifyEeContrib = function( dModalEeContrib, dAnnualSalary, nPayPeriods ){\n        // no change\n        return( dModalEeContrib ) ;\n    };\n\n    return DateTierERMatch;\n});\n\n","\ndefine(['./ERMatchTypes', './StandardERMatch',\n        './MODC_ERMatch', './DateTierERMatch',\n        './StandardProfitSharing', './MandatoryERMatch',\n        './CustomERMatch'],\nfunction(ERMatchTypes, StandardERMatch, MODC_ERMatch, DateTierERMatch, StandardProfitSharing,\n        MandatoryERMatch, CustomERMatch) {\n\n    var ERMatchFactory = {};\n\n    ERMatchFactory.getCustomInstance = function( name ) {\n        return( new CustomERMatch() ) ;\n    };\n\n    ERMatchFactory.getStandardInstance = function( name ) {\n        return( new StandardERMatch() ) ;\n    };\n\n    ERMatchFactory.getDateTierInstance = function( name ) {\n        return( new DateTierERMatch() ) ;\n    };\n\n    ERMatchFactory.getProfitSharingInstance = function( name ) {\n        return( new StandardProfitSharing() ) ;\n    };\n\n    ERMatchFactory.getMandatoryInstance = function( name ){\n        return( new MandatoryERMatch() ) ;\n    };\n\n    ERMatchFactory.getInstance = function(type, name) {\n        var r = null ;\n\n        switch( type ) {\n        case ERMatchTypes.DATETIER :\n            r = new DateTierERMatch() ;\n            break ;\n\n        case ERMatchTypes.CUSTOM :\n            // TODO: update to JS method\n            if( \"MODC\".equals( name ) ) {\n                r = new MODC_ERMatch() ;\n            }\n            break ;\n\n        case ERMatchTypes.PROFITSH :\n            r = new StandardProfitSharing() ;\n            break ;\n\n        case ERMatchTypes.MANDATORY :\n            r = new MandatoryERMatch() ;\n            break;\n        case ERMatchTypes.STANDARD :\n            r = new StandardERMatch() ;\n            break ;\n        default :\n            r = new StandardERMatch() ;\n            break ;\n        }\n        return r;\n    };\n\n    return ERMatchFactory;\n\n});\n\n","\ndefine([], function(){\n\tvar ErMatchTypes = {};\n\n\t\tErMatchTypes.UNDEFINED = -1 ;\n\t\tErMatchTypes.STANDARD = 0 ;\n\t\tErMatchTypes.DATETIER = 1 ;\n\t\tErMatchTypes.PROFITSH = 2 ;\n\t\tErMatchTypes.CUSTOM  = 3 ;\n\t\tErMatchTypes.MANDATORY = 4 ;\n\n\t\tErMatchTypes.ID_NONE  = -1 ;\n\t\tErMatchTypes.ID_0  = 0 ;\n\t\tErMatchTypes.ID_1  = 1 ;\n\t\tErMatchTypes.ID_2  = 2 ;\n\t\tErMatchTypes.ID_3  = 3 ;\n\t\tErMatchTypes.ID_4  = 4 ;\n\t\tErMatchTypes.ID_5  = 5 ;\n\n        ErMatchTypes.STANDARD_TIER_COUNT = 2 ;\n        ErMatchTypes.STANDARD_TIER_COUNT_2  = 2 ;\n        ErMatchTypes.STANDARD_TIER_COUNT_3  = 3 ;\n\n        ErMatchTypes.MAX_TIER_DEFAULT  = 99 ;  // default to non-tier specific\n        ErMatchTypes.MAX_TIER_ONE = 0 ;\n        ErMatchTypes.MAX_TIER_TWO = 1 ;\n        ErMatchTypes.MAX_TIER_1 = 0 ;\n        ErMatchTypes.MAX_TIER_2 = 1 ;\n\n\treturn ErMatchTypes;\n});","\ndefine([\"./ERMatchTypes\"],\nfunction(ERMatchTypes){\n\n    //  Constructor\n    var EmployerMatchWrapper = function(){\n\n        //  Private var declarations ------------------------------------\n        var that = this;\n        var _nCalcPeriodicity = EmployerMatchWrapper.ERMATCHCALC_ANNUAL ;\n        var _id = ERMatchTypes.ID_0;\n        var _type = -1;\n        var _name = \"\";\n\n        //  Privileged Method Declarations ------------------------------------\n        this.reset = function( ){} ;\n\n        this.setCalcPeriodicity = function( n ) { _nCalcPeriodicity = n ; };\n        this.getCalcPeriodicity = function( ) { return( _nCalcPeriodicity ) ; };\n\n        this.calcPeriodicityIsAnnual = function( ) { return( _nCalcPeriodicity == EmployerMatchWrapper.ERMATCHCALC_ANNUAL ) ; };\n        this.calcPeriodicityIsModal = function( ) { return( _nCalcPeriodicity != EmployerMatchWrapper.ERMATCHCALC_ANNUAL ) ; };\n\n        this.getType = function( ) { return( _type ); };\n        this.setType = function( n ) { _type = n  ; };\n\n        this.getID = function( ) { return( _id ); };\n        this.setID = function( n ) { _id = ( n > -1 && n <= ERMatchTypes.ID_5 ) ? n : ERMatchTypes.ID_0 ; };\n\n        this.getName = function( ) { return( _name ); };\n        this.setName = function( s ) { _name = s  ; };\n\n\n        this.getEmployerContrib = function( dModalEeContrib, dModalEeContribAscribed, dAnnualSalary, nPayPeriods, nYearOffset, nPayPeriodOffset ) {};\n\n        //  Private Method Declarations ------------------------------------\n        (function init( ){})() ;\n    };\n\n    //  Public Method Declarations ------------------------------------\n    EmployerMatchWrapper.prototype.modifyEeContrib = function( dModalEeContrib, dAnnualSalary, nPayPeriods ) {};\n\n    //  Static Variable Declarations ------------------------------------\n    EmployerMatchWrapper.ERMATCHCALC_ANNUAL = 0 ;\n    EmployerMatchWrapper.ERMATCHCALC_MODAL = 1 ;\n\n    return EmployerMatchWrapper;\n});\n\n","\ndefine(['../CalcUtilities', './CustomERMatch', '../../Utilities'],\nfunction(CalcUtilities, CustomERMatch, Utilities){\n\n    //  Constructor (Extends CustomERMatch)\n    var MODC_ERMatch = Utilities.extend(CustomERMatch, function(){\n\n        //  Public Variable Declarations  -------------------------------\n            this.aTiers = [ 0, 300, 360, 420 ] ;\n\n        //  Privileged Method Declarations  -------------------------------\n        this.getEmployerContrib = function( dModalEeContrib, dAnnualEeContribAscribed, dAnnualSalary, nPayPeriods ){\n            var dReturn = 0 ;\n            var dMatchingContrib = 0 ;\n            nPayPeriods = ( nPayPeriods > 0 ) ? nPayPeriods : 1 ;\n\n            dMatchingContrib = _getEmployerContrib( dModalEeContrib + ( dAnnualEeContribAscribed / nPayPeriods ), nPayPeriods ) ;\n            dMatchingContrib -= _getEmployerContrib( ( dAnnualEeContribAscribed / nPayPeriods ), nPayPeriods ) ;\n            dReturn = Math.max( dMatchingContrib, 0 ) ;\n\n            return( CalcUtilities.truncate( dReturn, 2 ) ) ;\n        };\n\n        this.reset = function( ){ };\n\n        //  Private Method Declarations  -------------------------------\n        function _getEmployerContrib( dContrib, nPayPeriods ){\n            var dReturn = 0 ;\n\n            for( var n = ( aTiers.length - 1 ) ; ( n > -1 ) ; n-- )\n            {\n                if( aTiers[n] <= ( dContrib * nPayPeriods ) )\n                {\n                    dReturn = ( aTiers[n] / nPayPeriods ) ;\n                    break ;\n                }\n            }\n\n            return( CalcUtilities.truncate( dReturn, 2 ) ) ;\n        }\n\n    });\n\n    //  Public Method Declarations  -------------------------------\n    MODC_ERMatch.prototype.modifyEeContrib = function( dModalEeContrib, dAnnualSalary, nPayPeriods ){\n        var dReturn = CalcUtilities.roundToNearest( 0.5, dModalEeContrib ) ;\n        return( CalcUtilities.truncate( dReturn, 2 ) ) ;\n    };\n\n    return MODC_ERMatch;\n});\n","\n\ndefine(['./EmployerMatchWrapper', '../../Utilities'],\nfunction(EmployerMatchWrapper, Utilities){\n\n    //  Constructor (Extends EmployerMatchWrapper)\n    var MandatoryERMatch = Utilities.extend(EmployerMatchWrapper, function(){\n\n        //  Private Variable Declarations ------------------------------------\n        var that = this;\n        var _dRateOfSalary ;\n        var _dFlatAnnualContrib ;\n\n        //  Privileged Method Declarations ------------------------------------\n        this.setRateOfSalary = function( d ){\n            if( _dRateOfSalary != d )\n            {\n                _dRateOfSalary = d ;\n            }\n        };\n\n        this.getRateOfSalary = function( ){\n            return( _dRateOfSalary ) ;\n        };\n\n        this.setFlatAnnualContrib = function( d ){\n            if( _dFlatAnnualContrib != d )\n            {\n                _dFlatAnnualContrib = d ;\n            }\n        };\n\n        this.getFlatAnnualContrib = function( ){\n            return( _dFlatAnnualContrib ) ;\n        };\n\n        this.set = function( dFlatAnnualErContrib, dErRateMatchOfSalary ){\n            if(dErRateMatchOfSalary === undefined){\n                _set(dFlatAnnualErContrib);\n            }else{\n                this.setFlatAnnualContrib( dFlatAnnualErContrib ) ;\n                this.setRateOfSalary( dErRateMatchOfSalary ) ;\n            }\n        };\n\n        this.getMandatory = function( dAnnualSalary, _nPayPeriods ){\n            var nPayPeriods = _nPayPeriods || 1;\n            var dReturn = 0 ;\n            nPayPeriods = ( nPayPeriods > 0 ) ? nPayPeriods : 1 ;\n\n            if( _dFlatAnnualContrib > 0 )\n            {\n                dReturn += ( _dFlatAnnualContrib / nPayPeriods ) ;\n            }\n\n            if( _dRateOfSalary > 0 )\n            {  // use general rate of salary\n                dReturn += ( dAnnualSalary / nPayPeriods * _dRateOfSalary ) ;\n            }\n\n            return( dReturn ) ;\n        };\n\n        this.getEmployerContrib = function( dModalEeContrib, dEeContribAscribed, dAnnualSalary, nPayPeriods ){\n            return( this.getMandatory( dAnnualSalary, nPayPeriods ) ) ;\n        };\n\n        this.reset = function( ){\n            this.setFlatAnnualContrib( 0 ) ;\n            this.setRateOfSalary( 0 ) ;\n        };\n\n        //  Private Method Declarations ------------------------------------\n        (function init( ){\n            _dRateOfSalary =\n            _dFlatAnnualContrib  = 0 ;\n        })();\n\n        function _set( d ){\n            // determine type of parameter\n            if( d > 1 )  // not a rate\n                that.setFlatAnnualContrib( d ) ;\n            else\n                that.setRateOfSalary( d ) ;\n        }\n\n    });\n\n    MandatoryERMatch.prototype.modifyEeContrib = function( dModalEeContrib, dAnnualSalary, nPayPeriods ){\n        // no change\n        return( dModalEeContrib ) ;\n    };\n\n    return MandatoryERMatch;\n});\n\n","\ndefine(['../CalcUtilities', './match/ConsecutiveTierEmployerMatch',\n        './EmployerMatchWrapper', './ERMatchTypes', '../../Utilities'],\n    function(CalcUtilities, ConsecutiveTierEmployerMatch, EmployerMatchWrapper, ERMatchTypes, Utilities){\n\n        var StandardERMatch = Utilities.extend(EmployerMatchWrapper, function(){\n\n            //  Private Variable Declarations  ------------------------------\n            var that = this;\n            var _em = null ;\n            var _dAnnualMaxContrib = 0 ;\n            var _nTierToApplyAnnualMax = ERMatchTypes.MAX_TIER_DEFAULT ;  // zero-based; if not index, max applies to combined tiers\n\n            //  Privileged Method Declarations  ------------------------------\n            this.setAnnualMaxContrib = function( d ){\n                if( _dAnnualMaxContrib != d )\n                {\n                    _dAnnualMaxContrib = d ;\n                }\n            };\n\n            this.setTierAnnualMax = function( n ) {\n                if( _nTierToApplyAnnualMax != n ) {\n                    _nTierToApplyAnnualMax = n ;\n                }\n            };\n\n            this.set = function( d1stRateOfMatch,  d1stRangeOfSalary, d2ndRateOfMatch,  d2ndRangeOfSalary, dAnnualMaxContrib, nTierToApplyAnnualMax ){\n                var _d1stRateOfMatch = d1stRateOfMatch || 0;\n                var _d1stRangeOfSalary = d1stRangeOfSalary || 0;\n                var _d2ndRateOfMatch = d2ndRateOfMatch || 0;\n                var _d2ndRangeOfSalary = d2ndRangeOfSalary || 0;\n                var _dAnnualMaxContrib = dAnnualMaxContrib || 0;\n                var _nTierToApplyAnnualMax = isNaN(nTierToApplyAnnualMax)  ? ERMatchTypes.MAX_TIER_DEFAULT  : nTierToApplyAnnualMax;\n                _set( _d1stRateOfMatch, _d1stRangeOfSalary, _d2ndRateOfMatch, _d2ndRangeOfSalary, _dAnnualMaxContrib, _nTierToApplyAnnualMax ) ;\n            };\n\n            this.getAnnualMaxContrib = function( ){\n                return( _dAnnualMaxContrib ) ;\n            };\n\n            this.getTierAnnualMax = function( ) {\n                return( _nTierToApplyAnnualMax ) ;\n            };\n\n            this.getEmployerContrib = function( dModalEeContrib, dAnnualEeContribAscribed, dAnnualSalary, nPayPeriods ){\n\n                var dReturn = 0 ;\n                var dMatchingContrib = 0 ;\n                var dAnnualAscribedMatching = 0 ;\n                nPayPeriods = ( nPayPeriods > 0 ) ? nPayPeriods : 1 ;\n\n\n                // for tier-specific\n                var nTiers = _em.getTierCount() ;\n                var nTierToApplyMax = that.getTierAnnualMax( ) ;\n\n                // if annual max IS tier-specific\n                if( ( _dAnnualMaxContrib > 0 ) && ( nTierToApplyMax > -1 ) && ( nTierToApplyMax < nTiers ) ) {\n\n                    var tierSpecific = new Array( nTiers ) ;\n\n                    for( var n = 0 ; n < nTiers ; n++ ) {\n                        dMatchingContrib = _em.getEmployerMatchingContribPerTier( dModalEeContrib + ( dAnnualEeContribAscribed / nPayPeriods ), CalcUtilities.truncate( ( dAnnualSalary / nPayPeriods ), 2 ), n ) ;\n                        dMatchingContrib -= _em.getEmployerMatchingContribPerTier( ( dAnnualEeContribAscribed / nPayPeriods ), CalcUtilities.truncate( ( dAnnualSalary / nPayPeriods ), 2 ), n ) ;\n                        dAnnualAscribedMatching = _em.getEmployerMatchingContribPerTier( dAnnualEeContribAscribed, CalcUtilities.truncate( dAnnualSalary, 2 ), n  ) ;\n                        tierSpecific[n] = Math.max( dMatchingContrib, 0. ) ;\n                        tierSpecific[n] = ( n == nTierToApplyMax ) ? Math.min( Math.max( ( ( _dAnnualMaxContrib - dAnnualAscribedMatching ) / nPayPeriods ), 0. ), tierSpecific[n] ) : tierSpecific[n] ;\n                    }\n\n                    dReturn = _totalArray( tierSpecific ) ;\n\n                }  // annual max IS NOT tier-specific\n                else {\n                    dMatchingContrib = _em.getEmployerMatchingContrib( dModalEeContrib + ( dAnnualEeContribAscribed / nPayPeriods ), CalcUtilities.truncate( ( dAnnualSalary / nPayPeriods ), 2 ) ) ;\n                    dMatchingContrib -= _em.getEmployerMatchingContrib( ( dAnnualEeContribAscribed / nPayPeriods ), CalcUtilities.truncate( ( dAnnualSalary / nPayPeriods ), 2 ) ) ;\n                    dAnnualAscribedMatching = _em.getEmployerMatchingContrib( dAnnualEeContribAscribed, CalcUtilities.truncate( dAnnualSalary, 2 ) ) ;\n                    dReturn = Math.max( dMatchingContrib, 0 ) ;\n\n                    // check against annual max\n                    dReturn = ( _dAnnualMaxContrib > 0 ) ? Math.min( Math.max( ( ( _dAnnualMaxContrib - dAnnualAscribedMatching ) / nPayPeriods ), 0 ), dReturn ) : dReturn ;\n                }\n\n                return( dReturn ) ;\n\n            };\n\n            this.reset = function( ){\n                _set( 0, 0, 0, 0, 0, _nTierToApplyAnnualMax ) ;\n            };\n\n            //  Private Method Declarations  ---------------------------------\n            (function init( ){\n                // two tier employer match\n                _em = new ConsecutiveTierEmployerMatch( ERMatchTypes.STANDARD_TIER_COUNT ) ;\n                _dAnnualMaxContrib   = 0 ;\n                _nTierToApplyAnnualMax = ERMatchTypes.MAX_TIER_DEFAULT ;  // default - max applies to all tiers combined\n\n            })();\n\n            function _set( d1stRateOfMatch, d1stRangeOfSalary, d2ndRateOfMatch, d2ndRangeOfSalary, dAnnualMaxContrib, nTierToApplyAnnualMax ){\n                _em.setFirstTier( d1stRangeOfSalary, d1stRateOfMatch ) ;\n                _em.setSecondTier( d2ndRangeOfSalary, d2ndRateOfMatch ) ;\n                that.setAnnualMaxContrib( dAnnualMaxContrib ) ;\n                that.setTierAnnualMax( nTierToApplyAnnualMax ) ;\n            }\n\n            function _totalArray( _dd ) {\n                var dReturn = 0 ;\n\n                for( var n = 0 ; n < _dd.length ; n++ ) {\n                    dReturn += _dd[n] ;\n                }\n\n                return( dReturn ) ;\n            }\n\n        });\n\n        StandardERMatch.prototype.modifyEeContrib = function( dModalEeContrib, dAnnualSalary, nPayPeriods )\n        {\n            return( dModalEeContrib ) ;\n        };\n\n        return StandardERMatch;\n\n    });\n","\ndefine(['../CalcUtilities', './EmployerMatchWrapper',\n        '../../Utilities'],\nfunction(CalcUtilities, EmployerMatchWrapper, Utilities){\n\n    //  Constructor (Extends EmployerMatchWrapper)\n    var StandardProfitSharing = Utilities.extend(EmployerMatchWrapper, function(){\n\n        //  Private Variable Declarations ------------------------------------\n        var that = this;\n        var _dRateOfSalary ;\n        var _dFlatAnnualContrib ;\n\n        //  Privileged method Declarations ------------------------------------\n        this.setRateOfSalary = function(d){\n            if( _dRateOfSalary != d )\n            {\n                _dRateOfSalary = d ;\n            }\n        };\n\n        this.getRateOfSalary = function( ){\n            return( _dRateOfSalary ) ;\n        };\n\n        this.setFlatAnnualContrib = function(d){\n            if( _dFlatAnnualContrib != d )\n            {\n                _dFlatAnnualContrib = d ;\n            }\n        };\n\n        this.getFlatAnnualContrib = function( ){\n            return( _dFlatAnnualContrib ) ;\n        };\n\n        this.set = function(dFlatAnnualErContrib, dErRateMatchOfSalary ){\n            if(dErRateMatchOfSalary === undefined){\n                _set(dFlatAnnualErContrib);\n            }else{\n                this.setFlatAnnualContrib( dFlatAnnualErContrib ) ;\n                this.setRateOfSalary( dErRateMatchOfSalary ) ;\n            }\n        };\n\n        this.getProfitSharing = function(dAnnualSalary, nPayPeriods)\n        {\n\n            var dReturn = 0 ;\n            nPayPeriods = ( nPayPeriods === undefined ) ? 1 : nPayPeriods;\n            nPayPeriods = ( nPayPeriods > 0 ) ? nPayPeriods : 1 ;\n\n            if( _dFlatAnnualContrib > 0 )\n            {\n                dReturn += ( _dFlatAnnualContrib / nPayPeriods ) ;\n            }\n\n            if( _dRateOfSalary > 0 )\n            {  // use general rate of salary\n                dReturn += ( dAnnualSalary / nPayPeriods * _dRateOfSalary ) ;\n            }\n\n            return( CalcUtilities.truncate( dReturn, 2 ) ) ;\n        };\n\n        this.getEmployerContrib = function( dModalEeContrib, dModalEeContribAscribed, dAnnualSalary, nPayPeriods, nYearOffset, nPayPeriodOffset ){\n            return( this.getProfitSharing( dAnnualSalary, nPayPeriods ) ) ;\n        };\n\n        this.reset = function( ){\n            this.setFlatAnnualContrib( 0 ) ;\n            this.setRateOfSalary( 0 ) ;\n        };\n\n\n        //  Private Method Declarations ------------------------------------\n        (function init( ){\n            // two tier employer match\n            _dRateOfSalary          = 0 ;\n            _dFlatAnnualContrib  = 0 ;\n        })();\n\n        function _set(d){\n            // determine type of parameter\n            if( d > 1 )  // not a rate\n                that.setFlatAnnualContrib( d ) ;\n            else\n                that.setRateOfSalary( d ) ;\n        }\n\n    });\n\n    //  Public Method Declarations ------------------------------------\n    StandardProfitSharing.prototype.modifyEeContrib = function( dModalEeContrib, dAnnualSalary, nPayPeriods ){\n        // no change\n        return( dModalEeContrib ) ;\n    };\n\n    return StandardProfitSharing;\n});","\ndefine(['./EmployerMatch'],\nfunction(EmployerMatch){\n\n    //  Constructor\n    var ConsecutiveTierEmployerMatch = function(nTierCount){\n\n        //  Private Var Declarations ------------------------------------\n        var _em = null;\n\n        //  Privileged Method Declarations ------------------------------------\n        this.getEmployerMatchObj = function( ){\n            return( _em ) ;\n        };\n\n        this.getTierCount = function( ) {\n            return( ( _em != null ) ? _em.getTierCount() : 0 ) ;\n        };\n\n        this.setTier = function(nTierNumber,dRange,dMatchRate ){\n            return( _setTier( ( nTierNumber - 1 ), dRange, dMatchRate ) ) ;\n        };\n\n        this.setFirstTier = function(dRange,dMatchRate ){\n            return( _setTier( 0, dRange, dMatchRate ) ) ;\n        };\n\n        this.setSecondTier = function(dRange,dMatchRate){\n            return( _setTier( 1, dRange, dMatchRate ) ) ;\n        };\n\n        this.setThirdTier = function(dRange,dMatchRate){\n            return( _setTier( 2, dRange, dMatchRate ) ) ;\n        };\n\n        this.setLastTier = function(dRange,dMatchRate){\n            if( _em.getTierCount() > 0 )\n                return( _setTier( ( _em.getTierCount() - 1 ), dRange, dMatchRate ) ) ;\n\n            return( false ) ;\n        };\n\n        this.setTierMatchRate = function(nTierNumber,dMatchRate){\n            return( _setTierMatchRate( ( nTierNumber - 1 ), dMatchRate ) ) ;\n        };\n\n        this.setTierMatchRange = function(nTierNumber,dRange){\n            return( _setTierRange( ( nTierNumber - 1 ), dRange ) ) ;\n        };\n\n        this.getTierMatchRate = function(nTierNumber){\n            return( _getTierMatchRate( ( nTierNumber - 1 ) ) ) ;\n        };\n\n        this.getTierMatchRange = function(nTierNumber){\n            return( _getTierMatchRange( ( nTierNumber - 1 ) ) ) ;\n        };\n\n        this.getEmployerMatchingContrib = function(dContrib,dSalary){\n            return( _em.getEmployerMatchingContrib( dContrib, dSalary ) ) ;\n        };\n\n        this.getEmployerMatchingContribPerTier = function(dContrib,dSalary,nIndex){\n            return( _em.getEmployerMatchingContribPerTier( dContrib, dSalary, nIndex ) ) ;\n        };\n\n        //  Private Method Declarations ------------------------------------\n        (function init(){\n            _em = new EmployerMatch() ;\n            for( var n = 0 ; n < nTierCount ; n++ )\n                _em.addMatchTier( 0.0, 0.0, 0.0 ) ;\n        })();\n\n\n        function _setTierRange(nIndex, dRange){\n            var bReturn = false ;\n            var dFloor = _em.getMatchTierFloorFactor( nIndex ) ;\n            if( ( dFloor + dRange ) != _em.getMatchTierCeilingFactor( nIndex ) ) {\n                bReturn = _em.setMatchTierCeilingFactor( nIndex, Math.min( ( dFloor + dRange ), 1.0 ) ) ;\n\n                // adjust remaining ranges\n                for( var n = ( nIndex + 1 ) ; n < _em.getTierCount() ; n++ ) {\n                    if( ( dFloor + dRange ) < 1.0 ) {\n                        // new floor factor\n                        dFloor = dFloor + dRange ;\n                        // new range\n                        var mtcf = _em.getMatchTierCeilingFactor( n );\n                        var mtff = _em.getMatchTierFloorFactor( n );\n                        dRange = mtcf - mtff ;\n                        _em.setMatchTierFloorFactor( n, dFloor ) ;\n                        _em.setMatchTierCeilingFactor( n, Math.min( ( dFloor + dRange ), 1.0 ) ) ;\n                    } else {\n                        _em.setMatchTierFloorFactor( n, 0.0 ) ;\n                        _em.setMatchTierCeilingFactor( n, 0.0 ) ;\n                    }\n                }\n            }\n\n            return( bReturn ) ;\n        }\n\n\n        function _setTierMatchRate( nIndex, dMatchRate ){\n            return( _em.setMatchTierMatchRate( nIndex, dMatchRate ) ) ;\n        }\n\n        function _getTierMatchRate(nIndex){\n            return( _em.getMatchTierMatchRate( nIndex ) ) ;\n        }\n\n        function _getTierMatchRange(nIndex){\n            return( _em.getMatchTierCeilingFactor( nIndex ) - _em.getMatchTierFloorFactor( nIndex ) ) ;\n        }\n\n        function _setTier(nIndex,dRange,dMatchRate ){\n            _setTierRange( nIndex, dRange ) ;\n            return( _setTierMatchRate( nIndex, dMatchRate ) ) ;\n        }\n    };\n\n    return ConsecutiveTierEmployerMatch;\n});\n\n","\ndefine(['./MatchTier'],\nfunction(MatchTier) {\n\n    //  Constructor\n    var EmployerMatch = function(){\n        //  Private Instance Variable Declaration -----------------------------\n        var _bHasChanged ;\n        var _n_mtCount ;\n        var _mt ;\n\n        //  Privileged Method Declarations ------------------------------------\n        this.changed = function( )\n        {\n            return( _bHasChanged ) ;\n        };\n\n\n        this.addMatchTier = function( dFloorFactor, dCeilingFactor, dMatchRate)\n        {\n            var bReturn = false ;\n            // assure legitimate parameters\n            if( ( dFloorFactor >= 0.0 ) &&\n                ( dCeilingFactor >= dFloorFactor ) &&\n                ( dCeilingFactor <= 1.0 )\n              ) {\n                // temp for new tier\n                var mt_Temp = new Array(_n_mtCount + 1) ;\n                for( var n = 0 ; n < ( _n_mtCount + 1 ) ; n++ )\n                    mt_Temp[n] = new MatchTier() ;\n\n                var nTempCount = ( _n_mtCount + 1 ) ;\n\n                // handle previous tiers\n                for( var m = 0 ; m < _n_mtCount ; m++ )\n                    mt_Temp[m] = _mt[m] ;\n\n                // set new\n                mt_Temp[ _n_mtCount ].setFloorThreshold( dFloorFactor ) ;\n                mt_Temp[ _n_mtCount ].setCeilingThreshold( dCeilingFactor ) ;\n                mt_Temp[ _n_mtCount ].setMatchRate( dMatchRate ) ;\n\n                // reset match tier pointer\n                _mt = mt_Temp ;\n\n                // set count\n                _n_mtCount = nTempCount ;\n                _setChanged( true ) ;\n                bReturn = true ;\n            }\n\n            return( bReturn ) ;\n        };\n\n        this.getTierCount = function( ){\n            return( _n_mtCount ) ;\n        };\n\n        this.clearMatchTiers = function( ){\n            var mt_Temp = new MatchTier()[ 0 ] ;\n            var nTempCount = 0 ;\n\n            // reset match tier pointer\n            _mt = mt_Temp ;\n\n            // set count\n            _n_mtCount = nTempCount ;\n            _setChanged( true ) ;\n        };\n\n        this.setMatchTierFloorFactor = function( nIndex, dFactor ){\n            var bReturn = false ;\n\n            if( this.isIndex( nIndex ) )\n            {\n                if( _mt[nIndex].getFloorThreshold() != dFactor )\n                {\n                    _mt[nIndex].setFloorThreshold( dFactor ) ;\n                    _setChanged( true ) ;\n                }\n                bReturn = true ;\n            }\n            return( bReturn ) ;\n        };\n\n        this.getMatchTierFloorFactor = function( nIndex ){\n            var dReturn = 0.0 ;\n\n            if( this.isIndex( nIndex ) ){\n                dReturn = _mt[nIndex].getFloorThreshold() ;\n            }\n            return( dReturn ) ;\n        };\n\n        this.setMatchTierCeilingFactor = function( nIndex, dFactor ) {\n            var bReturn = false ;\n\n            if( this.isIndex( nIndex ) ) {\n                if( _mt[nIndex].getCeilingThreshold() != dFactor ) {\n                    _mt[nIndex].setCeilingThreshold( dFactor ) ;\n                    _setChanged( true ) ;\n                }\n                bReturn = true ;\n            }\n            return( bReturn ) ;\n        };\n\n\n        this.getMatchTierCeilingFactor = function( nIndex ) {\n            var dReturn = 0.0 ;\n\n            if( this.isIndex( nIndex ) ) {\n                dReturn = _mt[nIndex].getCeilingThreshold() ;\n            }\n\n            return( dReturn ) ;\n        };\n\n        this.setMatchTierMatchRate = function( nIndex, dMatchRate ) {\n            var bReturn = false ;\n\n            if( this.isIndex( nIndex ) ) {\n                if( _mt[nIndex].getMatchRate() != dMatchRate ) {\n                    _mt[nIndex].setMatchRate( dMatchRate ) ;\n                    _setChanged( true ) ;\n                }\n                bReturn = true ;\n            }\n            return( bReturn ) ;\n        };\n\n        this.getMatchTierMatchRate = function( nIndex ) {\n            var dReturn = 0.0 ;\n\n            if( this.isIndex( nIndex ) ) {\n                dReturn = _mt[nIndex].getMatchRate() ;\n            }\n            return( dReturn ) ;\n        };\n\n        this.getEmployerMatchingContrib = function( dContrib, dSalary ) {\n            var dMatchAccumulator = 0.0 ;\n\n            // loop through tiers\n            for( var n = 0 ; n < _n_mtCount ; n++ ) {\n                dMatchAccumulator += _mt[n].getMatchAmount( dContrib, dSalary ) ;\n            }\n\n            return( dMatchAccumulator ) ;\n        };\n\n        this.getEmployerMatchingContribPerTier = function( dContrib, dSalary, nIndex ) {\n            var dReturn = 0.0 ;\n\n            // get tier match\n            if( this.isIndex( nIndex ) ) {\n                dReturn = _mt[nIndex].getMatchAmount( dContrib, dSalary ) ;\n            }\n\n            return( dReturn ) ;\n        };\n\n        //  Private Method Declarations ---------------------------------------\n        (function init(){\n            _n_mtCount = 0 ;\n            _mt = [];\n            _setChanged( true ) ;\n        })();\n\n        function _setChanged( b ){\n            _bHasChanged = b ;\n        }\n    };\n\n\n    //  Public Method Declarations ------------------------------------\n    EmployerMatch.prototype.isIndex = function( nIndex ){\n        return( ( nIndex > -1 ) && ( nIndex < this.getTierCount() ) ) ;\n    };\n\n    return EmployerMatch;\n\n});","\ndefine([], function() {\n\n    var MatchTier = function( dFloorFactor,  dCeilingFactor,  dMatchRate){\n\n        //  Private Variable Declarations ------------------------------------\n        var _dFloorThresholdFactor = dFloorFactor || 0;\n        var _dCeilingThresholdFactor = dCeilingFactor || 0;\n        var _dRate = dMatchRate || 0;\n\n        //  Privileged var declarations ------------------------------------\n        this.setFloorThreshold = function(d)\n        {\n            _dFloorThresholdFactor   = d ;\n        };\n\n        this.getFloorThreshold = function( )\n        {\n            return( _dFloorThresholdFactor ) ;\n        };\n\n        this.setCeilingThreshold = function(d)\n        {\n            _dCeilingThresholdFactor = d ;\n        };\n\n        this.getCeilingThreshold = function( )\n        {\n            return( _dCeilingThresholdFactor ) ;\n        };\n\n        this.setMatchRate = function(r)\n        {\n            _dRate = r ;\n        };\n\n        this.getMatchRate = function( )\n        {\n            return( _dRate ) ;\n        };\n\n\n        this.getMatchAmount = function(dContrib,dSalary ){\n            var dFloorAmount = _dFloorThresholdFactor * dSalary ;\n            var dCeilingAmount = _dCeilingThresholdFactor * dSalary ;\n\n            // get contrib portion greater than bottom of range\n            var dComponent = ( ( dContrib - dFloorAmount ) > 0.0 ) ? ( dContrib - dFloorAmount ) : 0.0 ;\n\n            // get contrib portion that remains within range\n            dComponent = ( dComponent > ( dCeilingAmount - dFloorAmount ) ) ? ( dCeilingAmount - dFloorAmount ) : dComponent ;\n\n            // apply rate of match\n            return( dComponent * _dRate ) ;\n\n        };\n    };\n\n    return MatchTier;\n\n});","import OMCalcWrapper from './calc/OMCalcWrapper';\nimport _LoanUtil from './calc/loan/LoanUtil';\nimport _AccountTypes from './calc/AccountTypes';\nexport function omCalculator(data, preSerialized){\n    return new OMCalcWrapper(data, preSerialized);\n}\n\nexport var LoanUtil = _LoanUtil;\nexport var AccountTypes = _AccountTypes;","/**\n * @file Utilities Library. Has helper utilities used across the app.\n */\ndefine([], function(){\n    Utilities = {};\n\n    /**\n     * Converts a number into a dollar formatted string with commas for display. EX: 4623.569 -> $4,624 || 4,623.57\n     * @param  {number}  money - The number value to be converted\n     * @param  {boolean} hasDollar - Prepends the dollar sign to the string\n     * @param  {boolean} round - Rounds the cents value to show a whole dollar.\n     * @param  {boolean} dontCutOnZero - If the value isn't rounded but the cent value is 00, don't remove the cent value.\n     * @return {string} formattedMoney - Formatted string version of number passed in.\n     */\n    Utilities.formatMoney = function(money, hasDollar, round, dontCutOnZero){\n        var _money = money;\n\n        if(_money === null) return \"\";\n\n        // Strip out everything but numbers and decimals\n        _money = (_money+\"\").replace(/[^0-9^\\.]/g,\"\")*1;\n\n        // Round the number if needed\n        if(round) _money = Math.round(_money);\n\n        // Adds commas where needed\n        var formattedMoney = _money.toFixed(2).replace(/./g, function(c, i, a) {\n            return i && c !== \".\" && !((a.length - i) % 3) ? ',' + c : c;\n        });\n\n        if(!dontCutOnZero && formattedMoney.substr(formattedMoney.indexOf(\".\")) == \".00\"){\n            formattedMoney = formattedMoney.substring(0, formattedMoney.indexOf(\".\"));\n        }\n\n        return (hasDollar?\"$\":\"\") + formattedMoney;\n    };\n\n    /**\n     * Converts a value to a percentage or to a whole number. And removes any floating point errors.\n     * @param  {number} value - value to be converted\n     * @param  {boolean} toDecimal\n     * @return {number}\n     */\n    Utilities.formatPercent = function(value,toDecimal) {\n        if (toDecimal) {\n            value = Utilities.cleanNumber( value/100 );\n        } else {\n            value = Utilities.cleanNumber( value*100 );\n        }\n\n        return value;\n    };\n\n    /**\n     * Removes possible floating point errors. EX: 3.53230000000004 -> 3.5323\n     * @param  {number} value - to be cleaned\n     * @return {number} cleaned number\n     */\n    Utilities.cleanNumber = function(value){\n        value = parseFloat( value );\n        return parseFloat(value.toFixed(4));\n    };\n\n    /**\n     * Returns the styles in a stylesheet by source name match\n     * @param  {string} src - stylesheet name\n     * @return {string}     string of all stylesheet rules\n     */\n    Utilities.getStyleSheetContent = function (src) {\n        var styleTags = document.getElementsByTagName(\"link\");\n        var styleTag = false;\n        for(var i in styleTags)\n        {\n            if(styleTags[i].href && styleTags[i].href.indexOf(src)!=-1)\n            {\n                styleTag = styleTags[i];\n                //break;\n            }\n        }\n        if(!styleTag)\n        {\n            return false;\n        }\n\n        // the style sheet in the style tag\n        var sheet = styleTag.sheet ? styleTag.sheet : styleTag.styleSheet;\n\n        var message = \"\";\n        if ('cssText' in sheet) {   // Internet Explorer\n            message = sheet.cssText;\n        }\n        else {  // Firefox, Opera, Google Chrome and Safari\n            for (var i = 0; i < sheet.cssRules.length; i++) {\n                message += sheet.cssRules[i].cssText;\n            }\n        }\n        return message;\n    }\n\n    /**\n     * Sends the google analytics to the ga window function\n     * @param  {object} trackParams Tracking Parameters.\n     *{\t'hitType': 'event',\n\t\t'eventCategory': eventCategory,\n\t\t'eventAction': eventAction,F\n\t\t'eventLabel': eventLabel,\n\t\t'eventValue': eventValue,\n\t\t'nonInteraction': optNoninteraction }\n     */\n    Utilities.gaActivityTrack = function( trackParams ) {\n        if ( window.sendGaActivity ) {\n            window.sendGaActivity(\n                trackParams.eventCategory,\n                trackParams.eventAction,\n                trackParams.eventLabel,\n                null,\n                trackParams.nonInteraction);\n            //console.log(\"Utilities | gaActivityTrack() | Sending data to analytics:  \", trackParams);\n        } else {\n            //console.log( \"Utilities | gaActivityTrack() | Tracking method not available:\", trackParams );\n        }\n    };\n\n    /**\n     * Tracking funciton for page changes.\n     * @param  {[type]} trackParams [description]\n     * {'page': page,\n\t\t'title': title}\n     * @return {[type]}             [description]\n     */\n    Utilities.gaPageActivityTrack = function( trackParams ) {\n        if ( window.sendGaPageActivity ) {\n            sendGaPageActivity(\n                trackParams.page,\n                trackParams.title);\n            //console.log( \"Utilities | gaPageActivityTrack() | Sending data to analytics:\", trackParams );\n        } else {\n            //console.log( \"Utilities | gaPageActivityTrack() | Tracking methods not available:\", trackParams );\n        }\n    };\n\n    /**\n     * copies object variables from source into destination.\n     * @param  {object} destination\n     * @param  {object} source\n     * @return {object}\n     */\n    Utilities.deepExtend = function(destination, source) {\n        for (var property in source) {\n            if (typeof source[property] === \"object\" &&\n                source[property] !== null ) {\n                destination[property] = destination[property] || {};\n                arguments.callee(destination[property], source[property]);\n            } else {\n                destination[property] = source[property];\n            }\n        }\n        return destination;\n    };\n\n    /**\n     * recursively copies an object into a new variable\n     * @param  {object} obj source object\n     * @return {object}     new duplicate object.\n     */\n    Utilities.clone = function(obj){\n        if(obj === null || typeof(obj) != 'object')\n            return obj;\n\n        var temp = obj.constructor(); // changed\n\n        for(var key in obj)\n            temp[key] = Utilities.clone(obj[key]);\n\n        return temp;\n    };\n\n    Utilities.iePsuedoElementHack = function($element) {\n        $element = $element || $(\"body\");\n        if ($(\"html\").hasClass(\"ie8\")) {\n\n            $element.find('[class^=\"icon\"]').each(function(){\n                $(this).append('<span class=\"psuedoIeFix\"></span>');\n                $(this).find(\".psuedoIeFix\").remove();\n            })\n\n        }\n    }; //end iePsuedoElementHack\n\n\n    return Utilities;\n});\n","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.FEModule = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FeModelBase = void 0;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n//shared with PWEB_MOBILE homepage estimates, see gulp-tasks/build.js fe-base:dist\nvar FeModelBase = /*#__PURE__*/function () {\n  function FeModelBase() {\n    _classCallCheck(this, FeModelBase);\n  }\n\n  _createClass(FeModelBase, [{\n    key: \"processFeData\",\n    value: function processFeData(omCalc) {\n      var feData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n\n      if (feData) {\n        this.feData = feData;\n      }\n\n      this.ssBenefitAmt = this.getSSBenefitAmt();\n      this.ssAddlBenefitsChgFlag = this.feData.socialSecData.socialSecAddlBenefitsChg;\n      this.ssAdditionalBenefits = this.getSSAdditionalBenefit();\n      this.calc = new omCalc({\n        feData: JSON.parse(JSON.stringify(this.feData))\n      });\n      this.feLandingObject = {\n        content: this.content,\n        socialSecEnabled: this.feData.socialSecData.socialSecEnabled,\n        ssInclude: this.feData.socialSecData.socialSecInclude,\n        retireAge: this.retireAge,\n        showRetireAgeSlider: this.feData.participantData.memberStatus === 'NON-MEMBER',\n        dcPlanData: this.feData.dcPlanData,\n        participantData: this.feData.participantData,\n        feForecastData: this.feData.feForecast,\n        currentPlanId: this.currentPlanId,\n        selectedPlan: this.selectedPlan,\n        iFrameURLs: this.feData.urls,\n        ssAdditionalBenefits: this.ssAdditionalBenefits,\n        ssAddlBenefitsChgFlag: this.ssAddlBenefitsChgFlag,\n        closeTheGapPlans: this.feData.feData.closeTheGapPlans\n      };\n    }\n  }, {\n    key: \"getSSBenefitAmt\",\n    value: function getSSBenefitAmt() {\n      return this.feData.feForecast.socialSecurityIncome;\n    }\n  }, {\n    key: \"getSSAdditionalBenefit\",\n    value: function getSSAdditionalBenefit() {\n      if (this.feData.socialSecData.specialNeedsEnabled && this.feData.socialSecData.socialSecInclude && (this.feData.socialSecData.isSSEnabled !== null || this.feData.socialSecData.isSSEnabled !== undefined)) {\n        if (!this.ssAddlBenefitsChgFlag && this.feData.socialSecData.socialSecAddlBenefits !== null) {\n          return this.ssBenefitAmt / 2;\n        } else {\n          return this.feData.socialSecData.socialSecAddlBenefits || 0;\n        }\n      }\n\n      return 0;\n    }\n  }]);\n\n  return FeModelBase;\n}();\n\nexports.FeModelBase = FeModelBase;\n\n},{}]},{},[1])(1)\n});\n","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.NonFEModule = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getAgePrecise = getAgePrecise;\nexports.formatTooltip = formatTooltip;\nexports.decodeString = decodeString;\nexports.makeStrong = makeStrong;\nexports.formatMoney = formatMoney;\nexports.getSocialSecurityBenefitAmt = getSocialSecurityBenefitAmt;\nexports.getPensionBenefitAmt = getPensionBenefitAmt;\nexports.cleanNumber = cleanNumber;\nexports.getDateFromString = getDateFromString;\nexports.getShortStringFromDate = getShortStringFromDate;\nexports.getTimeFromString = getTimeFromString;\nexports.formatPercent = formatPercent;\nexports.getAge = getAge;\nexports.clone = clone;\nexports.deepExtend = deepExtend;\nexports.formatDateTimeString = formatDateTimeString;\nexports.decodePlanName = decodePlanName;\nexports.getDateDiffInDays = getDateDiffInDays;\nexports.roundAndTruncate = roundAndTruncate;\nexports.getEligibleOMOtherAccounts = getEligibleOMOtherAccounts;\nexports.toFixedNoRounding = toFixedNoRounding;\nexports.removeJS = removeJS;\nexports.detectIE = detectIE;\nexports.getSNSliceColor = getSNSliceColor;\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction getAgePrecise(dob, ref) {\n  var today = ref === null || ref === undefined ? new Date() : ref;\n  var first = new Date(today);\n  /*\n   We are struggling here with IE8. The date can't be converted from a string and the\n   'getDateFromStirng' method does not work in IE8. Custom solution is in 'parse' polyfill.\n   */\n\n  var second = new Date(Date.parse(dob));\n  var earlier = new Date();\n  var later = new Date();\n  var dif, age; // assure positive difference\n\n  if (first.getTime() < second.getTime()) {\n    earlier.setTime(first);\n    later.setTime(second);\n  } else {\n    // reverse\n    earlier.setTime(second);\n    later.setTime(first);\n  }\n\n  dif = later.getFullYear() - earlier.getFullYear();\n  dif += (later.getMonth() - earlier.getMonth()) / 12;\n  dif += (later.getDate() - earlier.getDate()) / 361;\n  dif += 0.001; // from George Mazaitis\n\n  age = Math.floor(dif);\n  return age;\n}\n\nfunction formatTooltip(toolTipArray, tooltipMessage, isShowZero) {\n  var toolTipHtmlString = \"<div ><div><table class='tooltip-small-font'>\";\n  var tooltipMsg = [];\n\n  var _iterator = _createForOfIteratorHelper(toolTipArray),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var tooltipItem = _step.value;\n\n      if (tooltipItem.value !== 0 || isShowZero) {\n        tooltipMsg = tooltipItem.label && tooltipItem.label.split('&lt;br /&gt;&lt;br /&gt;') || '';\n        toolTipHtmlString = toolTipHtmlString + \"<tr><td style='font-weight: bold; '> $\" + formatMoney(tooltipItem.value, false, true) + '</td><td>-</td><td>' + (tooltipMsg[0] ? tooltipMsg[0].replace('-', '') : '') + ' </td></tr>';\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  if (tooltipMessage !== undefined && tooltipMessage.length === 0) {\n    tooltipMessage = tooltipMsg[1] ? decodeString(tooltipMsg[1]) : '';\n  } else if (tooltipMessage === undefined) {\n    tooltipMessage = '';\n  }\n\n  toolTipHtmlString = toolTipHtmlString + \"</table></div><p class='tooltip-small-font'>\" + tooltipMessage + '</p></div>';\n  return toolTipHtmlString;\n}\n\nfunction decodeString(str) {\n  var element = document.createElement('div');\n\n  if (str && typeof str === 'string') {\n    // strip script/html tags\n    str = str.replace(/<script[^>]*>([\\S\\s]*?)<\\/script>/gim, '');\n    str = str.replace(/<\\/?\\w(?:[^\"'>]|\"[^\"]*\"|'[^']*')*>/gim, '');\n    element.innerHTML = str;\n    str = element.textContent;\n    element.textContent = '';\n  }\n\n  return str;\n}\n\nfunction makeStrong(str) {\n  return '<strong>' + str + '</strong>';\n}\n\nfunction formatMoney(money, hasDollar, round, dontCutOnZero) {\n  var _money = money;\n\n  if (_money === null) {\n    return '';\n  } // Strip out everything but numbers and decimals\n\n\n  _money = (_money + '').replace(/[^0-9^\\.]/g, '') * 1; // Round the number if needed\n\n  if (round) {\n    _money = Math.round(_money);\n  } // Adds commas where needed\n\n\n  var formattedMoney = _money.toFixed(2).replace(/./g, function (c, i, a) {\n    return i && c !== '.' && !((a.length - i) % 3) ? ',' + c : c;\n  });\n\n  if (!dontCutOnZero && formattedMoney.substr(formattedMoney.indexOf('.')) === '.00') {\n    formattedMoney = formattedMoney.substring(0, formattedMoney.indexOf('.'));\n  }\n\n  return (hasDollar ? '$' : '') + formattedMoney;\n} //This looks up the SS Benefits array and map the benefit amount for retAge and ssAge\n\n\nfunction getSocialSecurityBenefitAmt(retireAge, socialSecurityStartAge, ssJsonObject) {\n  var monthlyBenefit = 0.0;\n\n  if (socialSecurityStartAge >= ssJsonObject.SSThreshold) {\n    var x = Math.min(Math.max(retireAge, ssJsonObject.lowRetRef), ssJsonObject.highRetRef) - ssJsonObject.lowRetRef;\n    var y = Math.min(Math.max(socialSecurityStartAge, ssJsonObject.lowSSRef), ssJsonObject.highSSRef) - ssJsonObject.lowSSRef;\n    monthlyBenefit = ssJsonObject.monthlyBenefits[x][y];\n  }\n\n  return monthlyBenefit;\n}\n\nfunction getPensionBenefitAmt(startBenefitAge, yearInRetirement, benefitsObject) {\n  var monthlyBenefit = 0.0;\n  var arrayObject;\n\n  try {\n    if (startBenefitAge >= benefitsObject.lowRef) {\n      arrayObject = null;\n\n      if (startBenefitAge >= benefitsObject.highRef) {\n        arrayObject = benefitsObject.benefits[benefitsObject.benefits.length - 1];\n      } else {\n        arrayObject = benefitsObject.benefits[startBenefitAge - benefitsObject.lowRef];\n      }\n\n      if (yearInRetirement >= arrayObject.length) {\n        monthlyBenefit = arrayObject[arrayObject.length - 1];\n      } else {\n        monthlyBenefit = arrayObject[yearInRetirement];\n      }\n    }\n  } catch (error) {}\n\n  return monthlyBenefit;\n}\n\nfunction cleanNumber(value) {\n  value = parseFloat(value);\n  return parseFloat(value.toFixed(4));\n} // return Date object from string formated as \"YYYY-MM-DDT00:00:00\"\n\n\nfunction getDateFromString(dateString, includeTime) {\n  var date;\n\n  var _dateString;\n\n  var _datePieces;\n\n  var _tIndex = dateString.indexOf('T');\n\n  if (_tIndex > -1) {\n    _dateString = dateString.substr(0, _tIndex);\n    _datePieces = _dateString.split('-');\n\n    if (!includeTime) {\n      date = new Date(_datePieces[0], _datePieces[1] - 1, _datePieces[2]);\n    } else {\n      var _timeString = dateString.substr(_tIndex + 1);\n\n      var _timePieces = _timeString.split(':');\n\n      date = new Date(_datePieces[0], _datePieces[1] - 1, _datePieces[2], _timePieces[0], _timePieces[1], _timePieces[2]);\n    }\n  } else {\n    date = new Date(dateString);\n  }\n\n  return date;\n}\n\nfunction getShortStringFromDate(dateObj, separator) {\n  var _separator = separator || '-';\n\n  var _mm = dateObj.getMonth() + 1;\n\n  var _dd = dateObj.getDate();\n\n  var _yy = dateObj.getFullYear();\n\n  if (_mm < 10) {\n    _mm = '0' + _mm;\n  }\n\n  if (_dd < 10) {\n    _dd = '0' + _dd;\n  }\n\n  return _yy + _separator + _mm + _separator + _dd;\n}\n\nfunction getTimeFromString(dateString) {\n  var _timeString = undefined;\n\n  var _timePieces;\n\n  var _period = 'AM';\n\n  var _tIndex = dateString.indexOf('T');\n\n  if (_tIndex > -1) {\n    // First, get the Time part of the string\n    _timeString = dateString.substr(_tIndex + 1);\n    _timePieces = _timeString.split(':'); // If HH is greater than 12, subtract 12 and flip to PM\n\n    if (_timePieces[0] >= 12) {\n      _period = 'PM';\n      _timePieces[0] = _timePieces[0] - 12;\n    } //Make sure that the hour is shown as 12 not 0\n\n\n    if (_timePieces[0] == 0) {\n      _timePieces[0] = 12;\n    } // truncate the 0 off the beginning if necessary\n\n\n    _timePieces[0] = parseInt(_timePieces[0], 10); //    put them back together\n\n    _timeString = _timePieces.join(':') + ' ' + _period;\n  }\n\n  return _timeString;\n}\n\nfunction formatPercent(value, toDecimal) {\n  if (toDecimal) {\n    value = cleanNumber(value / 100);\n  } else {\n    value = cleanNumber(value * 100);\n  }\n\n  return value;\n} //This is from om-modules\n\n\nfunction getAge(dob) {\n  var age;\n  var diff;\n\n  if (dob) {\n    diff = new Date() - new Date(dob);\n    age = Math.floor(diff / 1000 / 60 / 60 / 24 / 365);\n  }\n\n  return age;\n}\n\nfunction clone(obj) {\n  if (obj === null || _typeof(obj) !== 'object') {\n    return obj;\n  }\n\n  var temp = obj.constructor(); // changed\n\n  for (var key in obj) {\n    temp[key] = clone(obj[key]);\n  }\n\n  return temp;\n}\n\nfunction deepExtend(destination, source) {\n  for (var property in source) {\n    if (_typeof(source[property]) === 'object' && source[property] !== null) {\n      destination[property] = destination[property] || {};\n      arguments.callee(destination[property], source[property]);\n    } else {\n      destination[property] = source[property];\n    }\n  }\n\n  return destination;\n}\n\nfunction formatDateTimeString(dateString) {\n  var _tIndex = dateString.indexOf('T');\n\n  var _dateString = dateString.substr(0, _tIndex);\n\n  var _datePieces = _dateString.split('-');\n\n  var returnString = parseInt(_datePieces[1], 10) + '/' + parseInt(_datePieces[2], 10) + '/' + _datePieces[0].substr(2) + ' ';\n  return returnString + getTimeFromString(dateString);\n}\n\nfunction decodePlanName(planName) {\n  if (planName && typeof planName === 'string') {\n    planName = planName.replace(/\\+/g, ' ');\n    planName = unescape(planName).trim();\n  }\n\n  return planName;\n}\n\nfunction getDateDiffInDays(date1, date2) {\n  //Get 1 day in milliseconds\n  var one_day = 1000 * 60 * 60 * 24; // convert both dates to milliseconds\n\n  var date1_ms = date1.getTime();\n  var date2_ms = date2.getTime(); // calculate the difference in milliseconds\n\n  var difference_ms = date2_ms - date1_ms; // convert back to days and return\n\n  return Math.round(difference_ms / one_day);\n}\n\nfunction roundAndTruncate(dNumber, iDecimals) {\n  // round and truncate\n  var dInterim = 0.0;\n  var dDecimalFactor = Math.pow(10.0,\n  /*(double)*/\n  iDecimals); // round\n\n  dNumber += 0.500000001 / dDecimalFactor; // truncate\n\n  dNumber *= dDecimalFactor;\n  dInterim = Math.floor(dNumber);\n  return dInterim / dDecimalFactor;\n}\n\nfunction getEligibleOMOtherAccounts(dashBoardOtherAccounts) {\n  var eligibleForOrangeMoneyAccounts = [];\n\n  if (dashBoardOtherAccounts !== null && dashBoardOtherAccounts.dataStatus === 'OK') {\n    if (dashBoardOtherAccounts.retirementAccounts && dashBoardOtherAccounts.retirementAccounts.dataStatus === 'OK') {\n      dashBoardOtherAccounts.retirementAccounts.accounts.map(function (account) {\n        if (account.eligibleForOrangeMoney) {\n          eligibleForOrangeMoneyAccounts.push(account);\n        }\n      });\n    }\n\n    if (dashBoardOtherAccounts.annuityAccounts && dashBoardOtherAccounts.annuityAccounts.dataStatus === 'OK') {\n      dashBoardOtherAccounts.annuityAccounts.accounts.map(function (account) {\n        if (account.eligibleForOrangeMoney) {\n          eligibleForOrangeMoneyAccounts.push(account);\n        }\n      });\n    }\n\n    if (dashBoardOtherAccounts.brokerageAccounts && dashBoardOtherAccounts.brokerageAccounts.dataStatus === 'OK') {\n      dashBoardOtherAccounts.brokerageAccounts.accounts.map(function (account) {\n        if (account.eligibleForOrangeMoney) {\n          eligibleForOrangeMoneyAccounts.push(account);\n        }\n      });\n    }\n  }\n\n  return eligibleForOrangeMoneyAccounts;\n}\n/*\n * Round DOWN the decimals.\n * Ex: 123.4567 = 123.45\n * Ex: 123.7654 = 123.76\n * Ex: 123.1234 = 123.12\n */\n\n\nfunction toFixedNoRounding(n, p) {\n  var result = parseFloat(n.toFixed(p));\n  return result <= n ? result : result - parseFloat(Math.pow(0.1, p).toFixed(p));\n}\n\nfunction removeJS(text) {\n  return text ? text.replace(\"javascript:popWin('\", '').replace(\"',500,742,'yes','yes','yes','yes','yes','yes','PopWin')\\\"\", '\" target=\"_blank\"') : '';\n}\n/**\n * detect IE\n * @return {boolean} version of IE or false, if browser is not Internet Explorer\n */\n\n\nfunction detectIE() {\n  var ua = window.navigator.userAgent; // Test values; Uncomment to check result …\n  // IE 10\n  // ua = 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0)';\n  // IE 11\n  // ua = 'Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko';\n  // Edge 12 (Spartan)\n  // ua = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.71 Safari/537.36 Edge/12.0';\n  // Edge 13\n  // ua = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2486.0 Safari/537.36 Edge/13.10586';\n\n  var msie = ua.indexOf('MSIE ');\n\n  if (msie > 0) {\n    // IE 10 or older => return version number\n    return parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);\n  }\n\n  var trident = ua.indexOf('Trident/');\n\n  if (trident > 0) {\n    // IE 11 => return version number\n    var rv = ua.indexOf('rv:');\n    return parseInt(ua.substring(rv + 3, ua.indexOf('.', rv)), 10);\n  }\n\n  var edge = ua.indexOf('Edge/');\n\n  if (edge > 0) {\n    // Edge (IE 12+) => return version number\n    return parseInt(ua.substring(edge + 5, ua.indexOf('.', edge)), 10);\n  } // other browser\n\n\n  return false;\n}\n/*\n * @param {object} data - the slice data object\n * @return {string} color - hex value\n */\n\n\nfunction getSNSliceColor(data) {\n  var color = data.pensionContributionValue > 0 || data.otherContributionValue > 0 ? '#FCA325' : '#EE7E1A';\n\n  if (data.pensionContributionValue > 0 && data.otherContributionValue > 0) {\n    color = '#FEBA27';\n  }\n\n  return color;\n}\n\n},{}],2:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LABEL_OKAY = exports.LABEL_SORRY = exports.SERVICE_SAVE_SUCCESS_ALT_MSG = exports.FE_SERVICE_ERROR_ALT_MSG = exports.HIDE_SECTION_TEXT = exports.SHOW_SECTION_TEXT = exports.CONSTANTS = exports.CATCHUP_SOURCES = void 0;\nvar CONSTANTS = {\n  STATIC_BENEFIT: 'StaticBenefit',\n  CALC_BENEFIT: 'CalcBenefit',\n  SLIDER: {\n    UPDATE_IRS_ALERT: 'slider:updateIrsSlider'\n  },\n  ALERT_POPUP: 'alert_popup',\n  RESET_ORIGINAL: 'reset_original',\n  POST_CONFIRMATION: 'post_confirmation',\n  ERRORS: {\n    OLTP: 'system-unavailable',\n    MGP: 'external-ws-error',\n    IADMIN: 'iadmin-edinfo-exception',\n    SR_ERROR: 'external-ws-error',\n    SYSTEM_ERROR: 'error:systemError'\n  },\n  OTHER_RETIREMENT_INCOME_PATH: 'voya-orange-money/rs/fe/other-retirement/other-retirement-income',\n  PENSION_INCOME_ESTIMATE_PATH: 'voya-orange-money/rs/fe/modals/pension-income-estimate/pension-income-estimate',\n  PENSION_INCOME_RESULTS_PATH: 'voya-orange-money/rs/fe/modals/pension-income-results/pension-income-results',\n  SR_ERROR_MSG: 'Oops, something went wrong and we cannot project your benefit at this time. For now, you can enter your own estimate using the other option above. Please try back, ' + 'we should have this fixed soon and we apologize for any inconvenience',\n  SR_ERROR_MSG_FE: 'We are unable to estimate your pension income at this time.  Please try again soon.',\n  SR_ERROR_MSG_FE_ICON: '<i class=\"voya-field__left-icon fa fa-exclamation-triangle\" aria-hidden=\"true\"></i>We are unable to estimate your pension income at this time.  Please try again soon.',\n  SR_ERROR_MSG_FE_RET_SYS: '<i class=\"voya-field__left-icon fa fa-exclamation-triangle\" aria-hidden=\"true\"></i>Your retirement system details are unavailable at this time. Please try again soon.'\n};\nexports.CONSTANTS = CONSTANTS;\nvar CATCHUP_SOURCES = {\n  CATCHUP_AGE_PRETAX: 'CATCHUP_AGE_PRETAX',\n  CATCHUP_AGE_ROTH: 'CATCHUP_AGE_ROTH'\n};\nexports.CATCHUP_SOURCES = CATCHUP_SOURCES;\nvar SHOW_SECTION_TEXT = 'Show this section';\nexports.SHOW_SECTION_TEXT = SHOW_SECTION_TEXT;\nvar HIDE_SECTION_TEXT = 'Hide this section';\nexports.HIDE_SECTION_TEXT = HIDE_SECTION_TEXT;\nvar FE_SERVICE_ERROR_ALT_MSG = \"We're unable to save your changes right now.\";\nexports.FE_SERVICE_ERROR_ALT_MSG = FE_SERVICE_ERROR_ALT_MSG;\nvar SERVICE_SAVE_SUCCESS_ALT_MSG = 'Your changes have been saved.';\nexports.SERVICE_SAVE_SUCCESS_ALT_MSG = SERVICE_SAVE_SUCCESS_ALT_MSG;\nvar LABEL_SORRY = 'Sorry!';\nexports.LABEL_SORRY = LABEL_SORRY;\nvar LABEL_OKAY = 'OKAY';\nexports.LABEL_OKAY = LABEL_OKAY;\n\n},{}],3:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DollarGraphHeaderModel = void 0;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar DollarGraphHeaderModel = function DollarGraphHeaderModel(dollarGraphHeaderObject, isFE) {\n  _classCallCheck(this, DollarGraphHeaderModel);\n\n  var income = dollarGraphHeaderObject.estimatedMonthlyIncome;\n  var shortfall = dollarGraphHeaderObject.difference;\n  var socialSecurityInclude = dollarGraphHeaderObject.includeSS;\n\n  if (!isFE && socialSecurityInclude !== undefined && !socialSecurityInclude) {\n    income -= dollarGraphHeaderObject.ssBenefitAmt;\n    shortfall += dollarGraphHeaderObject.ssBenefitAmt;\n  }\n\n  this.estimatedMonthlyIncome = income;\n  this.estimatedMonthlyGoal = dollarGraphHeaderObject.estimatedMonthlyGoal;\n  this.differenceOf = shortfall;\n};\n\nexports.DollarGraphHeaderModel = DollarGraphHeaderModel;\n\n},{}],4:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DollarGraphSlicesModel = void 0;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Created by i706495 on 04/22/2016.\n */\nvar DollarGraphSlicesModel = function DollarGraphSlicesModel(data) {\n  _classCallCheck(this, DollarGraphSlicesModel);\n\n  this.ssAdditionalBenefits = data.ssAdditionalBenefits || 0;\n  this.accountBalanceValue = data.accountBalanceValue;\n  this.ssContributionValue = data.ssContributionValue;\n  this.otherContributionValue = data.otherContributionValue;\n  this.pensionContributionValue = data.pensionContributionValue;\n  this.shortFall = data.shortFall;\n  this.includeSS = data.includeSS;\n  this.toolTipData = data.toolTipData;\n  this.guaranteedIncomeValue = data.guaranteedIncome || 0;\n};\n\nexports.DollarGraphSlicesModel = DollarGraphSlicesModel;\n\n},{}],5:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AboutMeModel = void 0;\n\nvar _utilities = require(\"../../../common/utilities\");\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar AboutMeModel = /*#__PURE__*/function () {\n  function AboutMeModel(aboutMeData) {\n    _classCallCheck(this, AboutMeModel);\n\n    var planData = aboutMeData.pptDCAccount;\n    var userData = aboutMeData.personalData;\n    var incomeReplacementRatio = (0, _utilities.cleanNumber)(userData.incomeReplacementRatio * 100);\n    var estimatedSalaryIncrease = (0, _utilities.cleanNumber)(userData.annualSalaryIncrementRate * 100); // Manipulate the date object to fill the three separate fields\n\n    var dob = userData.dob;\n    var date = (0, _utilities.getDateFromString)(dob);\n    var year = date.getFullYear();\n    var month = date.getMonth() + 1;\n    var day = date.getDate();\n    this.currentSalary = userData.currentAnnualSalary;\n    this.estimatedSalaryIncrease = estimatedSalaryIncrease; //userData.annualSalaryIncrementRate;\n\n    this.birthYear = year.toString();\n    this.birthMonth = month.toString();\n    this.birthDay = day.toString();\n    this.userPlans = this.getPlanInfo(planData, aboutMeData.calc);\n    this.incomeReplacementRatio = incomeReplacementRatio;\n    this.profileHelpText = aboutMeData.profileHelpText;\n    this.profileHelpTextTotalContrib = aboutMeData.profileHelpTextTotalContrib;\n  }\n\n  _createClass(AboutMeModel, [{\n    key: \"getPlanInfo\",\n    value: function getPlanInfo(planData, calc) {\n      var plans = [];\n      var currentPlan;\n      var currentMatchData;\n\n      for (var i = 0; i < planData.length; i++) {\n        currentPlan = planData[i];\n        currentMatchData = currentPlan.matchData;\n        currentMatchData.planId = currentPlan.planInfo.planId; //\tProfit Sharing Amount\n\n        if (currentMatchData.profitSharingContributionAmount !== null) {\n          currentPlan.hasProfitSharingAmt = true;\n          currentPlan.profitSharingAmount = currentMatchData.profitSharingContributionAmount.value;\n        } else {\n          currentPlan.hasProfitSharingAmt = false;\n        } //\tProfit Sharing Rate\n\n\n        if (currentMatchData.profitSharingContributionRate !== null) {\n          currentPlan.hasProfitSharingRate = true;\n          currentPlan.profitSharingRate = (0, _utilities.cleanNumber)(currentMatchData.profitSharingContributionRate.value * 100);\n        } else {\n          currentPlan.hasProfitSharingRate = false;\n        } //\tShow ER Match fields\n\n\n        var erMatchType = currentMatchData.erMatch.matchType;\n\n        if (erMatchType === 'STANDARD' && currentMatchData.erMatch.matchTierOptions > 0) {\n          currentPlan.showErMatch = true;\n          currentPlan.includeErMatch = currentMatchData.includeErMatch;\n\n          if (!currentMatchData.erMatchFromRKSystem) {\n            currentPlan.percent1 = (0, _utilities.cleanNumber)(currentMatchData.erMatch.percent1 * 100);\n            currentPlan.range1 = (0, _utilities.cleanNumber)(currentMatchData.erMatch.range1 * 100);\n\n            if (currentMatchData.erMatch.matchTierOptions > 1) {\n              currentPlan.percent2 = (0, _utilities.cleanNumber)(currentMatchData.erMatch.percent2 * 100);\n              currentPlan.range2 = (0, _utilities.cleanNumber)(currentMatchData.erMatch.range2 * 100);\n            }\n          }\n        } // Mandatory Employee Contribution\n\n\n        var eemc = currentMatchData.mandatoryEeContribution;\n\n        if (eemc !== null) {\n          currentPlan.includeEeContribution = true;\n          currentPlan.mandatoryEeContribution = eemc.unit === 'PERCENT' ? eemc.value * 100 : eemc.value;\n          currentPlan.mandatoryEeContribType = eemc.unit; // add boolean for range\n\n          currentPlan.mandatoryEeContribIsRate = eemc.unit === 'PERCENT' ? true : false;\n          currentPlan.eeLimits = calc.getMandatoryEeContribLimits(currentPlan.mandatoryEeContribType);\n        } else {\n          currentPlan.includeEeContribution = false;\n        } // Mandatory Employer Contribution\n\n\n        var ermc = currentMatchData.mandatoryErContribution;\n\n        if (ermc !== null) {\n          currentPlan.includeErContribution = true;\n          currentPlan.mandatoryErContribution = ermc.unit === 'PERCENT' ? ermc.value * 100 : ermc.value;\n          currentPlan.mandatoryErContribType = ermc.unit; // add boolean for range\n\n          currentPlan.mandatoryErContribIsRate = ermc.unit === 'PERCENT' ? true : false;\n          currentPlan.erLimits = calc.getMandatoryErContribLimits(currentPlan.mandatoryErContribType);\n        } else {\n          currentPlan.includeErContribution = false;\n        }\n\n        if (currentMatchData.excludeAllVoluntaryContrib) {\n          var totalEeAndErContrib = 0.0;\n\n          if (eemc !== null) {\n            totalEeAndErContrib += eemc.unit === 'PERCENT' ? eemc.value * 100 : eemc.value;\n          }\n\n          if (ermc !== null) {\n            totalEeAndErContrib += ermc.unit === 'PERCENT' ? ermc.value * 100 : ermc.value;\n          }\n\n          currentMatchData.totalEeAndErContrib = totalEeAndErContrib;\n        }\n\n        plans.push(currentPlan);\n      }\n\n      return plans;\n    }\n  }]);\n\n  return AboutMeModel;\n}();\n\nexports.AboutMeModel = AboutMeModel;\n\n},{\"../../../common/utilities\":1}],6:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DollarGraphSlidersModel = void 0;\n\nvar _utilities = require(\"../../../common/utilities\");\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar DollarGraphSlidersModel = /*#__PURE__*/function () {\n  function DollarGraphSlidersModel(dollarGraphSlidersObject) {\n    _classCallCheck(this, DollarGraphSlidersModel);\n\n    this.pptDCAccount = dollarGraphSlidersObject.pptDCAccount;\n    this.currentPlanID = dollarGraphSlidersObject.currentPlanID;\n    this.riskTolerance = this.getInvestmentReturnPct(dollarGraphSlidersObject.personalData);\n    this.pptCurrentAge = (0, _utilities.getAgePrecise)((0, _utilities.getDateFromString)(dollarGraphSlidersObject.personalData.dob));\n    this.getRetirementAgeInfo(dollarGraphSlidersObject.personalData);\n    this.retirementAgeLabel = dollarGraphSlidersObject.retirementAgeLabel;\n    this.rateOfReturnSliderLabel = dollarGraphSlidersObject.rateOfReturnSliderLabel;\n    this.retireAgeHelpText = dollarGraphSlidersObject.retireAgeHelpText;\n    this.contribSliderHelptext = dollarGraphSlidersObject.contribSliderHelptext;\n    this.amountPayText = dollarGraphSlidersObject.amountPayText;\n    this.rorHelpText = dollarGraphSlidersObject.rorHelpText;\n    this.currentAnnualSalary = dollarGraphSlidersObject.personalData.currentAnnualSalary;\n    this.sourceLimits = dollarGraphSlidersObject.sourceLimits;\n    this.contribHeader = dollarGraphSlidersObject.contribHeader;\n    this.selectedPlan = dollarGraphSlidersObject.selectedPlan;\n  }\n\n  _createClass(DollarGraphSlidersModel, [{\n    key: \"getInvestmentReturnPct\",\n    value: function getInvestmentReturnPct(personalData) {\n      var riskTolerance;\n\n      if (personalData) {\n        riskTolerance = (0, _utilities.cleanNumber)(personalData.investmentRateOfReturn) * 100;\n      } else {\n        riskTolerance = 0;\n      }\n\n      return riskTolerance;\n    }\n  }, {\n    key: \"getRetirementAgeInfo\",\n    value: function getRetirementAgeInfo(personalData) {\n      this.retirementAge = personalData.retirementAge; //Calculating min retirement age\n\n      this.minRetireAge = Math.min(this.pptCurrentAge + 1, 80);\n\n      if (this.retirementAge < this.minRetireAge) {\n        this.retirementAge = this.minRetireAge;\n      }\n    }\n  }]);\n\n  return DollarGraphSlidersModel;\n}();\n\nexports.DollarGraphSlidersModel = DollarGraphSlidersModel;\n\n},{\"../../../common/utilities\":1}],7:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NonFeLandingModel = void 0;\n\nvar _dollarGraphHeaderModel = require(\"./../dollar-graph-header-model\");\n\nvar _dollarGraphSlicesModel = require(\"./../dollar-graph-slices-model\");\n\nvar _aboutMeModel = require(\"./about-me-model\");\n\nvar _dollarGraphSlidersModel = require(\"./dollar-graph-sliders-model\");\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar NonFeLandingModel = /*#__PURE__*/function () {\n  function NonFeLandingModel(nonFeLandingObject) {\n    var dollarGraphHeaderModel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _dollarGraphHeaderModel.DollarGraphHeaderModel;\n    var dollarGraphSlicesModel = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _dollarGraphSlicesModel.DollarGraphSlicesModel;\n    var dollarGraphSlidersModel = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _dollarGraphSlidersModel.DollarGraphSlidersModel;\n\n    _classCallCheck(this, NonFeLandingModel);\n\n    this.ssAdditionalBenefits = this.getSSAddlBenefits(nonFeLandingObject);\n    this.ssBenefits = this.getSSBenefits(nonFeLandingObject);\n    this.income = this.getIncome(nonFeLandingObject);\n    this.shortfallVal = this.getDifference(nonFeLandingObject);\n    this.dollarGraphHeaderModel = new dollarGraphHeaderModel(this.createDollarGraphHeaderObject(nonFeLandingObject));\n    this.dollarGraphSlicesModel = new dollarGraphSlicesModel(this.createDollarGraphSlices(nonFeLandingObject), false\n    /*isFE*/\n    );\n    this.dollarGraphSlidersModel = new dollarGraphSlidersModel(this.createDollarGraphSlidersModel(nonFeLandingObject));\n    this.dollarGraphFooterModel = this.createDollarGraphFooterData(nonFeLandingObject);\n  }\n\n  _createClass(NonFeLandingModel, [{\n    key: \"getSSAddlBenefits\",\n    value: function getSSAddlBenefits(nonFeLandingObject) {\n      var ssStartAge = nonFeLandingObject.calculatedSSData.ssStartValue;\n      var ssRetireAge = nonFeLandingObject.calculatedSSData.ssStartRetireAgeValue;\n\n      if (ssRetireAge < ssStartAge) {\n        return 0;\n      } else if (ssRetireAge > ssStartAge) {\n        return nonFeLandingObject.ssAdditionalBenefits;\n      } else if (ssRetireAge === ssStartAge) {\n        return nonFeLandingObject.ssAdditionalBenefits;\n      }\n    }\n  }, {\n    key: \"getSSBenefits\",\n    value: function getSSBenefits(nonFeLandingObject) {\n      var ssStartAge = nonFeLandingObject.ssStartAge;\n      var ssRetireAge = nonFeLandingObject.ssRetireAge;\n\n      if (ssRetireAge < ssStartAge) {\n        return 0;\n      } else if (ssRetireAge > ssStartAge) {\n        return nonFeLandingObject.calcResponse.getMonthlyEstimateFromSocialSecurity();\n      } else if (ssRetireAge === ssStartAge) {\n        return nonFeLandingObject.calcResponse.getMonthlyEstimateFromSocialSecurity();\n      }\n    }\n  }, {\n    key: \"getIncome\",\n    value: function getIncome(nonFeLandingObject) {\n      var ssStartAge = nonFeLandingObject.ssStartAge;\n      var ssRetireAge = nonFeLandingObject.ssRetireAge;\n      var incomeAtSS = nonFeLandingObject.calculatedSSData.ssIncomeSS + nonFeLandingObject.calculatedSSData.ssBenefitSS + this.ssAdditionalBenefits;\n      var incomeAtRA = nonFeLandingObject.calculatedSSData.ssIncomeRA + nonFeLandingObject.calculatedSSData.ssBenefitRA + this.ssAdditionalBenefits;\n\n      if (ssRetireAge < ssStartAge) {\n        return incomeAtRA;\n      } else if (ssRetireAge > ssStartAge) {\n        return incomeAtRA;\n      } else if (ssRetireAge === ssStartAge) {\n        return incomeAtSS;\n      }\n    }\n  }, {\n    key: \"getIncomeWithLis\",\n    value: function getIncomeWithLis(nonFeLandingObject) {\n      var participantOrangeData = nonFeLandingObject.pptDCAccount;\n      var gIncomeSubtotalLisPlans = 0.0;\n      var numOfCAccount = participantOrangeData.length;\n\n      for (var i = 0; i < numOfCAccount; i++) {\n        if (participantOrangeData[i].planInfo.partHasHundredPctLis) {\n          gIncomeSubtotalLisPlans += participantOrangeData[i].planInfo.planGuaranteedIncome;\n        }\n      }\n\n      return gIncomeSubtotalLisPlans;\n    }\n  }, {\n    key: \"checkDCandLisPlansBalance\",\n    value: function checkDCandLisPlansBalance(nonFeLandingObject) {\n      var participantOrangeData = nonFeLandingObject.pptDCAccount;\n      var dcBalance = nonFeLandingObject.personalData.currentDcBalance;\n      var dcPlansBalanceForLis = 0.0;\n      var numOfCAccount = participantOrangeData.length;\n\n      for (var i = 0; i < numOfCAccount; i++) {\n        if (participantOrangeData[i].planInfo.partHasHundredPctLis) {\n          dcPlansBalanceForLis += participantOrangeData[i].planInfo.planBalance;\n        }\n      }\n\n      return dcPlansBalanceForLis === dcBalance;\n    }\n  }, {\n    key: \"getDifference\",\n    value: function getDifference(nonFeLandingObject) {\n      return nonFeLandingObject.calcResponse.getMonthlySalaryReplacementRequirement() - this.income;\n    }\n  }, {\n    key: \"createDollarGraphHeaderObject\",\n    value: function createDollarGraphHeaderObject(nonFeLandingObject) {\n      return {\n        estimatedMonthlyIncome: this.income,\n        estimatedMonthlyGoal: nonFeLandingObject.calcResponse.getMonthlySalaryReplacementRequirement(),\n        difference: this.shortfallVal,\n        includeSS: nonFeLandingObject.includeSS,\n        ssBenefitAmt: this.ssBenefits\n      };\n    }\n  }, {\n    key: \"createDollarGraphSlices\",\n    value: function createDollarGraphSlices(nonFeLandingObject) {\n      var calcResponse = nonFeLandingObject.calcResponse;\n      this.guaranteedIncome = nonFeLandingObject.guaranteedIncome || 0;\n      this.monthlyDCBalance = nonFeLandingObject.getAccountBalWithGuaranteedIncome(nonFeLandingObject.calcResponse.getMonthlyEstimateFromDCBalance(), this.guaranteedIncome); // computed account value\n\n      var accountVal = this.monthlyDCBalance + calcResponse.getMonthlyEstimateFromEmployee() + calcResponse.getMonthlyEstimateFromEmployer(); // computed pension value\n\n      this.pensionVal = calcResponse.getMonthlyEstimateFromPension() + calcResponse.getMonthlyEstimateFromPensionAsIncome(); // computed other value\n\n      this.otherVal = calcResponse.getMonthlyEstimateFromOther() + calcResponse.getMonthlyEstimateFromIncome(); // computed shortfall value\n\n      return {\n        accountBalanceValue: accountVal,\n        ssContributionValue: this.ssBenefits,\n        otherContributionValue: this.otherVal,\n        pensionContributionValue: this.pensionVal,\n        shortFall: this.shortfallVal,\n        includeSS: nonFeLandingObject.includeSS,\n        toolTipData: this.getToolTipData(nonFeLandingObject),\n        ssAdditionalBenefits: this.ssAdditionalBenefits,\n        guaranteedIncome: this.guaranteedIncome\n      };\n    }\n  }, {\n    key: \"getToolTipData\",\n    value: function getToolTipData(nonFeLandingObject) {\n      var calcResponse = nonFeLandingObject.calcResponse;\n      var content = nonFeLandingObject.content;\n      var monthlyEmployeeEstimate = calcResponse.getMonthlyEstimateFromEmployee();\n      var monthlyEmployerEstimate = calcResponse.getMonthlyEstimateFromEmployer();\n      var acctSlicesContent = content.AccountBalanceNonFE_AmtBalAndFutureContrib;\n      var pensionSlice = {\n        label: content.PensionNonFE_AmtFromPension,\n        value: this.pensionVal\n      };\n      var socialSecuritySlice = {\n        label: content.SocialSecurityNonFE_Content1,\n        value: this.ssBenefits\n      };\n      var additionalBenefitsSlice = {\n        label: content.SpecialNeeds_SNViewDetailsDollarBillHoverText,\n        value: this.ssAdditionalBenefits\n      };\n      var otherIncomeSlice = {\n        label: content.OtherIncomeNonFE,\n        value: this.otherVal\n      };\n      var guaranteedIncomeSlice = {\n        label: content.AccountBalanceNonFE_HoverTextGuaranteedIncomeSlice,\n        value: this.guaranteedIncome\n      };\n      var shortFallSlice = {\n        label: content.ShortFallNonFE,\n        value: this.shortfallVal\n      };\n      var acctSlices = [];\n      acctSlices.push({\n        label: 'From My Account Balance',\n        value: this.monthlyDCBalance\n      });\n      acctSlices.push({\n        label: 'From My Future Contributions',\n        value: monthlyEmployeeEstimate\n      });\n      acctSlices.push({\n        label: 'From My Employer Future Contributions',\n        value: monthlyEmployerEstimate\n      });\n      return {\n        acctSlicesInfo: acctSlices,\n        acctSlicesContent: acctSlicesContent,\n        pensionSliceInfo: pensionSlice,\n        socialSecuritySliceInfo: socialSecuritySlice,\n        additionalBenefitsSliceInfo: additionalBenefitsSlice,\n        otherIncomeSliceInfo: otherIncomeSlice,\n        guaranteedIncomeSliceInfo: guaranteedIncomeSlice,\n        shortFallSliceInfo: shortFallSlice\n      };\n    }\n  }, {\n    key: \"createDollarGraphSlidersModel\",\n    value: function createDollarGraphSlidersModel(nonFeLandingObject) {\n      var content = nonFeLandingObject.content;\n      return {\n        pptDCAccount: nonFeLandingObject.pptDCAccount,\n        currentPlanID: nonFeLandingObject.currentPlanID,\n        personalData: nonFeLandingObject.personalData,\n        retirementAgeLabel: content.SliderSectionTitles_RetirementAgeHeader,\n        rateOfReturnSliderLabel: content.SliderSectionTitles_RateOfReturnHeader,\n        retireAgeHelpText: content.HelpText_RetireAgeSliderHelp,\n        contribSliderHelptext: content.HelpText_ContribSliderHelp,\n        amountPayText: content.SliderSectionTitles_ContributionSliderHeader,\n        rorHelpText: content.HelpText_RORSliderHelp,\n        contribHeader: content.SliderSectionTitles_ContributionSliderHeader,\n        sourceLimits: nonFeLandingObject.sourceLimits,\n        selectedPlan: nonFeLandingObject.selectedPlan\n      };\n    }\n  }, {\n    key: \"createDollarGraphFooterData\",\n    value: function createDollarGraphFooterData(nonFeLandingObject) {\n      var content = nonFeLandingObject.content;\n      var aboutMeData = {\n        pptDCAccount: nonFeLandingObject.pptDCAccount,\n        currentPlanID: nonFeLandingObject.currentPlanID,\n        personalData: nonFeLandingObject.personalData,\n        profileHelpText: content.HelpText_PerInfoHelp,\n        profileHelpTextTotalContrib: content.HelpText_AboutMeMandContribHelp,\n        calc: nonFeLandingObject.calc\n      };\n      return {\n        aboutMeModel: new _aboutMeModel.AboutMeModel(aboutMeData),\n        eMoneyUrl: nonFeLandingObject.eMoneyUrl,\n        assumptionsContent: null\n      };\n    }\n  }]);\n\n  return NonFeLandingModel;\n}();\n\nexports.NonFeLandingModel = NonFeLandingModel;\n\n},{\"./../dollar-graph-header-model\":3,\"./../dollar-graph-slices-model\":4,\"./about-me-model\":5,\"./dollar-graph-sliders-model\":6}],8:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NonFeModelBase = void 0;\n\nvar _utilities = require(\"../../../common/utilities\");\n\nvar _constants = require(\"../../common/constants\");\n\nvar _nonFeLandingModel = require(\"./non-fe-landing-model\");\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n//shared with PWEB_MOBILE homepage estimates, see gulp-tasks/build.js non-fe-base:dist\nvar NonFeModelBase = /*#__PURE__*/function () {\n  function NonFeModelBase() {\n    _classCallCheck(this, NonFeModelBase);\n  }\n\n  _createClass(NonFeModelBase, [{\n    key: \"initializeData\",\n    value: function initializeData(nonFeData, socialSecurityResponse, pensionResponse, srBenefitsResponse, selectedPlan, mode, pwebReqLoanNav, accountTypes, omCalc) {\n      this.accountTypes = accountTypes;\n      this.omCalc = omCalc;\n      this.orangeData = nonFeData.orangeData;\n\n      if (this.orangeData.participantDefinedContributionAccounts) {\n        for (var i = 0; i < this.orangeData.participantDefinedContributionAccounts.length; i++) {\n          this.orangeData.participantDefinedContributionAccounts[i].planInfo.planName = (0, _utilities.decodePlanName)(this.orangeData.participantDefinedContributionAccounts[i].planInfo.planName);\n        }\n      }\n\n      this.cleanOrangeMoneyData();\n      this.socialSecurityBenefits = socialSecurityResponse.socialSecurityBenefits;\n      this.pension = pensionResponse.pensionView;\n\n      if (srBenefitsResponse) {\n        this.srBenefits = srBenefitsResponse.srBenefits;\n      }\n\n      this.eMoneyUrl = this.orangeData.urls ? this.orangeData.urls.EMONEY : undefined;\n      this.includeSS = this.orangeData.participantData.socialSecData.includeSocialSecurity;\n      this.personalData = this.orangeData.participantData;\n\n      if (this.orangeData.participantData.retirementAge > 80) {\n        this.orangeData.participantData.retirementAge = 80;\n      }\n\n      this.retirementAge = this.orangeData.participantData.retirementAge;\n\n      var _dob = (0, _utilities.getDateFromString)(this.personalData.dob);\n\n      var currAge = (0, _utilities.getAgePrecise)(_dob);\n      this.minRetireAge = Math.min(currAge + 1, 80);\n\n      if (this.retirementAge < this.minRetireAge) {\n        this.retirementAge = this.minRetireAge;\n      } //Defaulting Social Security start age if it is less than current age.\n\n\n      var socialSecurityAge = this.orangeData.participantData.socialSecData.socialSecStartAge;\n\n      if (socialSecurityAge) {\n        var ssStartAgeMin = currAge >= 62 ? currAge + 1 : 62;\n        socialSecurityAge = Math.min(Math.max(ssStartAgeMin, socialSecurityAge), 70);\n        this.orangeData.participantData.socialSecData.socialSecStartAge = socialSecurityAge;\n      }\n\n      this.content = this.orangeData.content;\n      this.otherAssets = this.orangeData.otherAssets;\n      this.pptDCAccount = this.orangeData.participantDefinedContributionAccounts;\n      this.currentPlanID = selectedPlan ? selectedPlan : this.orangeData.participantDefinedContributionAccounts[0].planInfo.planId;\n      this.selectedPlan = mode === 'portfolio' ? this.orangeData.participantDefinedContributionAccounts[0].planInfo.planId : selectedPlan; //Finding Out if Loans Enabled for Selected Plan\n\n      var omLoanEnabledForSelectedPlan = false;\n      this.pptDCAccount.forEach(function (plan) {\n        if (selectedPlan !== null && plan.planInfo.planId == selectedPlan && plan.loanData.omLoanEnable) {\n          omLoanEnabledForSelectedPlan = true;\n        }\n      }); //this.outstandingLoanInfo = outstandingLoanInfo;\n      //Gathering OutstandingLoans that needs to display\n\n      this.outstandingLoanInfo = [];\n      var outstaningLoanIndex = 0;\n      var self = this;\n      self.pptDCAccount.forEach(function (plan) {\n        if ((mode === 'portfolio' || mode === 'dashboard' || omLoanEnabledForSelectedPlan) && plan.loanData.outstandingLoan) {\n          var outStandingLoanObj = {\n            planId: plan.planInfo.planId,\n            planName: plan.planInfo.planName,\n            outstandingLoans: plan.loanData.outstandingLoan,\n            earlyLoanPayoffFlag: plan.loanData ? plan.loanData.earlyLoanPayoffFlag : false,\n            earlyLoanPayoffMethod: plan.loanData ? plan.loanData.earlyLoanPayoffMethod : '',\n            loanPayOff: plan.loanData ? plan.loanData.loanPayOff : false,\n            showPlanName: self.pptDCAccount.length > 1\n          };\n          self.outstandingLoanInfo[outstaningLoanIndex] = outStandingLoanObj;\n          outstaningLoanIndex += 1;\n        }\n      }); //Logic whether to display Loan Options in the drop-down\n\n      self.hasActiveOutstandingLoans = false;\n\n      if (self.outstandingLoanInfo.length > 0) {\n        self.outstandingLoanInfo.forEach(function (outstandingLoanObj) {\n          if (outstandingLoanObj.outstandingLoans && outstandingLoanObj.outstandingLoans.data.outstandLoanCount > 0) {\n            outstandingLoanObj.outstandingLoans.data.outstandingLoanDtls.forEach(function (outstandingLoanDtl) {\n              if (outstandingLoanDtl.loanStatus == 'A') {\n                self.hasActiveOutstandingLoans = true;\n              }\n            });\n          }\n        });\n      } //this.loanEligible = this.orangeData.participantDefinedContributionAccounts[0].loanData.loanEligible;\n\n\n      self.hasLoanOptions = false;\n      self.loanEligible = false;\n      self.loanModelPlans = [];\n      var planIndex = 0;\n      self.pptDCAccount.forEach(function (plan) {\n        if (mode === 'portfolio' || mode === 'dashboard') {\n          if (plan.loanData.omLoanEnable) {\n            /* if ((plan.loanData && plan.loanData.loanEligible) || self.hasActiveOutstandingLoans) {\n            self.hasLoanOptions = true;\n            } */\n            //For Portfolio page - Show Loan options only when default loan selected is ELIGIBLE for loan, else don't show loan option in Dropdown\n            if ((mode === 'dashboard' || mode === 'portfolio' && plan.planInfo.planId == self.currentPlanID) && (plan.loanData && plan.loanData.loanEligible || self.hasActiveOutstandingLoans)) {\n              self.hasLoanOptions = true;\n            }\n\n            if (plan.loanData && plan.loanData.loanEligible) {\n              if (mode === 'dashboard' || mode === 'portfolio' && plan.planInfo.planId == self.currentPlanID) {\n                self.loanEligible = true;\n                var planObj = {\n                  planId: plan.planInfo.planId,\n                  planName: plan.planInfo.planName\n                };\n                self.loanModelPlans[planIndex] = planObj;\n                planIndex += 1;\n              }\n            }\n          }\n        } else if (selectedPlan !== null && plan.planInfo.planId == selectedPlan && plan.loanData.omLoanEnable) {\n          if (plan.loanData && plan.loanData.loanEligible || self.hasActiveOutstandingLoans) {\n            self.hasLoanOptions = true;\n          }\n\n          if (plan.loanData && plan.loanData.loanEligible) {\n            self.loanEligible = true;\n            var _planObj = {\n              planId: plan.planInfo.planId,\n              planName: plan.planInfo.planName\n            };\n            self.loanModelPlans[planIndex] = _planObj;\n            planIndex += 1;\n          }\n        }\n      });\n      self.planLevelLoanEligible = self.loanModelPlans;\n      self.showLoanModelPlanSelector = false;\n\n      if (self.pptDCAccount.length > 1 && self.loanEligible && !pwebReqLoanNav) {\n        self.showLoanModelPlanSelector = true;\n      }\n\n      this.ctClient = this.pptDCAccount[0].loanData ? this.pptDCAccount[0].loanData.ctClient : false;\n      this.hasRothContribution = {}; //process the data\n\n      this.processNonFeData(); // set raw and working orange data\n\n      this.rawOrangeData = JSON.parse(JSON.stringify(this.orangeData)); //Models for Components\n\n      this.landingPageModel = new _nonFeLandingModel.NonFeLandingModel(this.nonFeLandingObject);\n      console.log(this.landingPageModel);\n    }\n  }, {\n    key: \"formatLISText\",\n    value: function formatLISText(text) {\n      var result = '';\n\n      if (text) {\n        var splitBeforeText = text.split('[');\n\n        if (splitBeforeText[1]) {\n          var splitEndText = splitBeforeText[1].split(']');\n          result = splitBeforeText[0] + \"<a href=/myvoya/link?type=omlisredirectlink&selectedPlanID=\".concat(this.currentPlanID, \">\").concat(splitEndText[0], \"</a>\");\n\n          if (splitEndText[1]) {\n            result += splitEndText[1];\n          }\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: \"processNonFeData\",\n    value: function processNonFeData() {\n      var calcResponse = {};\n      this.injectPensionToOrangeData();\n      /*\n       * get the calculated values from omCalculator\n       */\n      // Common util method for both LIS 100% & non LIS.\n\n      this.getLISOrangeData();\n      this.calc = new this.omCalc({\n        orangeData: JSON.parse(JSON.stringify(this.orangeData1))\n      });\n      /*\n       * set social security data\n       */\n\n      this.setSocialSecurityAmountToCalc();\n      /*\n       * run initial calculation with the data\n       */\n\n      calcResponse = this.calc.compute();\n      this.computed = calcResponse.getRetireBenefitEvalResponse();\n      this.guaranteedIncome = this.orangeData.participantData.guaranteedIncome || 0;\n      /**\n       * calculate the ss value and therefore the additional benefits\n       */\n\n      var calculatedSSData = this.calcSSBenefit();\n      this.ssBenefitAmt = this.getSSBenefitAmt(calculatedSSData, this.computed);\n      var ssRetireAge = calculatedSSData.ssStartRetireAgeValue; // on ss panel this is the top slider\n\n      var ssStartAge = calculatedSSData.ssStartValue; // on ss panel this is the bottom slider\n\n      /*\n       * calculate and set the social security additional benefits value\n       */\n\n      this.ssAdditionalBenefits = this.getSSAdditionalBenefit(calculatedSSData);\n      this.ssAddlBenefitsChgFlag = this.orangeData.participantData.socialSecData.socialSecAddlBenefitsChg;\n      this.content.HelpText_LifetimeIncomeStrategy = this.formatLISText(this.content.HelpText_LifetimeIncomeStrategy);\n      this.nonFeLandingObject = {\n        calcResponse: this.computed,\n        includeSS: this.includeSS,\n        content: this.content,\n        pptDCAccount: this.pptDCAccount,\n        currentPlanID: this.currentPlanID,\n        personalData: this.personalData,\n        eMoneyUrl: this.eMoneyUrl,\n        sourceLimits: this.updatePlanLimits(),\n        calc: this.calc,\n        selectedPlan: this.selectedPlan,\n        ssAdditionalBenefits: this.ssAdditionalBenefits,\n        ssAddlBenefitsChgFlag: this.ssAddlBenefitsChgFlag,\n        ssRetireAge: ssRetireAge,\n        ssStartAge: ssStartAge,\n        calculatedSSData: calculatedSSData,\n        guaranteedIncome: this.guaranteedIncome,\n        getAccountBalWithGuaranteedIncome: this.getAccountBalWithGuaranteedIncome\n      };\n    }\n  }, {\n    key: \"getAccountBalWithGuaranteedIncome\",\n    value: function getAccountBalWithGuaranteedIncome() {\n      var accountBalance = this.calcResponse ? this.calcResponse.getMonthlyEstimateFromDCBalance() : this.computed.getMonthlyEstimateFromDCBalance();\n      var gIncomeSubtotalNonLisPlans = 0.0;\n      var participantOrangeData = this.pptDCAccount;\n      var numOfCAccount = participantOrangeData.length;\n\n      for (var i = 0; i < numOfCAccount; i++) {\n        if (!participantOrangeData[i].planInfo.partHasHundredPctLis) {\n          gIncomeSubtotalNonLisPlans += participantOrangeData[i].planInfo.planGuaranteedIncome;\n        }\n      }\n\n      var result = accountBalance - gIncomeSubtotalNonLisPlans;\n\n      if (result < 0) {\n        result = 0;\n      }\n\n      return result;\n    }\n  }, {\n    key: \"getSSBenefitAmt\",\n    value: function getSSBenefitAmt(calculatedSSData, calcResponse) {\n      var ssRetireAge = calculatedSSData.ssStartRetireAgeValue;\n      var ssStartAge = calculatedSSData.ssStartValue;\n\n      if (ssRetireAge < ssStartAge) {\n        return 0;\n      } else if (ssRetireAge > ssStartAge) {\n        return calcResponse.getMonthlyEstimateFromSocialSecurity();\n      } else if (ssRetireAge === ssStartAge) {\n        return calcResponse.getMonthlyEstimateFromSocialSecurity();\n      }\n    }\n    /**\n     * determines if ss is enabled AND included AND if ssAdditionalBenefits is a number AND\n     * greater than 0. IF true, then it recalculates the ssAdditionalBenefits based on the ss benefits\n     *\n     * @param {object} calculatedSSData\n     * @return {number} ssAdditionalBenefits\n     */\n\n  }, {\n    key: \"getSSAdditionalBenefit\",\n    value: function getSSAdditionalBenefit(calculatedSSData) {\n      var ssRetireAge = calculatedSSData.ssStartRetireAgeValue;\n      var ssStartAge = calculatedSSData.ssStartValue; //local calculation variable, just read from the source\n\n      var ssAdditionalBenefits = this.orangeData.participantData.socialSecData.socialSecAddlBenefits;\n\n      if (this.orangeData.participantData.socialSecData.specialNeedsEnable && this.orangeData.participantData.socialSecData.socialSecEnable && this.orangeData.participantData.includeSocialSecurity) {\n        if (ssAdditionalBenefits && !this.ssAddlBenefitsChgFlag) {\n          if (ssRetireAge < ssStartAge) {\n            ssAdditionalBenefits = calculatedSSData.ssBenefitSS / 2;\n            console.log('calculatedSSData.ssBenefitSS', calculatedSSData.ssBenefitSS);\n          } else if (ssRetireAge > ssStartAge) {\n            ssAdditionalBenefits = this.ssBenefitAmt / 2;\n          } else if (ssRetireAge === ssStartAge) {\n            ssAdditionalBenefits = this.ssBenefitAmt / 2;\n          }\n        }\n\n        console.log('ssAdditionalBenefits======', ssAdditionalBenefits);\n        console.log('ssBenefitAmt=============', this.ssBenefitAmt);\n        return ssAdditionalBenefits || 0;\n      } else {\n        return 0;\n      }\n    }\n  }, {\n    key: \"setSocialSecurityAmountToCalc\",\n    value: function setSocialSecurityAmountToCalc() {\n      var ssAmt = 0;\n\n      if (this.includeSS) {\n        var socialStartAge = this.orangeData.participantData.socialSecData.socialSecStartAge;\n        var ssBenefits = this.socialSecurityBenefits; // if social security age has been provided by the forces that be\n\n        if (!!socialStartAge) {\n          // do some magic to determine what specific numbers to use for the SS calculation\n          if (this.retirementAge >= socialStartAge && socialStartAge >= ssBenefits.nra) {\n            ssAmt = (0, _utilities.getSocialSecurityBenefitAmt)(this.retirementAge, socialStartAge, ssBenefits);\n          } else if (this.retirementAge >= socialStartAge && socialStartAge < ssBenefits.nra) {\n            ssAmt = (0, _utilities.getSocialSecurityBenefitAmt)(socialStartAge, socialStartAge, ssBenefits);\n          }\n        } else {\n          ssAmt = (0, _utilities.getSocialSecurityBenefitAmt)(this.retirementAge, this.retirementAge, ssBenefits);\n        }\n      }\n\n      this.calc.setRetirementAge(this.retirementAge, ssAmt);\n    }\n    /**\n     * Cleans up the raw Orange Money data from the server\n     */\n\n  }, {\n    key: \"cleanOrangeMoneyData\",\n    value: function cleanOrangeMoneyData() {\n      /*\n       *\tThe data we get from backend needs some tweaking. Specifically:\n       *\t1. Make sure the retirement age is in range\n       *\t2. Create \"includeErMatch\" variable in JSON. This concept exists only\n       *\t   on the frontend, so we create it here and set it to TRUE by default\n       *\t3. Sort Sources for each plan\n       */\n\n      /* ignore:true */\n      var orangeDataClean = JSON.parse(JSON.stringify(this.orangeData));\n      orangeDataClean.participantData.retirementAge = Math.max((0, _utilities.getAgePrecise)(this.orangeData.participantData.dob) + 1, Math.min(80, this.orangeData.participantData.retirementAge));\n      var sourceOrder = ['PRETAX', 'ROTH', 'AFTER_TAX', 'PRETAX_SUPP', 'ROTH_SUPP', 'AFTERTAX_SUPP', 'CATCHUP_AGE_PRETAX', 'CATCHUP_AGE_ROTH']; //convert order array to lookup table\n\n      var sortSourceList = {};\n\n      for (var i = 0, len = sourceOrder.length; i < len; ++i) {\n        sortSourceList[sourceOrder[i]] = i;\n      }\n\n      var sortSource = function sortSource(a, b) {\n        return sortSourceList[a.type] - sortSourceList[b.type];\n      };\n\n      var plans = orangeDataClean.participantDefinedContributionAccounts;\n\n      for (var _i = 0; _i < plans.length; ++_i) {\n        //sort each source using the lookup table\n        plans[_i].planInfo.sources = plans[_i].planInfo.sources.sort(sortSource); // reset the plan MIN limits to zero\n\n        if (plans[_i].planInfo.totalContributionAmount) {\n          plans[_i].planInfo.totalContributionAmount.min = 0;\n        }\n\n        if (plans[_i].planInfo.totalContributionPercent) {\n          plans[_i].planInfo.totalContributionPercent.min = 0;\n        } // reset the source MIN limits to zero\n\n\n        for (var j = 0; j < plans[_i].planInfo.sources.length; j++) {\n          if (plans[_i].planInfo.sources[j].percentLimits) {\n            plans[_i].planInfo.sources[j].percentLimits.min = 0;\n          }\n\n          if (plans[_i].planInfo.sources[j].limits) {\n            plans[_i].planInfo.sources[j].limits.min = 0;\n          }\n        }\n      }\n\n      this.orangeData = orangeDataClean;\n      /* ignore:false */\n    }\n    /*\n     * This method takes care of different pension plans\n     */\n\n  }, {\n    key: \"injectPensionToOrangeData\",\n    value: function injectPensionToOrangeData() {\n      //checking that what kind of pension..default , vendor or Still River\n      var pensionViewType = this.pension.pensionViewFlag;\n      var estimatedPensionAmt;\n      var annualPensionAmt;\n      var lumpSumPensionAmt;\n\n      if (pensionViewType === _constants.CONSTANTS.STATIC_BENEFIT) {\n        estimatedPensionAmt = this.pension.vendorData.monthlyIncome;\n      } else if (pensionViewType === _constants.CONSTANTS.CALC_BENEFIT) {\n        if (this.pension.srData.pensionCalMethod === 'C') {\n          estimatedPensionAmt = (0, _utilities.getPensionBenefitAmt)(this.retirementAge, 0, this.srBenefits);\n          this.srCalcBenefit = true; //Feeding new DB Mandatory Contribution value to Calculator. mandatoryContrib passed to om calc should be in rate not percent (%)\n\n          this.orangeData.pension.dbMandatoryContrib = this.pension.srData.mandatoryContrib / 100;\n        } else if (this.pension.srData.pensionCalMethod === 'M') {\n          estimatedPensionAmt = this.pension.srData.anticipMonthlyPensionIncome;\n          annualPensionAmt = this.pension.srData.anticpAnnPensBenefRetirem;\n          lumpSumPensionAmt = this.pension.srData.anticpLmpSumPenBenRetirem;\n        }\n      } else {\n        estimatedPensionAmt = this.pension.defaultPensionData.monthlyIncome;\n      }\n\n      var pensionData = {\n        monthlyIncome: estimatedPensionAmt === undefined || estimatedPensionAmt === '' ? null : parseFloat(estimatedPensionAmt),\n        annualPension: annualPensionAmt === undefined || annualPensionAmt === '' ? null : parseFloat(annualPensionAmt),\n        lumpSumPension: lumpSumPensionAmt === undefined || lumpSumPensionAmt === '' ? null : parseFloat(lumpSumPensionAmt),\n        enabled: this.pension.enabled\n      };\n      this.orangeData.pension.monthlyPension = pensionData.monthlyIncome;\n      this.orangeData.pension.annualPension = pensionData.annualPension;\n      this.orangeData.pension.lumpSumPension = pensionData.lumpSumPension;\n      this.orangeData.pension.enabled = pensionData.enabled;\n    }\n  }, {\n    key: \"updatePlanLimits\",\n    value: function updatePlanLimits() {\n      var _this = this;\n\n      // get the source data\n      var currentPlanID = this.currentPlanID;\n      var planData = this.getWorkingPlan(currentPlanID);\n      var srcs = planData.planInfo.sources;\n      var acctList = this.calc.compute().getAccountDataList();\n      var crcAllowed = planData.planInfo.crcAllowed;\n      var limitsList = {};\n      srcs.map(function (src) {\n        var pLim, lim; // get the account object from the calc that matches our current source\n\n        var accountObj = acctList.find(function (account) {\n          if (account.getType() === _this.accountTypes.matchType(src.type) && account.getPlanId() === currentPlanID) {\n            return true;\n          }\n        }); // Once we have the correct account data, we can resume with this check\n\n        if (crcAllowed) {\n          pLim = src.percentLimits;\n          lim = src.limits;\n        } else {\n          // use limits from calc account object once we have the correct one\n          pLim = {\n            min: accountObj.getMinContribRate(),\n            max: accountObj.getMaxContribRate()\n          };\n          lim = {\n            min: accountObj.getMinContribDollar(),\n            max: accountObj.getMaxContribDollar()\n          };\n        }\n\n        if (!src.percentLimits) {\n          src.percentLimits = pLim;\n        }\n\n        if (!src.limits) {\n          src.limits = lim;\n        }\n\n        limitsList[src.type] = {\n          limits: lim,\n          percentLimits: pLim\n        };\n      });\n      return limitsList;\n    }\n  }, {\n    key: \"getWorkingPlan\",\n    value: function getWorkingPlan(planID) {\n      return this.pptDCAccount.find(function (plan) {\n        if (plan.planInfo.planId === planID) {\n          return true;\n        }\n      });\n    }\n  }, {\n    key: \"calcSSBenefit\",\n    value: function calcSSBenefit() {\n      if (!this.socialSecurityBenefits) {\n        return;\n      }\n\n      var retirementAge = this.retirementAge;\n      var ssStartAge = this.orangeData.participantData.socialSecData.socialSecStartAge;\n      var socialSecurityAge = ssStartAge === 0 ? retirementAge : ssStartAge; //calculating retire and social security start min age\n\n      var currAge = (0, _utilities.getAge)(this.orangeData.participantData.dob);\n      var ssRetireAgeMin = Math.min(currAge + 1, 80);\n      var ssStartAgeMin = currAge >= 62 ? currAge + 1 : 62;\n      var ssDisabled = ssStartAgeMin >= 70;\n      socialSecurityAge = Math.min(Math.max(ssStartAgeMin, socialSecurityAge), 70);\n      this.orangeData.participantData.socialSecData.socialSecStartAge = socialSecurityAge;\n      var includeSS = this.includeSS;\n      var benefitAtRA = 0;\n\n      if (includeSS) {\n        if (retirementAge >= socialSecurityAge && socialSecurityAge >= this.socialSecurityBenefits.nra) {\n          benefitAtRA = (0, _utilities.getSocialSecurityBenefitAmt)(retirementAge, socialSecurityAge, this.socialSecurityBenefits);\n        } else if (retirementAge >= socialSecurityAge && socialSecurityAge < this.socialSecurityBenefits.nra) {\n          benefitAtRA = (0, _utilities.getSocialSecurityBenefitAmt)(socialSecurityAge, socialSecurityAge, this.socialSecurityBenefits);\n        }\n      }\n\n      var benefitAtNRA = includeSS ? (0, _utilities.getSocialSecurityBenefitAmt)(this.socialSecurityBenefits.nra, this.socialSecurityBenefits.nra, this.socialSecurityBenefits) : 0;\n      var benefitAtSS = includeSS ? (0, _utilities.getSocialSecurityBenefitAmt)(retirementAge, socialSecurityAge, this.socialSecurityBenefits) : 0;\n      var calculatedNRAAmt = (0, _utilities.getSocialSecurityBenefitAmt)(retirementAge, this.socialSecurityBenefits.nra, this.socialSecurityBenefits);\n      var nraAmount = 0; //= includeSS ? calculatedNRA : 0;\n\n      var enteredPIA = this.orangeData.participantData.socialSecData.enteredPIA; //if (includeSS) {\n\n      if (enteredPIA && enteredPIA !== 0) {\n        nraAmount = enteredPIA;\n      } else {\n        nraAmount = calculatedNRAAmt;\n      } //}\n      //If it is Still River Plan getting updated pension Amount as per the age\n      //if (this.srBenefits) {\n      //    let estimatedPensionAmt = getPensionBenefitAmt(retirementAge, 0, this.srBenefits);\n      //    this.calc.setPensionAmount(estimatedPensionAmt);\n      //}\n\n\n      var pensionViewType = this.pension.pensionViewFlag;\n\n      if (pensionViewType && pensionViewType === _constants.CONSTANTS.CALC_BENEFIT && this.pension.srData.pensionCalMethod === 'C' && this.srBenefits) {\n        var estimatedPensionAmt = (0, _utilities.getPensionBenefitAmt)(retirementAge, 0, this.srBenefits);\n        this.orangeData.pension.monthlyPension = estimatedPensionAmt === '' ? null : parseFloat(estimatedPensionAmt);\n        this.calc.setPensionAmount(estimatedPensionAmt);\n      } //Defect#37947 -- SR amounts needs to be updated on SS Panel\n      // Common util method for both LIS 100% & non LIS.\n\n\n      this.getLISOrangeData();\n      this.calc.reserialize({\n        orangeData: JSON.parse(JSON.stringify(this.orangeData1))\n      });\n      this.calc.setRetirementAge(retirementAge, benefitAtRA);\n      var RABenefitResponse = this.calc.compute().getRetireBenefitEvalResponse();\n      var goal = RABenefitResponse.getMonthlySalaryReplacementRequirement();\n      var otherIncomeAtRA = this.sumOfNonSS(RABenefitResponse);\n      var shortfallAtRA = goal - (otherIncomeAtRA + benefitAtRA);\n      this.calc.setRetirementAge(retirementAge, benefitAtSS);\n      var SSBenefitResponse = this.calc.compute().getRetireBenefitEvalResponse();\n      var otherIncomeAtSS = socialSecurityAge >= retirementAge ? this.sumOfNonSS(SSBenefitResponse) : 0;\n      var shortfallAtSS = goal - (otherIncomeAtSS + benefitAtSS);\n      return {\n        calculatedNRAAmt: calculatedNRAAmt,\n        goal: goal,\n        nra: this.socialSecurityBenefits.nra,\n        ssBenefitRA: benefitAtRA,\n        ssBenefitNRA: benefitAtNRA,\n        ssBenefitSS: benefitAtSS,\n        ssDisabled: ssDisabled,\n        ssIncomeRA: otherIncomeAtRA,\n        ssIncomeSS: otherIncomeAtSS,\n        ssNRAAmount: nraAmount,\n        ssRetireAgeMin: ssRetireAgeMin,\n        ssShortfallRA: shortfallAtRA,\n        ssShortfallSS: shortfallAtSS,\n        ssStartRetireAgeValue: retirementAge,\n        ssStartAgeMin: ssStartAgeMin,\n        ssStartValue: socialSecurityAge\n      };\n    } // Common util method for both LIS 100% & non LIS.\n\n  }, {\n    key: \"getLISOrangeData\",\n    value: function getLISOrangeData() {\n      this.orangeData1 = JSON.parse(JSON.stringify(this.orangeData));\n      var numOfCAccount = this.orangeData1.participantDefinedContributionAccounts.length;\n\n      for (var i = 0; i < numOfCAccount; i++) {\n        //Only for LIS-100%\n        if (this.orangeData1.participantDefinedContributionAccounts[i].planInfo.partHasHundredPctLis) {\n          this.orangeData1.participantData.currentDcBalance = this.orangeData1.participantData.currentDcBalance - this.orangeData1.participantDefinedContributionAccounts[i].planInfo.planBalance;\n          var numOfSources = this.orangeData1.participantDefinedContributionAccounts[i].planInfo.sources.length;\n\n          for (var j = 0; j < numOfSources; j++) {\n            this.orangeData1.participantDefinedContributionAccounts[i].planInfo.sources[j].contribution = 0;\n          }\n\n          if (this.orangeData1.participantDefinedContributionAccounts[i].matchData) {\n            this.orangeData1.participantDefinedContributionAccounts[i].matchData.mandatoryEeContribution ? this.orangeData1.participantDefinedContributionAccounts[i].matchData.mandatoryEeContribution.value = 0 : '';\n            this.orangeData1.participantDefinedContributionAccounts[i].matchData.mandatoryErContribution ? this.orangeData1.participantDefinedContributionAccounts[i].matchData.mandatoryErContribution.value = 0 : '';\n          }\n        }\n      }\n    } //LIS-100% End\n\n  }, {\n    key: \"sumOfNonSS\",\n    value: function sumOfNonSS(calcResponse) {\n      // computed account value\n      var accountVal = calcResponse.getMonthlyEstimateFromDCBalance() + calcResponse.getMonthlyEstimateFromEmployee() + calcResponse.getMonthlyEstimateFromEmployer(); // computed pension value\n\n      var pensionVal = calcResponse.getMonthlyEstimateFromPension() + calcResponse.getMonthlyEstimateFromPensionAsIncome(); // computed other value\n\n      var otherVal = calcResponse.getMonthlyEstimateFromOther() + calcResponse.getMonthlyEstimateFromIncome();\n      var income = (accountVal || 0) + (pensionVal || 0) + (otherVal || 0);\n      var additionalIncome = this.getIncomeWithoutLis() - calcResponse.getMonthlyEstimateFromDCBalance();\n\n      if (additionalIncome > 0) {\n        income += additionalIncome;\n      }\n\n      income += this.getIncomeWithLis();\n      return income;\n    }\n  }, {\n    key: \"getIncomeWithLis\",\n    value: function getIncomeWithLis() {\n      var participantOrangeData = this.pptDCAccount;\n      var gIncomeSubtotalLisPlans = 0.0;\n      var numOfCAccount = participantOrangeData.length;\n\n      for (var i = 0; i < numOfCAccount; i++) {\n        if (participantOrangeData[i].planInfo.partHasHundredPctLis) {\n          gIncomeSubtotalLisPlans += participantOrangeData[i].planInfo.planGuaranteedIncome;\n        }\n      }\n\n      return gIncomeSubtotalLisPlans;\n    }\n  }, {\n    key: \"getIncomeWithoutLis\",\n    value: function getIncomeWithoutLis() {\n      var participantOrangeData = this.pptDCAccount;\n      var gIncomeSubtotalLisPlans = 0.0;\n      var numOfCAccount = participantOrangeData.length;\n\n      for (var i = 0; i < numOfCAccount; i++) {\n        if (!participantOrangeData[i].planInfo.partHasHundredPctLis) {\n          gIncomeSubtotalLisPlans += participantOrangeData[i].planInfo.planGuaranteedIncome;\n        }\n      }\n\n      return gIncomeSubtotalLisPlans;\n    }\n  }]);\n\n  return NonFeModelBase;\n}();\n\nexports.NonFeModelBase = NonFeModelBase;\n\n},{\"../../../common/utilities\":1,\"../../common/constants\":2,\"./non-fe-landing-model\":7}]},{},[8])(8)\n});\n","import {Component, Input, OnDestroy, OnInit} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {WidgetType} from '@shared-lib/services/mx-service/models/widget-type.enum';\nimport {MXService} from '@shared-lib/services/mx-service/mx.service';\nimport {SharedUtilityService} from '@shared-lib/services/utility/utility.service';\nimport {PlatformService} from '@mobile/app/modules/shared/service/platform/platform.service';\nimport * as mxContent from './constants/content.json';\n\nexport const WIDGET_TIMOUT_DURATION = 14 * 60 * 1000;\n\n@Component({\n  selector: 'app-mx-widget',\n  templateUrl: './mx-widget.component.html',\n  styleUrls: ['./mx-widget.component.scss'],\n})\nexport class MXWidgetComponent implements OnInit, OnDestroy {\n  @Input() tagName: string;\n  @Input() widgetType: WidgetType;\n  @Input() height: string;\n  @Input() subAccount = false;\n  isWeb: boolean;\n  hasError = false;\n  content = mxContent;\n\n  private widgetTimeout = 0;\n  private platformSubscription = new Subscription();\n\n  constructor(\n    private mxService: MXService,\n    private sharedUtilityService: SharedUtilityService,\n    private platformService: PlatformService\n  ) {}\n\n  ngOnInit(): void {\n    this.refreshWidget();\n    this.isWeb = this.sharedUtilityService.getIsWeb();\n    this.platformSubscription.add(\n      this.platformService.onResume$.subscribe(this.onResume.bind(this))\n    );\n    this.platformSubscription.add(\n      this.platformService.onPause$.subscribe(this.onPause.bind(this))\n    );\n  }\n\n  onResume() {\n    if (new Date().getTime() > this.widgetTimeout) {\n      this.refreshWidget();\n    }\n  }\n\n  onPause() {\n    this.widgetTimeout = new Date().getTime() + WIDGET_TIMOUT_DURATION;\n  }\n\n  refreshWidget() {\n    this.hasError = false;\n    this.mxService\n      .displayWidget(\n        this.widgetType,\n        {\n          id: this.tagName,\n          height: this.height,\n          autoload: false,\n        },\n        this.subAccount\n      )\n      .then((res: boolean) => {\n        this.hasError = !res;\n      });\n  }\n\n  ngOnDestroy(): void {\n    this.platformSubscription.unsubscribe();\n  }\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {IonicModule} from '@ionic/angular';\nimport {MXWidgetComponent} from './mx-widget.component';\n\n@NgModule({\n  imports: [CommonModule, IonicModule],\n  declarations: [MXWidgetComponent],\n  exports: [MXWidgetComponent],\n})\nexport class MXWidgetModule {}\n","import {Injectable} from '@angular/core';\nimport {endPoints} from '@shared-lib/services/account/constants/endpoints';\nimport {omCalculator, AccountTypes} from 'om-js-calc/src/index';\nimport {NonFeModelBase} from 'voya-orange-money/build/orangemoneyui/nonFEModelBase.js';\nimport {FeModelBase} from 'voya-orange-money/build/orangemoneyui/feModelBase.js';\nimport {\n  ContributionSourcePayload,\n  OMStatus,\n  OrangeData,\n  OrangeMoneyEstimates,\n  RetirementAgeSaveResp,\n  SalarySaveResp,\n} from '@shared-lib/services/account/models/orange-money.model';\nimport {from, Observable, ReplaySubject, Subscription} from 'rxjs';\nimport {AccountService} from '@shared-lib/services/account/account.service';\nimport {dummyPartyID} from '@shared-lib/constants/dummy';\nimport {SharedUtilityService} from '@shared-lib/services/utility/utility.service';\nimport {BaseService} from '@shared-lib/services/base/base-factory-provider';\nimport {AccessService} from '@shared-lib/services/access/access.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrangeMoneyService {\n  income: number;\n  shortfallVal: number;\n\n  private oData: Observable<OrangeData> = null;\n  private orangeDataSubject: ReplaySubject<OrangeData> = null;\n  private subscription: Subscription = new Subscription();\n\n  omEligibility: boolean;\n  nonFEModelBase: any;\n  feModelBase: any;\n  ssAdditionalBenefits: number;\n  endpoints;\n  userID: string;\n  constructor(\n    private baseService: BaseService,\n    private utilityService: SharedUtilityService,\n    private accountService: AccountService,\n    private accessService: AccessService\n  ) {\n    this.endpoints = this.utilityService.appendBaseUrlToEndpoints(endPoints);\n    this.nonFEModelBase = new NonFeModelBase();\n    this.feModelBase = new FeModelBase();\n    this.orangeDataSubject = new ReplaySubject(1);\n  }\n\n  async getOMEligibility(): Promise<boolean> {\n    if (this.omEligibility === undefined) {\n      const data = await this.baseService.get(\n        this.endpoints.omEligibility + '/' + dummyPartyID\n      );\n      this.omEligibility = data.eligible;\n    }\n    return this.omEligibility;\n  }\n\n  getOrangeData(refresh = false): Observable<OrangeData> {\n    if (this.oData == null || refresh) {\n      this.oData = from(this.baseService.get(this.endpoints.getrrinfo));\n      const subscription = this.oData.subscribe(\n        result => {\n          this.orangeDataSubject.next(result);\n        },\n        () => {\n          this.orangeDataSubject.next({});\n        }\n      );\n      this.subscription.add(subscription);\n    }\n    return this.orangeDataSubject;\n  }\n\n  setOrangeData(omData) {\n    this.orangeDataSubject.next(omData);\n  }\n\n  async saveRetiremnetAgeFE(age: number): Promise<RetirementAgeSaveResp> {\n    const planId: string = this.accountService.getAccount()?.planId\n      ? this.accountService.getAccount().planId\n      : (await this.accessService.checkMyvoyageAccess())?.currentPlan.planId;\n    return this.baseService.post(this.endpoints.saveRetirementAgeFE, {\n      contributionUpdate: {\n        planId: planId,\n        crc: true,\n        retirementAge: age,\n        regularUnit: 'PERCENT',\n        sources: [],\n        saveRetirementAge: true,\n      },\n    });\n  }\n\n  saveRetirementAgeNonFE(\n    age: number,\n    orangeData: OrangeData\n  ): Promise<RetirementAgeSaveResp> {\n    const sources: ContributionSourcePayload[] = [];\n    orangeData.orangeData.participantDefinedContributionAccounts[0].planInfo.sources.forEach(\n      source => {\n        sources.push({\n          amount: source.contribution,\n          id: source.id,\n          type: source.type,\n        });\n      }\n    );\n\n    const payload = {\n      contributionUpdate: {\n        planId: this.accountService.getAccount()?.planId\n          ? this.accountService.getAccount().planId\n          : orangeData.orangeData.participantDefinedContributionAccounts[0]\n              .planInfo.planId,\n        crc:\n          orangeData.orangeData.participantDefinedContributionAccounts[0]\n            .planInfo.crcAllowed,\n        retirementAge: age,\n        investmentRateOfReturn:\n          orangeData.orangeData.participantData.investmentRateOfReturn,\n        regularUnit:\n          orangeData.orangeData.participantDefinedContributionAccounts[0]\n            .contributionData.regularContributionUnit,\n        catchupUnit:\n          orangeData.orangeData.participantDefinedContributionAccounts[0]\n            .planInfo.catchupContributionType,\n        sources: sources,\n      },\n    };\n\n    return this.baseService.post(\n      this.endpoints.saveRetirementAgeNonFE,\n      payload\n    );\n  }\n\n  saveSalaryFE(\n    salary: number,\n    growthRate: number,\n    desiredGoal: number,\n    minimumGoal: number\n  ): Promise<SalarySaveResp> {\n    return this.baseService.post(this.endpoints.saveSalaryFE, {\n      contributionUpdate: {},\n      aboutMeData: {\n        salary: salary,\n        growthRate: growthRate,\n        desiredGoal: desiredGoal * 12,\n        minimumGoal: minimumGoal * 12,\n      },\n    });\n  }\n\n  saveSalaryNonFE(\n    salary: number,\n    dob: string,\n    omData: OrangeData\n  ): Promise<SalarySaveResp> {\n    return this.baseService.post(this.endpoints.saveSalaryNonFE, {\n      pptProfile: {\n        currentAnnualSalary: salary,\n        dob: dob,\n        plans: [\n          {\n            planId: this.accountService.getAccount()?.planId\n              ? this.accountService.getAccount().planId\n              : omData.orangeData.participantDefinedContributionAccounts[0]\n                  .planInfo.planId,\n          },\n        ],\n      },\n    });\n  }\n\n  getOrangeMoneyStatus(omData: OrangeData): OMStatus {\n    if (\n      !omData ||\n      omData.errorCode === 'system-unavailable' ||\n      omData.errorCode === 'insufficient-data'\n    ) {\n      return OMStatus.SERVICE_DOWN;\n    }\n    if (omData.madLibData || omData.errorCode === 'opt-out') {\n      return OMStatus.MADLIB_OM;\n    }\n\n    if (omData.orangeData) {\n      return OMStatus.ORANGE_DATA;\n    }\n    if (omData.feForecastData) {\n      if (omData.feForecastData.feForecast.errorCode) {\n        return OMStatus.MADLIB_FE;\n      } else {\n        return OMStatus.FE_DATA;\n      }\n    }\n    return OMStatus.UNKNOWN;\n  }\n\n  // *************** getrrinfo Call ***************\n\n  async getEstimates(omData): Promise<OrangeMoneyEstimates> {\n    const status = this.getOrangeMoneyStatus(omData);\n    switch (status) {\n      case OMStatus.ORANGE_DATA:\n        return this.getNonFEEstimates(omData);\n      case OMStatus.FE_DATA:\n        return this.getFEData(omData);\n      case OMStatus.MADLIB_OM:\n      case OMStatus.MADLIB_FE:\n      case OMStatus.SERVICE_DOWN:\n      case OMStatus.UNKNOWN:\n        return null;\n    }\n  }\n\n  getpension() {\n    return this.baseService.get(this.endpoints.getpension);\n  }\n\n  getsrbenefits() {\n    return this.baseService.get(this.endpoints.getsrbenefits);\n  }\n\n  getssbenefits() {\n    return this.baseService.get(this.endpoints.getssbenefits);\n  }\n\n  getFEData(data: OrangeData): OrangeMoneyEstimates {\n    const monthly = data.feForecastData.feForecast.totalIncome;\n    const goal = data.feForecastData.feForecast.goal;\n\n    return {\n      estimatedMonthlyIncome: monthly,\n      estimatedMonthlyGoal: goal,\n      difference: goal - monthly,\n      retirementAge: data.feForecastData.participantData.selectedRetirementAge,\n      currSalary: data.feForecastData.participantData.salary.amount,\n    };\n  }\n\n  async getNonFEEstimates(omData: OrangeData): Promise<OrangeMoneyEstimates> {\n    //SS Benefits Call\n    const ssBenefits = await this.getssbenefits();\n    //Pension Call\n    const pension: any = await this.getpension();\n    if (pension.errorMessage) {\n      return undefined;\n    }\n    //checking if it is SR Plan\n    const pensionViewType = pension.pensionView.pensionViewFlag;\n    let srBenefitsResponse;\n    if (\n      pensionViewType === 'CalcBenefit' &&\n      pension.pensionView.srData.pensionCalMethod === 'C'\n    ) {\n      srBenefitsResponse = await this.getsrbenefits();\n      if (!srBenefitsResponse || srBenefitsResponse.errorMessage) {\n        return undefined;\n      }\n    }\n    this.nonFEModelBase.initializeData(\n      omData,\n      ssBenefits,\n      pension,\n      srBenefitsResponse,\n      undefined,\n      'portfolio',\n      false,\n      AccountTypes,\n      omCalculator\n    );\n\n    const estimates = this.createDollarGraphHeaderObject(\n      this.nonFEModelBase.nonFeLandingObject\n    );\n\n    return {\n      ...estimates,\n      retirementAge: omData.orangeData.participantData.retirementAge,\n      currSalary: omData.orangeData.participantData.currentAnnualSalary,\n    };\n  }\n\n  createDollarGraphHeaderObject(nonFeLandingObject) {\n    this.ssAdditionalBenefits = this.getSSAddlBenefits(nonFeLandingObject);\n    this.income = this.getIncome(nonFeLandingObject);\n    this.shortfallVal = this.getDifference(nonFeLandingObject);\n    return {\n      estimatedMonthlyIncome: Math.round(this.income),\n      estimatedMonthlyGoal: Math.round(\n        nonFeLandingObject.calcResponse.getMonthlySalaryReplacementRequirement()\n      ),\n      difference: Math.round(this.shortfallVal),\n    };\n  }\n\n  getSSAddlBenefits(nonFeLandingObject) {\n    const ssStartAge = nonFeLandingObject.calculatedSSData.ssStartValue;\n    const ssRetireAge =\n      nonFeLandingObject.calculatedSSData.ssStartRetireAgeValue;\n    if (ssRetireAge < ssStartAge) {\n      return 0;\n    } else if (ssRetireAge > ssStartAge) {\n      return nonFeLandingObject.ssAdditionalBenefits;\n    } else if (ssRetireAge === ssStartAge) {\n      return nonFeLandingObject.ssAdditionalBenefits;\n    }\n  }\n\n  getDifference(nonFeLandingObject) {\n    return (\n      nonFeLandingObject.calcResponse.getMonthlySalaryReplacementRequirement() -\n      this.income\n    );\n  }\n\n  getIncome(nonFeLandingObject) {\n    const ssStartAge = nonFeLandingObject.ssStartAge;\n    const ssRetireAge = nonFeLandingObject.ssRetireAge;\n    const incomeAtSS =\n      nonFeLandingObject.calculatedSSData.ssIncomeSS +\n      nonFeLandingObject.calculatedSSData.ssBenefitSS +\n      this.ssAdditionalBenefits;\n    const incomeAtRA =\n      nonFeLandingObject.calculatedSSData.ssIncomeRA +\n      nonFeLandingObject.calculatedSSData.ssBenefitRA +\n      this.ssAdditionalBenefits;\n    if (ssRetireAge < ssStartAge) {\n      return incomeAtRA;\n    } else if (ssRetireAge > ssStartAge) {\n      return incomeAtRA;\n    } else if (ssRetireAge === ssStartAge) {\n      return incomeAtSS;\n    }\n  }\n\n  updateOrangeMoneyOptOut(): Promise<OrangeData> {\n    return this.baseService.post(this.endpoints.updateOptOut, {optOut: false});\n  }\n\n  async postMadlibData(\n    dob: string,\n    salary: number,\n    feeling: string\n  ): Promise<OrangeData> {\n    return this.baseService.post(this.endpoints.saveMadlib, {\n      dob: dob,\n      salary: salary,\n      feeling: feeling,\n    });\n  }\n\n  getSalary(): Promise<number> {\n    return new Promise(resolve => {\n      this.getOrangeData().subscribe(async omData => {\n        const {currSalary} = await this.getEstimates(omData);\n        resolve(currSalary);\n      });\n    });\n  }\n}\n","export interface OrangeData {\n  orangeData?: {\n    participantData: {\n      investmentRateOfReturn: number;\n      retirementAge: number;\n      currentAnnualSalary: number;\n    };\n    participantDefinedContributionAccounts: ParticipantDefinedContributionAccounts[];\n  };\n  feForecastData?: {\n    investmentRateOfReturn: number;\n    participantData: {\n      selectedRetirementAge: number;\n      salary: {\n        amount: number;\n        growthRate: number;\n      };\n      retirementAgeSlider: {\n        min: number;\n        max: number;\n      };\n    };\n    feForecast: {\n      totalIncome: number;\n      goal: number;\n      errorCode: string;\n      desiredGoal: number;\n      minimumGoal: number;\n    };\n  };\n  madLibData?: MadlibData;\n  errorCode?: string;\n}\n\nexport interface ParticipantDefinedContributionAccounts {\n  contributionData: {\n    catchupContributionUnit: any;\n    catchupEligible: string;\n    catchupIneligibilityReason: string;\n    catchupPending: any;\n    crcEligible: string;\n    crcIneligibilityReason: string;\n    regularContributionUnit: string;\n    regularPending: {\n      txDate: string;\n      txNumber: string;\n    };\n  };\n  planInfo: {\n    catchupContributionType: string;\n    regularContributionType: string;\n    sources: ContributionSource[];\n    crcAllowed: boolean;\n    planId: string;\n  };\n}\n\nexport interface ContributionSource {\n  amountMod: number;\n  contribution: number;\n  id: string;\n  ircCode: string;\n  limits: {max: number; min: number};\n  name: string;\n  percentLimits: any;\n  percentMod: number;\n  type: string;\n}\n\nexport interface ContributionSourcePayload {\n  amount: number;\n  id: string;\n  type: string;\n}\n\nexport interface OrangeMoneyEstimates {\n  estimatedMonthlyIncome: number;\n  estimatedMonthlyGoal: number;\n  difference: number;\n  retirementAge: number;\n  currSalary: number;\n}\n\nexport enum OMStatus {\n  ORANGE_DATA,\n  FE_DATA,\n  MADLIB_OM,\n  MADLIB_FE,\n  SERVICE_DOWN,\n  UNKNOWN,\n}\n\nexport interface MadlibData {\n  adminUser: boolean;\n  annualSalary: number;\n  dob: string;\n  firstName: string;\n  firstTimeUser: boolean;\n  madLib: boolean;\n  madlibHelpContent: string;\n  omTitle: string;\n  participantStatus: string;\n  promoTextForSkip: string;\n  skipMadlibAllowed: boolean;\n  errorCode?: string;\n}\n\nexport interface RetirementAgeSaveResp {\n  result: {\n    errors: string[];\n    valid: boolean;\n  };\n}\n\nexport interface SalarySaveResp {\n  success?: boolean;\n  feForecastData?: any;\n}\n\nexport interface OrangeMoneyHeader {\n  OMHeader?: string;\n  OMTooltip?: string;\n  OMDeeplink?: string;\n}\n","export enum WidgetType {\n  CONNECT = 'connect_widget',\n  FINSTRONG = 'finstrong_widget',\n  FINSTRONG_MINI = 'mini_finstrong_widget',\n  MANAGE_ACCOUNT = 'connections_widget',\n  PULSE = 'pulse_widget',\n  NET_WORTH = 'net_worth_widget',\n  NET_WORTH_MINI = 'mini_net_worth_widget',\n  TRANSACTIONS = 'transactions_widget',\n  PULSE_CAROUSEL_MINI = 'mini_pulse_carousel_widget',\n  MINI_SPENDING_WIDGET = 'mini_spending_widget',\n  MINI_BUDGET_WIDGET = 'mini_budgets_widget',\n  SPENDING_WIDGET = 'spending_widget',\n  BUDGET_WIDGET = 'budgets_widget',\n}\n","export default \"<div\\n  *ngIf=\\\"!hasError\\\"\\n  id=\\\"{{ tagName }}\\\"\\n  [ngClass]=\\\"isWeb ? 'web-mx-widget-component' : 'mobile-mx-widget-component'\\\"\\n></div>\\n<div *ngIf=\\\"hasError\\\" class=\\\"error-window\\\">\\n  <ion-text>{{ content.widgetError }}</ion-text>\\n  <ion-button (click)=\\\"refreshWidget()\\\" fill=\\\"clear\\\" color=\\\"btncolor\\\">\\n    {{ content.retry }}\\n  </ion-button>\\n</div>\\n\";"],"names":[],"sourceRoot":"webpack:///"}