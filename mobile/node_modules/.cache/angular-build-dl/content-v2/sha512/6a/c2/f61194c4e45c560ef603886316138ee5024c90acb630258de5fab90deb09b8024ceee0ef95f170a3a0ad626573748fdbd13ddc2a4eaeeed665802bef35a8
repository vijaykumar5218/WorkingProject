{"version":3,"mappings":"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","names":["SkipOperator","SkipSubscriber","_Subscriber__WEBPACK_IMPORTED_MODULE_0__","StreamStep","TPAStreamConnectPage","utilityService","accountService","qualtricsService","ngZone","modalController","tpaStreamService","NONE","rxjs__WEBPACK_IMPORTED_MODULE_7__","isWeb","getIsWeb","displayTPA","elementId","streamConnect","window","StreamConnect","prefix","getEnvironment","tpaPrefix","subscription","add","getParticipant","pipe","subscribe","part","getUserProperties","userProps","el","isDemo","sdkToken","tpaSdk","user","firstName","lastName","email","profileId","memberSystemKey","employer","name","clientName","systemKey","clientId","vendor","doneGetSDK","setStep","LOAD","doneChoosePayer","CHOOSE_PAYER","doneTermsOfService","TERMS_OF_SERVICE","doneCreatedForm","CREATED_FORM","donePostCredentials","POST_CREDS","doneRealTime","REAL_TIME","donePopUp","POPUP","doneEasyEnroll","DONE_ENROLL","handleFormErrors","FORM_ERROR","userSchema","aStep","run","step","getTPAData","navigateByUrl","dismiss","unsubscribe","_shared_lib_services_utility_utility_service__WEBPACK_IMPORTED_MODULE_4__","_shared_lib_services_account_account_service__WEBPACK_IMPORTED_MODULE_2__","_shared_lib_services_qualtrics_qualtrics_service__WEBPACK_IMPORTED_MODULE_3__","_angular_core__WEBPACK_IMPORTED_MODULE_10__","_ionic_angular__WEBPACK_IMPORTED_MODULE_11__","_services_tpa_stream_tpastream_service__WEBPACK_IMPORTED_MODULE_5__","selector","template","ModalHeaderComponent","location","mxService","router","_constants_modalHeaderContent_json__WEBPACK_IMPORTED_MODULE_2__","back","backUrl","mxAccount","getMxMemberConnect","getMxAccountConnect","removeMXWindowEventListener","_ionic_angular__WEBPACK_IMPORTED_MODULE_4__","_angular_common__WEBPACK_IMPORTED_MODULE_5__","_shared_lib_services_mx_service_mx_service__WEBPACK_IMPORTED_MODULE_3__","_angular_router__WEBPACK_IMPORTED_MODULE_6__","_angular_core__WEBPACK_IMPORTED_MODULE_7__","ModalHeaderComponentModule","imports","_angular_common__WEBPACK_IMPORTED_MODULE_3__","declarations","_modal_header_component__WEBPACK_IMPORTED_MODULE_0__","exports","ConsentService","baseService","rxjs__WEBPACK_IMPORTED_MODULE_4__","rxjs__WEBPACK_IMPORTED_MODULE_5__","rxjs__WEBPACK_IMPORTED_MODULE_6__","endpoints","appendBaseUrlToEndpoints","_constants_endpoints__WEBPACK_IMPORTED_MODULE_3__","refresh","medicalConsentData","post","getConsent","consentTypeName","_constants_consentType_enum__WEBPACK_IMPORTED_MODULE_2__","medicalConsentSubject","next","result","consentStatus","type","approved","setJustGaveConsent","saveConsent","justGaveConsent","sub","events","event","_angular_router__WEBPACK_IMPORTED_MODULE_10__","_base_base_factory_provider__WEBPACK_IMPORTED_MODULE_0__","_utility_utility_service__WEBPACK_IMPORTED_MODULE_1__","providedIn","ConsentType","contextRoot","endPoints","healthUtilization","disablePolicyHolder","TPAStreamService","_constants_endpoints__WEBPACK_IMPORTED_MODULE_1__","tpaData","carrierNames","carriers","forEach","carrier","carrierId","carrierName","Object","keys","groupingCategoryDetails","key","element","serviceName","claimLines","length","drugName","procedure_name","tpaDataReload$","processTPAData","tpaDataSubject","redirect","create","component","_shared_lib_components_coverages_tpastream_connect_tpastream_connect_page__WEBPACK_IMPORTED_MODULE_3__","cssClass","swipeToClose","modal","onWillDismiss","then","present","policyHolderId","memberId","payload","enable","_utility_utility_service__WEBPACK_IMPORTED_MODULE_2__","_ionic_angular__WEBPACK_IMPORTED_MODULE_9__","__webpack_exports__"],"sources":["webpack:///node_modules/rxjs/_esm2015/internal/operators/skip.js","webpack:///shared-lib/components/coverages/tpastream-connect/tpastream-connect.page.ts","webpack:///shared-lib/components/modal-header/modal-header.component.ts","webpack:///shared-lib/components/modal-header/modal-header.module.ts","webpack:///shared-lib/services/consent/consent.service.ts","webpack:///shared-lib/services/consent/constants/consentType.enum.ts","webpack:///shared-lib/services/consent/constants/endpoints.ts","webpack:///shared-lib/services/tpa-stream/constants/endpoints.ts","webpack:///shared-lib/services/tpa-stream/tpastream.service.ts","webpack:///shared-lib/components/coverages/tpastream-connect/tpastream-connect.page.html","webpack:///shared-lib/components/modal-header/modal-header.component.html"],"sourcesContent":["import { Subscriber } from '../Subscriber';\nexport function skip(count) {\n    return (source) => source.lift(new SkipOperator(count));\n}\nclass SkipOperator {\n    constructor(total) {\n        this.total = total;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new SkipSubscriber(subscriber, this.total));\n    }\n}\nclass SkipSubscriber extends Subscriber {\n    constructor(destination, total) {\n        super(destination);\n        this.total = total;\n        this.count = 0;\n    }\n    _next(x) {\n        if (++this.count > this.total) {\n            this.destination.next(x);\n        }\n    }\n}\n","import {Component, NgZone, OnInit} from '@angular/core';\nimport {ModalController} from '@ionic/angular';\nimport {AccountService} from '@shared-lib/services/account/account.service';\nimport {Participant} from '@shared-lib/services/account/models/accountres.model';\nimport {\n  QualtricsService,\n  QualtricsUserProps,\n} from '@shared-lib/services/qualtrics/qualtrics.service';\nimport {SharedUtilityService} from '@shared-lib/services/utility/utility.service';\nimport {Subscription} from 'rxjs';\nimport {first} from 'rxjs/operators';\nimport {TPAStreamService} from '../../../services/tpa-stream/tpastream.service';\nimport * as pageText from './constants/text-data.json';\n\nexport enum StreamStep {\n  NONE,\n  LOAD,\n  CHOOSE_PAYER,\n  TERMS_OF_SERVICE,\n  CREATED_FORM,\n  POST_CREDS,\n  REAL_TIME,\n  POPUP,\n  DONE_ENROLL,\n  FORM_ERROR,\n}\n\n@Component({\n  selector: 'app-tpastream-connect',\n  templateUrl: './tpastream-connect.page.html',\n  styleUrls: ['./tpastream-connect.page.scss'],\n})\nexport class TPAStreamConnectPage implements OnInit {\n  pageText: Record<string, string> = pageText;\n  isWeb = false;\n  streamStep = StreamStep;\n  step = StreamStep.NONE;\n  subscription = new Subscription();\n\n  constructor(\n    private utilityService: SharedUtilityService,\n    private accountService: AccountService,\n    private qualtricsService: QualtricsService,\n    private ngZone: NgZone,\n    private modalController: ModalController,\n    private tpaStreamService: TPAStreamService\n  ) {\n    this.isWeb = this.utilityService.getIsWeb();\n  }\n\n  ngOnInit() {\n    this.displayTPA('#tpa-stream');\n  }\n\n  displayTPA(elementId: string, streamConnect = window.StreamConnect) {\n    const prefix = this.utilityService.getEnvironment().tpaPrefix;\n    this.subscription.add(\n      this.accountService\n        .getParticipant()\n        .pipe(first())\n        .subscribe(async (part: Participant) => {\n          const userProps: QualtricsUserProps = await this.qualtricsService.getUserProperties();\n          streamConnect({\n            el: elementId,\n            isDemo: false,\n            sdkToken: this.utilityService.getEnvironment().tpaSdk,\n            user: {\n              firstName: part.firstName,\n              lastName: part.lastName,\n              email: part.profileId + '@voya.com',\n              memberSystemKey: part.profileId,\n            },\n            employer: {\n              name: prefix + userProps.clientName,\n              systemKey: prefix + userProps.clientId,\n              vendor: 'internal',\n            },\n            doneGetSDK: () => {\n              this.setStep(StreamStep.LOAD);\n            },\n            doneChoosePayer: () => {\n              this.setStep(StreamStep.CHOOSE_PAYER);\n            },\n            doneTermsOfService: () => {\n              this.setStep(StreamStep.TERMS_OF_SERVICE);\n            },\n            doneCreatedForm: () => {\n              this.setStep(StreamStep.CREATED_FORM);\n            },\n            donePostCredentials: () => {\n              this.setStep(StreamStep.POST_CREDS);\n            },\n            doneRealTime: () => {\n              this.setStep(StreamStep.REAL_TIME);\n            },\n            donePopUp: () => {\n              this.setStep(StreamStep.POPUP);\n            },\n            doneEasyEnroll: () => {\n              this.setStep(StreamStep.DONE_ENROLL);\n            },\n            handleFormErrors: () => {\n              this.setStep(StreamStep.FORM_ERROR);\n            },\n            userSchema: {},\n          });\n        })\n    );\n  }\n\n  setStep(aStep: StreamStep) {\n    this.ngZone.run(() => {\n      this.step = aStep;\n    });\n  }\n\n  closeClicked() {\n    this.tpaStreamService.getTPAData(true);\n    if (this.isWeb) {\n      this.utilityService.navigateByUrl('coverages/all-coverages/tpaclaims');\n    } else {\n      this.modalController.dismiss();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import {Component, Input} from '@angular/core';\nimport {ModalHeaderContent} from './models/modalHeaderContentModel';\nimport modalHeaderContent from './constants/modalHeaderContent.json';\nimport {ModalController} from '@ionic/angular';\nimport {Location} from '@angular/common';\nimport {MXService} from '@shared-lib/services/mx-service/mx.service';\nimport {Router} from '@angular/router';\n\n@Component({\n  selector: 'app-modal-header',\n  templateUrl: './modal-header.component.html',\n  styleUrls: ['./modal-header.component.scss'],\n})\nexport class ModalHeaderComponent {\n  content: ModalHeaderContent = modalHeaderContent;\n  @Input() headerText: string;\n  @Input() back: boolean;\n  @Input() border = true;\n  @Input() mxAccount: boolean;\n  @Input() backUrl?: string;\n\n  constructor(\n    private modalController: ModalController,\n    private location: Location,\n    private mxService: MXService,\n    private router: Router\n  ) {}\n\n  closeDialog() {\n    if (this.back) {\n      if (this.backUrl) {\n        this.router.navigateByUrl(this.backUrl);\n      } else {\n        this.location.back();\n      }\n    } else {\n      if (this.mxAccount) {\n        this.mxService.getMxMemberConnect(true);\n        this.mxService.getMxAccountConnect(true);\n        this.mxService.removeMXWindowEventListener();\n      }\n      this.modalController.dismiss();\n    }\n  }\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {IonicModule} from '@ionic/angular';\nimport {ModalHeaderComponent} from './modal-header.component';\n\n@NgModule({\n  imports: [CommonModule, IonicModule],\n  declarations: [ModalHeaderComponent],\n  exports: [ModalHeaderComponent],\n})\nexport class ModalHeaderComponentModule {}\n","import {Injectable} from '@angular/core';\nimport {\n  BehaviorSubject,\n  from,\n  Observable,\n  ReplaySubject,\n  Subscription,\n} from 'rxjs';\nimport {BaseService} from '../base/base-factory-provider';\nimport {SharedUtilityService} from '../utility/utility.service';\nimport {ConsentType} from './constants/consentType.enum';\nimport {endpoints} from './constants/endpoints';\nimport {ConsentStatus} from './model/consent.model';\nimport {NavigationStart, Router} from '@angular/router';\nimport {skip} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ConsentService {\n  private endpoints;\n  private subscription = new Subscription();\n  private medicalConsentData: Observable<ConsentStatus>;\n  private medicalConsentSubject: ReplaySubject<boolean> = new ReplaySubject<\n    boolean\n  >(1);\n\n  justGaveConsent = new BehaviorSubject<boolean>(false);\n\n  constructor(\n    private baseService: BaseService,\n    private utilityService: SharedUtilityService,\n    private router: Router\n  ) {\n    this.endpoints = this.utilityService.appendBaseUrlToEndpoints(endpoints);\n  }\n\n  getMedicalConsent(refresh = false): Observable<boolean> {\n    if (!this.medicalConsentData || refresh) {\n      this.medicalConsentData = from(\n        this.baseService.post(this.endpoints.getConsent, {\n          consentTypeName: ConsentType.MEDICAL,\n        })\n      );\n      const subscription = this.medicalConsentData.subscribe(result =>\n        this.medicalConsentSubject.next(result.consentStatus === 'APPROVED')\n      );\n      this.subscription.add(subscription);\n    }\n    return this.medicalConsentSubject;\n  }\n\n  setConsent(type: ConsentType, approved: boolean): Promise<void> {\n    if (approved) {\n      this.setJustGaveConsent();\n    }\n    return this.baseService.post(this.endpoints.saveConsent, {\n      consentTypeName: type,\n      consentStatus: approved ? 'APPROVED' : 'DENIED',\n    });\n  }\n\n  setJustGaveConsent() {\n    this.justGaveConsent.next(true);\n    const sub = this.router.events.pipe(skip(1)).subscribe(async event => {\n      if (event instanceof NavigationStart) {\n        this.justGaveConsent.next(false);\n        sub.unsubscribe();\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n}\n","export enum ConsentType {\n  MEDICAL = 'Medical',\n}\n","const contextRoot = 'myvoyage/ws/ers/';\n\nexport const endpoints = {\n  getConsent: contextRoot + 'service/person/consent',\n  saveConsent: contextRoot + 'service/saveConsent',\n};\n","const contextRoot = 'myvoyage/tpa/';\n\nexport const endPoints = {\n  healthUtilization: contextRoot + 'healthUtlization',\n  disablePolicyHolder: contextRoot + 'health/enableDisable',\n};\n","import {Injectable, OnDestroy} from '@angular/core';\nimport {BaseService} from '../base/base-factory-provider';\nimport {endPoints} from './constants/endpoints';\nimport {SharedUtilityService} from '../utility/utility.service';\nimport {\n  BehaviorSubject,\n  from,\n  Observable,\n  ReplaySubject,\n  Subscription,\n} from 'rxjs';\nimport {TPAClaimsData} from './models/tpa.model';\nimport {ModalController} from '@ionic/angular';\nimport {TPAStreamConnectPage} from '@shared-lib/components/coverages/tpastream-connect/tpastream-connect.page';\nimport {Router} from '@angular/router';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TPAStreamService implements OnDestroy {\n  endpoints;\n  isWeb = false;\n  private tpaData: Observable<TPAClaimsData> = null;\n  private tpaDataSubject: ReplaySubject<TPAClaimsData> = new ReplaySubject();\n  private subscription: Subscription = new Subscription();\n\n  tpaDataReload$: BehaviorSubject<void> = new BehaviorSubject(null);\n\n  constructor(\n    private utilityService: SharedUtilityService,\n    private baseService: BaseService,\n    private modalController: ModalController,\n    private router: Router\n  ) {\n    this.endpoints = this.utilityService.appendBaseUrlToEndpoints(endPoints);\n    this.isWeb = this.utilityService.getIsWeb();\n  }\n\n  processTPAData(tpaData: TPAClaimsData) {\n    const carrierNames = {};\n    tpaData.carriers.forEach(carrier => {\n      carrierNames[carrier.carrierId] = carrier.carrierName;\n    });\n\n    Object.keys(tpaData.groupingCategoryDetails).forEach(key => {\n      for (const element of tpaData.groupingCategoryDetails[key]) {\n        if (element.serviceName === 'rx') {\n          if (element.claimLines && element.claimLines.length > 0) {\n            element.drugName = element.claimLines[0].procedure_name;\n          }\n        }\n        element.carrierName = carrierNames[element.carrierId];\n      }\n    });\n  }\n\n  getTPAData(refresh = false): Observable<TPAClaimsData> {\n    if (this.tpaData == null || refresh) {\n      this.tpaDataReload$.next();\n      this.tpaData = from(\n        this.baseService.post(this.endpoints.healthUtilization, {})\n      );\n\n      const subscription = this.tpaData.subscribe(result => {\n        this.processTPAData(result);\n        this.tpaDataSubject.next(result);\n      });\n      this.subscription.add(subscription);\n    }\n    return this.tpaDataSubject;\n  }\n\n  async openTPAConnect(redirect = false) {\n    if (this.isWeb) {\n      this.router.navigateByUrl('coverages/all-coverages/tpaclaims/connect');\n    } else {\n      const modal = await this.modalController.create({\n        component: TPAStreamConnectPage,\n        cssClass: 'modal-fullscreen',\n        swipeToClose: false,\n      });\n      if (redirect) {\n        modal.onWillDismiss().then(() => {\n          this.router.navigateByUrl('coverages/coverage-tabs/insights');\n        });\n      }\n      modal.present();\n    }\n  }\n\n  async revokeCarrier(\n    policyHolderId: number,\n    memberId: number\n  ): Promise<boolean> {\n    const payload = {\n      memberId: memberId,\n      policyHolderId: policyHolderId,\n      enable: false,\n    };\n    const result = await this.baseService.post(\n      this.endpoints.disablePolicyHolder,\n      payload\n    );\n    return result === true;\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","export default \"<div class=\\\"tpa\\\">\\n  <app-modal-header\\n    *ngIf=\\\"!isWeb\\\"\\n    [headerText]=\\\"pageText.headerLable\\\"\\n  ></app-modal-header>\\n  <div *ngIf=\\\"isWeb\\\" class=\\\"web-header\\\">\\n    <ion-row>\\n      <ion-col (click)=\\\"closeClicked()\\\" size=\\\"3\\\" class=\\\"close\\\">Close</ion-col>\\n      <ion-col size=\\\"6\\\" class=\\\"title-col\\\"\\n        ><span class=\\\"title\\\">{{pageText.headerLable}}</span></ion-col\\n      >\\n      <ion-col size=\\\"3\\\"></ion-col>\\n    </ion-row>\\n  </div>\\n  <div *ngIf=\\\"step == streamStep.CHOOSE_PAYER\\\">\\n    <div class=\\\"header\\\">\\n      <h6>{{pageText.choseCarrier}}</h6>\\n      <span>{{pageText.addMore}}</span>\\n    </div>\\n  </div>\\n  <div *ngIf=\\\"step == streamStep.REAL_TIME || step == streamStep.DONE_ENROLL\\\">\\n    <img\\n      class=\\\"real-time-img\\\"\\n      src=\\\"assets/icon/realtime_verification.svg\\\"\\n      alt=\\\"{{pageText.verificationAlt}}\\\"\\n    />\\n  </div>\\n  <div id=\\\"tpa-stream\\\"></div>\\n  <div *ngIf=\\\"step == streamStep.DONE_ENROLL\\\">\\n    <ion-button\\n      (click)=\\\"closeClicked()\\\"\\n      name=\\\"submit\\\"\\n      shape=\\\"round\\\"\\n      expand=\\\"block\\\"\\n      type=\\\"submit\\\"\\n      color=\\\"btncolor\\\"\\n      id=\\\"close-btn\\\"\\n    >\\n      {{pageText.close}}\\n    </ion-button>\\n  </div>\\n</div>\\n\";","export default \"<ion-header>\\n  <ion-toolbar mode=\\\"ios\\\" [ngClass]=\\\"{border: border}\\\">\\n    <ion-buttons slot=\\\"secondary\\\">\\n      <ion-button id=\\\"close-button\\\" (click)=\\\"closeDialog()\\\">\\n        {{ content.closeText }}\\n      </ion-button>\\n    </ion-buttons>\\n    <ion-title>{{ headerText }}</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\";"]}