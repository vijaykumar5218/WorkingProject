(self["webpackChunkmyvoyage"] = self["webpackChunkmyvoyage"] || []).push([["default-shared-lib_components_mx-widget_mx-widget_module_ts-shared-lib_modules_orange-money_s-772f2d"],{

/***/ 50897:
/*!**********************************************************!*\
  !*** ./node_modules/om-js-calc/src/calc/AccountAccum.js ***!
  \**********************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./AccountTypes */ 81939), __webpack_require__(/*! ./util/employermatch/EmployerMatchWrapper */ 38150), __webpack_require__(/*! ./util/CalcUtilities */ 29099)], __WEBPACK_AMD_DEFINE_RESULT__ = (function(AccountTypes, EmployerMatchWrapper, CalcUtilities){

    var AccountAccum = function(){
        //  Private Variable declarations ------------------------------------
        var _em = null ;    //  of type 'EmployerMatchWrapper'
        var _mm = null ;    //  of type 'MinMaxLimit'
        var _loan = null ;    //  of type 'MinMaxLimit'
        var _planName = "" ;
        var _planLabel = "" ;
        var _planId = "" ;
        var _planIndex = -1 ;
        var _planType = -1 ;
        var _name = "" ;
        var _label = "" ;
        var _id = "" ;
        var _index = -1 ;
        var _type = -1 ;
        var _irc_code = -1 ;
        var _priority = -1 ;
        var _errorCode = -1 ;
        var _errorString = "" ;
        var _modes = 1 ;
        var _contribType = AccountTypes.CONTRIB_RATE ;
        var _startContrib = 0 ;
        var _immediateOrDue = false ; // "immediate": interest applied before payment; "due": interest applied after payment
        var _iterationEeAnnualSalary = 0 ;
        var _iterationErAnnualSalary = 0 ;
        var _iterationEeContribAmount = 0 ;
        var _iterationErContribAmount = 0 ;
        var _iterationPeriod = -1 ;
        var _initialEeContribAmount = 0 ;
        var _initialErContribAmount = 0 ;

        var _contribIterationThreshold = 36500 ;

        var _maxPeriod = -1 ;
        var _eeLumpAmount = 0 ;
        var _eeEarningsOnLumpAmount = 0 ;
        var _eeTaxedEarningsOnLumpAmount = 0 ;
        var _eeContribBucket = 0 ;
        var _eeEarningsOnContribs = 0 ;
        var _eeTaxedEarningsOnContribs = 0 ;
        var _erLumpAmount = 0 ;
        var _erEarningsOnLumpAmount = 0 ;
        var _erTaxedEarningsOnLumpAmount = 0 ;
        var _erContribBucket = 0 ;
        var _erEarningsOnContribs = 0 ;
        var _erTaxedEarningsOnContribs = 0 ;
        var _rateOfReturn = 0 ;
        var _rateOfIncrease = 0 ;
        var _rateOfWithholding = 0 ;
		var _irsInfraction = false; //will be set to true if there is any IRS infraction

        //  Privileged Method Declarations ---------------------------------
        this.reset = function( ) {
            _eeEarningsOnLumpAmount = 0 ;
            _eeTaxedEarningsOnLumpAmount = 0;
            _eeContribBucket = 0;
            _eeEarningsOnContribs = 0;
            _eeTaxedEarningsOnContribs = 0;
            _iterationEeContribAmount = 0;
            _initialEeContribAmount = 0;

            _erEarningsOnLumpAmount = 0;
            _erTaxedEarningsOnLumpAmount = 0;
            _erContribBucket = 0;
            _erEarningsOnContribs = 0;
            _erTaxedEarningsOnContribs = 0;
            _iterationErContribAmount = 0;
            _initialErContribAmount = 0;

            _contribIterationThreshold = 36500 ;

            _maxPeriod = -1;
            _errorCode = -1;
            _errorString = "";
			_irsInfraction = false;
        };

        this.isMinMaxLimit = function( )  { return( ( _mm !== null ) && ( ( _mm.getMinValue() > 0 ) || ( _mm.getMaxValue() > 0 ) ) ) ; } ;
        this.isLoan = function( )  { return( _loan != null ) ; } ;

        this.atMax = function(){ return( _maxPeriod > -1 ) ; } ;

        this.isEmployerMatch = function() { return( _em !== null ) ; } ;

        this.getEmployerMatchId = function() { return( ( this.isEmployerMatch() ) ? _em.getID() : -1 ) ; } ;

        this.isEmployerMatchPeriodicityModal = function( )  { return( _em.calcPeriodicityIsModal() ) ; } ;

        this.setName = function(s)  { _name = s ; } ;
        this.getName = function( )  { return( _name ) ; } ;

        this.setLabel = function(s)  { _label = s ; } ;
        this.getLabel = function( )  { return( _label ) ; } ;

        this.setId = function(s)  { _id = s ; } ;
        this.getId = function( )  { return( _id ) ; } ;

        this.setIRC = function(n) { _irc_code = n ; };
        this.getIRC = function( ) { return( _irc_code ) ; };

        this.setIndex = function(n) { _index = n ; } ;
        this.getIndex = function( ) { return( _index ) ; } ;

        this.setType = function(n) {
            _type = n ;
            switch (n){
                case AccountTypes.TYPE_RECURRING_ER:
                    this.setImmediateOrDue( true );
                    break;
                default:
                    this.setImmediateOrDue( false );
                    break;
            }
        };
        this.getType = function( ) { return( _type ) ; };

        this.setPlanName = function(s)  { _planName = s ; } ;
        this.getPlanName = function( )  { return( _planName ) ; } ;

        this.setPlanLabel = function(s)  { _planLabel = s ; } ;
        this.getPlanLabel = function( )  { return( _planLabel ) ; } ;

        this.setPlanId = function(s)  { _planId = s ; } ;
        this.getPlanId = function( )  { return( _planId ) ; } ;

        this.setPlanIndex = function(n) { _planIndex = n ; } ;
        this.getPlanIndex = function( ) { return( _planIndex ) ; } ;

        this.setPlanType = function(n) { _planType = n ; };
        this.getPlanType = function( ) { return( _planType ) ; };

        this.setPriority = function(n) { _priority = n ; };
        this.getPriority = function( ) { return( _priority ) ; };

        this.touchErrorCode = function(n) { _errorCode = ( _errorCode > -1 ) ? _errorCode : n ; };
        this.getErrorCode = function( ) { return( _errorCode ) ; };

        this.touchErrorString = function( s ) { _errorString = ( _errorString.length > 0 ) ? _errorString : s ; };
        this.getErrorString = function( ) { return( _errorString ) ; };

        this.compareTo = function( another) { return( _priority - another.getPriority() ) ; };

        this.setModes = function(n) { _modes = ( ( n > 0 ) ? n : 1 ) ; };
        this.getModes = function( ) { return( _modes ) ; };

        this.getFrequency = function( ) { return( this.getModes() ) ; };

        this.setImmediateOrDue = function(b) { _immediateOrDue = b ; };
        this.isImmediateOrDue = function( ) { return( _immediateOrDue ) ; };

        this.setStartContrib = function(n, d) { _contribType = n ;  _startContrib = d ; };
        this.adjustStartContrib = function ( d ) { _startContrib = d ; };
        this.getStartContrib = function( ) { return( _startContrib ) ; };
        this.getContribType = function( ) { return( _contribType ) ; };

		this.setIrsInfraction = function(n) { _irsInfraction = n ; };
        this.getIrsInfraction = function( ) { return( _irsInfraction ) ; };
        this.isIrsInfraction = function( ) { return( Boolean( _irsInfraction ) ) ; };

        this.setIterationEeContribAmount = function(period) {
            var holder = 0 ;
            var annualSalaryRef = this.getIterationEeAnnualSalary() ;
            this.setIterationPeriod( period ) ;

            if( !this.atMax() ) {
                holder = 0 ;
                switch( this.getContribType() ) {
                    case AccountTypes.CONTRIB_RATE :
                        holder = this.getStartContrib() * annualSalaryRef / this.getModes() ;
                        break ;

                    case AccountTypes.CONTRIB_MODAL :
                        switch (this.getType()){
                            case AccountTypes.TYPE_MANDATORY_EE:
                            case AccountTypes.TYPE_MANDATORY_ER:
                            case AccountTypes.TYPE_RECURRING_ER:
                                holder = this.getStartContrib();
                                break;
                            default:
                                holder = ( this.getStartContrib() * Math.pow( ( 1.0 + this.getRateOfIncrease() ), period ) ) ;
                                break;
                        }
                        break ;

                    case AccountTypes.CONTRIB_ANNUAL :
                        switch( this.getType() ) {
                            case AccountTypes.TYPE_MANDATORY_EE :
                            case AccountTypes.TYPE_MANDATORY_ER :
                            case AccountTypes.TYPE_RECURRING_ER :
                                holder = this.getStartContrib() / this.getModes() ;
                                break ;
                            default :
                                holder = ( this.getStartContrib() / this.getModes() * Math.pow( ( 1.0 + this.getRateOfIncrease() ), period ) ) ;
                                break ;

                        }
                        break ;

                }

                holder = ( this.isEmployerMatch() ) ? _em.modifyEeContrib( holder, annualSalaryRef, this.getModes() ) : holder ;

                _iterationEeContribAmount = holder ;
            }
            return( this.getIterationEeContribAmount() ) ;
        };

        this.getInitialEeContribAmount = function( )     { return( _initialEeContribAmount ) ; };
        this.getIterationEeContribAmount = function( )     { return( _iterationEeContribAmount ) ; };
        this.getEvaldEeContrib = function( )   { return( this.getIterationEeContribAmount() ) ; };
        this.getPeriodicEeContrib = function( ) { return( this.getIterationEeContribAmount() * this.getModes() ) ; } ;
        this.adjustEeIterationContribAmount = function(d) {
            _iterationEeContribAmount = d ;
            return( this.getIterationEeContribAmount() ) ;
        };

        this.getIterationEeContribPerContribType = function( ) {
            var holder = 0.0 ;
            var iterationAmount = this.getIterationEeContribAmount() ;
            var annualSalaryRef = this.getIterationEeAnnualSalary() ;

            switch( this.getContribType() ) {
                case AccountTypes.CONTRIB_RATE :
                    holder = iterationAmount * this.getModes() / annualSalaryRef ;
                    break ;

                case AccountTypes.CONTRIB_MODAL :
                    holder = iterationAmount ;
                    break ;

                case AccountTypes.CONTRIB_ANNUAL :
                    holder = ( iterationAmount * this.getModes() ) ;
                    break ;
            }
            return( holder ) ;
        };

        this.getIterationEeAnnualSalary = function( )     { return( _iterationEeAnnualSalary ) ; };
        this.setIterationEeAnnualSalary = function(d)     { _iterationEeAnnualSalary = d ; };

        this.getIterationErAnnualSalary = function( )     { return( _iterationEeAnnualSalary ) ; };
        this.setIterationErAnnualSalary = function(d)     { _iterationErAnnualSalary = d ; };

        this.getIterationPeriod = function( )     { return( _iterationPeriod ) ; };
        this.setIterationPeriod = function(n)     { _iterationPeriod = n ; };

        this.setIterationErContribAmount = function( alreadyMatchedContribs) {
            var holder = 0; //this.getIterationEeContribAmount() ;
            if( this.isEmployerMatch() ) {
                if( _em.calcPeriodicityIsAnnual() ){
                    holder = _em.getEmployerContrib( this.getIterationEeContribAmount(), alreadyMatchedContribs, this.getIterationErAnnualSalary(), this.getModes() ) ;
                }else{
                    holder = _em.getEmployerContrib( this.getIterationEeContribAmount(), alreadyMatchedContribs, this.getIterationErAnnualSalary(), this.getModes(), this.getIterationPeriod(), 0 ) ;
                }
            }
            _iterationErContribAmount = holder ;

            return( this.getIterationErContribAmount() ) ;
        };

        this.adjustErIterationContribAmount = function( d ) {
            _iterationErContribAmount = d ;
            return( this.getIterationErContribAmount() ) ;
        };

        this.getInitialErContribAmount = function( )   { return( _initialErContribAmount ) ; };
        this.getIterationErContribAmount = function( )   { return( _iterationErContribAmount ) ; };

        this.getPeriodicErContrib = function( )   { return( this.getIterationErContribAmount() * this.getModes() ) ; } ;

        this.getEvaldErContrib = function( )   { return( this.getIterationErContribAmount() ) ; } ;

        this.getIterationErContribPerContribType = function( ) {
            var holder = 0.0 ;
            var iterationAmount = this.getIterationErContribAmount() ;
            var annualSalaryRef = this.getIterationErAnnualSalary() ;

            switch( this.getContribType() ) {
                case AccountTypes.CONTRIB_RATE :
                    holder = iterationAmount * this.getModes() / annualSalaryRef ;
                    break ;

                case AccountTypes.CONTRIB_MODAL :
                    holder = iterationAmount ;
                    break ;

                case AccountTypes.CONTRIB_ANNUAL :
                    holder = ( iterationAmount * this.getModes() ) ;
                    break ;
            }
            return( holder ) ;
        };

        this.getContribIterationThreshold = function( )   { return( _contribIterationThreshold ) ; } ;
        this.setContribIterationThreshold = function( n ) { _contribIterationThreshold = n ; } ;

        this.getMaxPeriod = function( ) { return( _maxPeriod ) ; };

        this.touchMaxPeriod = function(n) { _maxPeriod = ( _maxPeriod > -1 ) ? _maxPeriod : n ; };

        this.setRateOfReturn = function(d) { _rateOfReturn = d ; };
        this.getRateOfReturn = function( ) { return( _rateOfReturn ) ; };

        this.setRateOfWithholding = function(d) {_rateOfWithholding = d ;};
        this.getRateOfWithholding = function( ) { return( _rateOfWithholding ) ; };

        this.setRateOfIncrease = function(d) { _rateOfIncrease = d ; };
        this.getRateOfIncrease = function( ) { return( _rateOfIncrease ) ; };

        this.setEeLumpAmount = function(d) { _eeLumpAmount = d ; };
        this.getEeLumpAmount = function( ) { return( _eeLumpAmount ) ; };

        this.setErLumpAmount = function(d) { _erLumpAmount = d ; };
        this.getErLumpAmount = function( ) { return( _erLumpAmount ) ; };

        this.touchEeEarningsOnLumpAmount = function(d) { _eeEarningsOnLumpAmount += d ; };
        this.getEeEarningsOnLumpAmount = function( ) { return( _eeEarningsOnLumpAmount ) ; };

        this.touchErEarningsOnLumpAmount = function(d) { _erEarningsOnLumpAmount += d ; };
        this.getErEarningsOnLumpAmount = function( ) { return( _erEarningsOnLumpAmount ) ; };

        this.touchEeTaxedEarningsOnLumpAmount = function(d) { _eeTaxedEarningsOnLumpAmount += d ; };
        this.getEeTaxedEarningsOnLumpAmount = function( ) { return( _eeTaxedEarningsOnLumpAmount ) ; };

        this.touchErTaxedEarningsOnLumpAmount = function(d) { _erTaxedEarningsOnLumpAmount += d ; };
        this.getErTaxedEarningsOnLumpAmount = function( ) { return( _erTaxedEarningsOnLumpAmount ) ; };

        this.touchEeContribBucket = function(d) { _eeContribBucket += d ; };
        this.getEeContribBucket = function( ) { return( _eeContribBucket ) ; };

        this.touchErContribBucket = function(d) { _erContribBucket += d ; };
        this.getErContribBucket = function( ) { return( _erContribBucket ) ; };

        this.touchEeEarningsOnContribs = function(d) { _eeEarningsOnContribs += d ; };
        this.getEeEarningsOnContribs = function( ) { return( _eeEarningsOnContribs ) ; };

        this.touchErEarningsOnContribs = function(d) { _erEarningsOnContribs += d ; };
        this.getErEarningsOnContribs = function( ) { return( _erEarningsOnContribs ) ; };

        this.touchEeTaxedEarningsOnContribs = function(d) { _eeTaxedEarningsOnContribs += d ; };
        this.getEeTaxedEarningsOnContribs = function( ) { return( _eeTaxedEarningsOnContribs ) ; };

        this.touchErTaxedEarningsOnContribs = function(d) { _erTaxedEarningsOnContribs += d ; };
        this.getErTaxedEarningsOnContribs = function( ) { return( _erTaxedEarningsOnContribs ) ; };


        this.align = function( pp, alreadyMatchedContribs ) {
            var modalRateOfReturn = ( this.getType() == AccountTypes.TYPE_NOGROWTH ) ? 0.0 : CalcUtilities.getPeriodicRate( this.getModes(), this.getRateOfReturn() ) ;
            var taxedRateOfReturn = CalcUtilities.getAfterTaxRateOfReturn( modalRateOfReturn, this.getRateOfWithholding() ) ;
            //var iterationIndex = ( ( this.getIterationPeriod() * this.getModes() ) + pp ) ;
            var iterationIndex = CalcUtilities.getSerialIndexFromPeriodAndMode( this.getIterationPeriod(), pp, this.getModes() ) ;
            var applyContribs = ( iterationIndex < this.getContribIterationThreshold() ) ;

            if(this.isEmployerMatch()){
                if(_em.calcPeriodicityIsModal()){
                    _iterationErContribAmount = _em.getEmployerContrib( this.getIterationEeContribAmount(), alreadyMatchedContribs, this.getIterationErAnnualSalary(), this.getModes(), this.getIterationPeriod(), pp ) ;
                }
            }

            if( this.isLoan() ) {
                this.touchEeContribBucket( _loan.getPayment( iterationIndex ) ) ;
            }
            else if( !this.isImmediateOrDue() && applyContribs ) {
               // due
                this.touchEeContribBucket( this.getIterationEeContribAmount() ) ;
                this.touchErContribBucket( this.getIterationErContribAmount() ) ;
                if( ( this.getIterationPeriod() < 1 ) && ( pp < 1 ) ) {
                    _initialEeContribAmount = this.getIterationEeContribAmount() ;
                    _initialErContribAmount = this.getIterationErContribAmount() ;
                }
            }

            // accumulation of earnings
            this.touchEeEarningsOnLumpAmount( ( this.getEeLumpAmount() + this.getEeEarningsOnLumpAmount() ) * modalRateOfReturn ) ;
            this.touchEeEarningsOnContribs( ( this.getEeContribBucket() + this.getEeEarningsOnContribs() ) * modalRateOfReturn ) ;
            this.touchEeTaxedEarningsOnLumpAmount( ( this.getEeLumpAmount() + this.getEeTaxedEarningsOnLumpAmount() ) * taxedRateOfReturn ) ;
            this.touchEeTaxedEarningsOnContribs( ( this.getEeContribBucket() + this.getEeTaxedEarningsOnContribs() )  * taxedRateOfReturn ) ;

            this.touchErEarningsOnLumpAmount( ( this.getErLumpAmount() + this.getErEarningsOnLumpAmount() ) * modalRateOfReturn ) ;
            this.touchErEarningsOnContribs( ( this.getErContribBucket() + this.getErEarningsOnContribs() ) * modalRateOfReturn ) ;
            this.touchErTaxedEarningsOnLumpAmount( ( this.getErLumpAmount() + this.getErTaxedEarningsOnLumpAmount() ) * taxedRateOfReturn ) ;
            this.touchErTaxedEarningsOnContribs( ( this.getErContribBucket() + this.getErTaxedEarningsOnContribs() )  * taxedRateOfReturn ) ;

            if( this.isImmediateOrDue() && applyContribs && !this.isLoan() ) {
                // immediate
                this.touchEeContribBucket( this.getIterationEeContribAmount() ) ;
                this.touchErContribBucket( this.getIterationErContribAmount() ) ;
                if( ( this.getIterationPeriod() < 1 ) && ( pp < 1 ) ) {
                    _initialEeContribAmount = this.getIterationEeContribAmount() ;
                    _initialErContribAmount = this.getIterationErContribAmount() ;
                }
            }

        };

        this.getEmployerMatchWrapper = function( ) { return( _em ) ;  };     // of type 'EmployerMatchWrapper'
        this.setEmployerMatchWrapper = function(  em ) { _em = em ; };

        this.getMinMaxLimit = function( ) { return( _mm ) ;  };
        this.setMinMaxLimit = function( mm )    { _mm = mm ; };

        this.getLoan = function( ) { return( _loan ) ;  } ;
        this.setLoan = function(  l )    { _loan = l ; } ;

    };

    return AccountAccum;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ 82622:
/*!*********************************************************!*\
  !*** ./node_modules/om-js-calc/src/calc/AccountData.js ***!
  \*********************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./AccountTypes */ 81939)], __WEBPACK_AMD_DEFINE_RESULT__ = (function(AccountTypes){
    var AccountData = function(){
        //  Private var declarations ------------------------------------
        var _error = -1 ;
        var _errorString = "";
        var _planName = "" ;
        var _planLabel = "" ;
        var _planId = "" ;
        var _planIndex = 0 ;
        var _planType = -1 ;
        var _name = "" ;
        var _label = "" ;
        var _id = "" ;
        var _index = -1 ;
        var _type = -1 ;
        var _irc = -1 ;
        var _priority = -1 ;
        var _rateOfReturn = 0 ;
        var _frequency = 1 ;
        var _contribType = AccountTypes.CONTRIB_MODAL ;
        var _contrib = 0 ;

        var _contribIterationThreshold = 36500 ;

        var _balance = 0 ;
        var _erBalance = 0 ;   // if distinguished from
        var _omErMatchData = null;
        var _erMatchData = null;
        var _minMaxLimit = null;
        var _minRate = 0 ;
        var _maxRate = 0.2 ;
        var _minDollar = 0 ;  // modal contrib
        var _maxDollar = 17500 ;  // modal contrib !!
		var _irsInfraction = false;

        var _loan = null;

        //  Privileged Method Declarations ---------------------------------

        this.setName = function( s ) { _name = s ; } ;
        this.getName = function( ) { return( _name ) ; } ;

        this.setLabel = function( s ) { _label = s ; } ;
        this.getLabel = function( ) { return( _label ) ; } ;

        this.setId = function( s ) { _id = s ; } ;
        this.getId = function( ) { return( _id ) ; } ;

        this.getIndex = function( ) { return( _index ) ; } ;
        this.setIndex = function( n ) { _index = n ; } ;

        this.getType = function( ) { return( _type ) ; };
        this.setType = function(n) { _type = n ; };

        this.getPriority = function( ) { return( _priority ) ; };
        this.setPriority = function(n) { _priority = n ; };

        this.getIRC = function( ) { return( _irc ) ; };
        this.setIRC = function(n) { _irc = n ; };

        this.setPlanName = function( s ) { _planName = s ; } ;
        this.getPlanName = function( ) { return( _planName ) ; } ;

        this.setPlanLabel = function( s ) { _planLabel = s ; } ;
        this.getPlanLabel = function( ) { return( _planLabel ) ; } ;

        this.setPlanId = function( s ) { _planId = s ; } ;
        this.getPlanId = function( ) { return( _planId ) ; } ;

        this.getPlanIndex = function( ) { return( _planIndex ) ; } ;
        this.setPlanIndex = function( n ) { _planIndex = n ; } ;

        this.getPlanType = function( ) { return( _planType ) ; } ;
        this.setPlanType = function( n ) { _planType = n ; } ;

        this.getContrib = function( ) { return( _contrib ) ; };
        this.setContrib = function(n, d) { _contribType = n ; _contrib = d ; };
        this.getContribType = function( ) { return( _contribType ) ; };
        this.updateContrib = function( d ) { _contrib = d ; };

        this.getRateOfReturn = function( ) { return( _rateOfReturn ) ; };
        this.setRateOfReturn = function(d) { _rateOfReturn = d ; };

        this.getFrequency = function( ) { return( _frequency ) ; };
        this.setFrequency = function(n) { _frequency = ( n > 0 ) ? n : 1 ; };

        this.getContribIterationThreshold = function( ) { return( _contribIterationThreshold ) ; } ;
        this.setContribIterationThreshold = function( n ) { _contribIterationThreshold = n ; } ;

        this.getBalance = function( ) { return( _balance ) ; };
        this.setBalance = function(d) { _balance = d ; };

        this.getErBalance = function( ) { return( _erBalance ) ; };
        this.setErBalance = function(d) { _erBalance = d ; };

        this.getMinMaxLimit = function( ) { return( _minMaxLimit ) ; } ;
        this.setMinMaxLimit = function( mm ) { _minMaxLimit = mm ; } ;

        this.getOmErMatchData = function( ) { return( _omErMatchData ) ; } ;
        this.setOmErMatchData = function( ermd ) { _omErMatchData = ermd ; } ;

        this.getErMatchData = function( ) { return( _erMatchData ) ; };
        this.setErMatchData = function( ermd ) { _erMatchData = ermd ; };

        this.getLoan = function( ) { return( _loan ) ; } ;
        this.setLoan = function( l ) { _loan = l ; } ;


        this.getMinContribRate = function( ) { return( _minRate ) ; };
        this.setMinContribRate = function(d) { _minRate = d ; };

        this.getMaxContribRate = function( ) { return( _maxRate ) ; };
        this.setMaxContribRate = function(d) { _maxRate = d ; };

        this.getMinContribDollar = function( ) { return( _minDollar ) ; };
        this.setMinContribDollar = function(d) { _minDollar = d ; };

        this.getMaxContribDollar = function( ) { return( _maxDollar ) ; };
        this.setMaxContribDollar = function(d) { _maxDollar = d ; };

        this.getErrorCode = function( ) { return( _error ) ; };
        this.setErrorCode = function(n) { _error = n ; };

        this.getErrorString = function( ) { return( _errorString ) ; } ;
        this.setErrorString = function( s ) { _errorString = s ; } ;

		this.setIrsInfraction = function(n) { _irsInfraction = n ; };
        this.getIrsInfraction = function( ) { return( _irsInfraction ) ; };
	this.isIrsInfraction = function() { return( Boolean( _irsInfraction ) ) ; } ;

    };

    AccountData.serialVersionUID = '0L';

    return AccountData;

}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ 81939:
/*!**********************************************************!*\
  !*** ./node_modules/om-js-calc/src/calc/AccountTypes.js ***!
  \**********************************************************/
/***/ (function(module, exports) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function(){
    var AccountTypes = {};

    AccountTypes.labels = [
        "Mandatory EE DB",
        "Mandatory EE ARP/ORP",
        "Mandatory ER ARP/ORP",
        "Aggregate Balance",
        "Voluntary Pre-Tax",
        "Roth",
    	"Supplemental Pre-Tax",
    	"Supplemental Roth",
    	"Voluntary Age Catch-Up",
        "Roth Age Catch-Up",
        "After-Tax",
    	"Supplemental After-Tax",
        "Recurring ER/Profit Sharing",
        "Pension Cash Balance",
        "Pension Lump Sum",
        "No Increase",
        "No Growth",
        "Existing Loan & Repayment",
        "New Loan & Repayment"
    ] ;

    AccountTypes.userLabels = [
        "Mandatory Employee DB",
        "Mandatory Employee",
        "Mandatory Employer",
        "Combined Balance",
        "Before-tax",
        "Roth",
    	"Supplemental Before-tax",
    	"Supplemental Roth",
        "Before-tax Catch-up",
        "Roth Catch-up",
        "After-tax",
    	"Supplemental After-Tax",
        "Recurring Employer",
        "Pension Balance",
        "Pension Lump Sum",
        "No Increase",
        "No Growth",
        "Existing Loan & Repayment",
        "New Loan & Repayment"
    ] ;

    AccountTypes.matchType = function(type){
        return AccountTypes["TYPE_" + type];
    };

    AccountTypes.TYPE_DB_MANDATORY_EE = 0 ;  // required defined benefit (pension) contrib
    AccountTypes.TYPE_MANDATORY_EE    = 1 ;
    AccountTypes.TYPE_MANDATORY_ER    = 2 ;
    AccountTypes.TYPE_AGGREGATE_BALANCE     = 3 ;
    AccountTypes.TYPE_PRETAX                = AccountTypes.TYPE_BASIC_PRETAX  = 4 ;
    AccountTypes.TYPE_ROTH                  = AccountTypes.TYPE_BASIC_ROTH  = 5 ;
    AccountTypes.TYPE_PRETAX_SUPP           = AccountTypes.TYPE_SUPPL_PRETAX = 6 ;
    AccountTypes.TYPE_ROTH_SUPP             = AccountTypes.TYPE_SUPPL_ROTH = 7 ;
    AccountTypes.TYPE_PRETAX_AGECATCHUP     = AccountTypes.TYPE_CATCHUP_AGE_PRETAX =  8 ;
    AccountTypes.TYPE_ROTH_AGECATCHUP       = AccountTypes.TYPE_CATCHUP_AGE_ROTH = 9 ;
    AccountTypes.TYPE_AFTER_TAX             = AccountTypes.TYPE_AFTERTAX      = AccountTypes.TYPE_AFTERTAX = 10 ;
    AccountTypes.TYPE_AFTER_TAX_SUPP        = AccountTypes.TYPE_AFTERTAX_SUPP = AccountTypes.TYPE_SUPPL_AFTERTAX = 11 ;
    AccountTypes.TYPE_RECURRING_ER = 12 ;
    AccountTypes.TYPE_PENSION_CASH_BAL = 13 ;
    AccountTypes.TYPE_PENSION_LUMP_SUM = 14 ;
    AccountTypes.TYPE_NOINCREASE = 15 ;
    AccountTypes.TYPE_NOGROWTH = 16 ;

    AccountTypes.TYPE_EXISTINGLOAN = 17 ;
    AccountTypes.TYPE_NEWLOAN = 18 ;

    AccountTypes.CONTRIB_ANNUAL = 0 ;
    AccountTypes.CONTRIB_MODAL = 1 ;
    AccountTypes.CONTRIB_RATE = 2 ;

    AccountTypes.getLabel = function(index){
        return AccountTypes.labels[index];
    };

    AccountTypes.setLabel = function(index, label){
        AccountTypes.labels[index] = label;
    };

    AccountTypes.getUserLabel = function(index){
        return AccountTypes.userLabels[index];
    };


    AccountTypes.accountTypeEvaluator = function( s ) {
    	var retId = AccountTypes.TYPE_AFTERTAX ;
    	s = s.toUpperCase().trim() ;
    	var isCatchUp = ( s.indexOf( "CATCHUP" ) > -1 ) || ( s.indexOf( "CATCH_UP" ) > -1 ) ;
    	var isSupplemental = ( s.indexOf( "SUPP" ) > -1 ) ;

    	if( ( s.indexOf( "PRETAX" ) > -1 ) || ( s.indexOf( "BEFORE" ) > -1 ) || ( s.indexOf( "PRE_" ) > -1 ) ) {
    		retId = ( isCatchUp ) ? AccountTypes.TYPE_PRETAX_AGECATCHUP : AccountTypes.TYPE_PRETAX  ;
    		retId = ( isSupplemental ) ? AccountTypes.TYPE_SUPPL_PRETAX : retId ;
    	}

    	if( s.indexOf( "ROTH" ) > -1 ) {
    		retId = ( isCatchUp ) ? AccountTypes.TYPE_ROTH_AGECATCHUP : AccountTypes.TYPE_ROTH  ;
    		retId = ( isSupplemental ) ? AccountTypes.TYPE_SUPPL_ROTH : retId ;
    	}

    	if( ( s.indexOf( "AFTER" ) > -1 ) || ( s.indexOf( "POST" ) > -1 ) ) {
    		retId = ( isSupplemental ) ? AccountTypes.TYPE_SUPPL_AFTERTAX : AccountTypes.TYPE_AFTERTAX ;
    	}

    	return( retId ) ;
    } ;


    AccountTypes.contribTypeEvaluator = function( s ) {
    	var retId = AccountTypes.CONTRIB_MODAL ;
    	s = s.toUpperCase().trim() ;

    	if( ( s.indexOf( "PERC" ) > -1 ) || ( s.indexOf( "RATE" ) > -1 ) || ( s.indexOf( "PRC" ) > -1 ) || ( s.indexOf( "%" ) > -1 ) ) {
    		retId = AccountTypes.CONTRIB_RATE  ;
    	}

//    	if( ( s.indexOf( "DOLL" ) > -1 ) || ( s.indexOf( "AMOUN" ) > -1 ) || ( s.indexOf( "MONE" ) > -1 ) ) {
//    		retId = AccountTypes.CONTRIB_MODAL ;
//    	}

    	if( ( s.indexOf( "ANNUAL" ) > -1 ) || ( s.indexOf( "YEAR" ) > -1 ) ) {
    		retId = AccountTypes.CONTRIB_ANNUAL ;
    	}

    	return( retId ) ;
    } ;



    return AccountTypes;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ 98611:
/*!*********************************************************!*\
  !*** ./node_modules/om-js-calc/src/calc/AccumCensus.js ***!
  \*********************************************************/
/***/ (function(module, exports) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function(){
	var AccumCensus = function(){
        //  Private var declarations ------------------------------------
        var _periodRef = -1 ;
        var _salary = 0.0 ;
        var _salary401a17 = 0.0 ;
        var _eeContribs = 0.0 ;

        //  Privileged Method Declarations ---------------------------------

        this.getPeriodRef = function( ) { return( _periodRef ) ; }
        this.setPeriodRef = function( n ) { _periodRef = n ; }

        this.getSalary = function( ) { return( _salary ) ; }
        this.setSalary = function( d ) { _salary = d ; }

        this.getSalary401a17 = function( ) { return( _salary401a17 ) ; }
        this.setSalary401a17 = function( d ) { _salary401a17 = d ; }

        this.getEEContribs = function( ) { return( _eeContribs ) ; }
        this.setEEContribs = function( d ) { _eeContribs = d ; }

    };

    return AccumCensus;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ 92174:
/*!*********************************************************!*\
  !*** ./node_modules/om-js-calc/src/calc/AccumCommon.js ***!
  \*********************************************************/
/***/ (function(module, exports) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function(){
	var AccumCommon = function(){
        //  Private var declarations ------------------------------------
        var _annualSalary        = 0;
        var _full                = 0;      // whole years until retirement
        var _fractional          = 0;   // partial years until retirement
        var _rateOfIncrease      = 0;  // annual
        var _rateOfReturn        = 0;   // annual
        var _rateOfWithholding   = 0;   // annual: for inside build-up of taxable amounts
        var _minMaxLimitList     = null;

        //  Privileged Method Declarations ---------------------------------

        this.init = function(){ _minMaxLimitList = []; };

        this.setAnnualSalary = function( d ){ _annualSalary = d ; };
        this.getAnnualSalary = function( ){ return( _annualSalary ) ; };

        this.setFull = function( n ){ _full = n ; };
        this.getFull = function( ){ return( _full ) ; };

        this.setFractional = function( d ){ _fractional = d ; };
        this.getFractional = function( ){ return( _fractional ) ; };

        this.setRateOfIncrease = function( d ){ _rateOfIncrease = d ; };
        this.getRateOfIncrease = function( ){ return( _rateOfIncrease ) ; };

        this.setRateOfReturn = function( d ){ _rateOfReturn = d ; };
        this.getRateOfReturn = function( ){ return( _rateOfReturn ) ; };

        this.setRateOfWithholding = function( d ){ _rateOfWithholding = d ; };
        this.getRateOfWithholding = function( ){ return( _rateOfWithholding ) ; };

        this.getMinMaxLimitList = function(){ return _minMaxLimitList; };
        this.setMinMaxLimitList = function( mmll ) { _minMaxLimitList = mmll; };

        this.init();

    };

    return AccumCommon;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ 97065:
/*!*************************************************************!*\
  !*** ./node_modules/om-js-calc/src/calc/BaseAccumulator.js ***!
  \*************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./AccountAccum */ 50897), __webpack_require__(/*! ./IRSConstants */ 84666), __webpack_require__(/*! ./AccumCommon */ 92174), __webpack_require__(/*! ./AccountTypes */ 81939),
         __webpack_require__(/*! ./LimitUtilities */ 26486),__webpack_require__(/*! ./util/DoubleScratchPad */ 72258), __webpack_require__(/*! ./util/CalcUtilities */ 29099),
         __webpack_require__(/*! ./MinMaxLimit */ 89382), __webpack_require__(/*! ./ErrorUtilities */ 76264), __webpack_require__(/*! ./AccumCensus */ 98611), __webpack_require__(/*! ./ReplacementIncome */ 27082)], __WEBPACK_AMD_DEFINE_RESULT__ = (function(AccountAccum, IRSConstants, AccumCommon, AccountTypes, LimitUtilities,
         DoubleScratchPad, CalcUtilities, MinMaxLimit, ErrorUtilities, AccumCensus, ReplacementIncome){

    //  Constructor  ------------------------------------
    var BaseAccumulator = function() {
        //  Private var declarations ------------------------------------
        var _accountList = null ;
        var _accumCommon = null ;  // of type 'AccumCommon'
        var _censusList = null ;
        var _holder = DoubleScratchPad.newInstance();
        var _aggregateFrequency = 1 ;

        //  Privileged Method Declarations ------------------------------------
        this.init = function(ac, al) {
            _accountList = al ;
            _accumCommon = ac ;
            reset();
        };

        this.getCensusList = function() { return( _censusList ) ; } ;
        this.getAccountAccumList = function() { return( _accountList ) ; } ;

        //  Private Method Declarations ------------------------------------
        function reset( ) {
            // aggregate frequency starting point (at least > 0)
            _aggregateFrequency = 1 ;  // _accumCommon.getFrequency() ;

            // empty-out census list
            _censusList = [] ;

            // prepare for sort
            for (var i = 0; i < _accountList.length; i++) {
                var aa = _accountList[i];
                // algorithm for setting primacy: evaluate accounts/money sources and figure out which are least susceptible to
                // limit or change (setPriority() prep for sort)
                // TODO:  make this more sophisticated
                aa.setPriority( aa.getPlanIndex() + (aa.getType()*10) ) ;
            }

            // sort to put in descending order of primacy
            _accountList.sort(function(a, b){
                if(a.getPriority() > b.getPriority()){
                    return 1;
                }else if (a.getPriority() < b.getPriority()){
                    return -1;
                }else{
                    return 0;
                }
            });

            // set one-time, start-up configurations
            for (var i = 0; i<_accountList.length; i++) {
                var aa = _accountList[i];
                // set/reset aggregate frequency with each account
                _aggregateFrequency = CalcUtilities.getAggregateModes( _aggregateFrequency, aa.getModes() ) ;

                // assuming a single rate of return for all money sources, establish rate for each account.
                aa.setRateOfReturn( _accumCommon.getRateOfReturn() ) ;
                switch( aa.getType() ) {
                    case AccountTypes.TYPE_NOGROWTH :
                    //case AccountTypes.TYPE_PENSION_LUMP_SUM :  // this looks like it was included in error: not in Java version
                        aa.setRateOfReturn( 0.0 ) ;
                        break ;
                    default :
                        break ;
                }

                // consistent rate of increase for all contribs.
                aa.setRateOfIncrease( _accumCommon.getRateOfIncrease() ) ;
                // NB For these, only the contribution dollar AMOUNTs (AccountTypes.CONTRIB_ANNUAL and AccountTypes.CONTRIB_MODAL)
                // will be constrained to NO rate of increase (0%); contribution RATEs (AccountTypes.CONTRIB_RATE),
                // however, will be governed by the salary reference, which increases with the rate of increase.
                switch( aa.getType() ) {
                    case AccountTypes.TYPE_MANDATORY_EE :  // see NB above
                    case AccountTypes.TYPE_MANDATORY_ER :
                    case AccountTypes.TYPE_RECURRING_ER :
                    case AccountTypes.TYPE_NOINCREASE :
                    case AccountTypes.TYPE_NOGROWTH :
                    case AccountTypes.TYPE_PENSION_LUMP_SUM :
                    case AccountTypes.TYPE_EXISTINGLOAN :
                    case AccountTypes.TYPE_NEWLOAN :
                        aa.setRateOfIncrease( 0.0 ) ;
                        break ;
                    default :
                        break ;
                }

                // set withholding rate for each account (this is for build-up in taxable accounts and for reference in tax-deferred accounts)
                aa.setRateOfWithholding( _accumCommon.getRateOfWithholding() ) ;

                // set immediate for recurring employer contrib
                if( AccountTypes.TYPE_RECURRING_ER == aa.getType() ) { aa.setImmediateOrDue( true ) ; }
            }
        }

        this.align = function( ){
            // for (AccountAccum aa : _accountList) {

            for (var i = 0; i < _accountList.length; i++) {
                var aa = _accountList[i];
                // reset account objects (zero-out principle, earnings for all buckets)
                aa.reset() ;
            }

            // through years
            for( var n = 0 ; n < _accumCommon.getFull() ; n++ ) {

                // (1) get salary according to increase rate and apply compensation limit
                var annualSalaryRef = _accumCommon.getAnnualSalary() * Math.pow( ( 1.0 + _accumCommon.getRateOfIncrease() ), n ) ;
                var annualSalary401a17Ref = Math.min( annualSalaryRef, IRSConstants.getLimit(IRSConstants._401a17) ) ;

                // (2) establish contribs
            //resolveSalaryTo401a17Limits( accountList, annualSalaryRef, annualSalary401a17Ref ) ;
                for (var i = 0; i<_accountList.length; i++) {
                    var aa = _accountList[i];
                    // apply right annual salary ref
       	            aa.setIterationEeAnnualSalary( ( LimitUtilities.apply401a17SalaryLimit( aa.getType(), aa.getIRC(), true ) ) ? annualSalary401a17Ref : annualSalaryRef ) ;
                    aa.setIterationErAnnualSalary( ( LimitUtilities.apply401a17SalaryLimit( aa.getType(), aa.getIRC(), false ) ) ? annualSalary401a17Ref : annualSalaryRef ) ;

                    // set ee contrib
                    aa.setIterationEeContribAmount( n ) ;
                }

                // (3) enforce money source non-IRS limits
                BaseAccumulator.resolveContribsToNonIRSLimits(_accountList);

                // (4) enforce global non-IRS limits
                var mmlimits = _accumCommon.getMinMaxLimitList();
                for (var i = 0; i < mmlimits.length; i++) {
                    var mml = mmlimits[i];
                    if( (mml.getMinValue() > 0) || (mml.getMaxValue() > 0) ){
                        BaseAccumulator.resolveContribsToGlobalNonIRSLimit(mml, _accountList, annualSalary401a17Ref);
                    }
                }

                // (5) enforce to IRS 402g1, 457e15, 414v, and 415c1A limits - "single" or idividual pass
                BaseAccumulator.resolveContribsToIRSLimits(_accountList);

                // (6) enforce collaboratively to IRS 402g1, 457e15, and 414v limits
                BaseAccumulator.resolveContribsTo_402g1_457e15_414vLimits( _accountList );

                // (7) establish er match contrib
                _holder.zero();

                for (var i = 0; i<_accountList.length; i++) {
                    var aa = _accountList[i];
                    if(aa.isEmployerMatch()){
                        aa.setIterationErContribAmount( _holder.get( aa.getEmployerMatchId() ) )  ;
                        _holder.touch( aa.getEmployerMatchId(), ( aa.getIterationEeContribAmount() * aa.getModes() ) );
                    }

                }

                // (8) enforce 415c1A limits
                BaseAccumulator.resolveContribsTo_415c1ALimits( _accountList );

                // (9) enforce salary as limit
                BaseAccumulator.resolveContribsToSalaryAsLimit( _accountList, annualSalaryRef ) ;

                // (10) ?? if n==0 do fractional years at beginning

                // (11) accum the year via aggregate frequency
                var translatedMode = -1 ;
                for( var nn = 0 ; nn < _aggregateFrequency ; nn++ ) {
                    _holder.zero();
                    for (var i = 0; i<_accountList.length; i++) {
                        var aa = _accountList[i];
                        // only if an active mode
                        translatedMode = CalcUtilities.translateMode( _aggregateFrequency, aa.getModes(), nn ) ;
                        if( translatedMode > -1 ) {
                            var alreadyMatchedContribs = 0.0 ;
                            if( aa.isEmployerMatch() && aa.isEmployerMatchPeriodicityModal() ) {
                                alreadyMatchedContribs = _holder.get( aa.getEmployerMatchId() ) ;
                                _holder.touch( aa.getEmployerMatchId(), ( aa.getIterationEeContribAmount() * aa.getModes() ) ) ;
                            }
                            aa.align( translatedMode, alreadyMatchedContribs ) ;
                        }
                    }
                }

                // (12) ?? n < _accumCommon.getFull() do fractional years at end
           
                // (13) census capture
                if( ( n == 0 ) || ( n == ( _accumCommon.getFull() - 1 ) ) ) {  // first or last year
                    var ac = new AccumCensus() ;
                    ac.setPeriodRef( n ) ;
                    ac.setSalary( annualSalaryRef ) ;
                    ac.setSalary401a17( annualSalary401a17Ref ) ;
                    ac.setEEContribs( BaseAccumulator.getAnnualEEContribs( _accountList, ReplacementIncome.LifeStyleTypes ) ) ;

                    _censusList.push( ac ) ;
                }
            }
        };

        this.validate = function( )
        {
            for (var i = 0; i<_accountList.length; i++) {
                var aa = _accountList[i];
                // reset account objects (zero-out principle, earnings for all buckets)
                aa.reset() ;
            }

            // (1) get salary according to increase rate and apply compensation limit
            var annualSalaryRef = _accumCommon.getAnnualSalary() * Math.pow( ( 1.0 + _accumCommon.getRateOfIncrease() ), 0 ) ;
            var annualSalary401a17Ref = Math.min( annualSalaryRef, IRSConstants.getLimit(IRSConstants._401a17) ) ;

            // (2) establish contribs
        //resolveSalaryTo401a17Limits( accountList, annualSalaryRef, annualSalary401a17Ref ) ;
            for (var i = 0; i<_accountList.length; i++) {
                var aa = _accountList[i];
                // apply right annual salary ref
                aa.setIterationEeAnnualSalary( ( LimitUtilities.apply401a17SalaryLimit( aa.getType(), aa.getIRC(), true ) ) ? annualSalary401a17Ref : annualSalaryRef ) ;
                aa.setIterationErAnnualSalary( ( LimitUtilities.apply401a17SalaryLimit( aa.getType(), aa.getIRC(), false ) ) ? annualSalary401a17Ref : annualSalaryRef ) ;

                // set ee contrib
                aa.setIterationEeContribAmount( 0 ) ;
            }

            // (3) enforce money source non-IRS limits
            BaseAccumulator.resolveContribsToNonIRSLimits( _accountList ) ;


            // (4) enforce global non-IRS limits
            var mmlimits = _accumCommon.getMinMaxLimitList();
            for (var i = 0; i < mmlimits.length; i++) {
                var mml = mmlimits[i];
                if( (mml.getMinValue() > 0) || (mml.getMaxValue() > 0) ){
                    BaseAccumulator.resolveContribsToGlobalNonIRSLimit(mml, _accountList, annualSalary401a17Ref);
                }
            }

            // (5) enforce to IRS 402g1, 457e15, 414v, and 415c1A limits - "single" or individual pass
            BaseAccumulator.resolveContribsToIRSLimits( _accountList ) ;

            // (6) enforce collaboratively to IRS 402g1, 457e15, and 414v limits
            BaseAccumulator.resolveContribsTo_402g1_457e15_414vLimits( _accountList ) ;

            // (7) establish er match contrib
            _holder.zero() ;
            for (var i = 0; i<_accountList.length; i++) {
                var aa = _accountList[i];
                if( aa.isEmployerMatch() ) {
                    aa.setIterationErContribAmount( _holder.get( aa.getEmployerMatchId() ) ) ;
                    _holder.touch( aa.getEmployerMatchId(), ( aa.getIterationEeContribAmount() * aa.getModes() ) ) ;
                }
            }

            // (8) enforce 415c1A limits
            BaseAccumulator.resolveContribsTo_415c1ALimits( _accountList ) ;

            // (9) enforce salary as limit
            BaseAccumulator.resolveContribsToSalaryAsLimit( _accountList, annualSalaryRef ) ;
        };

    };



    //  Static Method Declarations ------------------------------------

    BaseAccumulator.resolveContribsTo_402g1_457e15_414vLimits = function(accountList) {
        var index = -1;
        var limits = [
            IRSConstants.getLimit(IRSConstants._402g1) ,
            IRSConstants.getLimit(IRSConstants._457e15) ,
            IRSConstants.getLimit(IRSConstants._414v) ,
            IRSConstants.getLimit(IRSConstants._414v),
            0,
            0
        ];
        //
        for (var i = 0; i < accountList.length; i++) {
            var aa = accountList[i];
            index = -1 ;
            index = LimitUtilities.getIndexForGrouped_402g1_457e15_414_vLimits( aa.getType(), aa.getIRC() ) ;

            if( index > -1 ) {
                if( ( aa.getIterationEeContribAmount() * aa.getModes() ) > limits[index] ) {
                    aa.adjustEeIterationContribAmount( limits[index] / aa.getModes() ) ;
                    aa.touchMaxPeriod( aa.getIterationPeriod() ) ;
                    aa.touchErrorCode( aa.getIterationPeriod() ) ;

                    if( BaseAccumulator.REPORTABLE == aa.getIterationPeriod() ) {
                        aa.setIrsInfraction(true);
                        aa.touchErrorString( ErrorUtilities.createErrorStringForMultipleAccountIRSInfraction( aa, accountList ) ) ;
                    }
                    limits[index] = 0.0 ;
                }else {
                    limits[index] = limits[index] - ( aa.getIterationEeContribAmount() * aa.getModes() ) ;
                }
            }
        }
    } ;


    BaseAccumulator.resolveContribsTo_415c1ALimits = function( accountList ) {
        var limits = [ 0, 0, 0, 0, IRSConstants.getLimit(IRSConstants._415c1A), IRSConstants.getLimit(IRSConstants._415c1A) ] ;
        var index = -1 ;

        for (var i = 0; i < accountList.length; i++) {
            var aa = accountList[i];
            index = -1 ;
            index =  LimitUtilities.getIndexForGrouped_415c1A_Limit( aa.getType(), aa.getIRC() ) ;

            if( index > -1 ) {
                var annualEe = aa.getIterationEeContribAmount() * aa.getModes() ;
                var annualEr = aa.getIterationErContribAmount() * aa.getModes() ;
                if( ( annualEe + annualEr ) > limits[index] ) {
                    if( annualEr > 0.0 ) {
                        BaseAccumulator.resolveEEaccordingToER( accountList, aa.getIndex(), ( limits[index] / aa.getModes() ) ) ;  // 140513 JSS  in
// 140513 JSS out                        var contribs = LimitUtilities.resolveEEandERcontribs( annualEe, annualEr, limits[index] ) ;
// 140513 JSS out                        aa.adjustEeIterationContribAmount( contribs[0] / aa.getModes() ) ;
// 140513 JSS out                        aa.adjustErIterationContribAmount( contribs[1] / aa.getModes() ) ;
                    } else {
                        aa.adjustEeIterationContribAmount( limits[index] / aa.getModes() ) ;
                    }
                    aa.touchMaxPeriod( aa.getIterationPeriod() ) ;
                    aa.touchErrorCode( aa.getIterationPeriod() ) ;
                    if( BaseAccumulator.REPORTABLE == aa.getIterationPeriod() ) {
                        aa.setIrsInfraction(true);
                        aa.touchErrorString( ErrorUtilities.createErrorStringFor415IRSInfraction( limits[index], aa,  accountList ) ) ;
                    }
                    limits[index] = 0.0 ;
                } else {
                    limits[index] = limits[index] - ( ( aa.getIterationEeContribAmount() + aa.getIterationErContribAmount() ) * aa.getModes() ) ;
                }
            }
        }
    };

    BaseAccumulator.resolveContribsToNonIRSLimits = function( accountList ) {

        for (var i = 0; i < accountList.length; i++) {
            var aa = accountList[i];
            if( aa.isMinMaxLimit() ) {
                var max = aa.getMinMaxLimit().getEvaldMax( aa.getFrequency(), aa.getIterationEeAnnualSalary() ) ;
// 140507 JSS out                var min = aa.getMinMaxLimit().getEvaldMin( aa.getFrequency(), aa.getIterationAnnualSalary() ) ;

                if( max < aa.getIterationEeContribAmount() ) {
                    aa.adjustEeIterationContribAmount( max ) ;
                    aa.touchMaxPeriod( aa.getIterationPeriod() ) ;
                    aa.touchErrorCode( aa.getIterationPeriod() ) ;
                    if( BaseAccumulator.REPORTABLE == aa.getIterationPeriod() ) {
                        aa.touchErrorString( ErrorUtilities.createErrorStringForSingleAccountNonIRSInfraction( aa ) ) ;
                    }
                }
// 140507 JSS out                if( min > aa.getIterationEeContribAmount() ) {
// 140507 JSS out                    aa.adjustEeIterationContribAmount( min ) ;
// 140507 JSS out                }

            }
        }
    };

    BaseAccumulator.resolveContribsToIRSLimits = function( accountList ) {

        var limits = [
            IRSConstants.getLimit(IRSConstants._402g1),
            IRSConstants.getLimit(IRSConstants._457e15),
            IRSConstants.getLimit(IRSConstants._414v),
            IRSConstants.getLimit(IRSConstants._415c1A)
        ] ;
        var index = -1 ;

        for (var i = 0; i < accountList.length; i++) {
            var aa = accountList[i];
            index = LimitUtilities.getIndexFor_402g1_457e15_414v_Limits( aa.getType(), aa.getIRC() ) ;

            if( index > -1 ) {
                if( ( aa.getIterationEeContribAmount() * aa.getModes() ) > limits[index] ) {
                    aa.adjustEeIterationContribAmount( limits[index] / aa.getModes() ) ;
                    aa.touchMaxPeriod( aa.getIterationPeriod() ) ;
                    aa.touchErrorCode( aa.getIterationPeriod() ) ;
                    if( BaseAccumulator.REPORTABLE == aa.getIterationPeriod() ) {
                        aa.setIrsInfraction(true);
                        aa.touchErrorString( ErrorUtilities.createErrorStringForSingleAccountIRSInfraction( aa ) ) ;
                    }
                }
            }
        }
    };

    BaseAccumulator.resolveContribsToSalaryAsLimit = function( accountList, annualSalary ) {

        var limits = [
                annualSalary
        ] ;
        var index = -1 ;

        for (var i = 0; i < accountList.length; i++) {
            var aa = accountList[i];
            index = LimitUtilities.getIndexFor_402g1_457e15_414v_Limits( aa.getType(), aa.getIRC() ) ;

            if( index > -1 ) {
                index = 0 ;  // common value
                if( ( aa.getIterationEeContribAmount() * aa.getModes() ) > limits[index] ) {
                    aa.adjustEeIterationContribAmount( limits[index] / aa.getModes() ) ;
                    aa.touchMaxPeriod( aa.getIterationPeriod() ) ;
                    aa.touchErrorCode( aa.getIterationPeriod() ) ;
                    if( BaseAccumulator.REPORTABLE == aa.getIterationPeriod() ) {
                        aa.touchErrorString( ErrorUtilities.createErrorStringForExceedingSalary( ) ) ;
                    }

                    limits[index] = 0.0 ;
                } else {
                    limits[index] = limits[index] - ( aa.getIterationEeContribAmount() * aa.getModes() ) ;
                }
            }
        }
    };

    BaseAccumulator.resolveContribsToGlobalNonIRSLimit = function( mml, al, annualSalary ) {

        var annualMax = mml.getAnnualMax(annualSalary) ;
        //var annualMin = mml.getAnnualMin(annualSalary) ;

        var index = -1 ;
        for (var i = 0; i < al.length; i++ ) {
            var aa = al[i];
            index = LimitUtilities.getIndexFor_402g1_457e15_414v_Limits( aa.getType(), aa.getIRC() ) ;  // 140130 TODO: use another method to derive index?

            // handle conditions of application
            if( ( index > -1 ) && ( ( mml.getPlanIndex() < 0 ) || ( ( mml.getPlanIndex() > -1 ) && ( mml.getPlanIndex() == aa.getPlanIndex() ) ) ) )   {
                if( ( aa.getIterationEeContribAmount() * aa.getModes() ) > annualMax ) {
                    aa.adjustEeIterationContribAmount( annualMax / aa.getModes() ) ;
                    aa.touchMaxPeriod( aa.getIterationPeriod() ) ;
                    aa.touchErrorCode( aa.getIterationPeriod() ) ;
                    if( BaseAccumulator.REPORTABLE == aa.getIterationPeriod() ) {
                        var limit = mml.getAnnualMax( annualSalary ) ;
                        aa.touchErrorString( ErrorUtilities.createErrorStringForMultiple( ( limit / aa.getIterationEeAnnualSalary() ), ( limit / aa.getModes() ) ) ) ;
                    }
                    annualMax = 0.0 ;
                }
                else {
                    annualMax = annualMax - ( aa.getIterationEeContribAmount() * aa.getModes() ) ;
                }

            }
        }
    };

    BaseAccumulator.sumTotalAccum = function( list ) {
        var total = 0.0 ;

        for (var i = 0; i < list.length; i++) {
            var aa = list[i];
            total += (
                aa.getEeLumpAmount() +
                aa.getEeEarningsOnLumpAmount() +
                aa.getErLumpAmount() +
                aa.getErEarningsOnLumpAmount() +
                aa.getEeContribBucket() + aa.getEeEarningsOnContribs() +
                aa.getErContribBucket() + aa.getErEarningsOnContribs() ) ;
        }

        return( total ) ;
    };

    BaseAccumulator.resolveEEaccordingToER = function( accountList, index, target ) {
        // vars for iterations
        var iterator = 0 ;
        var high = target ;
        var low = 0.0 ;
        var test = -1.0 ; // seeded to force iteration
        var solve = 0.0 ;

        var _holder = DoubleScratchPad.newInstance();

        _holder.zero();
        for (var i = 0; i<accountList.length; i++) {
            var aa = accountList[i];
            if( aa.isEmployerMatch() ) {
                if( index == aa.getIndex() ) {
                    high = aa.getIterationEeContribAmount() ;  // set sensible high and low values
                    low = aa.getIterationErContribAmount() * 0.5 ;

                    while( ( Math.abs( test ) > 0.0049 ) && ( iterator < 15 ) ) {
                        iterator++ ;

                        if( test < 0.0 )
                            low = solve ;
                        else
                            high = solve ;

                        //
                        solve = ( ( high + low ) / 2.0 ) ;

                        aa.adjustEeIterationContribAmount( solve ) ;
                        aa.setIterationErContribAmount( _holder.get( aa.getEmployerMatchId() ) ) ;
                        //
                        test = ( solve + aa.getIterationErContribAmount() - target ) ;
                     }
                }
                _holder.touch( aa.getEmployerMatchId(), aa.getIterationEeContribAmount() );
            }
        }
    };


// 170530 ///////////////////////////////////////////

    BaseAccumulator.getAnnualEEContribs = function( accountList, typeList ) {

        var retValue = 0. ;
        var index = -1 ;

        for( var i = 0 ; i < accountList.length ; i++ ) {
            var aa = accountList[i] ;
            index = LimitUtilities.checkList( aa.getType(), typeList, true ) ;

            if( index > -1 ) {
                retValue += ( aa.getPeriodicEeContrib() ) ;
            }
        }
        return( retValue ) ;
    } ;


  // let's get this in!  ...
    BaseAccumulator.resolveSalaryTo401a17Limits = function( accountList, annualSalaryRef, annualSalary401a17Ref ) {

        // apply annual salary ref
        var eeOrEr = true ;
        for( var i = 0 ; i < accountList.length ; i++ ) {
            var aa = accountList[i] ;
            aa.setIterationEeAnnualSalary( annualSalaryRef ) ;
            aa.setIterationErAnnualSalary( annualSalaryRef ) ;

            if( annualSalaryRef > annualSalary401a17Ref ) {
                eeOrEr = true ;
                if( LimitUtilities.apply401a17SalaryLimit( aa.getType(), aa.getIRC(), eeOrEr ) ) {
                    aa.setIterationEeAnnualSalary( annualSalary401a17Ref ) ;
                    aa.touchErrorCode( aa.getIterationPeriod() ) ;
                    //if( REPORTABLE == aa.getIterationPeriod() ) {  // presently, this is not reportable
                        //aa.setIRSInfraction( true ) ;
                        aa.touchErrorString( ErrorUtilities.createErrorStringFor401a17SalaryLimit( aa ) ) ;
                    //}
                }
                eeOrEr = false ;
                if( LimitUtilities.apply401a17SalaryLimit( aa.getType(), aa.getIRC(), eeOrEr ) ) {
                    aa.setIterationErAnnualSalary( annualSalary401a17Ref ) ;
                    aa.touchErrorCode( aa.getIterationPeriod() ) ;
                    //if( REPORTABLE == aa.getIterationPeriod() ) {  // presently, this is not reportable
                        //aa.setIRSInfraction( true ) ;
                        aa.touchErrorString( ErrorUtilities.createErrorStringFor401a17SalaryLimit( aa ) ) ;
                    //}
                }
            }
        }
    } ;


/*
    // use getPlanId() [?? and getPlanIndex()] to confirm whether multiple plans or not
    BaseAccumulator.isMultiPlan = function( accountList ) {
        var ret = false ;
        var planIndex = -1 ;
        var planId = "" ;
        var count = 0 ;

        for( var i = 0 ; i < accountList.length ; i++ ) {
            var aa = accountList[i] ;
            if( count < 1 ) {
                planIndex = aa.getPlanIndex() ;
                planId = aa.getPlanId() ;
            }

            //if( ( planIndex != aa.getPlanIndex() ) || !planId.equals( aa.getPlanId() ) ) {
            if( !planId.equals( aa.getPlanId() ) ) {
                ret = true ;
                break ;
            }
            count++ ;
        }
        return( ret ) ;
    } ;

    BaseAccumulator.getPlanIdList = function( accountList ) {
        var ret = [] ;
        var count = 0 ;

        for( var i = 0 ; i < accountList.length ; i++ ) {
            var aa = accountList[i] ;
            if( count < 1 ) {
                ret.push( aa.getPlanId() ) ;
            }
            if( !ret.contains( aa.getPlanId() ) ) {
                ret.push( aa.getPlanId() ) ;
            }
            count++ ;
        }
        return( ret ) ;
    } ;

*/

    BaseAccumulator.getModelledLoanPlanId = function( accountList ) {
        var ret = "" ;

        for( var i = 0 ; i < accountList.length ; i++ ) {
            var aa = accountList[i] ;
            if( aa.isLoan() && ( aa.getType() == AccountTypes.TYPE_NEWLOAN ) ) {
                ret = aa.getPlanId() ;
                break ;
            }
        }
        return( ret ) ;
    } ;

    BaseAccumulator.getModelledLoanPlanIndex = function( accountList ) {
        var ret = -1 ;

        for( var i = 0 ; i < accountList.length ; i++ ) {
            var aa = accountList[i] ;
            if( aa.isLoan() && ( aa.getType() == AccountTypes.TYPE_NEWLOAN ) ) {
                ret = aa.getPlanIndex() ;
                break ;
            }
        }
        return( ret ) ;
    } ;

    BaseAccumulator.getLumpAmountAccordingToType = function( accountList, typeList ) {

        var retValue = 0.0 ;
        var index = -1 ;

        for( var i = 0 ; i < accountList.length ; i++ ) {
            var aa = accountList[i] ;
            index = LimitUtilities.checkList( aa.getType(), typeList, true ) ;

            if( index > -1 ) {
                retValue += ( aa.getEeLumpAmount() + aa.getErLumpAmount() ) ;
            }
        }
        return( retValue ) ;
    } ;



    BaseAccumulator.REPORTABLE = 0;

    return BaseAccumulator;

}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ 60160:
/*!********************************************************!*\
  !*** ./node_modules/om-js-calc/src/calc/CommonData.js ***!
  \********************************************************/
/***/ (function(module, exports) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function(){
    var CommonData = function(){
        //  Private Variable declarations ------------------------------------
        var _error = -1 ;
        var _errorString = "";
        var _refDate = new Date() ;    // current date, usually today
        var _dateOfBirth = new Date() ;
        var _annualSalary = 30000 ;
        var _rateOfIncrease = 0 ;   // salary and contribution increase
        var _rateOfInflation = 0 ;   // future inflation for discounting
        var _rateOfWithholding = 0 ;  // tax withholding
        var _replacementRatio = 0.7 ;
        var _retireAge = 67 ;
        var _preRetireRateOfReturn = 0.05 ;
        var _postRetireRateOfReturn = 0.05 ;
        var _ssBenefitAge = 67 ;
        var _ssIndicator = true ;
        var _minMaxLimitList = [];
        var _minRetireAge = 62 ;
        var _maxRetireAge = 80 ;
        var _minRateOfReturn = 0 ;
        var _maxRateOfReturn = 0.12 ;
        var _rateOfRothBump = 0.25 ;
        var _replacementIncomeType = 0 ; // ReplacementIncome.TYPE_STANDARD

        //  Privileged Method Declarations ------------------------------------
        this.getReferenceDate = function( ) { return( _refDate ) ; };
        this.setReferenceDate = function(d) { _refDate = d ; };

        this.getDateOfBirth = function( ) { return( _dateOfBirth ) ; };
        this.setDateOfBirth = function(d) { _dateOfBirth = d ; };

        this.getAnnualSalary = function( ) { return( _annualSalary ) ; };
        this.setAnnualSalary = function(d) { _annualSalary = d ; };

        this.getRateOfIncrease = function( ) { return( _rateOfIncrease ) ; };
        this.setRateOfIncrease = function(d) { _rateOfIncrease = d ; };

        this.getRateOfInflation = function( ) { return( _rateOfInflation ) ; };
        this.setRateOfInflation = function(d) { _rateOfInflation = d ; };

        this.getRateOfWithholding = function( ) { return( _rateOfWithholding ) ; };
        this.setRateOfWithholding = function(d) { _rateOfWithholding = d ;};

        this.getReplacementRatio = function( ) { return( _replacementRatio ) ; };
        this.setReplacementRatio = function(d) { _replacementRatio = d ; };

        this.getRetireAge = function( ) { return( _retireAge ) ; };
        this.setRetireAge = function(n) { _retireAge = n ; };

        this.getPreRetireRateOfReturn = function( ) { return( _preRetireRateOfReturn ) ; };
        this.getPostRetireRateOfReturn = function( ) { return( _postRetireRateOfReturn ) ; };
        this.setPreRetireRateOfReturn = function( d ) { _preRetireRateOfReturn = d ; } ;
        this.setPostRetireRateOfReturn = function( d ) { _postRetireRateOfReturn = d ; } ;

        this.getRateOfReturn = function( ) { return( _preRetireRateOfReturn ) ; };
        this.setRateOfReturn = function(d) { _preRetireRateOfReturn = d ; };

        this.getSSBenefitAge = function( ) { return( _ssBenefitAge ) ; };
        this.setSSBenefitAge = function(n) { _ssBenefitAge = n ; };

        this.setSSIndicator = function(b) { _ssIndicator = b ; };
        this.isSocialSecurity = function( ) { return( _ssIndicator ) ; };

        this.getMinMaxLimitList = function(){ return _minMaxLimitList; };
        this.setMinMaxLimitList = function( mmll ){ _minMaxLimitList = mmll; };

        // 170512 LA items
        this.setRateOfRothBump = function( d ) { _rateOfRothBump = d ; }
        this.getRateOfRothBump = function() { return( _rateOfRothBump ) ; }

        this.setReplacementIncomeType = function( n ) { _replacementIncomeType = n ; }
        this.getReplacementIncomeType = function() { return( _replacementIncomeType ) ; }
        // end 170512 LA items


        this.getMinRetireAge = function( ) { return( _minRetireAge ) ; };
        this.setMinRetireAge = function(n) { _minRetireAge = n ; };

        this.getMaxRetireAge = function( ) { return( _maxRetireAge ) ; };
        this.setMaxRetireAge = function(n) { _maxRetireAge = n ; };

        this.getMinRateOfReturn = function( ) { return( _minRateOfReturn ) ; };
        this.setMinRateOfReturn = function(d) { _minRateOfReturn = d ; };

        this.getMaxRateOfReturn = function( ) { return( _maxRateOfReturn ) ; };
        this.setMaxRateOfReturn = function(d) { _maxRateOfReturn = d ; };

        this.getErrorCode = function( ) { return( _error ) ; };
        this.setErrorCode = function(n) { _error = n ; };

        this.getErrorString = function( ) { return( _errorString ) ; } ;
        this.setErrorString = function( s ) { _errorString = s ; } ;

        (function init() { _minMaxLimitList = []; })();

    };

    CommonData.serialVersionUID = '0L' ;
    return CommonData;

}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ 76264:
/*!************************************************************!*\
  !*** ./node_modules/om-js-calc/src/calc/ErrorUtilities.js ***!
  \************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./AccountAccum */ 50897), __webpack_require__(/*! ./AccountTypes */ 81939), __webpack_require__(/*! ./IRSConstants */ 84666), __webpack_require__(/*! ./LimitUtilities */ 26486), __webpack_require__(/*! ../utils/utilities */ 96893)], __WEBPACK_AMD_DEFINE_RESULT__ = (function(AccountAccum, AccountTypes, IRSConstants, LimitUtilities, Utilities){

    var ErrorUtilities = { } ;

    ErrorUtilities.createErrorStringForSingleAccountIRSInfraction = function( aa ) {
        var errorBuffer = "";
        var maxes = null ;

        errorBuffer += ("" + AccountTypes.getUserLabel(aa.getType()) + " " + IRSConstants.getIRClabel(aa.getIRC())) ;
        errorBuffer +=  " contributions may not exceed "  ;

        //double limit = LimitUtilities.transIRSContribMax2ContribType( aa.getContribType(), aa.getType(), aa.getIRC(), aa.getFrequency(), aa.getIterationAnnualSalary() ) ;
        maxes = LimitUtilities.getIRSContribMaxes( aa.getType(), aa.getIRC(), aa.getFrequency(), aa.getIterationEeAnnualSalary() ) ;
        if( aa.getContribType() == AccountTypes.CONTRIB_RATE ) {
            errorBuffer += ErrorUtilities.formatPercent( maxes[LimitUtilities.MAX_RATE], 2 ) ;
            errorBuffer += " of pay."  ;

        }
        else {
            errorBuffer += ErrorUtilities.formatMoney( maxes[LimitUtilities.MAX_DOLLAR] )  ;
            errorBuffer += " per pay period."  ;
        }
        errorBuffer += "  Please adjust contributions before proceeding." ;

        return( errorBuffer ) ;
    };


    ErrorUtilities.createErrorStringForMultipleAccountIRSInfraction = function( prime, al ) {
        var errorBuffer = "";
        var maxes = null ;
        var index = -1 ;
        var primeIndex = LimitUtilities.getIndexForGrouped_402g1_457e15_414_vLimits( prime.getType(), prime.getIRC() ) ;
        var count = 0 ;

        errorBuffer +=  "The total of "  ;
        for (var i = 0; i<al.length; i++) {
            var aa=al[i];
            index = -1 ;
            index = LimitUtilities.getIndexForGrouped_402g1_457e15_414_vLimits( aa.getType(), aa.getIRC() ) ;

            if( ( index > -1 ) && ( primeIndex == index ) && ( aa.getStartContrib() > 0 ) ) {
                errorBuffer +=  (( count > 0 )?" and ": "") + ( AccountTypes.getUserLabel(aa.getType()) +  " " + IRSConstants.getIRClabel(aa.getIRC()))  ;
                count++ ;
            }
        }
        errorBuffer +=  " contributions may not exceed "  ;

        maxes = LimitUtilities.getIRSContribMaxes( prime.getType(), prime.getIRC(), prime.getFrequency(), prime.getIterationEeAnnualSalary() ) ;
        if( prime.getContribType() == AccountTypes.CONTRIB_RATE ) {
            errorBuffer +=  ErrorUtilities.formatPercent( maxes[LimitUtilities.MAX_RATE], 2 ) ;
            errorBuffer +=  " of pay." ;
        }
        else {
            errorBuffer +=  ErrorUtilities.formatMoney( maxes[LimitUtilities.MAX_DOLLAR] ) ;
            errorBuffer +=  " per pay period." ;
        }
        errorBuffer +=  "  Please adjust contributions before proceeding." ;

        return( errorBuffer) ;
    };


    ErrorUtilities.createErrorStringForMultiple = function( rate, amount ) {
        var errorBuffer = "" ;
            errorBuffer +=  "The total plan contributions may not exceed " ;
            errorBuffer +=  ErrorUtilities.formatMoney( amount ) ;
            errorBuffer +=  " per pay period or " ;
            errorBuffer +=  ErrorUtilities.formatPercent( rate, 2 ) ;
            errorBuffer +=  " of pay." ;
            errorBuffer +=  "  Please adjust contributions before proceeding." ;

        return( errorBuffer) ;
    };


    ErrorUtilities.createErrorStringForExceedingSalary = function( ) {
        var errorBuffer = "" ;
            errorBuffer +=  "The total contributions may not exceed salary." ;
            errorBuffer +=  "  Please adjust contributions before proceeding." ;

        return( errorBuffer) ;
    };


    ErrorUtilities.createErrorStringForSingleAccountNonIRSInfraction = function( aa ) {
        var errorBuffer = "" ;
        var max = 0 ;

        //errorBuffer +=  "Your " ;
        errorBuffer +=  ("" + AccountTypes.getUserLabel(aa.getType()) +  " " + IRSConstants.getIRClabel(aa.getIRC())) ;
        errorBuffer +=  " contributions may not exceed " ;

        max = aa.getMinMaxLimit().getAnnualMax( aa.getIterationEeAnnualSalary() ) ;
        if( aa.getContribType() == AccountTypes.CONTRIB_RATE ) {
            errorBuffer +=  ErrorUtilities.formatPercent( max / aa.getIterationEeAnnualSalary(), 2 ) ;
            errorBuffer +=  " of pay." ;

        }
        else {
            errorBuffer +=  ErrorUtilities.formatMoney( max / aa.getFrequency() ) ;
            errorBuffer +=  " per pay period." ;
        }
        errorBuffer +=  "  Please adjust contributions before proceeding." ;

        return( errorBuffer ) ;
    };


    ErrorUtilities.createErrorStringFor415IRSInfraction = function( remainingLimit, prime, al ) {
        var errorBuffer = "" ;
        var index = -1 ;
        var count = 0 ;
        var delineate = true ;

        for (var i = 0; i < al.length; i++) {
            var aa = al[i];
            index = -1 ;
            index = LimitUtilities.getIndexForGrouped_415c1A_Limit( aa.getType(), aa.getIRC() ) ;

            if( ( index > -1 ) && !(    ( aa.getType() == AccountTypes.TYPE_PRETAX ) ||
                                        ( aa.getType() == AccountTypes.TYPE_ROTH ) ||
                                        ( aa.getType() == AccountTypes.TYPE_AFTERTAX ))) {
                delineate = false ;
            }
        }

        var maxes = LimitUtilities.getIRSContribMaxes( prime.getType(), prime.getIRC(), prime.getFrequency(), prime.getIterationEeAnnualSalary() ) ;

        if( delineate ) {
            errorBuffer +=  "The total of "  ;
            for (var i = 0; i < al.length; i++) {
                var aa = al[i];
                index = -1 ;
                index = LimitUtilities.getIndexForGrouped_415c1A_Limit( aa.getType(), aa.getIRC() ) ;

                if( index > -1 ) {
                    errorBuffer +=  (( count > 0 )?" and ":"") + ( AccountTypes.getUserLabel(aa.getType()) +  " " + IRSConstants.getIRClabel(aa.getIRC())) ;
                    count++ ;
                }
            }
            errorBuffer +=  " contributions may not exceed " ;

            if( prime.getContribType() == AccountTypes.CONTRIB_RATE ) {
                errorBuffer +=  ErrorUtilities.formatPercent( maxes[LimitUtilities.MAX_RATE], 2 ) ;
                errorBuffer +=  " of pay." ;
            }
            else {
                errorBuffer +=  ErrorUtilities.formatMoney( maxes[LimitUtilities.MAX_DOLLAR] ) ;
                errorBuffer +=  " per pay period." ;
            }
            errorBuffer +=  "  Please adjust contributions before proceeding." ;
        }
        else {
            //var limit = IRSConstants.getInstance().getLimit(IRSConstants._415c1A) ;
            errorBuffer +=  ErrorUtilities.createErrorStringForMultiple( maxes[LimitUtilities.MAX_RATE], maxes[LimitUtilities.MAX_DOLLAR] ) ;
        }
        return( errorBuffer ) ;
    };


    ErrorUtilities.formatPercent = function( d, nDecimalDigits )
    {
        var rtn = Utilities.cleanNumber(d>1?d:d*100);
        return( rtn + "%" ) ;
    } ;

    ErrorUtilities.formatMoney = function( d )
    {
        return( "$" + d.toFixed(2) ) ;
    };

    return ErrorUtilities;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ 84666:
/*!**********************************************************!*\
  !*** ./node_modules/om-js-calc/src/calc/IRSConstants.js ***!
  \**********************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./util/DateUtilities */ 72960)], __WEBPACK_AMD_DEFINE_RESULT__ = (function(DateUtilities){

    //  Constructor
    var IRSConstants = { };

    //  Static var declarations ------------------------------------
    IRSConstants.CATCHUP  =  0 ;
    IRSConstants._415c1A  =  1 ;
    IRSConstants._402g1   =  2 ;
    IRSConstants._457e15  =  3 ;
    IRSConstants._414v    =  4 ;
    IRSConstants._401a17  =  5 ;
    IRSConstants.UNSET    = -1 ;
    IRSConstants.UNKNOWN  =  0 ;
    IRSConstants._401a    =  1 ;
    IRSConstants._401k    =  2 ;
    IRSConstants._403b    =  3 ;
    IRSConstants._457b    =  4 ;

    //  Private var declarations ------------------------------------
    var irsValues = { };
    var doubleArray = [ 0, 0, 0, 0, 0, 0 ] ;
    var limit_labels = [ "Catch Up Age","415(c)(1)(A)","402(g)(1)","457(e)(15)","414(v)","401(a)(17)" ] ;
    var limit_properties_entries = [ "age","415c1A","402g1","457e15","414v","401a17" ] ;
    var irc_code_labels = [ "","401(a)","401(k)","403(b)","457(b)" ] ;

    //  Private method Declarations ------------------------------------
    var _getLimit = function(index) {
        var d = doubleArray[index] ;
        return(d) ;
    };

    //  Static method Declarations ------------------------------------
    IRSConstants.init = function(){
        this.reset();
    };

    IRSConstants.reset = function(){
        //doubleArray[this.CATCHUP ] = irsValues[ 'age' ] ;
        doubleArray[this.CATCHUP ] = irsValues[ limit_properties_entries[ IRSConstants.CATCHUP ] ] ;
        doubleArray[this._415c1A ] = irsValues[ limit_properties_entries[ IRSConstants._415c1A ] ] ;
        doubleArray[this._402g1  ] = irsValues[ limit_properties_entries[ IRSConstants._402g1 ] ] ;
        doubleArray[this._457e15 ] = irsValues[ limit_properties_entries[ IRSConstants._457e15 ] ] ;
        doubleArray[this._414v   ] = irsValues[ limit_properties_entries[ IRSConstants._414v ] ] ;
        doubleArray[this._401a17 ] = irsValues[ limit_properties_entries[ IRSConstants._401a17 ] ] ;
    };

    IRSConstants.getLimit = function(index, frequency ) {
        var _limit = _getLimit(index);

        if(frequency){
            frequency = ( frequency < 1 ) ? 1 : frequency ;
            _limit = _limit/frequency;
        }
        return _limit;
    };

    IRSConstants.getIRClabel = function(index) {
        var s = irc_code_labels[index] ;
        return(s) ;
    };

    IRSConstants.getIRCconst = function(label) {
        var r = IRSConstants.UNKNOWN ;
        if( label !== null ) {
            r = IRSConstants.UNKNOWN;
            if(  label !== "" ) {
                for( var n = 0 ; n < irc_code_labels.length ; n++ ) {
                    if( irc_code_labels[n] == label ) {
                        r = n ;
                        break ;
                    }
                }
            }
		}
        return( r ) ;
    };

    IRSConstants.getLimitLabel = function(index) {
        return limit_labels[index] ;
    };

    IRSConstants.getIRSLimits = function(){
        return doubleArray;
    };

    IRSConstants.setIRSLimits = function(limits){
        irsValues = limits;
        IRSConstants.reset();
    };

    IRSConstants.getIRSLimitLabels = function(){
        return limit_labels;
    };


    IRSConstants.irsCodeEvaluator = function( s ) {
    	var retId = IRSConstants.UNKNOWN ;
    	s = s.toUpperCase().trim() ;

    	if( ( s.indexOf( "401" ) > -1 ) ) {
    		retId = IRSConstants._401k  ;
    	}

    	if( ( s.indexOf( "401" ) > -1 ) && ( s.indexOf( "a" ) > -1 ) ) {
    		retId = IRSConstants._401a  ;
    	}

    	if( ( s.indexOf( "401" ) > -1 ) && ( s.indexOf( "k" ) > -1 ) ) {
    		retId = IRSConstants._401k  ;
    	}

    	if( ( s.indexOf( "403" ) > -1 ) ) {
    		retId = IRSConstants._403b  ;
    	}

    	if( ( s.indexOf( "457" ) > -1 ) ) {
    		retId = IRSConstants._457b  ;
    	}

    	return( retId ) ;
    } ;


    return IRSConstants;

}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ 55384:
/*!***************************************************!*\
  !*** ./node_modules/om-js-calc/src/calc/IRSwh.js ***!
  \***************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./util/WithholdingUtilities */ 42354)], __WEBPACK_AMD_DEFINE_RESULT__ = (function(WithholdingUtilities) {

    //  Constructor
    var IRSwh = { } ;

    //  Static var declarations ------------------------------------
    IRSwh.MC     =  0 ;


    //  Private var declarations ------------------------------------
    var loadValues = { } ;
    //var medicare = [ [ 0.0, 0.0, 0.0145 ], [ 200000.0, 0.0, 0.0235 ] ] ;
    var medicare = [] ;
    var properties_entries = [ "irs.wh.medicare" ] ;


    //  Static method Declarations ------------------------------------
    IRSwh.init = function(){
        this.reset();
    };

    IRSwh.reset = function(){
//        medicare = loadValues[ properties_entries[ IRSwh.MC ] ] ;
        medicare = setBrackets( properties_entries[ IRSwh.MC ], loadValues )
    };


    IRSwh.set = function( loadJson ){
        loadValues = loadJson ;
        IRSwh.reset();
    };

    IRSwh.getIRSLimitLabels = function(){
        return limit_labels;
    };

    IRSwh.getWithholding = function( taxEntity, taxable ) {
    	var ret = 0.0 ;

    	switch( taxEntity ) {
    	    case IRSwh.MC :
    	   	ret = WithholdingUtilities.baseBracketCalc( taxable, medicare ) ;
    		break ;
	    default :
    	}

    	return( ret ) ;
    } ;


    var setBrackets = function ( id, loadValues ) {
        var tier = 0 ;
        var ret = [[]] ;
        var inValue = null ;

        // get first dimension count
        while( ( inValue = loadValues[ id + "." + tier + "." + WithholdingUtilities.property_labels[ 0 ] ] ) != undefined ) { tier++ ; }
        //if( tier > 0 ) ret = new Array(tier).fill([]) ;
        //As Mobile is failing with 'Fill' temporarily using below.
        if( tier > 0 ) {
            ret = new Array(tier);
            for(var x=0; x<ret.length;x++){
                ret[x] = [];
            }
        }

        for( var n = 0 ; n < tier ; n++ ) {
            ret[n] = new Array( WithholdingUtilities.property_labels.length ) ;
            for( var m = 0 ; m < ret[n].length ; m++ ) {
                inValue = loadValues[ id + "." + n + "." + WithholdingUtilities.property_labels[ m ] ] ;
                ret[n][m] = ( inValue == undefined ) ? 0.0 : inValue ;
            }
        }

        return( ret ) ;
    } ;

    return IRSwh ;

}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ 57213:
/*!********************************************************!*\
  !*** ./node_modules/om-js-calc/src/calc/IncomeData.js ***!
  \********************************************************/
/***/ (function(module, exports) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function(){

    //  Constructor
    var IncomeData = function(){

        //  Private Variable Declarations ------------------------------------
        var _error = -1 ;
        var _errorString = "";
        var _name = "" ;
        var _label = "" ;
        var _id_code = -1 ;
        var _type = -1 ;
        var _priority = -1 ;
        var _annualAmount = 0 ;
        var _rateOfIncrease = 0.0 ;
        var _rateOfTax = 0.0 ;
        var _start = -1 ;
        var _stop = -1 ;

        //  Privileged Method Declarations ------------------------------------
        this.getType = function( ) { return( _type ) ; };
        this.setType = function(n) { _type = n ; };

        this.getPriority = function( ) { return( _priority ) ; };
        this.setPriority = function(n) { _priority = n ; };

        this.getAnnualAmount = function( ) { return( _annualAmount ) ; };
        this.setAnnualAmount = function(d) { _annualAmount = d ; };

        this.getMonthlyAmount = function( ) { return( _annualAmount / 12.0 ) ; };
        this.setMonthlyAmount = function(d) { _annualAmount = ( d * 12.0 ) ; };

        this.setName = function(s) { _name = s ; };
        this.getName = function( ) { return( _name ) ; };

        this.setLabel = function( s ) { _label = s ; } ;
        this.getLabel = function( ) { return( _label ) ; } ;

        this.getIdCode = function( ) { return( _id_code ) ; } ;
        this.setIdCode = function( n ) { _id_code = n ; } ;

        this.getErrorCode = function( ) { return( _error ) ; };
        this.setErrorCode = function(n) { _error = n ; };

        this.getErrorString = function( ) { return( _errorString ) ; } ;
        this.setErrorString = function( s ) { _errorString = s ; } ;


        this.getStart = function( ) { return( _start ) ; } ;
        this.setStart = function( n ) { _start = n ; } ;

        this.getStop = function( ) { return( _stop ) ; } ;
        this.setStop = function( n ) { _stop = n ; } ;

        this.getRateOfIncrease = function( ) { return( _rateOfIncrease ) ; } ;  // annual
        this.setRateOfIncrease = function( d ) { _rateOfIncrease = d ; } ; // annual

        this.getRateOfTax = function( ) { return( _rateOfTax ) ; } ;
        this.setRateOfTax = function( d ) { _rateOfTax = d ; } ;

    };

    IncomeData.serialVersionUID = '0L' ;

    return IncomeData;

}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ 34513:
/*!*********************************************************!*\
  !*** ./node_modules/om-js-calc/src/calc/IncomeTypes.js ***!
  \*********************************************************/
/***/ (function(module, exports) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function(){

	var IncomeTypes = {};
		IncomeTypes.SOCIALSECURITY = 0 ;
		IncomeTypes.PENSION = 1 ;
	IncomeTypes.ANNUITY = 2 ;
	IncomeTypes.ASSET = 3 ;
	IncomeTypes.EMPLOYMENT  = 4 ;
	IncomeTypes.OTHER  = 5 ;

	IncomeTypes.INCOME_MONTHLY   = 0 ;
	IncomeTypes.INCOME_ANNUALLY  = 1 ;

	return IncomeTypes;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ 26486:
/*!************************************************************!*\
  !*** ./node_modules/om-js-calc/src/calc/LimitUtilities.js ***!
  \************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./IRSConstants */ 84666), __webpack_require__(/*! ./AccountTypes */ 81939)], __WEBPACK_AMD_DEFINE_RESULT__ = (function(IRSConstants, AccountTypes){

    //  Constructor
    var LimitUtilities = { };

    //  Static Variable Declaration
    LimitUtilities.limit_labels_grouped   = [ "402(g)(1)",        "457(e)(15)",        "414(v)",          "414(v)",          "415(c)(1)(A)",      "415(c)(1)(A)"] ;
    LimitUtilities.limit_irstype_grouped  = [ IRSConstants._402g1,IRSConstants._457e15,IRSConstants._414v,IRSConstants._414v,IRSConstants._415c1A,IRSConstants._415c1A ] ;
    LimitUtilities.limit_labels           = [ "402(g)(1)","457(e)(15)","414(v)","415(c)(1)(A)" ] ;
    LimitUtilities._402g1_401k_403b       = 0 ;
    LimitUtilities._457e15_457b           = 1 ;
    LimitUtilities._414v_401k_403b        = 2 ;
    LimitUtilities._414v_457b             = 3 ;
    LimitUtilities._415c1A_401a_401k      = 4 ;
    LimitUtilities._415c1A_403b           = 5 ;
    LimitUtilities._402g1                 = 0 ;
    LimitUtilities._457e15                = 1 ;
    LimitUtilities._414v                  = 2 ;
    LimitUtilities._415c1A                = 3 ;
    LimitUtilities.MAX_RATE               = 0 ;
    LimitUtilities.MAX_DOLLAR             = 1 ;

    LimitUtilities.getIndexForGrouped_402g1_457e15_414_vLimits = function( type, irc ) {
        var index = -1 ;
        switch( irc ) {
            // case IRSConstants.UNSET :
            case IRSConstants.UNKNOWN :
            case IRSConstants._401k :
            case IRSConstants._403b :
                switch( type ) {
                case AccountTypes.TYPE_PRETAX :
                case AccountTypes.TYPE_ROTH :
                case AccountTypes.TYPE_SUPPL_PRETAX :
                case AccountTypes.TYPE_SUPPL_ROTH :
                    index = LimitUtilities._402g1_401k_403b ;
                    break ;
                case AccountTypes.TYPE_PRETAX_AGECATCHUP :
                case AccountTypes.TYPE_ROTH_AGECATCHUP :
                    index = LimitUtilities._414v_401k_403b ;
                    break ;
                }
                break ;

            case IRSConstants._457b :
                switch( type ) {
                case AccountTypes.TYPE_PRETAX:
                case AccountTypes.TYPE_ROTH:
                case AccountTypes.TYPE_SUPPL_PRETAX:
                case AccountTypes.TYPE_SUPPL_ROTH:
                    index = LimitUtilities._457e15_457b ;
                    break;
                case AccountTypes.TYPE_PRETAX_AGECATCHUP :
                case AccountTypes.TYPE_ROTH_AGECATCHUP :
                    index = LimitUtilities._414v_457b ;
                    break ;
                }
                break ;

            default :
                index = -1 ;
                break ;
        }

        return( index ) ;
    };

    LimitUtilities.getIndexFor_402g1_457e15_414v_Limits = function( type, irc ) {
        var index = -1 ;

        switch( irc ) {
            // case IRSConstants.UNSET :
            case IRSConstants.UNKNOWN :
            case IRSConstants._401k :
            case IRSConstants._403b :
                switch( type ) {
                case AccountTypes.TYPE_PRETAX :
                case AccountTypes.TYPE_ROTH :
                case AccountTypes.TYPE_SUPPL_PRETAX :
                case AccountTypes.TYPE_SUPPL_ROTH :
                    index = LimitUtilities._402g1 ;
                    break ;
                case AccountTypes.TYPE_PRETAX_AGECATCHUP :
                case AccountTypes.TYPE_ROTH_AGECATCHUP :
                    index = LimitUtilities._414v ;
                    break ;
                }
                break ;

            case IRSConstants._457b :
                switch( type ) {
                case AccountTypes.TYPE_PRETAX:
                case AccountTypes.TYPE_ROTH:
                case AccountTypes.TYPE_SUPPL_PRETAX :
                case AccountTypes.TYPE_SUPPL_ROTH :
                    index = LimitUtilities._457e15 ;
                    break;
                case AccountTypes.TYPE_PRETAX_AGECATCHUP :
                case AccountTypes.TYPE_ROTH_AGECATCHUP :
                    index = LimitUtilities._414v ;
                    break ;
                }
                break ;

            default :
                index = -1 ;
                break ;
        }

        return( index ) ;
    };

    LimitUtilities.getIndexForGrouped_415c1A_Limit = function( type, irc ) {
        var index = -1 ;

        switch( irc ) {
            //case IRSConstants.UNSET :
            case IRSConstants.UNKNOWN :
            case IRSConstants._401k :
            case IRSConstants._401a :
                switch( type ) {
                case AccountTypes.TYPE_MANDATORY_EE :
                case AccountTypes.TYPE_MANDATORY_ER :
                case AccountTypes.TYPE_RECURRING_ER :
                case AccountTypes.TYPE_PRETAX :
                case AccountTypes.TYPE_ROTH :
                case AccountTypes.TYPE_SUPPL_PRETAX :
                case AccountTypes.TYPE_SUPPL_ROTH :
                case AccountTypes.TYPE_AFTERTAX :
                case AccountTypes.TYPE_SUPPL_AFTERTAX :
                    index = LimitUtilities._415c1A_401a_401k ;
                    break ;
                }
                break ;

            case IRSConstants._403b :
                switch( type ) {
                case AccountTypes.TYPE_MANDATORY_EE :
                case AccountTypes.TYPE_MANDATORY_ER :
                case AccountTypes.TYPE_RECURRING_ER :
                case AccountTypes.TYPE_PRETAX :
                case AccountTypes.TYPE_ROTH :
                case AccountTypes.TYPE_SUPPL_PRETAX :
                case AccountTypes.TYPE_SUPPL_ROTH :
                case AccountTypes.TYPE_AFTERTAX :
                case AccountTypes.TYPE_SUPPL_AFTERTAX :
                    index = LimitUtilities._415c1A_403b ;
                    break ;
                }
                break ;

            default :
                index = -1 ;
                break ;
        }

        return( index ) ;
    };

    LimitUtilities.getIndexForMutable = function( type ) {
        var index = -1 ;

        switch( type ) {
            case AccountTypes.TYPE_PRETAX :
            case AccountTypes.TYPE_ROTH :
            case AccountTypes.TYPE_SUPPL_PRETAX :
            case AccountTypes.TYPE_SUPPL_ROTH :
            case AccountTypes.TYPE_PRETAX_AGECATCHUP :
            case AccountTypes.TYPE_ROTH_AGECATCHUP :
            case AccountTypes.TYPE_AFTERTAX :
            case AccountTypes.TYPE_SUPPL_AFTERTAX :
                index = type ;
                break ;

            default :
                index = -1 ;
                break ;
        }

        return( index ) ;
    };


// 140513 JSS out
//    LimitUtilities.resolveEEandERcontribs = function( ee, er, target ) {
//        // vars for iterations
//        var r = [ 0.0, 0.0 ] ;
//        var iterator = 0 ;
//        var high = target ;
//        var low = 0.0 ;
//        var test = -1.0 ; // seeded to force iteration
//        var solve = 0.0 ;
//
//        if( ee > 0.0 ) {
//            while( ( Math.abs( test ) > 0.0049 ) && ( iterator < 15 ) )  // ?? increase precision
//            {
//                iterator++ ;
//
//                if( test < 0.0 )
//                    low = solve ;
//                else
//                    high = solve ;
//
//                //
//                solve = ( ( high + low ) / 2.0 ) ;
//
//                //
//                test = ( solve + ( er / ee * solve ) - target ) ;
//            }
//
//            r[0] = solve ;
//            r[1] = ( er / ee * solve ) ;
//        }
//
//        return( r ) ;
//    };


    LimitUtilities.getNonIRSContribMaxes = function( mml, frequency, annualSalary ) {
        var ret = [ 0.0, 0.0 ] ;

        if( ( mml !== null ) && ( mml.getMaxValue() > 0.0 ) ) {
            ret[LimitUtilities.MAX_RATE] = mml.getRateMax(annualSalary) ;
            ret[LimitUtilities.MAX_DOLLAR] = mml.getModalMax(frequency, annualSalary) ;
        }

        return( ret ) ;
    };

    LimitUtilities.getNonIRSContribMins = function(mml, frequency, annualSalary){
        var ret = [ 0.0, 0.0 ] ;

        if( ( mml !== null ) && ( mml.getMinValue() > 0.0 ) ) {
            ret[LimitUtilities.MAX_RATE] = mml.getRateMin(annualSalary) ;
            ret[LimitUtilities.MAX_DOLLAR] = mml.getModalMin(frequency, annualSalary) ;
        }

        return( ret ) ;
    };

    LimitUtilities.getIRSContribMaxes = function( accountType, irc, frequency, annualSalary ) {
        var ret = [ 0.0, 0.0 ] ;

        var limits = [
            IRSConstants.getLimit(IRSConstants._402g1),
            IRSConstants.getLimit(IRSConstants._457e15),
            IRSConstants.getLimit(IRSConstants._414v),
            IRSConstants.getLimit(IRSConstants._415c1A)
        ] ;

        var	index = LimitUtilities.getIndexFor_402g1_457e15_414v_Limits( accountType, irc ) ;
        index = ( index < 0 ) ? 3 : index ;

        if( index > -1 ) {
            ret[LimitUtilities.MAX_RATE] = ( limits[index] / annualSalary ) ;
            ret[LimitUtilities.MAX_DOLLAR] = ( limits[index] / frequency ) ;

            return( ret ) ;
        }

    };

    LimitUtilities.transMax2ContribType = function( contribType, mml, frequency, annualSalary ) {
        var ret = 0.0 ;

        if( ( mml !== null ) && ( mml.getMaxValue() > 0.0 ) ) {
            switch( contribType ) {
                case AccountTypes.CONTRIB_RATE :
                    ret = mml.getRateMax( annualSalary ) ;
                    break ;
                case AccountTypes.CONTRIB_MODAL :
                    ret = mml.getModalMax( frequency, annualSalary ) ;
                    break ;
                case AccountTypes.CONTRIB_ANNUAL :
                    ret = mml.getAnnualMax( annualSalary ) ;
                    break ;
            }
        }

        return( ret ) ;
    };

    LimitUtilities.transIRSContribMax2ContribType = function( contribType, accountType, irc, frequency, annualSalary ) {
        var ret = 0.0 ;

        var limits = [
            IRSConstants.getLimit(IRSConstants._402g1),
            IRSConstants.getLimit(IRSConstants._457e15),
            IRSConstants.getLimit(IRSConstants._414v),
            IRSConstants.getLimit(IRSConstants._415c1A)
        ] ;

        var index = LimitUtilities.getIndexFor_402g1_457e15_414v_Limits( accountType, irc ) ;
        index = ( index < 0 ) ? 3 : index ;

        if( index > -1 ) {
            switch( contribType ) {
            case AccountTypes.CONTRIB_RATE :
                ret = ( limits[index] / annualSalary ) ;
                break ;
            case AccountTypes.CONTRIB_MODAL :
                ret = ( limits[index] / frequency ) ;
                break ;
            case AccountTypes.CONTRIB_ANNUAL :
                ret = limits[index] ;
                break ;
            }
        }
        return( ret ) ;
    };


    LimitUtilities.apply401a17SalaryLimit = function( type, irc, eeOrEr ) {
        var ret = false ;

        switch( irc ) {
            case IRSConstants._457b :
                break ;

            case IRSConstants._401a :
            case IRSConstants._403b :
                if( eeOrEr ) {
                    switch( type ) {
                        case AccountTypes.TYPE_MANDATORY_EE :
                        case AccountTypes.TYPE_MANDATORY_ER :
                            ret = true ;
                            break ;
                    }
                } else {
                    ret = true ;
                }
                break ;

            case IRSConstants.UNKNOWN :
            case IRSConstants._401k :
                ret = true ;
                break ;
        }

        return( ret ) ;
    };


    // 170530 ///////////////////////////////////////////
    // return item int if null list, either index or item if in list
    LimitUtilities.checkList = function( item, list, indexOrItem ) {
        var ret = -1 ;

        if( list == null ) { ret = item ; }
        else {
            for( var n = 0 ; n < list.length ; n++ ) {
                ret = ( item == list[n] ) ? ( ( indexOrItem ) ? n : item ) : ret ;
                if( ret > -1 ) break ;
            }
        }

        return( ret ) ;
    };


    return LimitUtilities;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ 89382:
/*!*********************************************************!*\
  !*** ./node_modules/om-js-calc/src/calc/MinMaxLimit.js ***!
  \*********************************************************/
/***/ (function(module, exports) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function(){

    //  Constructor
    var MinMaxLimit = function(){

        //  Private Variable Declaration ----------------------------------
        var that = this;
        var _name = "" ;
        var _id = "" ;
        var _irc = -1 ;
        var _index = -1 ;
        var _type = MinMaxLimit.ANNUAL ;
        var _modes = 1 ;
        var _planIndex = -1 ;
        var _max = 0 ;
        var _min = 0 ;

        //  Privileged Method Declaration ----------------------------------
        this.setName = function( s ) { _name = s ; } ;
        this.getName = function( ) { return( _name ) ; } ;

        this.setId = function( s ) { _id = s ; } ;
        this.getId = function( ) { return( _id ) ; } ;

        this.setIRC = function( n ) { _irc = n ; } ;
        this.getIRC = function( ) { return( _irc ) ; } ;

        this.setIndex = function( n ) { _index = n ; } ;
        this.getIndex = function( ) { return( _index ) ; } ;

        this.setType = function( n ) { _type = n ; } ;
        this.getType = function( ) { return( _type ) ; } ;

        this.setModes = function( n ) { _modes = ( n > 0 ) ? n : 1 ; } ;
        this.getModes = function( ) { return( _modes ) ; } ;

        this.getFrequency = function( ) { return( _modes ) ; } ;

        this.setPlanIndex = function( n ) { _planIndex = n ; } ;
        this.getPlanIndex = function( ) { return( _planIndex ) ; } ;

        this.compareTo = function( another ) { return( _index - another.getIndex() ) ; } ;

        this.setAnnual = function( min, max ) {
            this.setType(MinMaxLimit.ANNUAL);
            this.setModes( 1 );
            _min = min ;
            _max = max ;
            return( this ) ;
        } ;

        this.setModal = function( min, max, frequency ) {
            this.setType(MinMaxLimit.MODAL);
            this.setModes( frequency );
            _min = min ;
            _max = max ;
            return( this ) ;
        } ;

        this.setRate = function( min, max ) {
            this.setType(MinMaxLimit.RATE);
            this.setModes( 1 );
            _min = min ;
            _max = max ;
            return( this ) ;
        } ;

        this.getEvaldMin = function( frequency, annualSalary ) {
            return( evald( this.getMinValue(), frequency, annualSalary ) )  ;
        } ;

        this.getAnnualMin = function( annualSalary ) {
            return( annual( this.getMinValue(), annualSalary ) )  ;
        } ;

        this.getModalMin = function( frequency, annualSalary ) {
            return( modal( this.getMinValue(), frequency, annualSalary ) )  ;
        } ;

        this.getRateMin = function( annualSalary ) {
            return( rate( this.getMinValue(), annualSalary ) )  ;
        } ;

        this.getEvaldMax = function( frequency, annualSalary ) {
            return( evald( this.getMaxValue(), frequency, annualSalary ) ) ;
        } ;

        this.getAnnualMax = function( annualSalary ) {
            return( annual( this.getMaxValue(), annualSalary ) )  ;
        } ;

        this.getModalMax = function( frequency, annualSalary ) {
            return( modal( this.getMaxValue(), frequency, annualSalary ) )  ;
        } ;

        this.getRateMax = function( annualSalary ) {
            return( rate( this.getMaxValue(), annualSalary ) )  ;
        } ;

        this.getMinValue = function( ) { return( _min ) ; } ;
        this.getMaxValue = function( ) { return( _max ) ; } ;


        //  Privileged Method Declaration ----------------------------------
        function evald( _in, frequency, annualSalary ) {
            var ret = _in ;

            switch( that.getType() ) {
            case MinMaxLimit.ANNUAL :
                ret = ret / frequency ;
                break ;
            case MinMaxLimit.RATE :
                ret = ret * annualSalary / frequency ;
                break ;
            case MinMaxLimit.MODAL :
                break ;
            default :
                ret = ret * that.getModes() / frequency ;
                break ;
            }
            return( ret ) ;
        }

        function annual( _in,  annualSalary ) {
            var ret = _in ;

            switch( that.getType() ) {
            case MinMaxLimit.ANNUAL :
                break ;
            case MinMaxLimit.RATE :
                ret = ret * annualSalary ;
                break ;
            case MinMaxLimit.MODAL :
                break ;
            default :
                ret = ret * that.getModes() ;
                break ;
            }
            return( ret ) ;
        }

        function modal( _in, frequency, annualSalary ) {
            return( evald( _in, frequency, annualSalary ) ) ;
        }

        function rate( _in,  annualSalary ) {
            var ret = _in ;

            switch( that.getType() ) {
            case MinMaxLimit.ANNUAL :
                ret = ret / annualSalary ;
                break ;
            case MinMaxLimit.RATE :
                break ;

            case MinMaxLimit.MODAL :
                break ;

            default :
                ret = ret * that.getModes() / annualSalary ;
                break ;
            }
            return( ret ) ;
        }
    };

    MinMaxLimit.ANNUAL = 0 ;
    MinMaxLimit.MODAL = 1 ;
    MinMaxLimit.RATE = 2 ;

    return MinMaxLimit;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ 98296:
/*!***********************************************************!*\
  !*** ./node_modules/om-js-calc/src/calc/OMCalcWrapper.js ***!
  \***********************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./OMCalculator */ 9235), __webpack_require__(/*! ./ObjFactory */ 14098), __webpack_require__(/*! ./OMCalculatorResponse */ 90656), __webpack_require__(/*! ./util/CalcUtilities */ 29099),
    __webpack_require__(/*! ./util/DateUtilities */ 72960), __webpack_require__(/*! ./util/employermatch/ERMatchFactory */ 83103),
    __webpack_require__(/*! ./util/employermatch/ERMatchTypes */ 21142), __webpack_require__(/*! ./util/employermatch/StandardERMatch */ 74168),
    __webpack_require__(/*! ./util/employermatch/DateTierERMatch */ 44345), __webpack_require__(/*! ./util/employermatch/CustomERMatch */ 95583),
    __webpack_require__(/*! ./SettleCommon */ 30409), __webpack_require__(/*! ./OMValidatorResponse */ 76097), __webpack_require__(/*! ./LimitUtilities */ 26486), __webpack_require__(/*! ./util/ResponseSerializer */ 50666),
    __webpack_require__(/*! ./util/employermatch/MandatoryERMatch */ 65996), __webpack_require__(/*! ./annuityRate/AnnuityMonthlyBenefit */ 19042), __webpack_require__(/*! ./IRSConstants */ 84666), __webpack_require__(/*! ./IncomeTypes */ 34513),
    __webpack_require__(/*! ./AccountTypes */ 81939), __webpack_require__(/*! ./OMObjFactory */ 47190), __webpack_require__(/*! ./IRSwh */ 55384)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (OMCalculator, ObjFactory, OMCalculatorResponse, CalcUtilities, DateUtilities,
        ERMatchFactory, ERMatchTypes, StandardERMatch, DateTierERMatch, CustomERMatch,
        SettleCommon, OMValidatorResponse, LimitUtilities, ResponseSerializer, MandatoryERMatch,
        AnnuityMonthlyBenefit, IRSConstants, IncomeTypes,
        AccountTypes, OMObjFactory, IRSwh ) {

    var _serializer = new ResponseSerializer();
    var _request;

    var OMCalcWrapper = function (data, preSerialized) {
      this.reserialize(data, preSerialized);
    };

    //  ------------------------------------------------------------------------------
    //  ----------------------  PUBLIC METHODS ---------------------------------------
    //
    OMCalcWrapper.prototype.reserialize = function (data, preSerialized) {
      if (preSerialized) {
        AnnuityMonthlyBenefit.setMultiple(
[{"age": 18, "factor": 2.49 },
{"age": 19, "factor": 2.50 },
{"age": 20, "factor": 2.52 },
{"age": 21, "factor": 2.53 },
{"age": 22, "factor": 2.55 },
{"age": 23, "factor": 2.57 },
{"age": 24, "factor": 2.59 },
{"age": 25, "factor": 2.61 },
{"age": 26, "factor": 2.63 },
{"age": 27, "factor": 2.65 },
{"age": 28, "factor": 2.67 },
{"age": 29, "factor": 2.69 },
{"age": 30, "factor": 2.71 },
{"age": 31, "factor": 2.74 },
{"age": 32, "factor": 2.76 },
{"age": 33, "factor": 2.79 },
{"age": 34, "factor": 2.82 },
{"age": 35, "factor": 2.85 },
{"age": 36, "factor": 2.88 },
{"age": 37, "factor": 2.91 },
{"age": 38, "factor": 2.94 },
{"age": 39, "factor": 2.98 },
{"age": 40, "factor": 3.01 },
{"age": 41, "factor": 3.05 },
{"age": 42, "factor": 3.09 },
{"age": 43, "factor": 3.14 },
{"age": 44, "factor": 3.18 },
{"age": 45, "factor": 3.22 },
{"age": 46, "factor": 3.27 },
{"age": 47, "factor": 3.32 },
{"age": 48, "factor": 3.38 },
{"age": 49, "factor": 3.43 },
{"age": 50, "factor": 3.49 },
{"age": 51, "factor": 3.55 },
{"age": 52, "factor": 3.62 },
{"age": 53, "factor": 3.68 },
{"age": 54, "factor": 3.75 },
{"age": 55, "factor": 3.83 },
{"age": 56, "factor": 3.91 },
{"age": 57, "factor": 3.99 },
{"age": 58, "factor": 4.08 },
{"age": 59, "factor": 4.18 },
{"age": 60, "factor": 4.28 },
{"age": 61, "factor": 4.39 },
{"age": 62, "factor": 4.50 },
{"age": 63, "factor": 4.62 },
{"age": 64, "factor": 4.75 },
{"age": 65, "factor": 4.89 },
{"age": 66, "factor": 5.04 },
{"age": 67, "factor": 5.20 },
{"age": 68, "factor": 5.37 },
{"age": 69, "factor": 5.55 },
{"age": 70, "factor": 5.74 },
{"age": 71, "factor": 5.95 },
{"age": 72, "factor": 6.17 },
{"age": 73, "factor": 6.41 },
{"age": 74, "factor": 6.66 },
{"age": 75, "factor": 6.93 },
{"age": 76, "factor": 7.22 },
{"age": 77, "factor": 7.54 },
{"age": 78, "factor": 7.87 },
{"age": 79, "factor": 8.23 },
{"age": 80, "factor": 8.62 },
{"age": 81, "factor": 9.04 },
{"age": 82, "factor": 9.48 },
{"age": 83, "factor": 9.95 },
{"age": 84, "factor": 10.46 },
{"age": 85, "factor": 11.00 },
{"age": 86, "factor": 11.58 },
{"age": 87, "factor": 12.19 }]
);
        IRSConstants.setIRSLimits({
          "402g1": 18000,
          "457e15": 18000,
          "age": 50,
          "401a17": 270000,
          "415c1A": 54000,
          "414v": 6000
        });


        IRSwh.set({
            "irs.wh.medicare.0.threshold": 0.0,
            "irs.wh.medicare.0.rate": 0.0145,
            "irs.wh.medicare.1.threshold": 200000.0,
            "irs.wh.medicare.1.rate": 0.0235
	    });


        _request = data;
      } else {
        if (data.orangeData) {
          // Non-FE Calc
          if (data.orangeData.annuityFactors) {
            AnnuityMonthlyBenefit.setMultiple(data.orangeData.annuityFactors);
          }
          if (data.orangeData.irsLimits) {
            IRSConstants.setIRSLimits(data.orangeData.irsLimits);
            IRSwh.set(data.orangeData.irsLimits);
          }
          _request = _serializer.serialize(data);
        } else if (data.feData) {
          // FE calc
          if (data.feData.annuityFactors) {
            AnnuityMonthlyBenefit.setMultiple(data.feData.annuityFactors);
          }
          if (data.feData.irsLimits) {
            IRSConstants.setIRSLimits(data.feData.irsLimits);
          }
          _request = _serializer.serializeFE(data);
        }
      }
    };

    /*
     *  Run the calculation logic
     *  return: The evaluated Retirement Benefit response
     */
    OMCalcWrapper.prototype.compute = function ( request ) {
      _request = request ? request : _request;

      var response = getOMCalculatorResponse(_request);
      return response;
    };


    /*
     *  Run the validation logic
     *  return: The evaluated Retirement Benefit response
     */
    OMCalcWrapper.prototype.validate = function (request) {
      _request = request ? request : _request;
      var validation = getOMValidatorResponse(_request);
      return validation;
    };

    /*
     *  Update whether or not to include
     *  the Employer Match Data object in
     *  the response
     */
    // OMCalcWrapper.prototype.includeErMatchData = function(planId, include){
    //  var _include = include;
    //  _include = _include == "false" ? false : _include;
    //  _include = _include == "true" ? true : _include;
    //  var accts = _request.getAccountDataList();
    //  for (var i = 0; i < accts.length; i++) {
    //    if(accts[i].getPlanId() == planId){
    //      if(accts[i].getOmErMatchData())
    //        _include = accts[i].getOmErMatchData().includeInCalculation(_include);
    //    }
    //  }
    //  return _include;
    // };

    OMCalcWrapper.prototype.getAccountList = function () {
      return _request.getAccountDataList();
    };


    /*
     *  Update a plan's contribution
     *  @sourceUID: Index of the plan to update
     *  @contrib:   The new contribution value
     *  @format:    '%' or '$'
     */
    OMCalcWrapper.prototype.setContribution = function (sourceUID, contrib, format) {
      var sourceID = AccountTypes.matchType(sourceUID.split("|")[0]);
      var planID = sourceUID.split("|")[1];
      var srcMatch;
      var aList = _request.getAccountDataList();
      for (var i = 0; i < aList.length; i++) {
        var src = aList[i];
        if (src.getType() == sourceID && src.getPlanId() == planID) {
          aList[i].updateContrib(contrib);
          break;
        }
      }
    };

    /*
     *  Get a plan's contribution
     *  @planIndex: Index of the plan to retrieve contribution amount for
     */
    OMCalcWrapper.prototype.getContribution = function (planIndex) {
      var aList = _request.getAccountDataList();
      var rtn = aList[planIndex] ? aList[planIndex].getContrib() * 100 : 0;
      return rtn;
    };

    /*
     *  Update the user's retirement age
     *  @age: Updated age value
     */
    OMCalcWrapper.prototype.setRetirementAge = function (age, benefit) {
      if (age) {
        _request.getCommonData().setRetireAge(age);
        _request.getCommonData().setSSBenefitAge(age);
        for (var i = 0; i < _request.getIncomeDataList().length; i++) {
          if (_request.getIncomeDataList()[i].getType() === IncomeTypes.SOCIALSECURITY) {
            _request.getIncomeDataList()[i].setMonthlyAmount(benefit);
          }
        }
      }
    };

    /*
     *  Update the user's pension amount
     *  @benefit: Updated benefit value
     */
    OMCalcWrapper.prototype.setPensionAmount = function (benefit) {
        if (benefit !== undefined) {
            for (var i = 0; i < _request.getIncomeDataList().length; i++) {
                if (_request.getIncomeDataList()[i].getType() === IncomeTypes.PENSION) {
                    _request.getIncomeDataList()[i].setMonthlyAmount(benefit);
                }
            }
        }
    };

    /*
     *  Set the user's choice to include SocialSecurity
     *  in their response.
     */
    OMCalcWrapper.prototype.setSSIndicator = function (include) {
      _request.getCommonData().setSSIndicator(include);
    };

    /*
     *  Get the user's retirement age
     *  return: Users retirement age value
     */
    OMCalcWrapper.prototype.getRetirementAge = function (age) {
      return _request.getCommonData().getRetireAge();
    };

    /*
     *  Update the user's investment style
     *  @style: Updated style value (decimal value);
     */
    OMCalcWrapper.prototype.setInvestmentStyle = function (style) {
      //
      if (style || style === 0) { _request.getCommonData().setRateOfReturn(style); }
    };

    /*
     *  Update the user's investment style
     *  return: User's investment style value (integer format);
     */
    OMCalcWrapper.prototype.getInvestmentStyle = function (style) {
      //
      return _request.getCommonData().getRateOfReturn() * 100;
    };

    /*
     *  Update the user's salary
     *  @income: Updated salary value
     */
    OMCalcWrapper.prototype.setSalary = function (income) {
      //
      if (income) { _request.getCommonData().setAnnualSalary(income); }
    };

    /*
     *  Update the user's salary
     *  @income: Updated salary value
     */
    OMCalcWrapper.prototype.getSalary = function () {
      //
      return _request.getCommonData().getAnnualSalary();
    };

    OMCalcWrapper.prototype.getMandatoryEeContribLimits = function (type) {
      for (var i = 0; i < _request.getAccountDataList().length; i++) {
        var acd = _request.getAccountDataList()[i];
        if (acd.getType() === AccountTypes.TYPE_MANDATORY_EE) {
          if (type === "PERCENT") {
            return {'min': acd.getMinContribRate(), 'max': acd.getMaxContribRate()};
          } else {
            return {'min': acd.getMinContribDollar(), 'max': acd.getMaxContribDollar()};
          }
        }
      }
    };


    OMCalcWrapper.prototype.getMandatoryErContribLimits = function (type) {
      for (var i = 0; i < _request.getAccountDataList().length; i++) {
        var acd = _request.getAccountDataList()[i];
        if (acd.getType() === AccountTypes.TYPE_MANDATORY_ER) {
          if (type === "PERCENT") {
            return {'min': acd.getMinContribRate(), 'max': acd.getMaxContribRate()};
          } else {
            return {'min': acd.getMinContribDollar(), 'max': acd.getMaxContribDollar()};
          }
        }
      }
    };


    /*
     *  Create / update the new loan model data to the request
     */
    OMCalcWrapper.prototype.setNewLoanModelData = function (lmd) {
      // Create new Loan instance & add to the request.
      if (lmd.loanPayment > 0.0 || lmd.loanAmount > 0.0) {
        var loan = OMObjFactory.getLoanInstance() ;

        if (lmd.loanAmount > 0.0) {
          loan.initPaymentInstance(lmd.loanOrientation, lmd.loanInterestRate, lmd.loanPayFrequency, lmd.loanTerm, lmd.loanAmount);
        } else {
          loan.initLoanAmountInstance(lmd.loanOrientation, lmd.loanInterestRate, lmd.loanPayFrequency, lmd.loanTerm, lmd.loanPayment);
        }
        lmd.loanInitialFee > 0.0 ? loan.setInitialFee(lmd.loanInitialFee) : loan.setInitialFee(0.0);
        lmd.loanAnnualFee > 0.0 ? loan.setAnnualFee(lmd.loanAnnualFee) : loan.setAnnualFee(0.0);
        lmd.loanAer ? loan.setInterestTypeToAER() : loan.setInterestTypeToSimple();
        (lmd.loanUpfrontInterest && lmd.loanDaysUpfrontInterest > 0) ? loan.setDaysOfUpFrontInterest(lmd.loanDaysUpfrontInterest) : loan.setDaysOfUpFrontInterest(0);

        var aList = _request.getAccountDataList();
        var isLoanInstanceFound = false;
        var oldLoanInstance;
        for (var i = 0; i < aList.length; i++) {
          var accountDataInstance = aList[i];
          if (accountDataInstance.getType() == AccountTypes.TYPE_NEWLOAN) {
            isLoanInstanceFound = true;
            oldLoanInstance = accountDataInstance;
            break;
          }
        }

        if (!isLoanInstanceFound) {
          // Add new loan instance to the request
          var newLoanInstance = OMObjFactory.getOMAccountDataInstance();
          newLoanInstance.setType(AccountTypes.TYPE_NEWLOAN);
          newLoanInstance.setBalance(-loan.getLoanAmount());
          newLoanInstance.setFrequency(loan.getFrequency());
          newLoanInstance.setLoan(loan);
          _request.getAccountDataList().push(newLoanInstance);
        } else {
          // Update the existing loan instance object
          oldLoanInstance.setType(AccountTypes.TYPE_NEWLOAN);
          oldLoanInstance.setBalance(-loan.getLoanAmount());
          oldLoanInstance.setFrequency(loan.getFrequency());
          oldLoanInstance.setLoan(loan);
        }
      }
    };







    //  ------------------------------------------------------------------------------
    //  ----------------------  PRIVATE METHODS ---------------------------------------
    //
    /*
     *  Retrieve OMCalculator response based on user data
     *  @request:OMCalculatorRequest  - Valid request object
     *  return:OMCalculatorResponse - Valid response object
     */
    var getOMCalculatorResponse = function (request) {

      var accumCommon = prepareAccumCommonFromCommonData(request.getCommonData());
      var settleCommon = prepareSettleCommonFromCommonData(request.getCommonData());
      var accountList = prepareAccumListFromDataList(request.getAccountDataList());
      var incomeList = prepareIncomeListFromDataList(request.getIncomeDataList(), settleCommon );

      // do the heavy lifting: accumulate all accounts; set error codes
      var calcx = new OMCalculator();
      calcx.init(accumCommon, settleCommon, accountList, incomeList);
      calcx.align();

      return ( prepareResponse(request, accountList, incomeList, calcx.getRetireBenefitEvalResponse()) );
    };

    /*
     *  Retrieve OMValidator response based on user data
     *  @request:OMCalculatorRequest  - Valid request object
     *  return:OMValidatorResponse - Valid response object
     */
    var getOMValidatorResponse = function (request) {

      var accumCommon = prepareAccumCommonFromCommonData(request.getCommonData());
      var accountList = prepareAccumListFromDataList(request.getAccountDataList());

      // do the heavy lifting: accumulate all accounts; set error codes
      var ba = ObjFactory.getBaseAccumulatorInstance();
      ba.init(accumCommon, accountList);
      ba.validate();

      // set up response object
      var response = new OMValidatorResponse();
      prepareReturnData(request.getCommonData(), request.getAccountDataList(), accountList);
      response.setCommonData(request.getCommonData());
      response.setAccountDataList(request.getAccountDataList());

      return ( response );
    };


    var prepareResponse = function (request, accountList, incomeList, rber) {
      var currentAge = DateUtilities.getAgePrecise(request.getCommonData().getDateOfBirth(),
        request.getCommonData().getReferenceDate());

      // set up response object
      var response = new OMCalculatorResponse();
      response.setCommonData(request.getCommonData());
      response.setAccountDataList(request.getAccountDataList());
      response.setIncomeDataList(request.getIncomeDataList());

      prepareReturnData(response.getCommonData(), response.getAccountDataList(), accountList);

      response.setRetireBenefitEvalResponse(rber);
      return ( response );
    };


    var prepareReturnData = function (cd, adList, accountList) {
      var currentAge = DateUtilities.getAgePrecise(cd.getDateOfBirth(), cd.getReferenceDate());

      // set return members of request objects to supply response
      cd.setMinRateOfReturn(0.0);
      cd.setMaxRateOfReturn(0.12);
      cd.setMinRetireAge(currentAge + 1);
      cd.setMaxRetireAge(99);
      cd.setErrorCode(-1);
      cd.setErrorString("");


      // set return members of request objects to supply response - account details
      var contribMaxs;
      var contribMins = [0, 0];
      var annualSalaryRef = cd.getAnnualSalary();
      var annualSalary401a17Ref = Math.min(annualSalaryRef, IRSConstants.getLimit(IRSConstants._401a17));
      var evalSalary = annualSalaryRef;

      for (var aa = 0; aa < accountList.length; aa++) {
        for (var ad = 0; ad < adList.length; ad++) {
          if (accountList[aa].getIndex() == adList[ad].getIndex()) {

            // establish min/maxes
            contribMins[0] = 0;
            contribMins[1] = 0;
            evalSalary = ( LimitUtilities.apply401a17SalaryLimit(accountList[aa].getType(), accountList[aa].getIRC(), true) ) ? annualSalary401a17Ref : annualSalaryRef;

            contribMaxs = LimitUtilities.getIRSContribMaxes(accountList[aa].getType(), accountList[aa].getIRC(), accountList[aa].getModes(), evalSalary);
            if (accountList[aa].isMinMaxLimit()) {
              var temp = LimitUtilities.getNonIRSContribMaxes(accountList[aa].getMinMaxLimit(), accountList[aa].getModes(), evalSalary);
              if ((temp[LimitUtilities.MAX_DOLLAR] < contribMaxs[LimitUtilities.MAX_DOLLAR] ) && ( temp[LimitUtilities.MAX_DOLLAR] > 0.0 )) {
                contribMaxs[LimitUtilities.MAX_RATE] = temp[LimitUtilities.MAX_RATE];
                contribMaxs[LimitUtilities.MAX_DOLLAR] = temp[LimitUtilities.MAX_DOLLAR];
              }
              temp = LimitUtilities.getNonIRSContribMins(accountList[aa].getMinMaxLimit(), accountList[aa].getModes(), evalSalary);
              if (temp[LimitUtilities.MAX_DOLLAR] > 0.0) {
                contribMins[LimitUtilities.MAX_RATE] = temp[LimitUtilities.MAX_RATE];
                contribMins[LimitUtilities.MAX_DOLLAR] = temp[LimitUtilities.MAX_DOLLAR];
              }
            }

            adList[ad].setMinContribRate(CalcUtilities.roundAndTruncate(contribMins[LimitUtilities.MAX_RATE], 3));
            adList[ad].setMaxContribRate(CalcUtilities.truncate(contribMaxs[LimitUtilities.MAX_RATE], 3));
            adList[ad].setMinContribDollar(CalcUtilities.roundAndTruncate(contribMins[LimitUtilities.MAX_DOLLAR], 2));
            adList[ad].setMaxContribDollar(CalcUtilities.truncate(contribMaxs[LimitUtilities.MAX_DOLLAR], 2));
            adList[ad].setErrorCode(accountList[aa].getErrorCode());
            adList[ad].setErrorString(accountList[aa].getErrorString());
            adList[ad].setIrsInfraction(accountList[aa].getIrsInfraction());
          }
        }
      }
    };


    var prepareAccumCommonFromCommonData = function (omcd) {
      var currentAge, retireAge;

      // establish age, accumulation range
      currentAge = DateUtilities.getAgePrecise(omcd.getDateOfBirth(), omcd.getReferenceDate());
      retireAge = omcd.getRetireAge();
      // confirm retireAge >= currentAge + 1

      var accumCommon = ObjFactory.getAccumCommonInstance();

      // set common matters
      accumCommon.setAnnualSalary(omcd.getAnnualSalary());
      accumCommon.setFull(retireAge - currentAge);
      //accumCommon.setFractional( d ) ;  // only if taking a different approach than MRO
      accumCommon.setRateOfIncrease(omcd.getRateOfIncrease());
      accumCommon.setRateOfReturn(omcd.getRateOfReturn());
      accumCommon.setRateOfWithholding(omcd.getRateOfWithholding());
      accumCommon.setMinMaxLimitList(omcd.getMinMaxLimitList());

      return ( accumCommon );
    };


    var prepareSettleCommonFromCommonData = function (omcd) {
      var currentAge, retireAge;
      var currentYear ;

      // establish age, accumulation range
      currentAge = DateUtilities.getAgePrecise(omcd.getDateOfBirth(), omcd.getReferenceDate());
      retireAge = omcd.getRetireAge();
      // confirm retireAge >= currentAge + 1

      currentYear = DateUtilities.getYearInteger( omcd.getReferenceDate() ) ;

      var settleCommon = ObjFactory.getSettleCommonInstance() ;

      // set common matters
      settleCommon.setCurrentAge(currentAge);
      settleCommon.setRetireAge(retireAge);
      settleCommon.setRateOfInflation(omcd.getRateOfInflation());

      // rate of return is 2% less, but zero or greater
      settleCommon.setRateOfReturn( Math.max( omcd.getRateOfReturn() - 0.02, 0.0 ) ) ;

      settleCommon.setReplacementRatio(omcd.getReplacementRatio());
      settleCommon.setSSIndicator(omcd.isSocialSecurity());

      settleCommon.setCurrentYear( currentYear ) ;
      settleCommon.setSSBenefitAge( omcd.getSSBenefitAge() ) ;
      settleCommon.setRateOfWithholding( omcd.getRateOfWithholding() ) ;
      settleCommon.setCurrentAnnualSalary( omcd.getAnnualSalary() ) ;

      // annuity benefit per $1000 of premium: is this best here or elsewhere?
      settleCommon.setSpiaMonthlyValuePer1000( AnnuityMonthlyBenefit.getInstance().get( retireAge ) ) ;

      // 170530 LA
      settleCommon.setRateOfIncrease( omcd.getRateOfIncrease() ) ;
      settleCommon.setRateOfRothBump( omcd.getRateOfRothBump() ) ;
      settleCommon.setReplacementIncomeType( omcd.getReplacementIncomeType() ) ;

      return ( settleCommon );
    };



    var prepareAccumListFromDataList = function (omadList) {

      //List<OMAccountData> adList = this.request.getAccountDataList() ;
      var accountList = [];

      // set id to link account objects for return min/max values and error info
      omadList = assureUniqueAccountDataIndex( omadList ) ;
//      var index = 0;
//      for (var ad = 0; ad < omadList.length; ad++) {
//        omadList[ad].setIndex(index++);
//      }

      var emData = null;
      var aaTemp = null;

      // loop through accounts and load calculator objs from data objs
      for (var ad = 0; ad < omadList.length; ad++) {
        aaTemp = ObjFactory.getAccountAccumInstance();

        aaTemp.setPlanName(omadList[ad].getPlanName());
        aaTemp.setPlanLabel(omadList[ad].getPlanLabel());
        aaTemp.setPlanId(omadList[ad].getPlanId());
        aaTemp.setPlanIndex(omadList[ad].getPlanIndex());
        aaTemp.setPlanType(omadList[ad].getPlanType());

        aaTemp.setName(omadList[ad].getName());
        aaTemp.setLabel(omadList[ad].getLabel());
        aaTemp.setId(omadList[ad].getId());
        aaTemp.setIndex(omadList[ad].getIndex());
        aaTemp.setType(omadList[ad].getType());
        aaTemp.setIRC(omadList[ad].getIRC());
        aaTemp.setStartContrib(omadList[ad].getContribType(), omadList[ad].getContrib());

        aaTemp.setContribIterationThreshold( omadList[ad].getContribIterationThreshold() ) ;

        aaTemp.setModes(omadList[ad].getFrequency());
        aaTemp.setEeLumpAmount(omadList[ad].getBalance());
        aaTemp.setErLumpAmount(omadList[ad].getErBalance());
        aaTemp.setMinMaxLimit(omadList[ad].getMinMaxLimit());

        aaTemp.setLoan( omadList[ad].getLoan() ) ;

        emData = omadList[ad].getOmErMatchData();

        // construct employer match object
        if (emData !== null && emData.includeInCalculation()) {
          var em;
          switch (emData.getType()) {
            case ERMatchTypes.STANDARD :
            {
              em = ERMatchFactory.getStandardInstance(emData.getName());
              em.setID(emData.getID());
              em.set(emData.getTier1Match(), emData.getTier1Range(),
                emData.getTier2Match(), emData.getTier2Range(),
                emData.getAnnualMax(), emData.getTierAnnualMax());

              aaTemp.setEmployerMatchWrapper(em);
            }
              break;

            case ERMatchTypes.MANDATORY :
            {
              em = ERMatchFactory.getMandatoryInstance(emData.getName());
              em.setID(emData.getID());
              em.set(emData.getFlatAnnualContrib(), emData.getRateOfSalary());

              aaTemp.setEmployerMatchWrapper(em);
            }
              break;


            case ERMatchTypes.DATETIER :
            {
              em = ERMatchFactory.getDateTierInstance(emData.getName());
              em.setID(emData.getID());
              if (emData.getTier1Match() > 0.0) {
                em.addTier(
                  aaTemp.getModes(),
                  DateUtilities.today(),
                  emData.getTier1Date(),
                  emData.getTier1Range(),
                  emData.getTier1Match()
                );
                if (emData.getTier2Match() > 0.0) {
                  em.addTier(
                    aaTemp.getModes(),
                    DateUtilities.today(),
                    emData.getTier2Date(),
                    emData.getTier2Range(),
                    emData.getTier2Match()
                  );
                }
              }
              aaTemp.setEmployerMatchWrapper(em);
            }
              break;

            case ERMatchTypes.CUSTOM :
            {
              em = ERMatchFactory.getCustomInstance(emData.getName());
              em.setID(emData.getID());
              aaTemp.setEmployerMatchWrapper(em);
            }
              break;

            default :
              break;
          }

        }

        accountList.push(aaTemp);
      }

      return ( accountList );
    };


    var prepareIncomeListFromDataList = function (omidList, settleCommon ) {

      var idTemp = null;
      var incomeDataList = [];
      for (var id = 0; id < omidList.length; id++) {
        idTemp = ObjFactory.getIncomeDataInstance();

        idTemp.setAnnualAmount(omidList[id].getAnnualAmount());
        idTemp.setType(omidList[id].getType());
        idTemp.setPriority(omidList[id].getPriority());
        idTemp.setName(omidList[id].getName());


// 160726
       	if( ( IncomeTypes.SOCIALSECURITY === omidList[id].getType() ) && ( 0 > omidList[id].getStart() ) ) {
       	    omidList[id].setStart( settleCommon.getSSBenefitAge() ) ;
       	}
       	idTemp.setStart( omidList[id].getStart() ) ;
       	idTemp.setStop( omidList[id].getStop() ) ;
       	idTemp.setRateOfIncrease( omidList[id].getRateOfIncrease() ) ;

        incomeDataList.push(idTemp);
      }
      return ( incomeDataList );
    };


    var assureUniqueAccountDataIndex = function( accountDataList ) {
        // set unique index for each object based on those indexes that may be already set
        var index = -1 ;
        var adl = accountDataList ;

    	// set index var
        for( var i = 0 ; i < adl.length ; i++ ) {
            index = Math.max( index, adl[i].getIndex() ) ;
        }

    	// replace "-1" indexes
        for( var j = 0 ; j < adl.length ; j++ ) {
            if( 0 > adl[j].getIndex() ) { index++ ; adl[j].setIndex( index ) ; }
    	}

    	// replace any duplicates to make each index unique
        var check ;
        var count ;
        for( var k = 0 ; k < adl.length ; k++ ) {
            check = adl[k].getIndex() ;
            count = 0 ;
            for( var n = 0 ; n < adl.length ; n++ ) {
                if( check === adl[n].getIndex() ) {
                    count++ ;
                    if( count > 1 ) { index++ ; adl[n].setIndex( index ) ; }
                }
            }
        }
        return( adl ) ;
    } ;	

    return OMCalcWrapper;

}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ 9235:
/*!**********************************************************!*\
  !*** ./node_modules/om-js-calc/src/calc/OMCalculator.js ***!
  \**********************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./ObjFactory */ 14098), __webpack_require__(/*! ./annuityRate/AnnuityMonthlyBenefit */ 19042), __webpack_require__(/*! ./AccountTypes */ 81939),
        __webpack_require__(/*! ./IncomeTypes */ 34513), __webpack_require__(/*! ./util/CalcUtilities */ 29099), __webpack_require__(/*! ./AccumCensus */ 98611), __webpack_require__(/*! ./ReplacementIncome */ 27082),__webpack_require__(/*! ./BaseAccumulator */ 97065),__webpack_require__(/*! ./LimitUtilities */ 26486),__webpack_require__(/*! ./loan/LoanUtil */ 45104)], __WEBPACK_AMD_DEFINE_RESULT__ = (function(ObjFactory, AnnuityMonthlyBenefit, AccountTypes, IncomeTypes, CalcUtilities, AccumCensus, ReplacementIncome, BaseAccumulator, LimitUtilities, LoanUtil ){

    //  Constructor
    var OMCalculator = function (){

        //  Private var declarations ------------------------------------
        var _accountList = null;
        var _accumCommon = null;
        var _settleCommon = null;
        var _incomeList = null;
        var _rber = null;

        //  Privileged method declarations ------------------------------------
        this.init = function( ac, sc, al, il  ) {
            _accountList = al ;
            _accumCommon = ac ;
            _settleCommon = sc ;
            _incomeList = il ;
            _rber = null ;
        };

        this.getRetireBenefitEvalResponse = function ( ) { return( _rber ) ; } ;

        this.align = function() {
            var ba = ObjFactory.getBaseAccumulatorInstance() ; //  ba:BaseAccumulator
            ba.init( _accumCommon, _accountList ) ;
            ba.align() ;

            _rber = legacyRetirementHandler( _accumCommon, _settleCommon, _accountList, _incomeList, ba.getCensusList() ) ;

            // 170612   set loan drop amount if there is a loan (handling multiple plan situation
            var loanPlanIndex = BaseAccumulator.getModelledLoanPlanIndex( _accountList ) ;
            if( loanPlanIndex > -1 ) {
                var index = -1 ;
                var loanDropRber = null ;
                var loanPlanId = BaseAccumulator.getModelledLoanPlanId( _accountList ) ;

                // clone accountList
                var clonedAccountList = [];
                for( var i = 0 ; i < _accountList.length ; i++ ) {
                    var cl = OMCalculator.cloneAccount( _accountList[i] ) ;
                    clonedAccountList.push( cl ) ;
                }

                // reduce contrib amounts to 0. for appropriate account types
                // use plan id if it set...
                if( loanPlanId != "" ) {
                    for( var i = 0 ; i < clonedAccountList.length ; i++ ) {
                        var aa = clonedAccountList[i] ;
                        index = LimitUtilities.checkList( aa.getType(), LoanUtil.LoanRepaymentImpactTypes, true ) ;

                        if( ( index > -1 ) && ( loanPlanId == aa.getPlanId() ) ) {
                            aa.adjustStartContrib( 0.0 ) ;
                        }
                    }
                }
                // else use plan index
                else {
                    for( var i = 0 ; i < clonedAccountList.length ; i++ ) {
                        var aa = clonedAccountList[i] ;
                        index = LimitUtilities.checkList( aa.getType(), LoanUtil.LoanRepaymentImpactTypes, true ) ;

                        if( ( index > -1 ) && ( loanPlanIndex == aa.getPlanIndex() ) ) {
                            aa.adjustStartContrib( 0.0 ) ;
                        }
                    }
                }

                ba.init( _accumCommon, clonedAccountList ) ;
                ba.align() ;

                loanDropRber = legacyRetirementHandler( _accumCommon, _settleCommon, clonedAccountList, _incomeList, ba.getCensusList() ) ;
                _rber.setLoanContribDropValue( CalcUtilities.roundAndTruncate( _rber.getSumOfMonthlySources() - loanDropRber.getSumOfMonthlySources(), 2 ) ) ;
            }

        };


        function legacyRetirementHandler( ac, sc, al, il, cl ) {

            var rber = ObjFactory.getRetireBenefitEvalResponseInstance() ;

            var inflationDiscount = CalcUtilities.discountingRate( ac.getFull(), sc.getRateOfInflation() ) ;
            var spiaMonthlyValuePer1000 = AnnuityMonthlyBenefit.getInstance().get( sc.getRetireAge() ) ;
            var currentAnnualSalary = sc.getCurrentAnnualSalary() ;
            var replacementRatio = sc.getReplacementRatio() ;
            var rateOfRothEnhancement = ( ( sc.getRateOfRothBump() > 0.0 ) && ( sc.getRateOfRothBump() != 1.0 ) ) ? ( 1.0 / ( 1.0 - sc.getRateOfRothBump() ) ) - 1.0 : 0.0 ;   // rate for Roth bump

            // gather results for retirement return
            var balance = 0 ;
            var eeContribs = 0 ;
            var erContribs = 0 ;
            var other = 0 ;
            var socialsec = 0 ;
            var income = 0 ;
            var pensionBalance = 0 ;
            var pensionIncome = 0 ;

            var newLoanBalanceImpact = 0 ;
            var newLoanRepayment = 0 ;
            var existingLoanRepayment = 0 ;

            // 170811   get roth component of balance to handle roth bump in loans
            var rothProportion = getRothProportion( al, OMCalculator.TYPE_ROTHPROPORTION_DEFERRALS ) ;
            OMCalculator.adjustBalances( al, rothProportion ) ;

            // 170531  new salary replacement requirements
            var adjustedAnnualSalary = ReplacementIncome.getAdjustedCurrentDollarSalary(
                sc.getReplacementIncomeType()
                , sc.getCurrentAnnualSalary()
                , ac.getFull()
                , sc.getRateOfIncrease()
                , sc.getRateOfInflation()
                , cl ) ;

            //  gather account calculations/data
            for( var i = 0; i < al.length; i++ ) {
                var aa = al[i];
                switch( aa.getType() ) {
                    case AccountTypes.TYPE_DB_MANDATORY_EE :  // not a contribution
                        break ;
                    case AccountTypes.TYPE_NOINCREASE :
                    case AccountTypes.TYPE_NOGROWTH :
                        other += aa.getEeLumpAmount() + aa.getEeEarningsOnLumpAmount() + aa.getErLumpAmount() + aa.getErEarningsOnLumpAmount() ;
                        other +=  aa.getEeContribBucket() + aa.getEeEarningsOnContribs() ;
                        other +=  aa.getErContribBucket() + aa.getErEarningsOnContribs() ;
                        break ;
                    case AccountTypes.TYPE_MANDATORY_ER :
                    case AccountTypes.TYPE_RECURRING_ER :
                        balance += aa.getEeLumpAmount() + aa.getEeEarningsOnLumpAmount() + aa.getErLumpAmount() + aa.getErEarningsOnLumpAmount();
                        erContribs += aa.getEeContribBucket() + aa.getEeEarningsOnContribs() + aa.getErContribBucket() + aa.getErEarningsOnContribs() ;
                        break ;
                    case AccountTypes.TYPE_PENSION_CASH_BAL :
                    case AccountTypes.TYPE_PENSION_LUMP_SUM :
                        pensionBalance +=   aa.getEeLumpAmount() +    aa.getEeEarningsOnLumpAmount() + aa.getErLumpAmount() + aa.getErEarningsOnLumpAmount() +
                                            aa.getEeContribBucket() + aa.getEeEarningsOnContribs()  +
                                            aa.getErContribBucket() + aa.getErEarningsOnContribs() ; // note this behavior
                        break ;

                    // 170531 roth enhancement
                    case AccountTypes.TYPE_ROTH :
                    case AccountTypes.TYPE_SUPPL_ROTH :
                    case AccountTypes.TYPE_ROTH_AGECATCHUP :
                        // enhance accumulations for roth by a tax rate
                        balance += ( ( 1.0 + rateOfRothEnhancement ) * ( aa.getEeLumpAmount() + aa.getEeEarningsOnLumpAmount() + aa.getErLumpAmount() + aa.getErEarningsOnLumpAmount() ) ) ;
                        eeContribs += ( ( 1.0 + rateOfRothEnhancement ) * ( aa.getEeContribBucket() + aa.getEeEarningsOnContribs() ) ) ;
                        erContribs += ( ( 1.0 + rateOfRothEnhancement ) * ( aa.getErContribBucket() + aa.getErEarningsOnContribs() ) ) ;
                        break ;

                    case AccountTypes.TYPE_EXISTINGLOAN :
                        // enhance accumulations proportionately for roth bump
                        existingLoanRepayment += ( ( 1.0 + ( rothProportion * rateOfRothEnhancement ) ) * ( aa.getEeContribBucket() + aa.getEeEarningsOnContribs() ) ) ; 
                        break ;
                    case AccountTypes.TYPE_NEWLOAN :
                        // enhance accumulations proportionately for roth bump
                        newLoanBalanceImpact += ( ( 1.0 + ( rothProportion * rateOfRothEnhancement ) ) * ( aa.getEeLumpAmount() + aa.getEeEarningsOnLumpAmount() ) ) ; // always(?) negative
                        newLoanRepayment += ( ( 1.0 + ( rothProportion * rateOfRothEnhancement ) ) * ( aa.getEeContribBucket() + aa.getEeEarningsOnContribs() ) ) ; 
                        break ;

                    default :
                        balance += aa.getEeLumpAmount() + aa.getEeEarningsOnLumpAmount() + aa.getErLumpAmount() + aa.getErEarningsOnLumpAmount();
                        eeContribs += aa.getEeContribBucket() + aa.getEeEarningsOnContribs() ;
                        erContribs += aa.getErContribBucket() + aa.getErEarningsOnContribs() ;
                        break ;
                }
            }

            for( var j = 0; j < il.length; j++ ) {
                var id = il[j] ;
                switch( id.getType() ) {
                    case IncomeTypes.SOCIALSECURITY :
                        socialsec += _settleCommon.doSocialSecurity() ? id.getMonthlyAmount() : 0 ;
                        break ;

                    case IncomeTypes.PENSION :
                        pensionIncome += id.getMonthlyAmount() ;
                        break ;

                    case IncomeTypes.ASSET :
                    case IncomeTypes.EMPLOYMENT :
                    case IncomeTypes.OTHER :
                        income += id.getMonthlyAmount() ;
                        break ;
                    default :
                        income += id.getMonthlyAmount() ;
                        break ;
                }
            }

            rber.setInflationDiscount( inflationDiscount ) ;
            rber.setAnnuityRate( spiaMonthlyValuePer1000 ) ;
            rber.setYearsToRetire( ac.getFull() ) ;

            rber.setCurrentAnnualSalary( currentAnnualSalary ) ;
            rber.setReplacementRatio( replacementRatio ) ;
            rber.setAdjustedAnnualSalary( adjustedAnnualSalary ) ;

            rber.setMonthlyEstimateFromDCBalance( CalcUtilities.roundAndTruncate( ( balance * inflationDiscount / 1000 * spiaMonthlyValuePer1000 ),2 ) ) ;
            rber.setMonthlyEstimateFromEmployee( CalcUtilities.roundAndTruncate( ( eeContribs * inflationDiscount / 1000 * spiaMonthlyValuePer1000 ),2 ) ) ;
            rber.setMonthlyEstimateFromEmployer( CalcUtilities.roundAndTruncate( ( erContribs * inflationDiscount / 1000 * spiaMonthlyValuePer1000 ),2 ) ) ;
            rber.setMonthlyEstimateFromSocialSecurity( CalcUtilities.roundAndTruncate( ( socialsec ), 2 ) ) ;
            rber.setMonthlyEstimateFromPensionAsIncome( CalcUtilities.roundAndTruncate( pensionIncome, 2 ) ) ;
            rber.setMonthlyEstimateFromPension( CalcUtilities.roundAndTruncate( ( pensionBalance * inflationDiscount / 1000.0 * spiaMonthlyValuePer1000 ), 2 ) ) ;
            rber.setMonthlyEstimateFromOther( CalcUtilities.roundAndTruncate( ( other * inflationDiscount / 1000 * spiaMonthlyValuePer1000 ), 2 ) ) ;
            rber.setMonthlyEstimateFromIncome( CalcUtilities.roundAndTruncate( ( income ), 2 ) ) ;
            rber.setMonthlySalaryReplacementRequirement( CalcUtilities.roundAndTruncate( ( adjustedAnnualSalary * replacementRatio / 12 ), 2 ) ) ;

            rber.setMonthlyEstimateFromExistingLoanRepayment( CalcUtilities.roundAndTruncate( ( existingLoanRepayment * inflationDiscount / 1000. * spiaMonthlyValuePer1000 ), 2 ) ) ;
            rber.setMonthlyEstimateFromNewLoanRepayment( CalcUtilities.roundAndTruncate( ( newLoanRepayment * inflationDiscount / 1000. * spiaMonthlyValuePer1000 ), 2 ) ) ;
            rber.setMonthlyEstimateFromNewLoanBalanceImpact( CalcUtilities.roundAndTruncate( ( newLoanBalanceImpact * inflationDiscount / 1000. * spiaMonthlyValuePer1000 ), 2 ) ) ;

            return( rber ) ;
        }

        function getRothProportion( al, type ) {

            var retValue = 0.0 ;
            var total = 0.0 ;
            var totalRoth = 0.0 ;

            switch( type ) {
                case OMCalculator.TYPE_ROTHPROPORTION_BALANCES :
                    total = BaseAccumulator.getLumpAmountAccordingToType( al, LoanUtil.LoanRepaymentImpactTypes ) ;
                    totalRoth = BaseAccumulator.getLumpAmountAccordingToType( al, LoanUtil.RothTypes ) ;
                    break ;
            
                case OMCalculator.TYPE_ROTHPROPORTION_DEFERRALS :
                default :
                    total = OMCalculator.getInitialContribs( al, LoanUtil.LoanRepaymentImpactTypes ) ;
                    totalRoth = OMCalculator.getInitialContribs( al, LoanUtil.RothTypes ) ;
                    break ;
            }

            retValue = ( total > 0.009 ) ? ( totalRoth / total ) : 0.0 ;
            return( retValue ) ;
        }

    };

    // adjust aggregate balance according to roth proportion; insert roth balance according to roth proportion
    OMCalculator.adjustBalances = function( accountList, rothProportion ) {

        var eeLump = 0.0, erLump = 0.0, eeEarnings = 0.0, erEarnings = 0.0 ; 
        var isAggregate = false, isRothBalance = false ;
        var typeIndex = -1 ;
        var rothIndex = -1 ;

        if( rothProportion > 0.0 ) {
            var objectIndex = 0 ;  // index of objects

            for( var i = 0; i < accountList.length; i++ ) {
                var aa = accountList[i];
                typeIndex = LimitUtilities.checkList( aa.getType(), LoanUtil.RothTypes, true ) ;
                if( typeIndex > -1 ) {
                    rothIndex = objectIndex ;
                    if( aa.getEeLumpAmount() + aa.getEeEarningsOnLumpAmount() + aa.getErLumpAmount() + aa.getErEarningsOnLumpAmount() > 0. ) {
                        isRothBalance = true ;
                    }
                }
                objectIndex++ ;
            }

            for( var i = 0; i < accountList.length; i++ ) {
                var aa = accountList[i];
                if( AccountTypes.TYPE_AGGREGATE_BALANCE == aa.getType() ) {
                    if( aa.getEeLumpAmount() + aa.getEeEarningsOnLumpAmount() + aa.getErLumpAmount() + aa.getErEarningsOnLumpAmount() > 0. ) {
                        isAggregate = true ;
                        eeLump = aa.getEeLumpAmount() ;
                        eeEarnings = aa.getEeEarningsOnLumpAmount() ;
                        erLump = aa.getErLumpAmount() ;
                        erEarnings = aa.getErEarningsOnLumpAmount() ;

                        if( !isRothBalance ) {
                            aa.setEeLumpAmount( eeLump * ( 1.0 - rothProportion ) ) ;
                            aa.touchEeEarningsOnLumpAmount( - eeEarnings + ( eeEarnings * ( 1.0 - rothProportion ) ) ) ;
                            aa.setErLumpAmount( erLump * ( 1.0 - rothProportion ) ) ;
                            aa.touchErEarningsOnLumpAmount( - erEarnings + ( erEarnings * ( 1.0 - rothProportion ) ) ) ;
                        }
                    }

                }
            }
            
            if( isAggregate && !isRothBalance && ( rothIndex > -1 ) ) {
                var aa = accountList[rothIndex] ;
                aa.setEeLumpAmount( eeLump * rothProportion ) ;
                aa.touchEeEarningsOnLumpAmount( eeEarnings * rothProportion ) ;
                aa.setErLumpAmount( erLump * rothProportion ) ;
                aa.touchErEarningsOnLumpAmount( erEarnings * rothProportion ) ;
                
            }
        }
    } ;

    OMCalculator.getInitialContribs = function( accountList, typeList ) {

        var retValue = 0. ;
        var index = -1 ;

        for( var i = 0 ; i < accountList.length ; i++ ) {
            var aa = accountList[i] ;
            index = LimitUtilities.checkList( aa.getType(), typeList, true ) ;

            if( index > -1 ) {
                retValue += aa.getInitialEeContribAmount() ;
            }
        }
        return( retValue ) ;
    } ;

    OMCalculator.cloneAccount = function( ac ) {
        var cl = ObjFactory.getAccountAccumInstance() ;

        cl.setPlanName( ac.getPlanName() );
        cl.setPlanLabel( ac.getPlanLabel() );
        cl.setPlanId( ac.getPlanId() );
        cl.setPlanIndex( ac.getPlanIndex() );
        cl.setPlanType( ac.getPlanType() );
        cl.setPriority( ac.getPriority() );

        cl.setName( ac.getName() );
        cl.setLabel( ac.getLabel() );
        cl.setId( ac.getId() );
        cl.setIndex( ac.getIndex() );
        cl.setType( ac.getType() );
        cl.setIRC( ac.getIRC() );
        cl.setStartContrib( ac.getContribType(), ac.getStartContrib() ) ;
        cl.setRateOfReturn( ac.getRateOfReturn() ) ;
        cl.setRateOfWithholding( ac.getRateOfWithholding() ) ;

        cl.setRateOfIncrease( ac.getRateOfIncrease() ) ;

        cl.setContribIterationThreshold(  ac.getContribIterationThreshold() ) ;

        cl.setModes( ac.getModes() );
        cl.setEeLumpAmount( ac.getEeLumpAmount() );
        cl.setErLumpAmount( ac.getErLumpAmount() );

        // by reference on these...
        if( ac.isMinMaxLimit() ) { cl.setMinMaxLimit( ac.getMinMaxLimit() ); }
        if( ac.isLoan() ) { cl.setLoan( ac.getLoan() ); }
        if( ac.isEmployerMatch() ) { cl.setEmployerMatchWrapper( ac.getEmployerMatchWrapper() ) ; }

        return( cl ) ;
    } ;

    OMCalculator.TYPE_ROTHPROPORTION_BALANCES = 0 ;
    OMCalculator.TYPE_ROTHPROPORTION_DEFERRALS = 1 ;

    return OMCalculator;

}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ 82633:
/*!*****************************************************************!*\
  !*** ./node_modules/om-js-calc/src/calc/OMCalculatorRequest.js ***!
  \*****************************************************************/
/***/ (function(module, exports) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function(){

    var OMCalculatorRequest = function(){

        //  Private var declarations ------------------------------------
        var _accountData = null ;    //  List<Or$AccountData>
        var _incomeData = null ;     //  OMIncomeData
        var _commonData = null ;     //  OMCommonData

        //  Privileged method Declarations ------------------------------------
        this.getAccountDataList = function() { return( _accountData ) ; };

        this.getIncomeDataList = function() { return( _incomeData ) ; };

        this.getCommonData = function() { return( _commonData ) ; };
        this.setCommonData = function(cd) { _commonData = cd ; };

        //  Private method Declarations ------------------------------------
        (function init() {
            _accountData = [] ;    //  new ArrayList<Or$AccountData>()
            _incomeData  = [] ;    //  new ArrayList<Or$AccountData>()
        })();
    };

    return OMCalculatorRequest;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ 90656:
/*!******************************************************************!*\
  !*** ./node_modules/om-js-calc/src/calc/OMCalculatorResponse.js ***!
  \******************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./AccountTypes */ 81939),__webpack_require__(/*! ./loan/Loan */ 34264),__webpack_require__(/*! ./util/CalcUtilities */ 29099)], __WEBPACK_AMD_DEFINE_RESULT__ = (function( AccountTypes, Loan, CalcUtilities ){

    var OMCalculatorResponse = function(){

        //  Private Variable Declarations ------------------------------------
        var _accountData          = null ;
        var _incomeData           = null ;
        var _commonData           = null ;
        var _benefitEvalResponse  = null ;

        //  Privileged method Declarations ------------------------------------
        this.getAccountDataList = function() { return( _accountData ) ; };
        this.setAccountDataList = function( lad ) { _accountData = lad ; };

        this.getIncomeDataList = function() { return( _incomeData ) ; };
        this.setIncomeDataList = function( lid ) { _incomeData = lid ; };

        this.getCommonData = function() { return( _commonData ) ; };
        this.setCommonData = function( cd ) { _commonData = cd ; };

        this.getRetireBenefitEvalResponse = function() { return( _benefitEvalResponse ) ; };
        this.setRetireBenefitEvalResponse = function( ber ) { _benefitEvalResponse = ber ; };

        this.getLoans = function( type ) {
            var _loans = new Array() ;
            var _loan = null ;

            for( var i = 0; i < _accountData.length; i++ ) {
                var ad = _accountData[i] ;
                _loan = null ;
                if( ( type == ad.getType() ) ) {
                    _loan = ad.getLoan() ;
                    if( _loan != null ) {
                        _loans.push( _loan ) ;
                    }
                }
            }

            return( _loans ) ;
        };


        this.getLoanBalanceAtRetirement = function( type ) {
            var balance = 0.0 ;
            var loan = null ;

            for( var i = 0; i < _accountData.length; i++ ) {
                var ad = _accountData[i] ;
                loan = null ;
                if( ( type == ad.getType() ) ) {
                    loan = ad.getLoan() ;
                    if( loan != null ) {
                        balance += loan.getBalance(
                            CalcUtilities.getSerialIndexFromPeriodAndMode(
                                Math.max( _benefitEvalResponse.getYearsToRetire() - 1, 0 ),
                                Math.max( ad.getFrequency() - 1, 0 ),
                                ad.getFrequency()
                            )
                        ) ;
                    }
                }
            }

            return( CalcUtilities.roundAndTruncate( balance, 2 ) ) ;
        };



        this.getTotalStartingBalance = function( excludedType ) {
            var retValue = 0.0 ;

            for (var i = 0; i < _accountData.length; i++) {
                var ad = _accountData[i];
                if( ( excludedType != ad.getType() ) ) {
                    retValue += ad.getBalance() ;
                }
            }

            return( retValue ) ;
        };

    };

    return OMCalculatorResponse;

}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ 20409:
/*!*******************************************************************!*\
  !*** ./node_modules/om-js-calc/src/calc/OMDateTierErMatchData.js ***!
  \*******************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./OMStandardErMatchData */ 72390), __webpack_require__(/*! ./Utilities */ 44387)], __WEBPACK_AMD_DEFINE_RESULT__ = (function(OMStandardErMatchData, Utilities){

    //  Constructor
    var OMDateTierErMatchData  = Utilities.extend(OMStandardErMatchData, function(){

        //  Private var Declarations ------------------------------------
        var that = this;
        var _tier1Date = "" ;
        var _tier2Date = "" ;

        //  Privileged method Declarations ------------------------------------
        this.getTier1Date = function( ) { return( _tier1Date ) ; };
        this.setTier1Date = function( s ) { _tier1Date = s ; };

        this.getTier2Date = function( ) { return( _tier2Date ) ; };
        this.setTier2Date = function( s ) { _tier2Date = s ; };

        (function init() { that.setType( OMStandardErMatchData.DATETIER ) ; })();
    });

    return OMDateTierErMatchData;

}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ 11406:
/*!***********************************************************!*\
  !*** ./node_modules/om-js-calc/src/calc/OMErMatchData.js ***!
  \***********************************************************/
/***/ (function(module, exports) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function(){

    //  Constructor
    var OMErMatchData = function(){

        //  Private var declarations ------------------------------------
        var _type = OMErMatchData.UNDEFINED ;
        var _id = OMErMatchData.ID_0 ;
        var _name = "" ;
        var _includeInCalculation = true;

        //  Privileged Method declarations ------------------------------------
        this.getType = function( ) { return( _type ); };
        this.setType = function( n ) { _type = n  ; };

        this.getID = function( ) { return( _id ); };
        this.setID = function( n ) { _id = ( n > -1 && n <= OMErMatchData.ID_5 ) ? n : OMErMatchData.ID_0 ; };

        this.getName = function( ) { return( _name ); };
        this.setName = function( s ) { _name = s  ; };

        this.includeInCalculation = function(include){
            if(include !== undefined){
                _includeInCalculation = include;
            }
            return _includeInCalculation;
        };

    };

    //  Static Method declarations ------------------------------------
    OMErMatchData.UNDEFINED = -1 ;
    OMErMatchData.STANDARD = 0 ;
    OMErMatchData.DATETIER = 1 ;
    OMErMatchData.PROFITSH = 2 ;
    OMErMatchData.CUSTOM  = 3 ;
    OMErMatchData.MANDATORY = 4 ;

    OMErMatchData.ID_NONE  = -1 ;
    OMErMatchData.ID_0  = 0 ;
    OMErMatchData.ID_1  = 1 ;
    OMErMatchData.ID_2  = 2 ;
    OMErMatchData.ID_3  = 3 ;
    OMErMatchData.ID_4  = 4 ;
    OMErMatchData.ID_5  = 5 ;

    OMErMatchData.STANDARD_TIER_COUNT = 2 ;
    OMErMatchData.STANDARD_TIER_COUNT_2  = 2 ;
    OMErMatchData.STANDARD_TIER_COUNT_3  = 3 ;

    OMErMatchData.MAX_TIER_DEFAULT  = 99 ;  // default to non-tier specific
    OMErMatchData.MAX_TIER_ONE = 0 ;
    OMErMatchData.MAX_TIER_TWO = 1 ;
    OMErMatchData.MAX_TIER_1 = 0 ;
    OMErMatchData.MAX_TIER_2 = 1 ;

    return OMErMatchData;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ 47190:
/*!**********************************************************!*\
  !*** ./node_modules/om-js-calc/src/calc/OMObjFactory.js ***!
  \**********************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./OMCalculatorRequest */ 82633), __webpack_require__(/*! ./OMCalculatorResponse */ 90656), __webpack_require__(/*! ./AccountData */ 82622),
        __webpack_require__(/*! ./CommonData */ 60160), __webpack_require__(/*! ./IncomeData */ 57213),__webpack_require__(/*! ./SettleCommon */ 30409),__webpack_require__(/*! ./OMErMatchData */ 11406),
        __webpack_require__(/*! ./OMDateTierErMatchData */ 20409), __webpack_require__(/*! ./OMStandardErMatchData */ 72390), __webpack_require__(/*! ./OMValidatorResponse */ 76097),
        __webpack_require__(/*! ./MinMaxLimit */ 89382), __webpack_require__(/*! ./loan/Loan */ 34264)], __WEBPACK_AMD_DEFINE_RESULT__ = (function(OMCalculatorRequest, OMCalculatorResponse, AccountData, CommonData, IncomeData,
         SettleCommon, OMErMatchData, OMDateTierErMatchData, OMStandardErMatchData,
         OMValidatorResponse, MinMaxLimit, Loan) {

    var omObjFactory = {};

    // omObjFactory.getOMCalcWrapperInstance = function( ) {
    //     return( new OMCalcWrapper() ) ;
    // };

    omObjFactory.getOMCalculatorInstance = function( ) {
        return( new OmCalculator() ) ;
    };

    omObjFactory.getOMCalculatorRequestInstance = function( ) {
        return( new OMCalculatorRequest() ) ;
    };

    omObjFactory.getOMCalculatorResponseInstance = function( ) {
        return( new OMCalculatorResponse() ) ;
    };

    omObjFactory.getOMValidatorResponseInstance = function( ) {
        return( new OMValidatorResponse() ) ;
    };

    omObjFactory.getOMAccountDataInstance = function( ) {
        return( new AccountData() ) ;
    };

    omObjFactory.getOMCommonDataInstance = function( ) {
        return( new CommonData() ) ;
    };

    omObjFactory.getOMIncomeDataInstance = function( ) {
        return( new IncomeData() ) ;
    };

    omObjFactory.getMinMaxLimitInstance = function(){
        return( new MinMaxLimit() ) ;
    };

    omObjFactory.getLoanInstance = function(){
        return( new Loan() );
    };

    omObjFactory.getErMatchDataInstance = function( type, name ) {
        var r = null ;  //  r:OMErMatchData
        switch( type ) {
        case OMErMatchData.DATETIER :
            r = new OMDateTierErMatchData() ;
            break ;

        case OMErMatchData.MANDATORY :
            r = new OmMandatoryErMatchData() ;
            break ;

        case OMErMatchData.STANDARD :
            r = new OMStandardErMatchData() ;
            break ;

        default :
            r = new OMStandardErMatchData() ;
            break ;
        }
        return r;
    };

    omObjFactory.getSettleCommonInstance = function(){
        return( new SettleCommon() ) ;
    };

    return omObjFactory;

}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ 72390:
/*!*******************************************************************!*\
  !*** ./node_modules/om-js-calc/src/calc/OMStandardErMatchData.js ***!
  \*******************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./OMErMatchData */ 11406), __webpack_require__(/*! ./Utilities */ 44387)], __WEBPACK_AMD_DEFINE_RESULT__ = (function(OMErMatchData, Utilities){

    //  Constructor (Extends OMErMatchData)
    var OMStandardErMatchData = Utilities.extend(OMErMatchData, function(){

        //  Private Variable Declarations ------------------------------------
        var that = this;
        var _match1 = 0 ;
        var _range1 = 0 ;
        var _match2 = 0 ;
        var _range2 = 0 ;
        var _annualMax = 0 ;
        var _tierAnnualMax = OMErMatchData.MAX_TIER_DEFAULT ;

        //  Privileged Method Declarations ------------------------------------

        this.getTier1Match = function( ) { return( _match1 ) ; };
        this.setTier1Match = function(d) { _match1 = d ; };

        this.getTier1Range = function( )  { return( _range1 ) ; };
        this.setTier1Range = function(d) { _range1 = d ; };

        this.getTier2Match = function( ) { return( _match2 ) ; };
        this.setTier2Match = function(d) { _match2 = d ; };

        this.getTier2Range = function( ) { return( _range2 ) ; };
        this.setTier2Range = function(d) { _range2 = d ; };

        this.getAnnualMax  = function( ) { return( _annualMax ) ; };
        this.setAnnualMax  = function(d) { _annualMax = d ; };

        this.getTierAnnualMax = function( ) { return( _tierAnnualMax ) ; };
        this.setTierAnnualMax = function(n) { _tierAnnualMax = n ; };

        //  Private Method Declaration -----------------------------------------
        (function init() { that.setType( OMErMatchData.STANDARD ) ; } )();

    });

    return OMStandardErMatchData;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ 76097:
/*!*****************************************************************!*\
  !*** ./node_modules/om-js-calc/src/calc/OMValidatorResponse.js ***!
  \*****************************************************************/
/***/ (function(module, exports) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function(){

    //  Constructor
    var OMValidatorResponse = function(){

        //  Private Variable Declarations -------------------------------------
        var _accountDataList = null ;
        var _commonData = null ;

        //  Privileged Method Declarations ------------------------------------
        this.getAccountDataList = function() { return( _accountDataList ) ; };
        this.setAccountDataList = function( lad ) { _accountDataList = lad ; };

        this.getCommonData = function() { return( _commonData ) ; };
        this.setCommonData = function( cd ) { _commonData = cd ; };

        this.isValid = function() {
            var r = true ;
            var aList = this.getAccountDataList();
            for( var i = 0; i < aList.length; i++  ) {
                var ad = aList[i];
                if( ad.getErrorCode() === 0 ) r = false ;
            }
            return( r ) ;
        };
    };

    return OMValidatorResponse;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ 14098:
/*!********************************************************!*\
  !*** ./node_modules/om-js-calc/src/calc/ObjFactory.js ***!
  \********************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./AccumCensus */ 98611), __webpack_require__(/*! ./AccumCommon */ 92174), __webpack_require__(/*! ./SettleCommon */ 30409), __webpack_require__(/*! ./AccountAccum */ 50897), __webpack_require__(/*! ./BaseAccumulator */ 97065),
        __webpack_require__(/*! ./IncomeData */ 57213), __webpack_require__(/*! ./RetireBenefitEvalResponse */ 65177), __webpack_require__(/*! ./MinMaxLimit */ 89382)], __WEBPACK_AMD_DEFINE_RESULT__ = (function(AccumCensus, AccumCommon, SettleCommon, AccountAccum, BaseAccumulator, IncomeData,
         RetireBenefitEvalResponse, MinMaxLimit) {

    var ObjFactory = {};

    ObjFactory.getAccumCensusInstance = function( ) {
        return( new AccumCensus() ) ;
    } ;

    ObjFactory.getAccumCommonInstance = function( ) {
        return( new AccumCommon() ) ;
    };

    ObjFactory.getSettleCommonInstance = function( ) {
        return( new SettleCommon() ) ;
    };

    ObjFactory.getAccountAccumInstance = function( ) {
        return( new AccountAccum() ) ;
    };

    ObjFactory.getIncomeDataInstance = function( ) {
        return( new IncomeData() ) ;
    };

    ObjFactory.getBaseAccumulatorInstance = function( ) {
        return( new BaseAccumulator() ) ;
    };

    ObjFactory.getRetireBenefitEvalResponseInstance = function( ) {
        return( new RetireBenefitEvalResponse() ) ;
    };

    ObjFactory.getMinMaxLimitInstance = function(){
        return( new MinMaxLimit() );
    };

    return ObjFactory;

}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ 27082:
/*!***************************************************************!*\
  !*** ./node_modules/om-js-calc/src/calc/ReplacementIncome.js ***!
  \***************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./AccountTypes */ 81939), __webpack_require__(/*! ./IRSwh */ 55384), __webpack_require__(/*! ./util/CalcUtilities */ 29099), __webpack_require__(/*! ./AccumCensus */ 98611)], __WEBPACK_AMD_DEFINE_RESULT__ = (function(AccountTypes, IRSwh, CalcUtilities, AccumCensus ){

    //  Constructor
    var ReplacementIncome = function () { } ;

    ReplacementIncome.getAdjustedCurrentDollarSalary = function( type, current, years, rateOfIncrease, rateOfInflation, censusList ) { 
        var ret = 0.0 ;
        var census = null ;
        years = Math.max( years - 1, 0 ) ;  // adjust to year prior to retirement: this is the last year of salary reductions and is reference for salary manipulations

        // new default: balance increase and inflation rates to establish an at-retirement view of salary in current dollars
        ret = current * ReplacementIncome.getBalancedRate( years, rateOfIncrease, rateOfInflation ) ;

        switch( type ) {
            case ReplacementIncome.TYPE_LIFESTYLE_CURRENT :
                census = censusList[0] ;  // first object in list
                if( census != null ) {
                    ret = ReplacementIncome.getLifeStyleAdjustedSalary( census ) * ReplacementIncome.getBalancedRate( years, rateOfIncrease, rateOfInflation ) ;
                }
                break ;

            case ReplacementIncome.TYPE_LIFESTYLE_FUTURE :
                census = censusList[censusList.length - 1] ; // last object in list
                if( census != null ) {
                    ret = ReplacementIncome.getLifeStyleAdjustedSalary( census ) * CalcUtilities.discountingRate( census.getPeriodRef(), rateOfInflation ) ;
                }
                break ;

            case ReplacementIncome.TYPE_OLD :  // as done prior to 2017/07
                ret = current ;
                break ;

            case ReplacementIncome.TYPE_STANDARD :
            default :
                break ;
        }

        return( CalcUtilities.roundAndTruncate( ret, 2 ) ) ;
    } ;


    ReplacementIncome.getBalancedRate = function( years, rateOfIncrease, rateOfInflation ) {
        return( Math.pow( ( 1.0 + rateOfIncrease ), years ) * Math.pow( ( 1.0 / ( 1.0 + rateOfInflation ) ), years ) ) ;
    } ;


    ReplacementIncome.getLifeStyleAdjustedSalary = function( census ) {
        var salary = census.getSalary() ;
        var mediWh = IRSwh.getWithholding( IRSwh.MC, salary ) ;  // withholding for Medicare
        var eeContribs = census.getEEContribs() ;
        return( salary - eeContribs - mediWh ) ;
    } ;


    ReplacementIncome.getReplacementIncomeCalcType = function( typeText ) {
        var ret = ReplacementIncome.TYPE_STANDARD ;
        var s = "" ;
        
        if( typeof( typeText ) === 'string' ) {
            s = typeText.toUpperCase().trim() ;
        }

        if( s.indexOf( "CURRENT" ) > -1 ) {
            ret = ReplacementIncome.TYPE_LIFESTYLE_CURRENT ;
        }
        else {
            if( s.indexOf( "FUTURE" ) > -1 ) {
                ret = ReplacementIncome.TYPE_LIFESTYLE_FUTURE ;
            }
            else {
                if( s.indexOf( "OLD" ) > -1 ) {
                    ret = ReplacementIncome.TYPE_OLD ;
                }
            }
        }

        return( ret ) ;
    } ;



    ReplacementIncome.TYPE_STANDARD           = 0 ;  // default (cf. next description)
    ReplacementIncome.TYPE_BALANCED           = 0 ;  // (default) current salary adjusted by both increase and inflation rates to produce current dollars (orienting to future purchasing power)
    ReplacementIncome.TYPE_LIFESTYLE_CURRENT  = 1 ;  // LA "LifeStyle" salary definition captured for current (first) year, then adjusted as above
    ReplacementIncome.TYPE_LIFESTYLE_FUTURE   = 2 ;  // LA "LifeStyle" salary definition captured in year prior to retirement (the last year of salary and reductions), then adjusted by inflation
    ReplacementIncome.TYPE_OLD                = 9 ;  // current salary remains unadjusted (today's behavior)


    // account types that define "Life Style" salary
    ReplacementIncome.LifeStyleTypes = [
        AccountTypes.TYPE_DB_MANDATORY_EE
        , AccountTypes.TYPE_MANDATORY_EE
        , AccountTypes.TYPE_PRETAX
        , AccountTypes.TYPE_ROTH
        , AccountTypes.TYPE_SUPPL_PRETAX
        , AccountTypes.TYPE_SUPPL_ROTH
        , AccountTypes.TYPE_PRETAX_AGECATCHUP
        , AccountTypes.TYPE_ROTH_AGECATCHUP
        , AccountTypes.TYPE_AFTERTAX
        , AccountTypes.TYPE_SUPPL_AFTERTAX
    ] ;

    return ReplacementIncome ;

}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ 65177:
/*!***********************************************************************!*\
  !*** ./node_modules/om-js-calc/src/calc/RetireBenefitEvalResponse.js ***!
  \***********************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./util/CalcUtilities */ 29099)], __WEBPACK_AMD_DEFINE_RESULT__ = (function(CalcUtilities){

    //  Constructor
    var RetireBenefitEvalResponse = function(){

        //  Private var declarations ------------------------------------
        var _estFromDCBalance        = 0 ;
        var _estFromEmployee         = 0 ;
        var _estFromEmployer         = 0 ;
        var _estFromSocialSecurity   = 0 ;
        var _estFromPension          = 0 ;
        var _estFromPensionAsIncome  = 0 ;
        var _estFromOther            = 0 ;
        var _estFromIncome           = 0 ;

        var _fromNewLoanBalanceImpact  = 0 ;
        var _fromNewLoanRepayment      = 0 ;
        var _fromExistingLoanRepayment = 0 ;

        var _annuityRate = 0 ;
        var _inflationDiscount = 0 ;
        var _yearsToRetire = 0 ; // accumulation years

        var _monthlySalaryReplacement = 0.0 ; // adjusted and monthly replacement salary

        // 170530
        var _replacementRatio = 0.0 ;
        var _currentAnnualSalary = 0.0 ;  // original salary
        // 170612
        var _loanContribDropValue = 0.0 ;  // benefit value drop (or difference) from stopping contributions to account with modeled loan 
        var _adjustedAnnualSalary = 0.0 ; 


        //  Privileged Method Declarations ------------------------------------
        this.getInflationDiscount = function( ) { return( _inflationDiscount ) ; };
        this.setInflationDiscount = function( d ) { _inflationDiscount = d ; };

        this.getAnnuityRate = function( ) { return( _annuityRate ) ; };
        this.setAnnuityRate = function( d ) { _annuityRate = d ; };

        this.getYearsToRetire = function( ) { return( _yearsToRetire ) ; };
        this.setYearsToRetire = function( n ) { _yearsToRetire = n ; };

        this.getReplacementRatio = function( ) { return( _replacementRatio ) ; } ;
        this.setReplacementRatio = function( d ) { _replacementRatio = d ; } ;

        this.getCurrentAnnualSalary = function( ) { return( _currentAnnualSalary ) ; } ;
        this.setCurrentAnnualSalary = function( d ) { _currentAnnualSalary = d ; } ;

        this.getAdjustedAnnualSalary = function( ) { return( _adjustedAnnualSalary ) ; } ;
        this.setAdjustedAnnualSalary = function( d ) { _adjustedAnnualSalary = d ; } ;


        this.getMonthlyEstimateFromDCBalance = function( ) { return( _estFromDCBalance ) ; };
        this.setMonthlyEstimateFromDCBalance = function(d) { _estFromDCBalance = d ; };

        this.getMonthlyEstimateFromEmployee = function( ) { return( _estFromEmployee ) ; };
        this.setMonthlyEstimateFromEmployee = function(d) { _estFromEmployee = d ; };

        this.getMonthlyEstimateFromEmployer = function( ) { return( _estFromEmployer ) ; };
        this.setMonthlyEstimateFromEmployer = function(d) { _estFromEmployer = d ; };

        this.getMonthlyEstimateFromSocialSecurity = function( ) { return( _estFromSocialSecurity ) ; };
        this.setMonthlyEstimateFromSocialSecurity = function(d) { _estFromSocialSecurity = d ; };

        this.getMonthlyEstimateFromPension = function( ) { return( _estFromPension ) ; };
        this.setMonthlyEstimateFromPension = function(d) { _estFromPension = d ; };

        this.getMonthlyEstimateFromPensionAsIncome = function( ) { return( _estFromPensionAsIncome ) ; };
        this.setMonthlyEstimateFromPensionAsIncome = function( d ) { _estFromPensionAsIncome = d ; };

        this.getMonthlyEstimateFromOther = function( ) { return( _estFromOther ) ; };
        this.setMonthlyEstimateFromOther = function(d) { _estFromOther = d ; };

        this.getMonthlyEstimateFromIncome = function( ) { return( _estFromIncome ) ; };
        this.setMonthlyEstimateFromIncome = function(d) { _estFromIncome = d ; };

        this.getMonthlySalaryReplacementRequirement = function( ) { return( _monthlySalaryReplacement ) ; };
        this.setMonthlySalaryReplacementRequirement = function(d) { _monthlySalaryReplacement = d ; };

        this.getLoanContribDropValue = function( ) { return( _loanContribDropValue ) ; } ;
        this.setLoanContribDropValue = function( d ) { _loanContribDropValue = d ; } ;

        this.getMonthlyEstimateFromExistingLoanRepayment = function( ) { return( _fromExistingLoanRepayment ) ; };
        this.setMonthlyEstimateFromExistingLoanRepayment = function( d ) { _fromExistingLoanRepayment = d ; };

        this.getMonthlyEstimateFromNewLoanRepayment = function( ) { return( _fromNewLoanRepayment ) ; };
        this.setMonthlyEstimateFromNewLoanRepayment = function( d ) { _fromNewLoanRepayment = d ; };

        this.getMonthlyEstimateFromNewLoanBalanceImpact = function( ) { return( _fromNewLoanBalanceImpact ) ; };
        this.setMonthlyEstimateFromNewLoanBalanceImpact = function( d ) { _fromNewLoanBalanceImpact = d ; };


        this.getSumOfMonthlySources = function( ) {
            var _sum = 0.0 ;

            _sum += (
                _estFromDCBalance
                + _estFromEmployee
                + _estFromEmployer
                + _estFromSocialSecurity
                + _estFromPensionAsIncome
                + _estFromPension
                + _estFromOther
                + _estFromIncome
// do NOT include loan impact
//              + _fromNewLoanBalanceImpact  // exclude modelled loan by default
//              + _fromNewLoanRepayment      // exclude modelled loan by default
//              + _fromExistingLoanRepayment  // include existing loan by default
            ) ;

            return( CalcUtilities.roundAndTruncate( _sum, 2 ) ) ;
        };

        this.getMonthlyGap = function( ) {
            return( Math.max( CalcUtilities.roundAndTruncate( this.getMonthlySalaryReplacementRequirement(), 2) - CalcUtilities.roundAndTruncate( this.getSumOfMonthlySources(), 2 ), 0 ) ) ;
        };

        this.getReplacementScore = function( ) {
            var required = this.getMonthlySalaryReplacementRequirement() ;
            var sumOfSources = this.getSumOfMonthlySources( ) ;
            return( ( required !== 0 ) ? Math.max( CalcUtilities.roundAndTruncate( sumOfSources / required, 5 ), 0 ) : 0 ) ;
        };


        //  Private method declarations ------------------------------------
        (function init( ) {
            _estFromDCBalance =
            _estFromEmployee =
            _estFromEmployer =
            _estFromSocialSecurity =
            _estFromPension =
            _estFromPensionAsIncome =
            _estFromOther =
            _estFromIncome =
            _monthlySalaryReplacement

            = _fromNewLoanBalanceImpact
            = _fromNewLoanRepayment
            = _fromExistingLoanRepayment

            = _annuityRate
            = _inflationDiscount

            = _replacementRatio
            = _currentAnnualSalary
            = _adjustedAnnualSalary

            = _loanContribDropValue
            = 0 ;
        })();

    };

    return RetireBenefitEvalResponse;

}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ 30409:
/*!**********************************************************!*\
  !*** ./node_modules/om-js-calc/src/calc/SettleCommon.js ***!
  \**********************************************************/
/***/ (function(module, exports) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function(){

    //  Constructor
    var SettleCommon = function(){

        //  Private Variable Declarations ------------------------------------
        var _ssIndicator        = true ;
        var _currentAge         = 35 ;
        var _retireAge          = 67 ;
        var _rateOfInflation    = 0.0246 ;
        var _rateOfReturn       = 0.0 ;
        var _replacementRatio   = 1.0 ;

        //  Privileged Method Declarations ------------------------------------
        this.setSSIndicator = function( b ) { _ssIndicator = b ; } ;
        this.doSocialSecurity = function( ) { return( _ssIndicator ) ; } ;

        this.setCurrentAge = function( n ) { _currentAge = n ; } ;
        this.getCurrentAge = function( )   { return( _currentAge ) ; } ;

        this.setRetireAge = function( n ) { _retireAge = n ; } ;
        this.getRetireAge = function( )   { return( _retireAge ) ; } ;

        this.setRateOfInflation = function( d ) { _rateOfInflation = d ; } ;
        this.getRateOfInflation = function( )   { return( _rateOfInflation ) ; } ;

        this.setRateOfReturn = function( d ) { _rateOfReturn = d ; } ;
        this.getRateOfReturn = function( )   { return( _rateOfReturn ) ; } ;

        this.setReplacementRatio = function( d ) { _replacementRatio = d ; } ;
        this.getReplacementRatio = function( )   { return( _replacementRatio ) ; } ;


    var _currentYear   = 2018 ;
    this.setCurrentYear = function( n ) { _currentYear = n ; } ;
    this.getCurrentYear = function( )        { return( _currentYear ) ; } ;

    var _ssBenefitAge   = 67 ;
    this.setSSBenefitAge = function( n ) { _ssBenefitAge = n ; } ;
    this.getSSBenefitAge = function( )        { return( this.ssBenefitAge ) ; } ;

    var _currentAnnualSalary = 30000.0 ;
    this.setCurrentAnnualSalary = function( d ) { _currentAnnualSalary = d ; } ;
    this.getCurrentAnnualSalary = function( ) { return( _currentAnnualSalary ) ; } ;

    var _spiaMonthlyValuePer1000 = 6.22 ;
    this.setSpiaMonthlyValuePer1000 = function( d ) { _spiaMonthlyValuePer1000 = d ; } ;
    this.getSpiaMonthlyValuePer1000 = function( ) { return( _spiaMonthlyValuePer1000 ) ; } ;

    var _rateOfWithholding  = 0.0 ;
    this.setRateOfWithholding = function( d ) { _rateOfWithholding = d ; } ;
    this.getRateOfWithholding = function( )   { return( _rateOfWithholding ) ; } ;

    // 170530 LA etc
    var _rateOfRothBump = 0.3 ;
    this.setRateOfRothBump = function( d ) { _rateOfRothBump = d ; } ;
    this.getRateOfRothBump = function() { return( _rateOfRothBump ) ; } ;

    var _replacementIncomeType = 0 ;
    this.setReplacementIncomeType = function( n ) { _replacementIncomeType = n ; } ;
    this.getReplacementIncomeType = function() { return( _replacementIncomeType ) ; } ;

    var _rateOfIncrease = 0.0343 ;   // salary and contribution increase--more for accumulation than settlement
    this.getRateOfIncrease = function( ) { return( _rateOfIncrease ) ; } ;
    this.setRateOfIncrease = function( d ) { _rateOfIncrease = d ; } ;


    };

    return SettleCommon;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ 44387:
/*!*******************************************************!*\
  !*** ./node_modules/om-js-calc/src/calc/Utilities.js ***!
  \*******************************************************/
/***/ (function(module, exports) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function(){

	var Utilities = {};
    /**
     * class creator
     * @param  {function} Parent parent function
     * @param  {function} Child  child function
     * @return {function}        constructor for child function
     */
    Utilities.extend = function(Parent, Child){
        var constructor =  function(){
            Child.prototype = new Parent();
            Child.prototype.constructor = Child;


            //pass any prototype extended functions created after the extend 
            //to the new class object
            var constructedClass = new Child;
            for(var i in constructor.prototype)
            {
                constructedClass[i] = constructor.prototype[i];
            }
            return constructedClass;
        };

        //pass any public parent or child variables to the constructor
        for(var i in Parent)
        {
            constructor[i] = Parent[i];
        }
        for(var i in Child)
        {
            constructor[i] = Child[i];
        }

        return constructor;
    };

	return Utilities;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ 19042:
/*!*******************************************************************************!*\
  !*** ./node_modules/om-js-calc/src/calc/annuityRate/AnnuityMonthlyBenefit.js ***!
  \*******************************************************************************/
/***/ (function(module, exports) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function(){


	var AnnuityMonthlyBenefit = function(){

        //  Private Instance declarations --------------------------------------
		function init(){

			for( var n = 0 ; n < _values.length ; n ++ ) { _values[n] = 0.0 ; }

			_values[0] = new Date().getTime()  ;
		}

        //  Privileged Method Declarations --------------------------------

		this.reset = function( _in ) {
			if( _in !== null ) {
				for( var n = 0 ; n < _in.length ; n ++ ) { _values[n] = _in[n] ; }
			}
			var now = new Date() ;
			_values[0] = now.getTime();
		};

		this.test = function( ) {
			var b = false ;
			var now = new Date() ;
			if( ( ( now.getTime() - _values[0] ) < ( 86400000.0 * 30.0 ) ) && ( _values[67] > 0.0 ) ) { b = true ; }
			return( b ) ;
		};

		this.get = function(age) {
			var retValue = 0 ;
			age = Math.min( _values.length - 1, age ) ;
			retValue = _values[age] ;

			return( retValue ) ;
		};

		this.set = function( age, d ) {
			age = Math.min( _values.length - 1, age ) ;
			_values[age] = d ;
		};

		init();
	};


	//	Private Class variable  -------------------------------------------
	var _values = new Array(AnnuityMonthlyBenefit.MAXVALUES);
	var _instance = new AnnuityMonthlyBenefit();
	AnnuityMonthlyBenefit.MAXVALUES = 101 ;
	//AnnuityMonthlyBenefit.MINVALUES = 10 ;

    //  Static method declarations ------------------------------------

    AnnuityMonthlyBenefit.getInstance = function(){
		return _instance;
    };

	AnnuityMonthlyBenefit.setMultiple = function ( d ) {
		for( var i = 0 ; i < d.length ; i++ ) {
			_values[d[i].age] = d[i].factor ;
		}
	};

	return AnnuityMonthlyBenefit;

}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ 34264:
/*!*******************************************************!*\
  !*** ./node_modules/om-js-calc/src/calc/loan/Loan.js ***!
  \*******************************************************/
/***/ (function(module, exports) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {

    //  Constructor
    var Loan = function() {
        var that = this;
        this.__ALIGNED = false ;
        this._loanId = "" ;
        this._loanType = Loan.LOANTYPE_GENERAL ;
        this._orientation = Loan.ORIENTATION_MONTHLY ;  // the orientation of term, that is, term is expressed in x increments per annum (default is monthly or 12)
        this._term = 1 ;  // the loan term according to "orientation" (term in monthly orientation = num of months repayment)
        this._frequency = this._orientation ;  // the actual payment frequency of participant; default is per orientation
        this._numOfPayments = 0 ;  // the total number of payments to term
        this._appliedPrincipal = null ; // array
        this._appliedInterest = null ; // array
        this._remainingPrincipal = null ; // array
        this._remainingInterest = null ; // array
        this._payment = null ; // array
        this._originatingLoanAmount = 0. ;
        this._functionalLoanAmount = 0. ;
        this._specifiedPayment = 0. ;
        this._initialFee = 0. ;
        this._annualFee = 0. ;
        this._totalPrincipal = 0. ;
        this._totalPayments = 0. ;
        this._totalInterest = 0. ;
        this._totalAnnualFees = 0. ;
        this._daysOfUpFrontInterest = 0 ;
        this._rate = 0. ;  // annual
        this._solveType = Loan.LOANSOLVEFOR_NONE ;
        this._interestType = Loan.INTEREST_TYPE_SIMPLE ;

        this.initPaymentInstance = function(orientation, annualRate, paymentFrequency, term, loanAmount) {
            this.setOrientation( orientation ) ;
            this.setRate( annualRate ) ;
            this.setFrequency( paymentFrequency ) ;
            this.setTerm( term ) ;
            this.setLoanAmount( loanAmount ) ;
            this.setSolveType( Loan.LOANSOLVEFOR_PAYMENT ) ;
            this.markNotAligned() ;
        };

        this.initTermInstance = function(orientation, annualRate, paymentFrequency, loanAmount, payment) {
            this.setOrientation( orientation ) ;
            this.setRate( annualRate ) ;
            this.setFrequency( paymentFrequency ) ;
            this.setLoanAmount( loanAmount ) ;
            this.setSpecifiedPayment( payment ) ;
            this.setSolveType( Loan.LOANSOLVEFOR_TERM ) ;
            this.markNotAligned() ;
        };

        this.initLoanAmountInstance = function(orientation, annualRate, paymentFrequency, term, payment) {
            this.setOrientation( orientation ) ;
            this.setRate( annualRate ) ;
            this.setTerm( term ) ;
            this.setFrequency( paymentFrequency ) ;
            this.setSpecifiedPayment( payment ) ;
            this.setSolveType( Loan.LOANSOLVEFOR_AMOUNT ) ;
            this.markNotAligned() ;
        };

        this.initPaymentInstanceForExistingLoan = function(orientation, annualRate, paymentFrequency, existingLoanBalanceAmount, daysDiff) {
            this.setOrientation( orientation ) ;
            this.setRate( annualRate ) ;
            this.setFrequency( paymentFrequency ) ;
            this.setTerm( Loan.duration( daysDiff, orientation, Loan.ORIENTATION_DAYLY )); //this.setTerm( term ) ;
            this.setLoanAmount( existingLoanBalanceAmount ) ;
            this.setSolveType( Loan.LOANSOLVEFOR_PAYMENT ) ;
            this.markNotAligned() ;
        };

        
        // Begin Setter methods
        this.setLoanType = function( n ) {
            this._loanType = n ;
        };

        this.setLoanId = function( s ) {
            this._loanId = s ;
        };

        this.setLoanAmount = function( d ) {
            if( this._solveType == Loan.LOANSOLVEFOR_AMOUNT ) {
                this.markNotAligned() ;
                this._solveType = Loan.LOANSOLVEFOR_PAYMENT ;
            }

            if( d != this._originatingLoanAmount ) {
                this.markNotAligned() ;
                this._originatingLoanAmount = d ;
            }
        };

        this.setSpecifiedPayment = function( d ) {
            if( this._solveType == Loan.LOANSOLVEFOR_PAYMENT ) {
                this.markNotAligned() ;
                this._solveType = Loan.LOANSOLVEFOR_AMOUNT ;
            }

            if( d != this._specifiedPayment ) {
                this.markNotAligned() ;
                this._specifiedPayment = d ;
            }
        };

        this.setPayment = function( n, d ) {
            align() ;
            this._solveType = Loan.LOANSOLVEFOR_NONE ;

            if( ( n > -1 ) && ( n < this._payment.length ) ) {
                if( d != this.payment[n] ) {
                    this.markNotAligned() ;
                    this.payment[n] = d ;
                }
            }
        };


        this.setDaysOfUpFrontInterest = function( n ) {
            if( n != this._daysOfUpFrontInterest ) {
                this.markNotAligned() ;
                this._daysOfUpFrontInterest = Math.max( n, 0 ) ;
            }
        } ;


        this.setOrientation = function(n) {
            if( n != this._orientation ) {
                this.markNotAligned() ;
                if( n < 1 ) {
                    this._orientation = 1 ;
                }
                else {
                    this._orientation = n ;
                }
            }
        };

        this.setFrequency = function( n ) {
            if( n != this._frequency ) {
                this.markNotAligned() ;
                if( n < 1 ) {
                    this._frequency = 1 ;
                }
                else {
                    this._frequency = n ;
                }
            }
        };

        this.setTerm = function( n ) {
            if( this._solveType == Loan.LOANSOLVEFOR_TERM ) {
                this.markNotAligned() ;
                this._solveType = Loan.LOANSOLVEFOR_PAYMENT ;
            }

            if( n != this._term ) {
                this.markNotAligned() ;
                if( n < 1 ) {
                    this._term = 1 ;
                }
                else {
                    this._term = n;
                }
            }
        };

        this.setRate = function ( d ) {
            if( d != this._rate ) {
                this.markNotAligned() ;
                this._rate = d ;
            }
        };

        this.setInitialFee = function( d ) {
            if( d != this._initialFee ) {
                this.markNotAligned() ;
                this._initialFee = d ;
            }
        };

        this.setAnnualFee = function( d ) {
            if( d != this._annualFee ) {
                this.markNotAligned() ;
                this._annualFee = d ;
            }
        };

        this.setInterestType = function( n ) {
            if( n != this._interestType ) {
                this.markNotAligned() ;
                this._interestType = n ;
            }
        };

        this.setInterestTypeToAER = function() {
            if( Loan.INTEREST_TYPE_AER != this._interestType ) {
                this.markNotAligned() ;
                this._interestType = Loan.INTEREST_TYPE_AER ;
            }
        };

        this.setInterestTypeToSimple = function() {
            if( Loan.INTEREST_TYPE_SIMPLE != this._interestType ) {
                this.markNotAligned() ;
                this._interestType = Loan.INTEREST_TYPE_SIMPLE ;
            }
        };
        // End Setter methods

        // Begin Getter methods
        this.getLoanType = function( ) {
            return( this._loanType ) ;
        };

        this.getLoanId = function( ) {
            return( this._loanId ) ;
        };

        this.getNumOfPayments = function( ) {
            align(); 
            return( this._numOfPayments ) ; 
        };

        this.getOrientation = function( ) {
            return( this._orientation ) ; 
        };

        this.getOrientationAsLabel = function() {
            return( Loan.modeToLabel( this._orientation ) ) ;
        };

        this.getTerm = function( ) {
            align(); 
            return( this._term ) ;
        };

        this.getRate = function( ) {
            return( this._rate ) ; 
        };

        this.getTotalFees = function( ) {
            align(); 
            return( Loan.roundAndTruncate( this._initialFee, 2 ) + Loan.roundAndTruncate( this._totalAnnualFees, 2 ) ) ;
        };

        this.getTotalAnnualFees = function( ) {
            align(); 
            return( Loan.roundAndTruncate( this._totalAnnualFees, 2 ) ) ;
        };

        this.getTotalPrincipal = function( ) {
            align(); 
            return( Loan.roundAndTruncate( this._totalPrincipal, 2 ) ) ;
        };

        this.getTotalInterest = function( ) {
            align(); 
            //return( Loan.roundAndTruncate( this._totalInterest, 2 ) ) ;
            return( Loan.roundAndTruncate( this._totalPayments - this._totalPrincipal, 2 ) ) ;
        };

        this.getTotalPayments = function( ) {
            align(); 
            return( Loan.roundAndTruncate( this._totalPayments, 2 ) ) ;
        };

        this.getTotalCost = function( ) {
            align(); 
            return( Loan.roundAndTruncate( this.getTotalFees() + this.getTotalInterest() + this.getTotalPrincipal(), 2 ) ) ;
        };

        this.getDaysOfUpFrontInterest = function( ) {
            return( this._daysOfUpFrontInterest ) ;
        };

        this.getRemainingPrincipal = function( p ) {
            align() ;
            var d = ( ( p > -1 ) && ( p < this._remainingPrincipal.length ) ) ? this._remainingPrincipal[p] : 0.0 ;
            return( d ) ;
        };

        this.getRemainingInterest = function( p ) {
            align() ;
            var d = ( ( p > -1 ) && ( p < this._remainingInterest.length ) ) ? this._remainingInterest[p] : 0.0 ;
            return( d ) ;
        };

        this.getAppliedPrincipal = function( p ) {
            align() ;
            var d = ( ( p > -1 ) && ( p < this._appliedPrincipal.length ) ) ? this._appliedPrincipal[p] : 0.0 ;
        };

        this.getAppliedInterest = function( p ) {
            align() ;
            var d = ( ( p > -1 ) && ( p < this._appliedInterest.length ) ) ? this._appliedInterest[p] : 0.0 ;
            return( d ) ;
        };

        this.getPayment = function( p ) {
            align() ;
            var d = ( ( p > -1 ) && ( p < this._payment.length ) ) ? this._payment[p] : 0.0 ;
            return( d ) ;
        };

        this.getYear = function( p ) {  // year index
            return( ( this._frequency != 0 ) ? Math.floor( p / this._frequency ) : 0 ) ;
        };

        this.getBalance = function( p ) {
            return( this.getRemainingPrincipal( p ) + this.getRemainingInterest( p ) ) ;
        };

        this.getLoanAmount = function() {
            align(); 
            return( this._originatingLoanAmount ) ;
        };

        this.getFunctionalLoanAmount = function() {
            align(); 
            return( this._functionalLoanAmount ) ;
        };

        this.getSpecifiedPayment = function() {
            align(); 
            return( this._specifiedPayment ) ;
        };

        this.getInitialFee = function() {
            return( this._initialFee ) ;
        };

        this.getAnnualFee = function() {
            return( this._annualFee ) ;
        };

        this.getFrequency = function() {
            return( this._frequency ) ;
        };

        this.getFrequencyAsLabel = function() {
            return( Loan.modeToLabel( this._frequency ) ) ;
        };

        this.getInterestType = function() {
            return( this._interestType ) ;
        };
        // End Getter methods

        // Begin dirty check
        this.aligned = function() {
            return( this.__ALIGNED ) ; 
        };

        this.notAligned = function() {
            return( !this.__ALIGNED ) ; 
        };

        this.markNotAligned = function() {
            this.__ALIGNED = false ; 
        };

        this.markAligned = function() {
            this.__ALIGNED = true ; 
        };

        this.setSolveType = function( n ) {
            that._solveType = n ;
        };
        // End dirty check

        // Other methods
        function align() {
            if( that.notAligned() ) {
                var modalRate = Loan._getModalRate( that._frequency, that._rate, that._interestType ) ;
                var dailyRate = Loan._getModalRate( Loan.ORIENTATION_DAYLY, that._rate, Loan.INTEREST_TYPE_AER ) ;

                // modify for up front interest
                that._functionalLoanAmount = that._originatingLoanAmount + Loan.roundAndTruncate( that._originatingLoanAmount * ( Math.pow( ( 1.0 + dailyRate ), that._daysOfUpFrontInterest ) - 1.0 ), 2 ) ;

                switch( that._solveType ) {
                    case Loan.LOANSOLVEFOR_TERM :
                        that._numOfPayments = Loan.roundAndTruncate( Loan.term( that._specifiedPayment, modalRate, that._functionalLoanAmount ), 0 ) ;
                        if( isNaN( that._numOfPayments ) ) {
                            that._numOfPayments = that._frequency * 50 ;  // place holder number of years when specified payment is zero
                            //that._specifiedPayment = 0 ;
                        }
                        that._term = Loan.duration( that._numOfPayments, that._orientation, that._frequency ) ;

                        that._payment = new Array(that._numOfPayments) ;
                        for( var n = 0 ; n < that._numOfPayments ; n++ ) { that._payment[n] = that._specifiedPayment ; }

                        break ;
                    case Loan.LOANSOLVEFOR_PAYMENT :
                        that._numOfPayments = Loan.numOfPayments( that._term, that._orientation, that._frequency ) ;
                        var temp = Loan.payment( that._functionalLoanAmount, modalRate, that._numOfPayments ) ;

                        // n.b. for matching pweb...
                        that._specifiedPayment = Loan.specialRoundAndTruncate( temp, 2 ) ;

                        that._payment = new Array(that._numOfPayments) ;
                        for( var n = 0 ; n < that._numOfPayments ; n++ ) { that._payment[n] = that._specifiedPayment ; }

                        break ;
                    case Loan.LOANSOLVEFOR_AMOUNT :
                        that._numOfPayments = Loan.numOfPayments( that._term, that._orientation, that._frequency ) ;
                        that._functionalLoanAmount = Loan.roundAndTruncate( Loan.loanAmount( that._specifiedPayment, modalRate, that._numOfPayments ), 2 ) ;

                        // modify for up front interest
                        that._originatingLoanAmount = Loan.roundAndTruncate( that._functionalLoanAmount * ( Math.pow( ( 1.0 / ( 1.0 + dailyRate ) ), that._daysOfUpFrontInterest ) ), 2 ) ;

                        that._payment = new Array(that._numOfPayments) ;
                        for( var n = 0 ; n < that._numOfPayments ; n++ ) { that._payment[n] = that._specifiedPayment ; }

                        break ;
                    case Loan.LOANSOLVEFOR_NONE :
                        break ;
                }

                that._remainingPrincipal = new Array(that._numOfPayments) ;
                that._remainingInterest = new Array(that._numOfPayments) ;

                that._appliedPrincipal = new Array(that._numOfPayments) ;
                that._appliedInterest = new Array(that._numOfPayments) ;

                that._totalPrincipal = 0.0 ;
                that._totalPayments = 0.0 ;
                that._totalInterest = 0.0 ;
                that._totalAnnualFees = 0.0 ;

                var tPrincipal = 0. ;
                var tInterest = 0. ;
                var tPayment = 0. ;

                for( var n = 0 ; n < that._numOfPayments ; n++ ) {
                    //
                    tPrincipal = ( n == 0 ) ? that._functionalLoanAmount : that._remainingPrincipal[n - 1] ;
                    tInterest = ( n == 0 ) ? 0. : that._remainingInterest[n - 1] ;
                    tPayment = that._payment[n] ;

                    // establish interest
                    tInterest += ( ( tInterest + tPrincipal ) * modalRate ) ; // n.b.

                    if( tInterest > tPayment ) {
                        that._appliedInterest[n] = tPayment ;
                        that._appliedPrincipal[n] = 0. ;
                        that._remainingInterest[n] = ( tInterest - tPayment ) ;
                        that._remainingPrincipal[n] = tPrincipal ;
                    }
                    else {
                        tPrincipal -= ( tPayment - tInterest ) ;
                        that._appliedInterest[n] = tInterest ;
                        that._remainingInterest[n] = 0. ;
                        if( tPrincipal < 0. ) {
                            that._appliedPrincipal[n] = ( tPayment - tInterest ) + tPrincipal ;
                            that._appliedInterest[n] += tPrincipal ;
                            that._remainingPrincipal[n] = 0. ;
                        }
                        else {
                            that._appliedPrincipal[n] = ( tPayment - tInterest ) ;
                            that._remainingPrincipal[n] = tPrincipal ;
                            if( n == ( that._numOfPayments - 1 ) ) {
                                that._appliedPrincipal[n] += that._remainingPrincipal[n] ;
                                that._remainingPrincipal[n] = 0. ;
                            }
                        }
                    }

                    that._totalPrincipal += that._appliedPrincipal[n] ;
                    that._totalPayments += that._payment[n] ;
                    that._totalInterest += that._appliedInterest[n] ;
                    that._totalAnnualFees += ( ( ( n % that._frequency ) == 0 ) && ( n > 0 ) ) ? that._annualFee : 0. ;
                }

                that.markAligned() ;
            }
        };
    };

        Loan.payment = function( amount, rate, duration ) {
            return( amount * ( rate / ( 1.0 - Math.pow( ( 1.0 + rate ), ( duration * -1. ) ) ) ) ) ;
            //equivalent  return( amount * ( rate / ( 1.0 - ( 1.0 / Math.pow ( 1.0 + rate, duration ) ) ) ) ) ;
        };

        Loan.loanAmount = function( payment, rate, duration ) {
            return( payment * ( ( 1.0 - Math.pow( ( 1.0 + rate ), ( duration * -1. ) ) ) / ( rate ) ) ) ;
            //NOT equivalent!!  return( payment / rate / ( 1.0 - ( 1.0 / Math.pow( 1.0 + rate, duration ) ) ) ) ;
        };

        Loan.term = function( payment, rate, amount ) {
            return( - Math.log( ( 1.0 - ( ( amount * rate ) / payment ) ) ) / Math.log( 1.0 + rate ) ) ;
        };

        // calculate number of payments to term (duration) of orientation (base) given pay period frequency (frequency)
        Loan.numOfPayments = function( duration, base, frequency ) {
            return( ( base > 0 ) ? ( Loan.roundAndTruncate( ( ( duration * frequency ) / base ), 0 ) ) : 0 ) ;
            //return( ( base > 0 ) ? ( Math.ceil( ( ( duration * frequency ) / base ) ) ) : 0 ) ;
        };

        // calculate term or loan duration according to orientation (base) given the number of payments (numOf) of pay period frequency (frequency)
        Loan.duration = function( numOf, base, frequency ) {
            return( ( frequency > 0 ) ? ( Loan.roundAndTruncate( ( ( numOf * base ) / frequency ), 0 ) ) : 0 ) ;
            //return( ( frequency > 0 ) ? ( Math.ceil( ( ( numOf * base ) / frequency ) ) ) : 0 ) ;
        };

        Loan.getModalRate = function( modalPeriods, rateOfReturn ) {
            return( Loan._getModalRate( modalPeriods, rateOfReturn, 0 ) ) ;
        };

        Loan._getModalRate = function( modalPeriods, rateOfReturn, type ) {
            var retValue = 0. ;

            if( modalPeriods > 0. ) {
                switch( type ) {
                    case Loan.INTEREST_TYPE_AER :
                        retValue = ( Math.pow( ( 1.0 + rateOfReturn ), ( 1.0 / modalPeriods ) ) - 1.0 ) ;   // annual effective rate
                        break ;
                    case Loan.INTEREST_TYPE_SIMPLE :
                    default :
                        retValue = ( rateOfReturn / modalPeriods ) ;    // generic method  (Melissa's)
                        break ;
                }
            }
            return( retValue ) ;
        };

        Loan.getPaymentFrequencyInDays = function( payFrequency ) {
            var retValue = 30 ;

            switch( payFrequency ) {
                case Loan.ORIENTATION_QUARTERLY :
                    retValue = 90 ;
                    break ;
                default :
                    retValue = Math.floor( Loan.ORIENTATION_DAYLY / payFrequency ) ;
                    break ;
            }
            return( retValue ) ;
        };

        Loan.roundAndTruncate = function( number, decimals ) {
            // round and truncate
            var interim = 0.0;
            var decimalFactor = Math.pow(10.0, decimals);

            // round
            number += (0.500000001 / decimalFactor);

            // truncate
            number *= decimalFactor;
            interim = Math.floor(number);
            return( interim / decimalFactor ) ;
        };

        Loan.round = function( number, decimals ) {
            // rounding only
            if( decimals < 0 ) {
                decimals = 0 ;
            }

            return(number + (0.500000001 / Math.pow(10.0, decimals)));
        };

        Loan.truncate = function(number, decimals) {
            var interim = 0.0;
            var decimalFactor = Math.pow(10.0, decimals);

            // truncate
            number *= decimalFactor;
            interim = Math.floor(number);
            return( interim / decimalFactor);
        };


        Loan.specialRoundAndTruncate = function( number, decimals ) {
            var ret = 0.0 ;
            var decimalFactor = Math.pow( 10.0, decimals ) ;
            number *= decimalFactor ;
            var high = Math.ceil( number ) ;
            var low = Math.floor( number ) ;
            if( ( number - low ) > 0.499 ) {    // adjust this to target pweb rounding
                ret = ( high / decimalFactor ) ;
            }
            else {
                ret = ( low / decimalFactor ) ;
            }
            return( ret ) ;
        };


        Loan.modeToLabel = function( mode ) {
            var ret = "" + mode ;

            switch( mode ) {
            case Loan.ORIENTATION_MONTHLY     :
                ret = "Monthly" ;
                break ;
            case Loan.ORIENTATION_YEARLY      :
                ret = "Yearly" ;
                break ;
            case Loan.ORIENTATION_WEEKLY      :
                ret = "Weekly" ;
                break ;
            case Loan.ORIENTATION_DAYLY       :
                ret = "Dayly" ;
                break ;
            case Loan.ORIENTATION_QUARTERLY   :
                ret = "Quarterly" ;
                break ;
            case Loan.ORIENTATION_FORTNIGHTLY :
                ret = "Bi-Weekly" ;
                //ret = "Fortnightly" ;
                break ;
            case Loan.ORIENTATION_BIFORTNIGHTLY :
                ret = "Bi-Fortnightly" ;
                break ;
            case Loan.ORIENTATION_HALFMONTHLY   :
                ret = "Semi-Monthly" ;
                break ;
            case Loan.ORIENTATION_BIMONTHLY   :
                ret = "Bi-Monthly" ;
                break ;
            case Loan.ORIENTATION_SEMIANNUALLY :
                ret = "Semi-Annually" ;
                break ;
            default :
                ret = "" + mode + " times per year" ;
                break ;
            }
            return( ret ) ;
        };

        Loan.labelToMode = function( s ) {
            var ret = Loan.ORIENTATION_MONTHLY ;
            s = s.toUpperCase().trim() ;
            var isBI = ( s.indexOf( "BI" ) > -1 ) || ( s.indexOf( "HALF" ) > -1 ) || ( s.indexOf( "SEMI" ) > -1 ) || ( s.indexOf( "TWICE" ) > -1 ) ;

            if( s.indexOf( "MONTH" ) > -1 ) {
                ret = ( isBI ) ? Loan.ORIENTATION_HALFMONTHLY : Loan.ORIENTATION_MONTHLY  ;
                ret = ( s.indexOf( "BI" ) > -1 ) ? Loan.ORIENTATION_BIMONTHLY : ret  ;
            }
            else {
                if( s.indexOf( "WEEK" ) > -1 ) {
                    ret = ( isBI ) ? Loan.ORIENTATION_FORTNIGHTLY : Loan.ORIENTATION_WEEKLY  ;
                }
                else {
                    if( ( s.indexOf( "YEAR" ) > -1 ) || ( s.indexOf( "ANNUAL" ) > -1 ) ) {
                        ret = ( isBI ) ? Loan.ORIENTATION_SEMIANNUALLY : Loan.ORIENTATION_YEARLY  ;
                    }
                    else {
                        if( s.indexOf( "FORT" ) > -1 ) {
                            ret = ( isBI ) ? Loan.ORIENTATION_BIFORTNIGHTLY : Loan.ORIENTATION_FORTNIGHTLY  ;
                        }
                        else {
                            if( s.indexOf( "QUART" ) > -1 ) {
                                ret = Loan.ORIENTATION_QUARTERLY  ;
                            }
                            else {
                                if( s.indexOf( "DAY" ) > -1 ) {
                                    ret = Loan.ORIENTATION_DAYLY  ;
                                }
                                else {
                                    try {
                                        ret = Integer.parseInt( s.substring( 0, 2 ) ) ;
                                    }
                                    catch( e ) {
                                        ret = Loan.ORIENTATION_MONTHLY ;
                                    }
                                }
                            }
                        }
                    }
                }
            }

            return( ret ) ;
        };

    //};


    Loan.ORIENTATION_MONTHLY     = 12 ;
    Loan.ORIENTATION_YEARLY      = 1 ;
    Loan.ORIENTATION_WEEKLY      = 52 ;
    Loan.ORIENTATION_DAYLY       = 365 ;
    Loan.ORIENTATION_QUARTERLY   = 4 ;
    Loan.ORIENTATION_FORTNIGHTLY = 26 ;
    Loan.ORIENTATION_BIFORTNIGHTLY = 13 ;
    Loan.ORIENTATION_BIMONTHLY   = 6 ;
    Loan.ORIENTATION_HALFMONTHLY = 24 ;
    Loan.ORIENTATION_SEMIANNURALLY = 1 ;

    // "solve for" flag
    Loan.LOANSOLVEFOR_NONE       = 0 ;
    Loan.LOANSOLVEFOR_TERM       = 1 ;
    Loan.LOANSOLVEFOR_PAYMENT    = 2 ;
    Loan.LOANSOLVEFOR_AMOUNT     = 3 ;

    Loan.INTEREST_TYPE_SIMPLE    = 0 ;
    Loan.INTEREST_TYPE_AER       = 1 ;

    Loan.LOANTYPE_GENERAL        = 0 ;
    Loan.LOANTYPE_RESIDENTIAL    = 1 ;

    return Loan;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ 45104:
/*!***********************************************************!*\
  !*** ./node_modules/om-js-calc/src/calc/loan/LoanUtil.js ***!
  \***********************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./Loan */ 34264),__webpack_require__(/*! ../AccountTypes */ 81939)], __WEBPACK_AMD_DEFINE_RESULT__ = (function(Loan, AccountTypes) {

    var LoanUtil = {};

    LoanUtil.CONSTANTS = {};
    LoanUtil.CONSTANTS.ORIENTATION_MONTHLY     		= Loan.ORIENTATION_MONTHLY ;
    LoanUtil.CONSTANTS.ORIENTATION_YEARLY      		= Loan.ORIENTATION_YEARLY ;
    LoanUtil.CONSTANTS.ORIENTATION_WEEKLY      		= Loan.ORIENTATION_WEEKLY ;
    LoanUtil.CONSTANTS.ORIENTATION_DAYLY       		= Loan.ORIENTATION_DAYLY ;
    LoanUtil.CONSTANTS.ORIENTATION_QUARTERLY   		= Loan.ORIENTATION_QUARTERLY ;
    LoanUtil.CONSTANTS.ORIENTATION_FORTNIGHTLY 		= Loan.ORIENTATION_FORTNIGHTLY ;
    LoanUtil.CONSTANTS.ORIENTATION_BIFORTNIGHTLY 	= Loan.ORIENTATION_BIFORTNIGHTLY ;
    LoanUtil.CONSTANTS.ORIENTATION_BIMONTHLY   		= Loan.ORIENTATION_BIMONTHLY ;
    LoanUtil.CONSTANTS.ORIENTATION_HALFMONTHLY 		= Loan.ORIENTATION_HALFMONTHLY ;
    LoanUtil.CONSTANTS.ORIENTATION_SEMIANNURALLY 	= Loan.ORIENTATION_SEMIANNURALLY ;

    // "solve for" flag
    LoanUtil.CONSTANTS.LOANSOLVEFOR_NONE       = Loan.LOANSOLVEFOR_NONE ;
    LoanUtil.CONSTANTS.LOANSOLVEFOR_TERM       = Loan.LOANSOLVEFOR_TERM ;
    LoanUtil.CONSTANTS.LOANSOLVEFOR_PAYMENT    = Loan.LOANSOLVEFOR_PAYMENT ;
    LoanUtil.CONSTANTS.LOANSOLVEFOR_AMOUNT     = Loan.LOANSOLVEFOR_AMOUNT ;

    LoanUtil.CONSTANTS.INTEREST_TYPE_SIMPLE    = Loan.INTEREST_TYPE_SIMPLE ;
    LoanUtil.CONSTANTS.INTEREST_TYPE_AER       = Loan.INTEREST_TYPE_AER ;

    LoanUtil.CONSTANTS.LOANTYPE_GENERAL        = Loan.LOANTYPE_GENERAL ;
    LoanUtil.CONSTANTS.LOANTYPE_RESIDENTIAL    = Loan.LOANTYPE_RESIDENTIAL ;

    // account types effected by loan
    LoanUtil.LoanRepaymentImpactTypes = [
        AccountTypes.TYPE_AGGREGATE_BALANCE
      , AccountTypes.TYPE_PRETAX
      , AccountTypes.TYPE_ROTH
      , AccountTypes.TYPE_SUPPL_PRETAX
      , AccountTypes.TYPE_SUPPL_ROTH
      , AccountTypes.TYPE_PRETAX_AGECATCHUP
      , AccountTypes.TYPE_ROTH_AGECATCHUP
      , AccountTypes.TYPE_AFTERTAX
      , AccountTypes.TYPE_SUPPL_AFTERTAX
    ] ;

    // account types effected by loan
    LoanUtil.LoanRepaymentImpactTypesLessAggregateType = [
        AccountTypes.TYPE_PRETAX
      , AccountTypes.TYPE_ROTH
      , AccountTypes.TYPE_SUPPL_PRETAX
      , AccountTypes.TYPE_SUPPL_ROTH
      , AccountTypes.TYPE_PRETAX_AGECATCHUP
      , AccountTypes.TYPE_ROTH_AGECATCHUP
      , AccountTypes.TYPE_AFTERTAX
      , AccountTypes.TYPE_SUPPL_AFTERTAX
    ] ;

    // roth account types 
    LoanUtil.RothTypes = [
        AccountTypes.TYPE_ROTH
      , AccountTypes.TYPE_SUPPL_ROTH
      , AccountTypes.TYPE_ROTH_AGECATCHUP
    ] ;

    /*
     *  Calculate the loan repayment amount for the given params:
     *    loanAmount -> 50000.00
     *    rate -> 0.045
     *    term -> 48 (4 Years / 48 months)
     *    termOrientation -> 12 (in Months.  i.e., 48 months)
     *    paymentOrientation -> 52 (in Weeks.  Calculate the loan repayment in Weeks)
     */
    LoanUtil.getLoanPayment = function (loanAmount, rate, term, termOrientation, paymentOrientation) {
      if (termOrientation === undefined) {
        termOrientation = Loan.ORIENTATION_MONTHLY;
      }

      if (paymentOrientation === undefined) {
        paymentOrientation = Loan.ORIENTATION_MONTHLY;
      }

      return Loan.payment( loanAmount, Loan.getModalRate( paymentOrientation, rate ), Loan.numOfPayments( term, termOrientation, paymentOrientation ) ); 
    };

    return LoanUtil;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ 29099:
/*!****************************************************************!*\
  !*** ./node_modules/om-js-calc/src/calc/util/CalcUtilities.js ***!
  \****************************************************************/
/***/ (function(module, exports) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function(){

    var CalcUtilities = {};

    CalcUtilities.getStaticPayout = function(dCV, dRate, dPayPeriods, dYearsPO)
    {
        if( dRate === 0.0 ){
            return( dCV / ( dYearsPO * dPayPeriods ) ) ;
        }
        return( dCV / ( ( 1.0 - Math.pow( ( 1.0 + dRate ), - dYearsPO ) ) / ( 1.0 - Math.pow( ( 1.0 / ( 1.0 + dRate ) ), ( 1.0 / dPayPeriods ) ) ) ) ) ;
    };

    CalcUtilities.getAfterTaxRateOfReturn = function(dRateOfReturn, dTaxRate)
    {
        return( dRateOfReturn * ( 1.0 - dTaxRate ) ) ;
    };

    CalcUtilities.compoundingRate = function(dYearsOfAccum, dAnnualRate)
    {
        return( Math.pow( ( 1.0 + dAnnualRate ), dYearsOfAccum ) ) ;
    };

    CalcUtilities.discountingRate = function(dYears, dAnnualRate)
    {
        return( Math.pow( ( 1.0 / ( 1.0 + dAnnualRate ) ), dYears ) ) ;
    };

    CalcUtilities.convertMthlyRate = function(dModalPeriods, dRatePerModalPeriod)
    {
        // purpose: returns rate of return for period
        // example: convertMthlyRate( 365.0, 0.00000085 )
        //          equals the annual effective rate of a daily rate of 0.000085% percent
        //
        //
        return( Math.pow( ( 1.0 + dRatePerModalPeriod ), dModalPeriods ) - 1.0 ) ;
    };

    CalcUtilities.getPeriodicRate = function(dModalPeriods, dRateOfReturn)
    {
        // purpose: returns periodic rate of return
        // example: 100.00 x getPeriodicRate( 12.0, 0.085 )
        //          equals the monthly return on $100 invested at an annual effective
        //          rate of 8 1/2 percent % (i.e., $0.68)
        //
        //
        //return( ( dModalPeriods > 0.0 ) ? ( dRateOfReturn / dModalPeriods ) : 0.0 ) ;
        return( ( dModalPeriods > 0.0 ) ? ( Math.pow( ( 1.0 + dRateOfReturn ), ( 1.0 / dModalPeriods ) ) - 1.0 ) : 0.0 ) ;
    };

    CalcUtilities.roundAndTruncate = function(dNumber, iDecimals)
    {
        // round and truncate
        var dInterim = 0.0 ;
        var dDecimalFactor = Math.pow( 10.0, /*(double)*/iDecimals ) ;
        // round
        dNumber += ( 0.500000001 / dDecimalFactor ) ;

        // truncate
        dNumber *= dDecimalFactor ;
        dInterim = Math.floor( dNumber ) ;
        return( dInterim / dDecimalFactor ) ;
    };

    CalcUtilities.round = function(dNumber, iDecimals )
    {
        // rounding only
        if( iDecimals < 0 )
            iDecimals = 0 ;

        return( dNumber + ( 0.500000001 / Math.pow( 10.0, /*(double)*/iDecimals ) ) ) ;
    };

    CalcUtilities.truncate = function( dNumber, iDecimals )
    {
        var dInterim = 0.0 ;
        var dDecimalFactor = Math.pow( 10.0, /*(double)*/iDecimals ) ;

        // truncate
        dNumber *= dDecimalFactor ;
        dInterim = Math.floor( dNumber ) ;
        return( dInterim / dDecimalFactor ) ;

    };

    CalcUtilities.roundToNearest = function( dTargetIncrement, dNumber )
    {
        var dCeiling = dNumber - ( dNumber % dTargetIncrement ) ;
        var dFloor = 0 ;

        while( dCeiling < dNumber )
        {
            dFloor = dCeiling ;
            dCeiling += dTargetIncrement ;
        }

        return( ( Math.abs( dNumber - dFloor ) < Math.abs( dNumber - dCeiling ) ) ? dFloor : dCeiling ) ;
    };

    // index is zero-based
    CalcUtilities.isActiveMode = function( aggregateModes, granularModes, index )
    {
        return( ( ( index + 1 ) % ( aggregateModes / granularModes ) ) === 0 ) ;
    };

    // index is zero-based
    // translate to mode for account
    CalcUtilities.translateMode = function( aggregateMode, granularMode, index )
    {
        var r = -1 ; // inactive mode
        // equivalent of isActiveMode()
        if( ( ( index + 1 ) % ( aggregateMode / granularMode ) ) === 0 ) {
            r = /*(int)*/( ( index + 1 ) / ( aggregateMode / granularMode ) ) - 1 ;
        }
        return( r ) ;
    };

    CalcUtilities.getAggregateModes = function( one, other )
    {
        var lower = Math.min( one, other ) ;
        var higher = Math.max( one, other ) ;
        var n = 1 ;
        while( ( ( lower * n ) % higher !== 0 ) && ( n < higher ) ) n++ ;

        return( Math.max( ( lower * n ), higher ) ) ;  // additional check
    };

    CalcUtilities.getModesPerFractionalPeriod = function( fraction, modes ) {
        return( Math.floor( modes * fraction ) ) ;
    };

    CalcUtilities.getSerialIndexFromPeriodAndMode = function( period, mode, modesPer ) {
        return( ( period * modesPer ) + mode ) ;
    };

    return CalcUtilities;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ 72960:
/*!****************************************************************!*\
  !*** ./node_modules/om-js-calc/src/calc/util/DateUtilities.js ***!
  \****************************************************************/
/***/ (function(module, exports) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function(){

    var DateUtilities = {};

    DateUtilities.getAgePrecise = function( dob, ref )
    {
        var today = ( ref === null  || ref === undefined) ? new Date() : ref ;
        var age = this.getDateDiffInYears( today, Date.parse(dob) ) ;

        return( age ) ;
    };

    DateUtilities.getDateDiffInYears = function( f, s )
    {
        var first = new Date(f);
        /*
        We are struggling here with IE8. The date can't be converted from a string and the
        'getDateFromStirng' method does not work in IE8. Custom solution is in 'parse' polyfill.
         */
        var second = new Date(s);

        var earlier = new Date();
        var later = new Date();

        // assure positive difference
        if( first.getTime() < second.getTime() ) {
            earlier.setTime( first ) ;
            later.setTime( second ) ;
        }
        else {  // reverse
            earlier.setTime( second ) ;
            later.setTime( first ) ;
        }

        var dif  =  later.getFullYear() - earlier.getFullYear();
            dif += (later.getMonth() - earlier.getMonth()) / 12;
            dif += (later.getDate() - earlier.getDate()) / 361;
            dif += 0.001;

        // from George Mazaitis
        return (Math.floor(dif)) ;
    };

    //  Return Today's date in YYYYMMDD format
    DateUtilities.today = function( ){
        var today = new Date();
        var yyyy = today.getFullYear().toString();
        var mm = today.getMonth() + 1 ;
            mm = mm < 10 ? "0" + mm : mm;
        var dd = today.getDate() < 10 ? "0" + today.getDate().toString() : today.getDate().toString();
        return( yyyy + mm + dd ) ;
    };

    // current year string YYYY
    DateUtilities.getCurrentYearString = function() {
        var d = new Date().getFullYear().toString() ;
        return d;
    };

    DateUtilities.getCurrentYearInteger = function() {
        var d = new Date().getFullYear();
        return d;
    };

    DateUtilities.getYearString = function( d ) {
        var dd = ( typeof( d ) === "string" ) ? new Date( d ) : d ;
        return( dd.getFullYear().toString() ) ;
    } ;

    DateUtilities.getYearInteger = function( d ) {
        var dd = ( typeof( d ) === "string" ) ? new Date( d ) : d ;
        return( dd.getFullYear() ) ;
    } ;


    // return Date object from string formated as "YYYY-MM-DDT00:00:00"
    DateUtilities.getDateFromString = function(dateString,includeTime){
        var date;
        var _dateString;
        var _datePieces;
        var _tIndex = dateString.indexOf("T");
        if(_tIndex > -1){
            _dateString = dateString.substr(0,_tIndex);
            _datePieces = _dateString.split("-");
            if(!includeTime)
            {
                date = new Date(_datePieces[0], _datePieces[1]-1, _datePieces[2]);
            }
            else
            {
                var _timeString = dateString.substr(_tIndex+1);
                var _timePieces = _timeString.split(":");
                date = new Date(_datePieces[0], _datePieces[1]-1, _datePieces[2],
                                _timePieces[0],_timePieces[1],_timePieces[2]);
            }
        }else{
            date = new Date(dateString);
        }
        return date;
    };

    // return The time (as a string) from string formated as "YYYY-MM-DDT00:00:00"
    DateUtilities.getTimeFromString = function(dateString){
        var _timeString = undefined;
        var _timePieces;
        var _period = "AM";
        var _tIndex = dateString.indexOf("T");
        if(_tIndex > -1){
            // First, get the Time part of the string
            _timeString = dateString.substr(_tIndex+1);
            _timePieces = _timeString.split(":");

            // If HH is greater than 12, subtract 12 and flip to PM
            if(_timePieces[0] >= 12){
                 _period = "PM";
                _timePieces[0] = _timePieces[0]-12;
            }

            //Make sure that the hour is shown as 12 not 0
            if(_timePieces[0]===0)
            {
                _timePieces[0] = 12;
            }

            // truncate the 0 off the beginning if necessary
            _timePieces[0] = parseInt(_timePieces[0], 10);

            //    put them back together
            _timeString = _timePieces.join(":") + " " + _period;
        }
        return _timeString;
    };

    // Return string in the format "YYYY-MM-DDT00:00:00" from valid Date Object
    DateUtilities.getStringFromDate = function(dateObj){
        return DateUtilities.getShortStringFromDate(dateObj)+"T00:00:00";
    };

    DateUtilities.formatDateTimeString = function(dateString)
    {
        var _tIndex = dateString.indexOf("T");

        _dateString = dateString.substr(0,_tIndex);
        _datePieces = _dateString.split("-");

        var returnString = parseInt(_datePieces[1], 10) + "/" +
                            parseInt(_datePieces[2], 10) + "/" +
                             _datePieces[0].substr(2) + " ";

        return returnString + DateUtilities.getTimeFromString(dateString);
    };

    // Return string in the format "YYYY-MM-DD" from valid Date Object
    // Also allows you to optionally define a separator character
    DateUtilities.getShortStringFromDate = function(dateObj, separator){
        var _separator = separator || "-";
        var _mm = dateObj.getMonth()+1;
        var _dd = dateObj.getDate();
        var _yy = dateObj.getFullYear();
        if(_mm < 10){
            _mm = "0"+_mm;
        }
        if(_dd < 10){
            _dd = "0"+_dd;
        }
        return _yy + _separator + _mm + _separator + _dd;
    };

    /**
     * Returns the difference between date2 & date1 in number of days
     * Ex: date2 - date1 = x Days
     */
    DateUtilities.getDateDiffInDays = function(date1, date2) {
        //Get 1 day in milliseconds
        var one_day = 1000 * 60 * 60 * 24 ;

        // convert both dates to milliseconds
        var date1_ms = date1.getTime() ;
        var date2_ms = date2.getTime() ;

        // calculate the difference in milliseconds
        var difference_ms = date2_ms - date1_ms ;

        // convert back to days and return
        return( Math.round( difference_ms/one_day ) ) ;
    };

    /**
     * Date.parse with progressive enhancement for ISO 8601 <https://github.com/csnover/js-iso8601>
     * © 2011 Colin Snover <http://zetafleet.com>
     * Released under MIT license.
     */
    (function (Date, undefined) {
        var origParse = Date.parse, numericKeys = [ 1, 4, 5, 6, 7, 10, 11 ];
        Date.parse = function (date) {
            var timestamp, struct, minutesOffset = 0;

            // ES5 §15.9.4.2 states that the string should attempt to be parsed as a Date Time String Format string
            // before falling back to any implementation-specific date parsing, so that’s what we do, even if native
            // implementations could be faster
            //              1 YYYY                2 MM       3 DD           4 HH    5 mm       6 ss        7 msec        8 Z 9 ±    10 tzHH    11 tzmm
            if ((struct = /^(\d{4}|[+\-]\d{6})(?:-(\d{2})(?:-(\d{2}))?)?(?:T(\d{2}):(\d{2})(?::(\d{2})(?:\.(\d{3}))?)?(?:(Z)|([+\-])(\d{2})(?::(\d{2}))?)?)?$/.exec(date))) {
                // avoid NaN timestamps caused by “undefined” values being passed to Date.UTC
                for (var i = 0, k; (k = numericKeys[i]); ++i) {
                    struct[k] = +struct[k] || 0;
                }

                // allow undefined days and months
                struct[2] = (+struct[2] || 1) - 1;
                struct[3] = +struct[3] || 1;

                if (struct[8] !== 'Z' && struct[9] !== undefined) {
                    minutesOffset = struct[10] * 60 + struct[11];

                    if (struct[9] === '+') {
                        minutesOffset = 0 - minutesOffset;
                    }
                }

                timestamp = Date.UTC(struct[1], struct[2], struct[3], struct[4], struct[5] + minutesOffset, struct[6], struct[7]);
            }
            else {
                timestamp = origParse ? origParse(date) : NaN;
            }

            return timestamp;
        };
    }(Date));

    return DateUtilities;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ 72258:
/*!*******************************************************************!*\
  !*** ./node_modules/om-js-calc/src/calc/util/DoubleScratchPad.js ***!
  \*******************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ../AccountAccum */ 50897)], __WEBPACK_AMD_DEFINE_RESULT__ = (function(AccountAccum){

    //  Constructor
    var DoubleScratchPad = function(){

        //  Private Variable Declarations -------------------------------------
        var _ad = null ;
        var _initialCapacity = 10 ;

        //  Privileged Method Declarations ------------------------------------
        this.setInitialCapacity = function( n ) { _initialCapacity = n ; };
        this.getInitialCapacity = function( ) { return( _initialCapacity ) ; };

        this.get = function( index ) {
            var d = 0 ;
            if( within( index ) ) {
                d = _ad[index] ;
            }
            return( d ) ;
        };


        this.set = function( index, d ) {
            if( !( within(index) ) ) create( index ) ;
            _ad[index] = d ;
        };

        this.touch = function( index, d ) {
            if( !( within(index) ) ) create( index ) ;
            _ad[index] += d ;
        };


        this.zero = function( )
        {
            var count = getCount() ;
            for( var n = 0 ; n < count ; n++ ) {
                _ad[n] = 0 ;
            }
        };

        this.close = function( ) { _ad = null ; };


        //  Private Method Declarations ------------------------------------
        function getCount() {
            var n = 0 ;

            if( _ad !== null )
                n = _ad.length ;

            return( n ) ;
        }


        function create( newIndex ) {
            if( _ad === null ) {
                _ad = [];
                for (var i = 0; i < _initialCapacity; i++) {
                    _ad[i] = 0;
                }
            }

            if( _ad.length <= newIndex ) {
                // create new array
                var nad = [] ;    //
                for( var n = 0 ; n < _ad.length ; n++ ) {
                    nad[n] = _ad[n] ;
                }
                _ad = nad ;
            }
        }


        function within( index ) {
            return( ( index > -1 ) && ( index < getCount() ) ) ;
        }

    };

    DoubleScratchPad.newInstance = function( )
    {
        return( new DoubleScratchPad() ) ;
    };

    return DoubleScratchPad;

}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));



/***/ }),

/***/ 50666:
/*!*********************************************************************!*\
  !*** ./node_modules/om-js-calc/src/calc/util/ResponseSerializer.js ***!
  \*********************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ../OMCalculatorRequest */ 82633), __webpack_require__(/*! ../OMCalculatorResponse */ 90656), __webpack_require__(/*! ../ObjFactory */ 14098),
        __webpack_require__(/*! ../OMObjFactory */ 47190),__webpack_require__(/*! ../OMErMatchData */ 11406), __webpack_require__(/*! ../OMStandardErMatchData */ 72390),
        __webpack_require__(/*! ../AccountTypes */ 81939), __webpack_require__(/*! ../IncomeTypes */ 34513), __webpack_require__(/*! ../IRSConstants */ 84666), __webpack_require__(/*! ../IncomeData */ 57213), __webpack_require__(/*! ./DateUtilities */ 72960), __webpack_require__(/*! ../ReplacementIncome */ 27082)], __WEBPACK_AMD_DEFINE_RESULT__ = (function(OMCalculatorRequest, OMCalculatorResponse, ObjFactory, OMObjFactory, OMErMatchData,
         OMStandardErMatchData, AccountTypes, IncomeTypes, IRSConstants, IncomeData, DateUtilities, ReplacementIncome){

  var ResponseSerializer = function( ){};

  ResponseSerializer.prototype.serialize = function(response){
    var request;
    var plans;
    var paycheckNum;
    // var acctInstance;
    // var incomeInstance;
    var sourceIndex = 0;
    var appData;

    appData = response.orangeData;
    request = OMObjFactory.getOMCalculatorRequestInstance() ;
    plans = appData.participantDefinedContributionAccounts;
    // payFrequency = appData.participantData.payrollFrequency;
    paycheckNum = plans[0].planInfo.payrollFrequency;

    // stupid IE...
    var ieDob = appData.participantData.dob;
    var yyyy = ieDob.slice(0,4);
    var mm = parseInt(ieDob.slice(5,7), 10) - 1;
    var dd = ieDob.slice(8,10);


    //  Get a CommonData instance
        var cd = OMObjFactory.getOMCommonDataInstance() ;
      //  Parse user's PersonalData into the CommonData instance...
            cd.setReferenceDate(new Date()) ;
            cd.setDateOfBirth(new Date(yyyy, mm, dd)) ;
            cd.setAnnualSalary( appData.participantData.currentAnnualSalary ) ;
            cd.setRateOfIncrease( appData.participantData.annualSalaryIncrementRate ) ;
            cd.setRetireAge( appData.participantData.retirementAge ) ;
            cd.setRateOfReturn( appData.participantData.investmentRateOfReturn ) ;
            cd.setReplacementRatio( appData.participantData.incomeReplacementRatio ) ;
            cd.setRateOfInflation( appData.participantData.inflationRate ) ;
            cd.setSSIndicator( appData.participantData.includeSocialSecurity ) ;
            cd.setSSBenefitAge( appData.participantData.retirementAge ) ;
            cd.setRateOfRothBump(appData.participantData.rothBumpRate);
            cd.setReplacementIncomeType( ReplacementIncome.getReplacementIncomeCalcType( appData.participantData.replacementIncomeCalcType ) ) ;
      request.setCommonData( cd ) ;

    //  Create AccountData object for the participant's Account Balance
    if(appData.participantData.currentDcBalance){
      var dcAcctInstance = OMObjFactory.getOMAccountDataInstance();
        dcAcctInstance.setFrequency(paycheckNum);
        dcAcctInstance.setType(AccountTypes.TYPE_AGGREGATE_BALANCE);
        //dcAcctInstance.setIRC(IRSConstants._401k);  // no longer needed; want this to be inspecific for aggregate balance
        dcAcctInstance.setBalance(appData.participantData.currentDcBalance);
      request.getAccountDataList().push(dcAcctInstance);
    }

        //	Parse Pension data into CommonData instance
		if(appData.pension && appData.pension.enabled){

			if( appData.pension.monthlyPension && ( appData.pension.monthlyPension > 0 ) ) {
				var pensionInstance = OMObjFactory.getOMIncomeDataInstance() ;
				pensionInstance.setType( IncomeTypes.PENSION ) ;
				pensionInstance.setMonthlyAmount( appData.pension.monthlyPension ) ;
				request.getIncomeDataList().push( pensionInstance ) ;
			}
			if( appData.pension.annualPension && ( appData.pension.annualPension > 0 ) ) {
				var pensionInstance = OMObjFactory.getOMIncomeDataInstance() ;
				pensionInstance.setType( IncomeTypes.PENSION ) ;
				pensionInstance.setAnnualAmount( appData.pension.annualPension ) ;
				request.getIncomeDataList().push( pensionInstance ) ;
			}
			if( appData.pension.lumpSumPension && ( appData.pension.lumpSumPension > 0 ) ) {
				var acctInstance = OMObjFactory.getOMAccountDataInstance() ;
				acctInstance.setFrequency(1) ;
				acctInstance.setType( AccountTypes.TYPE_PENSION_LUMP_SUM ) ;
				acctInstance.setBalance( appData.pension.lumpSumPension ) ;
				request.getAccountDataList().push( acctInstance ) ;
			}
			//This is unique and unlike the other account type contributions: TYPE_DB_MANDATORY_EE does not accumulate; use is isolated
      // to deferral and paycheck aspects.
            if( appData.pension.dbMandatoryContrib && appData.pension.dbMandatoryContrib > 0.0 ) {
                var acctInstance = OMObjFactory.getOMAccountDataInstance();
                acctInstance.setType(AccountTypes.TYPE_DB_MANDATORY_EE);
                acctInstance.setFrequency( paycheckNum ) ;
                acctInstance.setContrib( AccountTypes.CONTRIB_RATE, appData.pension.dbMandatoryContrib ) ;
                request.getAccountDataList().push( acctInstance ) ;
            }

        }

        //  Parse OtherAssets into CommonData instances
    if(appData.otherAssets.monthlyIncome && appData.otherAssets.monthlyIncome > 0){
      var assetsInstance = OMObjFactory.getOMIncomeDataInstance() ;
        assetsInstance.setType(IncomeTypes.OTHER) ;
        assetsInstance.setMonthlyAmount( appData.otherAssets.monthlyIncome ) ;
      request.getIncomeDataList().push( assetsInstance ) ;
    }
    //  Parse SS Benefits into an Income Data instance
    // Always adding the Social to our Response, UI determins whether to display it
    incomeInstance = OMObjFactory.getOMIncomeDataInstance() ;
    incomeInstance.setType(IncomeTypes.SOCIALSECURITY) ;
    incomeInstance.setMonthlyAmount(appData.ssBenefits[ Math.max( appData.participantData.retirementAge, 62 )]);
    request.getIncomeDataList().push( incomeInstance ) ;

		if(appData.otherAssets.futureBalance && appData.otherAssets.futureBalance > 0){
			var futureBalInstance = OMObjFactory.getOMAccountDataInstance() ;
				futureBalInstance.setType(AccountTypes.TYPE_NOGROWTH) ;
				futureBalInstance.setBalance( appData.otherAssets.futureBalance ) ;
			request.getAccountDataList().push(futureBalInstance);
		}
		if(appData.otherAssets.cashBalance){
			if(appData.otherAssets.cashBalance.annualAdditions > 0 || appData.otherAssets.cashBalance.currentBalance > 0){
				var cashBalInstance = OMObjFactory.getOMAccountDataInstance() ;
				cashBalInstance.setFrequency(1);
				cashBalInstance.setType(AccountTypes.TYPE_NOINCREASE) ;
				if(appData.otherAssets.cashBalance.currentBalance > 0){
					cashBalInstance.setBalance( appData.otherAssets.cashBalance.currentBalance ) ;
				}
				if(appData.otherAssets.cashBalance.annualAdditions > 0){
					cashBalInstance.setContrib(AccountTypes.CONTRIB_MODAL, appData.otherAssets.cashBalance.annualAdditions);
				}
				request.getAccountDataList().push(cashBalInstance);
			}
		}

		if (appData.voyaOtherAccounts !== null && appData.voyaOtherAccounts !== undefined && appData.voyaOtherAccounts.length > 0) {
			var balTotal = 0.0;
			var mthTotal = 0.0;
			for (var k=0; k<appData.voyaOtherAccounts.length; k++) {
				var voa = appData.voyaOtherAccounts[k];
				if (voa.accountType === 'BAL' && voa.displayFlag === 'Y' && voa.accountBalance > 0.0) {
					balTotal += voa.accountBalance;
				} else if (voa.accountType === 'MTH' && voa.displayFlag === 'Y' && voa.accountBalance > 0.0) {
					mthTotal += voa.accountBalance;
				}
			}

			if (balTotal > 0.0) {
				var cashBalInstance2 = OMObjFactory.getOMAccountDataInstance();
				cashBalInstance2.setFrequency(1);
				cashBalInstance2.setType(AccountTypes.TYPE_NOINCREASE) ;
				cashBalInstance2.setBalance(balTotal);
				request.getAccountDataList().push(cashBalInstance2);
			}

			if (mthTotal > 0.0) {
				var assetsInstance2 = OMObjFactory.getOMIncomeDataInstance() ;
				assetsInstance2.setType(IncomeTypes.OTHER) ;
				assetsInstance2.setMonthlyAmount(mthTotal) ;
				request.getIncomeDataList().push(assetsInstance2) ;
			}
		}

        //	Loop through pptDCAccount object
		for(var i=0; i<plans.length; i++){
			//	7.1) Setup vars
			var plan = plans[i];
			var sources = plans[i].planInfo.sources;
			var planIndex = i;
			var ermd = null;
			var rContribType = plan.contributionData.regularContributionUnit;
			var cContribType = plan.contributionData.catchupContributionUnit;
			var crcAllowed = plan.planInfo.crcAllowed;
			var ermdType = plan.matchData.erMatch.matchType.toUpperCase();
			var payFrequency = plan.planInfo.payrollFrequency;

      //  7.2) Create ERMatchData if it exists
      /*if(ermdType !== "NONE"){
        ermd = OMObjFactory.getErMatchDataInstance( OMErMatchData[plan.matchData.erMatch.matchType.toUpperCase()], "" ) ;      //  OMErMatchData
        ermd.setID( planIndex );
        ermd.setTier1Range( plan.matchData.erMatch.range1) ;
        ermd.setTier2Range( plan.matchData.erMatch.range2) ;
        ermd.setTier1Match( plan.matchData.erMatch.percent1 ) ;
        ermd.setTier2Match( plan.matchData.erMatch.percent2 ) ;
        ermd.includeInCalculation(plan.matchData.includeErMatch);
        ermd.setAnnualMax(plan.matchData.erMatch.maxErAnnualMatch);
      }*/

      //  Awaiting discussion with Walt/Manish/Sundet
      if(ermdType !== "NONE"){
        ermd = OMObjFactory.getErMatchDataInstance( OMErMatchData[plan.matchData.erMatch.matchType.toUpperCase()], "" ) ;      //  OMErMatchData
        ermd.includeInCalculation(plan.matchData.includeErMatch);
        ermd.setID( planIndex );
        ermd.setTier1Range( plan.matchData.erMatch.range1) ;
        ermd.setTier2Range( plan.matchData.erMatch.range2) ;
        ermd.setTier1Match( plan.matchData.erMatch.percent1 ) ;
        ermd.setTier2Match( plan.matchData.erMatch.percent2 ) ;
        if(ermdType === "DATETIER"){
          ermd.setTier1Date(plan.matchData.erMatch.tierDate1);  // Should come from JSON in YYYYMMDD format
          ermd.setTier2Date(plan.matchData.erMatch.tierDate2);  // Should come from JSON in YYYYMMDD format
        }else{
          ermd.setAnnualMax(plan.matchData.erMatch.maxErAnnualMatch);
          ermd.setTierAnnualMax(plan.matchData.erMatch.tierForAnnualMax - 1 ) ;  // note decrement of JSON originating index, in order to have zero as first tier counter
        }
       }


      //  Need to handle DateTier scenario

      //  7.3) Create one Account Data object for each Source
      for (var j = 0; j<sources.length;  j++) {
        var source = sources[j];
        var sourceType = source.type;
        var isCatchup = sourceType.indexOf("CATCHUP") > -1 ? true : false;
        var contributionType = isCatchup ? cContribType : rContribType;
        var accountContributionType = contributionType == "PERCENT" ? "RATE" : "MODAL";

        var acctInstance = OMObjFactory.getOMAccountDataInstance();

        if(source.name)           acctInstance.setName(source.name);
        if(source.id)           acctInstance.setId(source.id);
                          acctInstance.setIndex(sourceIndex++);
                          acctInstance.setType(AccountTypes.matchType(sourceType));
                          acctInstance.setIRC(IRSConstants.getIRCconst(source.ircCode));
        if(plan.planInfo.planName)      acctInstance.setPlanName(plan.planInfo.planName);
        if(plan.planInfo.planId)      acctInstance.setPlanId(plan.planInfo.planId);
                          acctInstance.setPlanIndex(planIndex);
                          acctInstance.setContrib(AccountTypes["CONTRIB_"+accountContributionType], source.contribution);
        if(payFrequency)          acctInstance.setFrequency(payFrequency);

        //  Set ER Match Data to the AccountData object...
        if(ermd){
          if(sourceType == "PRETAX" || sourceType == "ROTH")  {
            acctInstance.setOmErMatchData(ermd);
          }
          if((sourceType == "AFTER_TAX" || sourceType == "AFTERTAX") && plan.matchData.erMatch.matchTotalContrib){
            acctInstance.setOmErMatchData(ermd);
          }
        }

        //  Set the MinMax Rate Limits
        //  create this object every time to grab the correct min and max limits for modal just in case.
        if( source.percentLimits  && source.percentLimits.max && source.percentLimits.max > 0){
          limit = ObjFactory.getMinMaxLimitInstance();
          limit.setRate(source.percentLimits.min,source.percentLimits.max);
          limit.setPlanIndex(planIndex);
          acctInstance.setMinMaxLimit( limit ) ;
        }

        //  Set the MinMax Modal Limits
        if(accountContributionType == "MODAL" && source.limits  && source.limits.max && source.limits.max > 0){
          limit = ObjFactory.getMinMaxLimitInstance();
          //Grab the correct min and max values from the percent based minmaxlimit object if non-crc
          if(!crcAllowed)
          {
            var maxLim = (limit.getModalMax(payFrequency,appData.participantData.currentAnnualSalary));
            var minLim = (limit.getModalMin(payFrequency,appData.participantData.currentAnnualSalary));
            limit.setModal(minLim,maxLim, payFrequency);
          }
          else
          {
            limit.setModal(source.limits.min,source.limits.max, payFrequency);
          }
          limit.setPlanIndex(planIndex);
          acctInstance.setMinMaxLimit( limit ) ;
        }

        //  Add AccountData instance to the request
        request.getAccountDataList().push(acctInstance);
      }

      //  7.4) Create AccountData object if participant has an Annual ER Contribution set
      if(plan.matchData.annualErContribution){
        var erContribInstance = OMObjFactory.getOMAccountDataInstance();
        erContribInstance.setContrib(AccountTypes.CONTRIB_ANNUAL, plan.matchData.annualErContribution);
        erContribInstance.setPlanIndex(planIndex);
        erContribInstance.setIndex(sourceIndex++);
        request.getAccountDataList().push(erContribInstance);
      }

      //  7.5) Create AccountData object if participant's EE ContributionRate is mandatory
      if(plan.matchData.mandatoryEeContribution){
        var eeContribType = plan.matchData.mandatoryEeContribution.unit.toUpperCase() == "PERCENT" ? AccountTypes.CONTRIB_RATE : AccountTypes.CONTRIB_MODAL;
        var eeContribInstance = OMObjFactory.getOMAccountDataInstance();
        eeContribInstance.setFrequency(payFrequency);
        eeContribInstance.setContrib(eeContribType, plan.matchData.mandatoryEeContribution.value);
        eeContribInstance.setPlanIndex(planIndex);
        eeContribInstance.setIndex(sourceIndex++);
        eeContribInstance.setType(AccountTypes.TYPE_MANDATORY_EE);
          if (plan.planInfo.sources.length > 0) {
              eeContribInstance.setIRC(IRSConstants.getIRCconst(plan.planInfo.sources[0].ircCode));
          }
        request.getAccountDataList().push(eeContribInstance);
      }

      //  7.6) Create AccountData object if participant's ER ContributionRate is mandatory
      if(plan.matchData.mandatoryErContribution){
        var erContribType = plan.matchData.mandatoryErContribution.unit.toUpperCase() == "PERCENT" ? AccountTypes.CONTRIB_RATE : AccountTypes.CONTRIB_MODAL;
        var mandatoryContribInstance = OMObjFactory.getOMAccountDataInstance();
        mandatoryContribInstance.setFrequency(payFrequency);
        mandatoryContribInstance.setContrib(erContribType, plan.matchData.mandatoryErContribution.value);
        mandatoryContribInstance.setPlanIndex(planIndex);
        mandatoryContribInstance.setIndex(sourceIndex++);
        mandatoryContribInstance.setType(AccountTypes.TYPE_MANDATORY_ER);
          if (plan.planInfo.sources.length > 0) {
              mandatoryContribInstance.setIRC(IRSConstants.getIRCconst(plan.planInfo.sources[0].ircCode));
          }
        request.getAccountDataList().push(mandatoryContribInstance);
      }

      //  7.7) Create Min/Max Rate Limit object for
      // if(plan.planInfo.totalContributionAmount){
      //  var rateLimit = OMObjFactory.getMinMaxLimitInstance();
      //    rateLimit.setPlanIndex(planIndex);
      //    rateLimit.setModal( plan.planInfo.totalContributionAmount.min,
      //              plan.planInfo.totalContributionAmount.max,
      //              payFrequency);
      //  cd.getMinMaxLimitList().push( rateLimit ) ;
      // }

      // // 7.8) Create Min/Max Dollar Limit object for
      // if(plan.planInfo.totalContributionPercent){
      //  var dollarLimit = OMObjFactory.getMinMaxLimitInstance();
      //    dollarLimit.setPlanIndex(planIndex);
      //    dollarLimit.setRate(  plan.planInfo.totalContributionPercent.min,
      //                plan.planInfo.totalContributionPercent.max );
      //  cd.getMinMaxLimitList().push( dollarLimit );
      // }

      //  7.9) Create AccountData object for Employer ProfitSharing (As a Dollar amount)
      if(plan.matchData.profitSharingContributionAmount){
        var profitSharingDollarInstance = OMObjFactory.getOMAccountDataInstance();
        profitSharingDollarInstance.setFrequency(1);
        profitSharingDollarInstance.setContrib(AccountTypes.CONTRIB_MODAL, plan.matchData.profitSharingContributionAmount.value);
        profitSharingDollarInstance.setPlanIndex(planIndex);
        profitSharingDollarInstance.setIndex(sourceIndex++);
        profitSharingDollarInstance.setType(AccountTypes.TYPE_RECURRING_ER);
          if (plan.planInfo.sources.length > 0) {
              profitSharingDollarInstance.setIRC(IRSConstants.getIRCconst(plan.planInfo.sources[0].ircCode));
          }
        request.getAccountDataList().push(profitSharingDollarInstance);
      }

      //  7.10) Create AccountData object for Employer ProfitSharing (As a Rate amount)
      if(plan.matchData.profitSharingContributionRate){
        var profitSharingRateInstance = OMObjFactory.getOMAccountDataInstance();
        profitSharingRateInstance.setFrequency(1);
        profitSharingRateInstance.setContrib(AccountTypes.CONTRIB_RATE, plan.matchData.profitSharingContributionRate.value);
        profitSharingRateInstance.setPlanIndex(planIndex);
        profitSharingRateInstance.setIndex(sourceIndex++);
        profitSharingRateInstance.setType(AccountTypes.TYPE_RECURRING_ER);
          if (plan.planInfo.sources.length > 0) {
              profitSharingRateInstance.setIRC(IRSConstants.getIRCconst(plan.planInfo.sources[0].ircCode));
          }
        request.getAccountDataList().push(profitSharingRateInstance);
      }

      // Begin - New Loan modeling
      // This below logic is moved to OMCalcWrapper.setNewLoanModelData()
      /*if (plan.loanData && plan.loanData.newLoanModelData) {
        var lmd = plan.loanData.newLoanModelData;
        if (lmd.loanPayment > 0.0 || lmd.loanAmount > 0.0) {
          var loan = OMObjFactory.getLoanInstance() ;
          if (lmd.loanAmount > 0.0) {
            loan.initPaymentInstance(lmd.loanOrientation, lmd.loanInterestRate, lmd.loanPayFrequency, lmd.loanTerm, lmd.loanAmount);
          } else {
            loan.initLoanAmountInstance(lmd.loanOrientation, lmd.loanInterestRate, lmd.loanPayFrequency, lmd.loanTerm, lmd.loanPayment);
          }
          lmd.loanInitialFee > 0.0 ? loan.setInitialFee(lmd.loanInitialFee) : loan.setInitialFee(0.0);
          lmd.loanAnnualFee > 0.0 ? loan.setAnnualFee(lmd.loanAnnualFee) : loan.setAnnualFee(0.0);
          lmd.loanAer ? loan.setInterestTypeToAER() : loan.setInterestTypeToSimple();
          (lmd.loanUpfrontInterest && lmd.loanDaysUpfrontInterest > 0) ? loan.setDaysOfUpFrontInterest(lmd.loanDaysUpfrontInterest) : loan.setDaysOfUpFrontInterest(0);

          var loanInstance = OMObjFactory.getOMAccountDataInstance();
          loanInstance.setType(AccountTypes.TYPE_NEWLOAN);
          loanInstance.setBalance(-loan.getLoanAmount());
          loanInstance.setFrequency(loan.getFrequency());
          loanInstance.setLoan(loan);

          request.getAccountDataList().push( loanInstance ) ;
        }
      }*/
      // End - New Loan modeling

      // Begin - Outstanding (Existing) Loan 
      if (plan.loanData && plan.loanData.outstandingLoan) {
        var oLData = plan.loanData.outstandingLoan;
        if (oLData.data.outstandingLoanDtls) {
          setExistingActiveLoansToRequest(request, oLData);
        }
      }
      // End - Outstanding (Existing) Loan
    }

        return request;

  };

  ResponseSerializer.prototype.serializeFE = function(response) {
    var appData = response.feData;
    var request = OMObjFactory.getOMCalculatorRequestInstance() ;
    var cd = OMObjFactory.getOMCommonDataInstance() ;
    //var acctInstance = null ;

    // this is much the same as non-FE
    cd.setReferenceDate( new Date() ) ;

    var ieDob = appData.participantData.birthDates.CLIENT;
    var yyyy = ieDob.slice(0,4);
    var mm = parseInt(ieDob.slice(5,7), 10) - 1;
    var dd = ieDob.slice(8,10);
    cd.setDateOfBirth(new Date(yyyy, mm, dd)) ;

    // cd.setAnnualSalary( params.salary ) ;
    //cd.setRateOfIncrease( 10 /*params.roi*/ ) ; // salary increase
    
    cd.setRetireAge( appData.participantData.selectedRetirementAge ) ; 
    
    if (appData.investmentRateOfReturn !== undefined) {
      cd.setRateOfReturn( appData.investmentRateOfReturn ) ;
    } else {
      cd.setRateOfReturn( 0.06 ) ;
    }
    
    // cd.setReplacementRatio( params.replace ) ;
    if (appData.inflationRate !== undefined) {
        cd.setRateOfInflation( appData.inflationRate );
    }else{
        cd.setRateOfInflation(0.03);
    }
    
    request.setCommonData( cd ) ;

    //  Loop through all plans object
    for(var i=0; i<appData.dcPlanData.length; i++){
      var plan = appData.dcPlanData[i];
      // Begin - Outstanding (Existing) Loan 
      if (plan.loanData && plan.loanData.outstandingLoan) {
        var oLData = plan.loanData.outstandingLoan;
        if (oLData.data.outstandingLoanDtls) {
          setExistingActiveLoansToRequest(request, oLData);
        }
      }
      // End - Outstanding (Existing) Loan
    }

    return request;
  };

  /* Use this common function to read the existing loans from both FE & NonFE.  And set to REQUEST. */
  setExistingActiveLoansToRequest = function(request, oLData) {
    for (var k=0; k<oLData.data.outstandingLoanDtls.length; k++) {
      var oLDtlData = oLData.data.outstandingLoanDtls[k];
      if (oLDtlData.loanStatus == 'A' && oLDtlData.balance > 0.0) { // Active Loan & remaining loan balance > 0.0
        var loan = OMObjFactory.getLoanInstance() ;
        var daysDiff = DateUtilities.getDateDiffInDays(new Date(), DateUtilities.getDateFromString(oLDtlData.payoffDate));
        loan.initPaymentInstanceForExistingLoan(
            ResponseSerializer.Loan.ORIENTATION_MONTHLY
            , oLDtlData.interestRate / 100
            , oLDtlData.loanPaymentFrequency
            , oLDtlData.balance
            , daysDiff
          ) ;
          // oLDtlData.existing_loan_aer ? loan.setInterestTypeToAER() : loan.setInterestTypeToSimple(); // Not required

          var oustandLoanInstance = OMObjFactory.getOMAccountDataInstance();
          oustandLoanInstance.setType( AccountTypes.TYPE_EXISTINGLOAN ) ;
          oustandLoanInstance.setFrequency( loan.getFrequency() ) ;
          oustandLoanInstance.setLoan( loan ) ;

          request.getAccountDataList().push( oustandLoanInstance ) ;
      }
    }
  };


  ResponseSerializer.Loan = {};
  ResponseSerializer.Loan.ORIENTATION_MONTHLY = 12 ; // Always Monthly for OrangeMoney Loan Module.

  return ResponseSerializer;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ 42354:
/*!***********************************************************************!*\
  !*** ./node_modules/om-js-calc/src/calc/util/WithholdingUtilities.js ***!
  \***********************************************************************/
/***/ (function(module, exports) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function(){

    var WithholdingUtilities = {};


    /**  bracket withholding calculation
    */
    WithholdingUtilities.baseBracketCalc = function( taxable, bracket ) {
        var portion, remaining, workingTax = 0.0 ;
        var arraySize = bracket.length ; 
        remaining = taxable ;
        for( var n = ( arraySize - 1 ) ; ( n > -1 ) && ( remaining > 0.0 ) ; n-- ) {
            portion = ( bracket[n][WithholdingUtilities.THRESHOLD] < remaining ) ? ( remaining - bracket[n][WithholdingUtilities.THRESHOLD] ) : 0.0 ;
            workingTax += ( bracket[n][WithholdingUtilities.RATE] * portion ) ;
            remaining -= portion ;
        }
        return( workingTax ) ;
    };


    /**  standard bracket calculation (most circumstances)
     */
    WithholdingUtilities.standardBracketCalc = function( taxable, bracket ) {
        var arraySize = bracket.length ; 
        var workingTax = 0.0 ;
        for( var n = arraySize - 1 ; n > -1 ; n-- ) {
            if( taxable > bracket[n][WithholdingUtilities.THRESHOLD] ) {
                workingTax = bracket[n][WithholdingUtilities.ADDITIVE] + ( bracket[n][WithholdingUtilities.RATE] * ( taxable - bracket[n][WithholdingUtilities.THRESHOLD] ) ) ;
                break ;
            }
        }
        return( workingTax ) ;
    };


    //  statics ------------------------------------
    WithholdingUtilities.THRESHOLD = 0 ;
    WithholdingUtilities.ADDITIVE = 1 ;
    WithholdingUtilities.SUBTRACTIVE = 2 ;
    WithholdingUtilities.RATE = 3 ;
    WithholdingUtilities.property_labels = [ "threshold","additive","subtractive","rate" ] ;


    return WithholdingUtilities ;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ 95583:
/*!******************************************************************************!*\
  !*** ./node_modules/om-js-calc/src/calc/util/employermatch/CustomERMatch.js ***!
  \******************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./EmployerMatchWrapper */ 38150), __webpack_require__(/*! ../../Utilities */ 44387)], __WEBPACK_AMD_DEFINE_RESULT__ = (function(EmployerMatchWrapper, Utilities){
	var CustomERMatch = Utilities.extend(EmployerMatchWrapper, function(){});
	return CustomERMatch;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));



/***/ }),

/***/ 72039:
/*!*************************************************************************!*\
  !*** ./node_modules/om-js-calc/src/calc/util/employermatch/DateTier.js ***!
  \*************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./match/ConsecutiveTierEmployerMatch */ 88599)], __WEBPACK_AMD_DEFINE_RESULT__ = (function(ConsecutiveTierEmployerMatch){

    var DateTier = function(){
        this.em =  new ConsecutiveTierEmployerMatch( 1 ) ;
        this.nYearOffset = 0 ;
        this.nPayPeriodOffset = 0 ;
    };


    DateTier.prototype.set = function( nPayPeriods, sCurrentYYYYMMDD, sTierDateYYYYMMDD, dRangeOfSalary, dRateOfMatch ) {
        var nYearDiff = 0 ;
        var nMonthDiff = 0 ;
        var nDayDiff = 0 ;

        // set range of salary and rate of match
        this.nYearOffset = this.nPayPeriodOffset = 0 ;
        this.em.setFirstTier( dRangeOfSalary, dRateOfMatch ) ;

        if( ( sTierDateYYYYMMDD === null ) || ( sTierDateYYYYMMDD === "" ) ) {
            return ;
        }

        // year, month, and day strings into integers
        var nCurrentYear  = parseInt( sCurrentYYYYMMDD.substring( 0, 4 ), 10 ) ;
        var nCurrentMonth = parseInt( sCurrentYYYYMMDD.substring( 4, 6 ), 10 ) ;
        var nCurrentDay   = parseInt( sCurrentYYYYMMDD.substring( 6, 8 ), 10 ) ;

        var nTierYear   = parseInt( sTierDateYYYYMMDD.substring( 0, 4 ), 10 ) ;
        var nTierMonth  = parseInt( sTierDateYYYYMMDD.substring( 4, 6 ), 10 ) ;
        var nTierDay    = parseInt( sTierDateYYYYMMDD.substring( 6, 8 ), 10 ) ;

        nYearDiff = ( nTierYear - nCurrentYear ) ;
        nMonthDiff = ( nTierMonth - nCurrentMonth ) ;
        nDayDiff = ( nTierDay - nCurrentDay ) ;

        // is definitely past (or today) ...
        if( ( nYearDiff < 0 ) || ( ( nYearDiff === 0 ) && ( nMonthDiff < 0 ) )|| ( ( nYearDiff === 0 ) && ( nMonthDiff === 0 ) && ( nDayDiff <=0 ) ) ) {
            return ;
        }

        // is definitely future
        var gcTier  = new Date( nTierYear, ( nTierMonth - 1 ), nTierDay ) ;
        var gcTest  = new Date( nTierYear, ( nCurrentMonth - 1 ), nCurrentDay ) ;
	
        var nDayOfYearTier = DateTier.getDOY( gcTier ) ;
        var nDayOfYearTest = DateTier.getDOY( gcTest ) ;
        var nDayOfYearDiff = Math.abs( nDayOfYearTest - nDayOfYearTier ) + 1 ;

        this.nPayPeriodOffset = Math.floor( nDayOfYearDiff / ( 365 / nPayPeriods ) ) ;

        if( nDayOfYearTest > nDayOfYearTier ) {
            nYearDiff-- ;
            this.nPayPeriodOffset = Math.max( nPayPeriods - this.nPayPeriodOffset, 0 ) ;
        }

        this.nYearOffset = nYearDiff ;

    };


    // static method to handle .java Calendar.DAY_OF_YEAR function
    DateTier.getDOY = function( jsDate ) {
        var janOne = new Date(jsDate.getFullYear(),0,1);
        return Math.ceil((jsDate - janOne) / 86400000);
    };


    return DateTier;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ 44345:
/*!********************************************************************************!*\
  !*** ./node_modules/om-js-calc/src/calc/util/employermatch/DateTierERMatch.js ***!
  \********************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./EmployerMatchWrapper */ 38150), __webpack_require__(/*! ../../Utilities */ 44387),__webpack_require__(/*! ./DateTier */ 72039)], __WEBPACK_AMD_DEFINE_RESULT__ = (function(EmployerMatchWrapper, Utilities,DateTier){

    //  Constructor
    var DateTierERMatch = Utilities.extend(EmployerMatchWrapper, function(){

        //  Private var declarations ------------------------------------
        var that = this;
        var _dAnnualMaxContrib = 0 ;
        var _alDateTiers = null ;

        //  Privileged Method Declarations ------------------------------------

        this.addTier = function( nPayPeriods, sCurrentYYYYMMDD, sTierDateYYYYMMDD, dRangeOfSalary, dRateOfMatch ){
            var dt = new DateTier() ;   //  dt:DateTier
                dt.set( nPayPeriods, sCurrentYYYYMMDD, sTierDateYYYYMMDD, dRangeOfSalary, dRateOfMatch ) ;
            _alDateTiers.push( dt ) ;
        };

        this.setAnnualMaxContrib = function( d ){
            if( _dAnnualMaxContrib != d ){
                _dAnnualMaxContrib = d ;
            }
        };

        this.sort = function( )
        {
            var bChanged = true ;

            while( bChanged )
            {
                var o = [] ;
                var dth ;   //  DateTier
                var dtl ;   //  DateTier
                bChanged = false ;

                for( var n = _alDateTiers.length - 1 ; n > 0 ; n-- )
                {
                    o = _alDateTiers;
                    dth = o[n] ;
                    dtl = o[n - 1] ;

                    if( ( dtl.nYearOffset > dth.nYearOffset ) || ( ( dtl.nYearOffset == dth.nYearOffset ) && ( dtl.nPayPeriodOffset > dth.nPayPeriodOffset ) ) )
                    {
                        _alDateTiers[n] = dtl  ;
                        _alDateTiers[n - 1] = dth  ;
                        bChanged = true ;
                    }
                    else
                    {
                    if( ( dtl.nYearOffset === 0 && dth.nYearOffset === 0 ) && ( dtl.nPayPeriodOffset === 0 && dth.nPayPeriodOffset === 0 ) )
                    {
                        if( dtl.em.getTierMatchRate( 1 ) > dth.em.getTierMatchRate( 1 ) )
                            {
                                _alDateTiers[n] = dtl ;
                                _alDateTiers[n - 1] = dth ;
                                bChanged = true ;
                            }
                        }
                    }
                }
            }
        };

        this.getEmployerContrib = function( dModalEeContrib, dAnnualEeContribAscribed, dAnnualSalary, nPayPeriods, _nYearOffset, _nPayPeriodOffset )
        {
            var nYearOffset =  _nYearOffset || 0;
            var nPayPeriodOffset = _nPayPeriodOffset || 0;
            var dReturn = 0 ;

            nPayPeriods = Math.max(nPayPeriods, 1) ;

            var dMatchingContribThreshold = 0 ;
            var o = _alDateTiers ;
            var dt ;

            // 1. step backward through the array
            for( var n = o.length - 1 ; n > -1 ; n-- )
            {
                dt = o[n] ;

                dMatchingContribThreshold = ( dt.em.getTierMatchRange( 1 ) * dAnnualSalary / nPayPeriods ) ;
                dMatchingContribThreshold -= dAnnualEeContribAscribed / nPayPeriods ;
                dMatchingContribThreshold = Math.max( dMatchingContribThreshold, 0 ) ;

                // 2. if (years).(pay period) > (array.years).(array.payperiod) then...
                if( nYearOffset > dt.nYearOffset )
                {
                    // 3. calculate match
                    dReturn = Math.min( dModalEeContrib, dMatchingContribThreshold ) * dt.em.getTierMatchRate( 1 ) ;
                    break ;
                }

                if( ( nYearOffset == dt.nYearOffset ) && ( nPayPeriodOffset >= dt.nPayPeriodOffset ) )
                {
                    dReturn = Math.min( dModalEeContrib, dMatchingContribThreshold ) * dt.em.getTierMatchRate( 1 ) ;
                    break ;
                }
            }
            // check against annual max
            dReturn = ( _dAnnualMaxContrib > 0 ) ? Math.min( ( _dAnnualMaxContrib / nPayPeriods ), dReturn ) : dReturn ;

            return( dReturn ) ;
        };

        this.reset = function( ) {
            if( _alDateTiers === null )
                _alDateTiers = new Array() ;
            else
                _alDateTiers = [];
        };

        //  Private Method Declarations ------------------------------------
        (function init( ){
            _alDateTiers = new Array() ;
            that.setAnnualMaxContrib( 0 ) ;
            that.setCalcPeriodicity( EmployerMatchWrapper.ERMATCHCALC_MODAL ) ;
        })();

    });

    //  Public Method Declarations ------------------------------------
    DateTierERMatch.prototype.modifyEeContrib = function( dModalEeContrib, dAnnualSalary, nPayPeriods ){
        // no change
        return( dModalEeContrib ) ;
    };

    return DateTierERMatch;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));



/***/ }),

/***/ 83103:
/*!*******************************************************************************!*\
  !*** ./node_modules/om-js-calc/src/calc/util/employermatch/ERMatchFactory.js ***!
  \*******************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./ERMatchTypes */ 21142), __webpack_require__(/*! ./StandardERMatch */ 74168),
        __webpack_require__(/*! ./MODC_ERMatch */ 45329), __webpack_require__(/*! ./DateTierERMatch */ 44345),
        __webpack_require__(/*! ./StandardProfitSharing */ 59819), __webpack_require__(/*! ./MandatoryERMatch */ 65996),
        __webpack_require__(/*! ./CustomERMatch */ 95583)], __WEBPACK_AMD_DEFINE_RESULT__ = (function(ERMatchTypes, StandardERMatch, MODC_ERMatch, DateTierERMatch, StandardProfitSharing,
        MandatoryERMatch, CustomERMatch) {

    var ERMatchFactory = {};

    ERMatchFactory.getCustomInstance = function( name ) {
        return( new CustomERMatch() ) ;
    };

    ERMatchFactory.getStandardInstance = function( name ) {
        return( new StandardERMatch() ) ;
    };

    ERMatchFactory.getDateTierInstance = function( name ) {
        return( new DateTierERMatch() ) ;
    };

    ERMatchFactory.getProfitSharingInstance = function( name ) {
        return( new StandardProfitSharing() ) ;
    };

    ERMatchFactory.getMandatoryInstance = function( name ){
        return( new MandatoryERMatch() ) ;
    };

    ERMatchFactory.getInstance = function(type, name) {
        var r = null ;

        switch( type ) {
        case ERMatchTypes.DATETIER :
            r = new DateTierERMatch() ;
            break ;

        case ERMatchTypes.CUSTOM :
            // TODO: update to JS method
            if( "MODC".equals( name ) ) {
                r = new MODC_ERMatch() ;
            }
            break ;

        case ERMatchTypes.PROFITSH :
            r = new StandardProfitSharing() ;
            break ;

        case ERMatchTypes.MANDATORY :
            r = new MandatoryERMatch() ;
            break;
        case ERMatchTypes.STANDARD :
            r = new StandardERMatch() ;
            break ;
        default :
            r = new StandardERMatch() ;
            break ;
        }
        return r;
    };

    return ERMatchFactory;

}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));



/***/ }),

/***/ 21142:
/*!*****************************************************************************!*\
  !*** ./node_modules/om-js-calc/src/calc/util/employermatch/ERMatchTypes.js ***!
  \*****************************************************************************/
/***/ (function(module, exports) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function(){
	var ErMatchTypes = {};

		ErMatchTypes.UNDEFINED = -1 ;
		ErMatchTypes.STANDARD = 0 ;
		ErMatchTypes.DATETIER = 1 ;
		ErMatchTypes.PROFITSH = 2 ;
		ErMatchTypes.CUSTOM  = 3 ;
		ErMatchTypes.MANDATORY = 4 ;

		ErMatchTypes.ID_NONE  = -1 ;
		ErMatchTypes.ID_0  = 0 ;
		ErMatchTypes.ID_1  = 1 ;
		ErMatchTypes.ID_2  = 2 ;
		ErMatchTypes.ID_3  = 3 ;
		ErMatchTypes.ID_4  = 4 ;
		ErMatchTypes.ID_5  = 5 ;

        ErMatchTypes.STANDARD_TIER_COUNT = 2 ;
        ErMatchTypes.STANDARD_TIER_COUNT_2  = 2 ;
        ErMatchTypes.STANDARD_TIER_COUNT_3  = 3 ;

        ErMatchTypes.MAX_TIER_DEFAULT  = 99 ;  // default to non-tier specific
        ErMatchTypes.MAX_TIER_ONE = 0 ;
        ErMatchTypes.MAX_TIER_TWO = 1 ;
        ErMatchTypes.MAX_TIER_1 = 0 ;
        ErMatchTypes.MAX_TIER_2 = 1 ;

	return ErMatchTypes;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ 38150:
/*!*************************************************************************************!*\
  !*** ./node_modules/om-js-calc/src/calc/util/employermatch/EmployerMatchWrapper.js ***!
  \*************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./ERMatchTypes */ 21142)], __WEBPACK_AMD_DEFINE_RESULT__ = (function(ERMatchTypes){

    //  Constructor
    var EmployerMatchWrapper = function(){

        //  Private var declarations ------------------------------------
        var that = this;
        var _nCalcPeriodicity = EmployerMatchWrapper.ERMATCHCALC_ANNUAL ;
        var _id = ERMatchTypes.ID_0;
        var _type = -1;
        var _name = "";

        //  Privileged Method Declarations ------------------------------------
        this.reset = function( ){} ;

        this.setCalcPeriodicity = function( n ) { _nCalcPeriodicity = n ; };
        this.getCalcPeriodicity = function( ) { return( _nCalcPeriodicity ) ; };

        this.calcPeriodicityIsAnnual = function( ) { return( _nCalcPeriodicity == EmployerMatchWrapper.ERMATCHCALC_ANNUAL ) ; };
        this.calcPeriodicityIsModal = function( ) { return( _nCalcPeriodicity != EmployerMatchWrapper.ERMATCHCALC_ANNUAL ) ; };

        this.getType = function( ) { return( _type ); };
        this.setType = function( n ) { _type = n  ; };

        this.getID = function( ) { return( _id ); };
        this.setID = function( n ) { _id = ( n > -1 && n <= ERMatchTypes.ID_5 ) ? n : ERMatchTypes.ID_0 ; };

        this.getName = function( ) { return( _name ); };
        this.setName = function( s ) { _name = s  ; };


        this.getEmployerContrib = function( dModalEeContrib, dModalEeContribAscribed, dAnnualSalary, nPayPeriods, nYearOffset, nPayPeriodOffset ) {};

        //  Private Method Declarations ------------------------------------
        (function init( ){})() ;
    };

    //  Public Method Declarations ------------------------------------
    EmployerMatchWrapper.prototype.modifyEeContrib = function( dModalEeContrib, dAnnualSalary, nPayPeriods ) {};

    //  Static Variable Declarations ------------------------------------
    EmployerMatchWrapper.ERMATCHCALC_ANNUAL = 0 ;
    EmployerMatchWrapper.ERMATCHCALC_MODAL = 1 ;

    return EmployerMatchWrapper;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));



/***/ }),

/***/ 45329:
/*!*****************************************************************************!*\
  !*** ./node_modules/om-js-calc/src/calc/util/employermatch/MODC_ERMatch.js ***!
  \*****************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ../CalcUtilities */ 29099), __webpack_require__(/*! ./CustomERMatch */ 95583), __webpack_require__(/*! ../../Utilities */ 44387)], __WEBPACK_AMD_DEFINE_RESULT__ = (function(CalcUtilities, CustomERMatch, Utilities){

    //  Constructor (Extends CustomERMatch)
    var MODC_ERMatch = Utilities.extend(CustomERMatch, function(){

        //  Public Variable Declarations  -------------------------------
            this.aTiers = [ 0, 300, 360, 420 ] ;

        //  Privileged Method Declarations  -------------------------------
        this.getEmployerContrib = function( dModalEeContrib, dAnnualEeContribAscribed, dAnnualSalary, nPayPeriods ){
            var dReturn = 0 ;
            var dMatchingContrib = 0 ;
            nPayPeriods = ( nPayPeriods > 0 ) ? nPayPeriods : 1 ;

            dMatchingContrib = _getEmployerContrib( dModalEeContrib + ( dAnnualEeContribAscribed / nPayPeriods ), nPayPeriods ) ;
            dMatchingContrib -= _getEmployerContrib( ( dAnnualEeContribAscribed / nPayPeriods ), nPayPeriods ) ;
            dReturn = Math.max( dMatchingContrib, 0 ) ;

            return( CalcUtilities.truncate( dReturn, 2 ) ) ;
        };

        this.reset = function( ){ };

        //  Private Method Declarations  -------------------------------
        function _getEmployerContrib( dContrib, nPayPeriods ){
            var dReturn = 0 ;

            for( var n = ( aTiers.length - 1 ) ; ( n > -1 ) ; n-- )
            {
                if( aTiers[n] <= ( dContrib * nPayPeriods ) )
                {
                    dReturn = ( aTiers[n] / nPayPeriods ) ;
                    break ;
                }
            }

            return( CalcUtilities.truncate( dReturn, 2 ) ) ;
        }

    });

    //  Public Method Declarations  -------------------------------
    MODC_ERMatch.prototype.modifyEeContrib = function( dModalEeContrib, dAnnualSalary, nPayPeriods ){
        var dReturn = CalcUtilities.roundToNearest( 0.5, dModalEeContrib ) ;
        return( CalcUtilities.truncate( dReturn, 2 ) ) ;
    };

    return MODC_ERMatch;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ 65996:
/*!*********************************************************************************!*\
  !*** ./node_modules/om-js-calc/src/calc/util/employermatch/MandatoryERMatch.js ***!
  \*********************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./EmployerMatchWrapper */ 38150), __webpack_require__(/*! ../../Utilities */ 44387)], __WEBPACK_AMD_DEFINE_RESULT__ = (function(EmployerMatchWrapper, Utilities){

    //  Constructor (Extends EmployerMatchWrapper)
    var MandatoryERMatch = Utilities.extend(EmployerMatchWrapper, function(){

        //  Private Variable Declarations ------------------------------------
        var that = this;
        var _dRateOfSalary ;
        var _dFlatAnnualContrib ;

        //  Privileged Method Declarations ------------------------------------
        this.setRateOfSalary = function( d ){
            if( _dRateOfSalary != d )
            {
                _dRateOfSalary = d ;
            }
        };

        this.getRateOfSalary = function( ){
            return( _dRateOfSalary ) ;
        };

        this.setFlatAnnualContrib = function( d ){
            if( _dFlatAnnualContrib != d )
            {
                _dFlatAnnualContrib = d ;
            }
        };

        this.getFlatAnnualContrib = function( ){
            return( _dFlatAnnualContrib ) ;
        };

        this.set = function( dFlatAnnualErContrib, dErRateMatchOfSalary ){
            if(dErRateMatchOfSalary === undefined){
                _set(dFlatAnnualErContrib);
            }else{
                this.setFlatAnnualContrib( dFlatAnnualErContrib ) ;
                this.setRateOfSalary( dErRateMatchOfSalary ) ;
            }
        };

        this.getMandatory = function( dAnnualSalary, _nPayPeriods ){
            var nPayPeriods = _nPayPeriods || 1;
            var dReturn = 0 ;
            nPayPeriods = ( nPayPeriods > 0 ) ? nPayPeriods : 1 ;

            if( _dFlatAnnualContrib > 0 )
            {
                dReturn += ( _dFlatAnnualContrib / nPayPeriods ) ;
            }

            if( _dRateOfSalary > 0 )
            {  // use general rate of salary
                dReturn += ( dAnnualSalary / nPayPeriods * _dRateOfSalary ) ;
            }

            return( dReturn ) ;
        };

        this.getEmployerContrib = function( dModalEeContrib, dEeContribAscribed, dAnnualSalary, nPayPeriods ){
            return( this.getMandatory( dAnnualSalary, nPayPeriods ) ) ;
        };

        this.reset = function( ){
            this.setFlatAnnualContrib( 0 ) ;
            this.setRateOfSalary( 0 ) ;
        };

        //  Private Method Declarations ------------------------------------
        (function init( ){
            _dRateOfSalary =
            _dFlatAnnualContrib  = 0 ;
        })();

        function _set( d ){
            // determine type of parameter
            if( d > 1 )  // not a rate
                that.setFlatAnnualContrib( d ) ;
            else
                that.setRateOfSalary( d ) ;
        }

    });

    MandatoryERMatch.prototype.modifyEeContrib = function( dModalEeContrib, dAnnualSalary, nPayPeriods ){
        // no change
        return( dModalEeContrib ) ;
    };

    return MandatoryERMatch;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));



/***/ }),

/***/ 74168:
/*!********************************************************************************!*\
  !*** ./node_modules/om-js-calc/src/calc/util/employermatch/StandardERMatch.js ***!
  \********************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ../CalcUtilities */ 29099), __webpack_require__(/*! ./match/ConsecutiveTierEmployerMatch */ 88599),
        __webpack_require__(/*! ./EmployerMatchWrapper */ 38150), __webpack_require__(/*! ./ERMatchTypes */ 21142), __webpack_require__(/*! ../../Utilities */ 44387)], __WEBPACK_AMD_DEFINE_RESULT__ = (function(CalcUtilities, ConsecutiveTierEmployerMatch, EmployerMatchWrapper, ERMatchTypes, Utilities){

        var StandardERMatch = Utilities.extend(EmployerMatchWrapper, function(){

            //  Private Variable Declarations  ------------------------------
            var that = this;
            var _em = null ;
            var _dAnnualMaxContrib = 0 ;
            var _nTierToApplyAnnualMax = ERMatchTypes.MAX_TIER_DEFAULT ;  // zero-based; if not index, max applies to combined tiers

            //  Privileged Method Declarations  ------------------------------
            this.setAnnualMaxContrib = function( d ){
                if( _dAnnualMaxContrib != d )
                {
                    _dAnnualMaxContrib = d ;
                }
            };

            this.setTierAnnualMax = function( n ) {
                if( _nTierToApplyAnnualMax != n ) {
                    _nTierToApplyAnnualMax = n ;
                }
            };

            this.set = function( d1stRateOfMatch,  d1stRangeOfSalary, d2ndRateOfMatch,  d2ndRangeOfSalary, dAnnualMaxContrib, nTierToApplyAnnualMax ){
                var _d1stRateOfMatch = d1stRateOfMatch || 0;
                var _d1stRangeOfSalary = d1stRangeOfSalary || 0;
                var _d2ndRateOfMatch = d2ndRateOfMatch || 0;
                var _d2ndRangeOfSalary = d2ndRangeOfSalary || 0;
                var _dAnnualMaxContrib = dAnnualMaxContrib || 0;
                var _nTierToApplyAnnualMax = isNaN(nTierToApplyAnnualMax)  ? ERMatchTypes.MAX_TIER_DEFAULT  : nTierToApplyAnnualMax;
                _set( _d1stRateOfMatch, _d1stRangeOfSalary, _d2ndRateOfMatch, _d2ndRangeOfSalary, _dAnnualMaxContrib, _nTierToApplyAnnualMax ) ;
            };

            this.getAnnualMaxContrib = function( ){
                return( _dAnnualMaxContrib ) ;
            };

            this.getTierAnnualMax = function( ) {
                return( _nTierToApplyAnnualMax ) ;
            };

            this.getEmployerContrib = function( dModalEeContrib, dAnnualEeContribAscribed, dAnnualSalary, nPayPeriods ){

                var dReturn = 0 ;
                var dMatchingContrib = 0 ;
                var dAnnualAscribedMatching = 0 ;
                nPayPeriods = ( nPayPeriods > 0 ) ? nPayPeriods : 1 ;


                // for tier-specific
                var nTiers = _em.getTierCount() ;
                var nTierToApplyMax = that.getTierAnnualMax( ) ;

                // if annual max IS tier-specific
                if( ( _dAnnualMaxContrib > 0 ) && ( nTierToApplyMax > -1 ) && ( nTierToApplyMax < nTiers ) ) {

                    var tierSpecific = new Array( nTiers ) ;

                    for( var n = 0 ; n < nTiers ; n++ ) {
                        dMatchingContrib = _em.getEmployerMatchingContribPerTier( dModalEeContrib + ( dAnnualEeContribAscribed / nPayPeriods ), CalcUtilities.truncate( ( dAnnualSalary / nPayPeriods ), 2 ), n ) ;
                        dMatchingContrib -= _em.getEmployerMatchingContribPerTier( ( dAnnualEeContribAscribed / nPayPeriods ), CalcUtilities.truncate( ( dAnnualSalary / nPayPeriods ), 2 ), n ) ;
                        dAnnualAscribedMatching = _em.getEmployerMatchingContribPerTier( dAnnualEeContribAscribed, CalcUtilities.truncate( dAnnualSalary, 2 ), n  ) ;
                        tierSpecific[n] = Math.max( dMatchingContrib, 0. ) ;
                        tierSpecific[n] = ( n == nTierToApplyMax ) ? Math.min( Math.max( ( ( _dAnnualMaxContrib - dAnnualAscribedMatching ) / nPayPeriods ), 0. ), tierSpecific[n] ) : tierSpecific[n] ;
                    }

                    dReturn = _totalArray( tierSpecific ) ;

                }  // annual max IS NOT tier-specific
                else {
                    dMatchingContrib = _em.getEmployerMatchingContrib( dModalEeContrib + ( dAnnualEeContribAscribed / nPayPeriods ), CalcUtilities.truncate( ( dAnnualSalary / nPayPeriods ), 2 ) ) ;
                    dMatchingContrib -= _em.getEmployerMatchingContrib( ( dAnnualEeContribAscribed / nPayPeriods ), CalcUtilities.truncate( ( dAnnualSalary / nPayPeriods ), 2 ) ) ;
                    dAnnualAscribedMatching = _em.getEmployerMatchingContrib( dAnnualEeContribAscribed, CalcUtilities.truncate( dAnnualSalary, 2 ) ) ;
                    dReturn = Math.max( dMatchingContrib, 0 ) ;

                    // check against annual max
                    dReturn = ( _dAnnualMaxContrib > 0 ) ? Math.min( Math.max( ( ( _dAnnualMaxContrib - dAnnualAscribedMatching ) / nPayPeriods ), 0 ), dReturn ) : dReturn ;
                }

                return( dReturn ) ;

            };

            this.reset = function( ){
                _set( 0, 0, 0, 0, 0, _nTierToApplyAnnualMax ) ;
            };

            //  Private Method Declarations  ---------------------------------
            (function init( ){
                // two tier employer match
                _em = new ConsecutiveTierEmployerMatch( ERMatchTypes.STANDARD_TIER_COUNT ) ;
                _dAnnualMaxContrib   = 0 ;
                _nTierToApplyAnnualMax = ERMatchTypes.MAX_TIER_DEFAULT ;  // default - max applies to all tiers combined

            })();

            function _set( d1stRateOfMatch, d1stRangeOfSalary, d2ndRateOfMatch, d2ndRangeOfSalary, dAnnualMaxContrib, nTierToApplyAnnualMax ){
                _em.setFirstTier( d1stRangeOfSalary, d1stRateOfMatch ) ;
                _em.setSecondTier( d2ndRangeOfSalary, d2ndRateOfMatch ) ;
                that.setAnnualMaxContrib( dAnnualMaxContrib ) ;
                that.setTierAnnualMax( nTierToApplyAnnualMax ) ;
            }

            function _totalArray( _dd ) {
                var dReturn = 0 ;

                for( var n = 0 ; n < _dd.length ; n++ ) {
                    dReturn += _dd[n] ;
                }

                return( dReturn ) ;
            }

        });

        StandardERMatch.prototype.modifyEeContrib = function( dModalEeContrib, dAnnualSalary, nPayPeriods )
        {
            return( dModalEeContrib ) ;
        };

        return StandardERMatch;

    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ 59819:
/*!**************************************************************************************!*\
  !*** ./node_modules/om-js-calc/src/calc/util/employermatch/StandardProfitSharing.js ***!
  \**************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ../CalcUtilities */ 29099), __webpack_require__(/*! ./EmployerMatchWrapper */ 38150),
        __webpack_require__(/*! ../../Utilities */ 44387)], __WEBPACK_AMD_DEFINE_RESULT__ = (function(CalcUtilities, EmployerMatchWrapper, Utilities){

    //  Constructor (Extends EmployerMatchWrapper)
    var StandardProfitSharing = Utilities.extend(EmployerMatchWrapper, function(){

        //  Private Variable Declarations ------------------------------------
        var that = this;
        var _dRateOfSalary ;
        var _dFlatAnnualContrib ;

        //  Privileged method Declarations ------------------------------------
        this.setRateOfSalary = function(d){
            if( _dRateOfSalary != d )
            {
                _dRateOfSalary = d ;
            }
        };

        this.getRateOfSalary = function( ){
            return( _dRateOfSalary ) ;
        };

        this.setFlatAnnualContrib = function(d){
            if( _dFlatAnnualContrib != d )
            {
                _dFlatAnnualContrib = d ;
            }
        };

        this.getFlatAnnualContrib = function( ){
            return( _dFlatAnnualContrib ) ;
        };

        this.set = function(dFlatAnnualErContrib, dErRateMatchOfSalary ){
            if(dErRateMatchOfSalary === undefined){
                _set(dFlatAnnualErContrib);
            }else{
                this.setFlatAnnualContrib( dFlatAnnualErContrib ) ;
                this.setRateOfSalary( dErRateMatchOfSalary ) ;
            }
        };

        this.getProfitSharing = function(dAnnualSalary, nPayPeriods)
        {

            var dReturn = 0 ;
            nPayPeriods = ( nPayPeriods === undefined ) ? 1 : nPayPeriods;
            nPayPeriods = ( nPayPeriods > 0 ) ? nPayPeriods : 1 ;

            if( _dFlatAnnualContrib > 0 )
            {
                dReturn += ( _dFlatAnnualContrib / nPayPeriods ) ;
            }

            if( _dRateOfSalary > 0 )
            {  // use general rate of salary
                dReturn += ( dAnnualSalary / nPayPeriods * _dRateOfSalary ) ;
            }

            return( CalcUtilities.truncate( dReturn, 2 ) ) ;
        };

        this.getEmployerContrib = function( dModalEeContrib, dModalEeContribAscribed, dAnnualSalary, nPayPeriods, nYearOffset, nPayPeriodOffset ){
            return( this.getProfitSharing( dAnnualSalary, nPayPeriods ) ) ;
        };

        this.reset = function( ){
            this.setFlatAnnualContrib( 0 ) ;
            this.setRateOfSalary( 0 ) ;
        };


        //  Private Method Declarations ------------------------------------
        (function init( ){
            // two tier employer match
            _dRateOfSalary          = 0 ;
            _dFlatAnnualContrib  = 0 ;
        })();

        function _set(d){
            // determine type of parameter
            if( d > 1 )  // not a rate
                that.setFlatAnnualContrib( d ) ;
            else
                that.setRateOfSalary( d ) ;
        }

    });

    //  Public Method Declarations ------------------------------------
    StandardProfitSharing.prototype.modifyEeContrib = function( dModalEeContrib, dAnnualSalary, nPayPeriods ){
        // no change
        return( dModalEeContrib ) ;
    };

    return StandardProfitSharing;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ 88599:
/*!***************************************************************************************************!*\
  !*** ./node_modules/om-js-calc/src/calc/util/employermatch/match/ConsecutiveTierEmployerMatch.js ***!
  \***************************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./EmployerMatch */ 42805)], __WEBPACK_AMD_DEFINE_RESULT__ = (function(EmployerMatch){

    //  Constructor
    var ConsecutiveTierEmployerMatch = function(nTierCount){

        //  Private Var Declarations ------------------------------------
        var _em = null;

        //  Privileged Method Declarations ------------------------------------
        this.getEmployerMatchObj = function( ){
            return( _em ) ;
        };

        this.getTierCount = function( ) {
            return( ( _em != null ) ? _em.getTierCount() : 0 ) ;
        };

        this.setTier = function(nTierNumber,dRange,dMatchRate ){
            return( _setTier( ( nTierNumber - 1 ), dRange, dMatchRate ) ) ;
        };

        this.setFirstTier = function(dRange,dMatchRate ){
            return( _setTier( 0, dRange, dMatchRate ) ) ;
        };

        this.setSecondTier = function(dRange,dMatchRate){
            return( _setTier( 1, dRange, dMatchRate ) ) ;
        };

        this.setThirdTier = function(dRange,dMatchRate){
            return( _setTier( 2, dRange, dMatchRate ) ) ;
        };

        this.setLastTier = function(dRange,dMatchRate){
            if( _em.getTierCount() > 0 )
                return( _setTier( ( _em.getTierCount() - 1 ), dRange, dMatchRate ) ) ;

            return( false ) ;
        };

        this.setTierMatchRate = function(nTierNumber,dMatchRate){
            return( _setTierMatchRate( ( nTierNumber - 1 ), dMatchRate ) ) ;
        };

        this.setTierMatchRange = function(nTierNumber,dRange){
            return( _setTierRange( ( nTierNumber - 1 ), dRange ) ) ;
        };

        this.getTierMatchRate = function(nTierNumber){
            return( _getTierMatchRate( ( nTierNumber - 1 ) ) ) ;
        };

        this.getTierMatchRange = function(nTierNumber){
            return( _getTierMatchRange( ( nTierNumber - 1 ) ) ) ;
        };

        this.getEmployerMatchingContrib = function(dContrib,dSalary){
            return( _em.getEmployerMatchingContrib( dContrib, dSalary ) ) ;
        };

        this.getEmployerMatchingContribPerTier = function(dContrib,dSalary,nIndex){
            return( _em.getEmployerMatchingContribPerTier( dContrib, dSalary, nIndex ) ) ;
        };

        //  Private Method Declarations ------------------------------------
        (function init(){
            _em = new EmployerMatch() ;
            for( var n = 0 ; n < nTierCount ; n++ )
                _em.addMatchTier( 0.0, 0.0, 0.0 ) ;
        })();


        function _setTierRange(nIndex, dRange){
            var bReturn = false ;
            var dFloor = _em.getMatchTierFloorFactor( nIndex ) ;
            if( ( dFloor + dRange ) != _em.getMatchTierCeilingFactor( nIndex ) ) {
                bReturn = _em.setMatchTierCeilingFactor( nIndex, Math.min( ( dFloor + dRange ), 1.0 ) ) ;

                // adjust remaining ranges
                for( var n = ( nIndex + 1 ) ; n < _em.getTierCount() ; n++ ) {
                    if( ( dFloor + dRange ) < 1.0 ) {
                        // new floor factor
                        dFloor = dFloor + dRange ;
                        // new range
                        var mtcf = _em.getMatchTierCeilingFactor( n );
                        var mtff = _em.getMatchTierFloorFactor( n );
                        dRange = mtcf - mtff ;
                        _em.setMatchTierFloorFactor( n, dFloor ) ;
                        _em.setMatchTierCeilingFactor( n, Math.min( ( dFloor + dRange ), 1.0 ) ) ;
                    } else {
                        _em.setMatchTierFloorFactor( n, 0.0 ) ;
                        _em.setMatchTierCeilingFactor( n, 0.0 ) ;
                    }
                }
            }

            return( bReturn ) ;
        }


        function _setTierMatchRate( nIndex, dMatchRate ){
            return( _em.setMatchTierMatchRate( nIndex, dMatchRate ) ) ;
        }

        function _getTierMatchRate(nIndex){
            return( _em.getMatchTierMatchRate( nIndex ) ) ;
        }

        function _getTierMatchRange(nIndex){
            return( _em.getMatchTierCeilingFactor( nIndex ) - _em.getMatchTierFloorFactor( nIndex ) ) ;
        }

        function _setTier(nIndex,dRange,dMatchRate ){
            _setTierRange( nIndex, dRange ) ;
            return( _setTierMatchRate( nIndex, dMatchRate ) ) ;
        }
    };

    return ConsecutiveTierEmployerMatch;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));



/***/ }),

/***/ 42805:
/*!************************************************************************************!*\
  !*** ./node_modules/om-js-calc/src/calc/util/employermatch/match/EmployerMatch.js ***!
  \************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./MatchTier */ 25359)], __WEBPACK_AMD_DEFINE_RESULT__ = (function(MatchTier) {

    //  Constructor
    var EmployerMatch = function(){
        //  Private Instance Variable Declaration -----------------------------
        var _bHasChanged ;
        var _n_mtCount ;
        var _mt ;

        //  Privileged Method Declarations ------------------------------------
        this.changed = function( )
        {
            return( _bHasChanged ) ;
        };


        this.addMatchTier = function( dFloorFactor, dCeilingFactor, dMatchRate)
        {
            var bReturn = false ;
            // assure legitimate parameters
            if( ( dFloorFactor >= 0.0 ) &&
                ( dCeilingFactor >= dFloorFactor ) &&
                ( dCeilingFactor <= 1.0 )
              ) {
                // temp for new tier
                var mt_Temp = new Array(_n_mtCount + 1) ;
                for( var n = 0 ; n < ( _n_mtCount + 1 ) ; n++ )
                    mt_Temp[n] = new MatchTier() ;

                var nTempCount = ( _n_mtCount + 1 ) ;

                // handle previous tiers
                for( var m = 0 ; m < _n_mtCount ; m++ )
                    mt_Temp[m] = _mt[m] ;

                // set new
                mt_Temp[ _n_mtCount ].setFloorThreshold( dFloorFactor ) ;
                mt_Temp[ _n_mtCount ].setCeilingThreshold( dCeilingFactor ) ;
                mt_Temp[ _n_mtCount ].setMatchRate( dMatchRate ) ;

                // reset match tier pointer
                _mt = mt_Temp ;

                // set count
                _n_mtCount = nTempCount ;
                _setChanged( true ) ;
                bReturn = true ;
            }

            return( bReturn ) ;
        };

        this.getTierCount = function( ){
            return( _n_mtCount ) ;
        };

        this.clearMatchTiers = function( ){
            var mt_Temp = new MatchTier()[ 0 ] ;
            var nTempCount = 0 ;

            // reset match tier pointer
            _mt = mt_Temp ;

            // set count
            _n_mtCount = nTempCount ;
            _setChanged( true ) ;
        };

        this.setMatchTierFloorFactor = function( nIndex, dFactor ){
            var bReturn = false ;

            if( this.isIndex( nIndex ) )
            {
                if( _mt[nIndex].getFloorThreshold() != dFactor )
                {
                    _mt[nIndex].setFloorThreshold( dFactor ) ;
                    _setChanged( true ) ;
                }
                bReturn = true ;
            }
            return( bReturn ) ;
        };

        this.getMatchTierFloorFactor = function( nIndex ){
            var dReturn = 0.0 ;

            if( this.isIndex( nIndex ) ){
                dReturn = _mt[nIndex].getFloorThreshold() ;
            }
            return( dReturn ) ;
        };

        this.setMatchTierCeilingFactor = function( nIndex, dFactor ) {
            var bReturn = false ;

            if( this.isIndex( nIndex ) ) {
                if( _mt[nIndex].getCeilingThreshold() != dFactor ) {
                    _mt[nIndex].setCeilingThreshold( dFactor ) ;
                    _setChanged( true ) ;
                }
                bReturn = true ;
            }
            return( bReturn ) ;
        };


        this.getMatchTierCeilingFactor = function( nIndex ) {
            var dReturn = 0.0 ;

            if( this.isIndex( nIndex ) ) {
                dReturn = _mt[nIndex].getCeilingThreshold() ;
            }

            return( dReturn ) ;
        };

        this.setMatchTierMatchRate = function( nIndex, dMatchRate ) {
            var bReturn = false ;

            if( this.isIndex( nIndex ) ) {
                if( _mt[nIndex].getMatchRate() != dMatchRate ) {
                    _mt[nIndex].setMatchRate( dMatchRate ) ;
                    _setChanged( true ) ;
                }
                bReturn = true ;
            }
            return( bReturn ) ;
        };

        this.getMatchTierMatchRate = function( nIndex ) {
            var dReturn = 0.0 ;

            if( this.isIndex( nIndex ) ) {
                dReturn = _mt[nIndex].getMatchRate() ;
            }
            return( dReturn ) ;
        };

        this.getEmployerMatchingContrib = function( dContrib, dSalary ) {
            var dMatchAccumulator = 0.0 ;

            // loop through tiers
            for( var n = 0 ; n < _n_mtCount ; n++ ) {
                dMatchAccumulator += _mt[n].getMatchAmount( dContrib, dSalary ) ;
            }

            return( dMatchAccumulator ) ;
        };

        this.getEmployerMatchingContribPerTier = function( dContrib, dSalary, nIndex ) {
            var dReturn = 0.0 ;

            // get tier match
            if( this.isIndex( nIndex ) ) {
                dReturn = _mt[nIndex].getMatchAmount( dContrib, dSalary ) ;
            }

            return( dReturn ) ;
        };

        //  Private Method Declarations ---------------------------------------
        (function init(){
            _n_mtCount = 0 ;
            _mt = [];
            _setChanged( true ) ;
        })();

        function _setChanged( b ){
            _bHasChanged = b ;
        }
    };


    //  Public Method Declarations ------------------------------------
    EmployerMatch.prototype.isIndex = function( nIndex ){
        return( ( nIndex > -1 ) && ( nIndex < this.getTierCount() ) ) ;
    };

    return EmployerMatch;

}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ 25359:
/*!********************************************************************************!*\
  !*** ./node_modules/om-js-calc/src/calc/util/employermatch/match/MatchTier.js ***!
  \********************************************************************************/
/***/ (function(module, exports) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {

    var MatchTier = function( dFloorFactor,  dCeilingFactor,  dMatchRate){

        //  Private Variable Declarations ------------------------------------
        var _dFloorThresholdFactor = dFloorFactor || 0;
        var _dCeilingThresholdFactor = dCeilingFactor || 0;
        var _dRate = dMatchRate || 0;

        //  Privileged var declarations ------------------------------------
        this.setFloorThreshold = function(d)
        {
            _dFloorThresholdFactor   = d ;
        };

        this.getFloorThreshold = function( )
        {
            return( _dFloorThresholdFactor ) ;
        };

        this.setCeilingThreshold = function(d)
        {
            _dCeilingThresholdFactor = d ;
        };

        this.getCeilingThreshold = function( )
        {
            return( _dCeilingThresholdFactor ) ;
        };

        this.setMatchRate = function(r)
        {
            _dRate = r ;
        };

        this.getMatchRate = function( )
        {
            return( _dRate ) ;
        };


        this.getMatchAmount = function(dContrib,dSalary ){
            var dFloorAmount = _dFloorThresholdFactor * dSalary ;
            var dCeilingAmount = _dCeilingThresholdFactor * dSalary ;

            // get contrib portion greater than bottom of range
            var dComponent = ( ( dContrib - dFloorAmount ) > 0.0 ) ? ( dContrib - dFloorAmount ) : 0.0 ;

            // get contrib portion that remains within range
            dComponent = ( dComponent > ( dCeilingAmount - dFloorAmount ) ) ? ( dCeilingAmount - dFloorAmount ) : dComponent ;

            // apply rate of match
            return( dComponent * _dRate ) ;

        };
    };

    return MatchTier;

}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ 88410:
/*!**********************************************!*\
  !*** ./node_modules/om-js-calc/src/index.js ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "omCalculator": function() { return /* binding */ omCalculator; },
/* harmony export */   "LoanUtil": function() { return /* binding */ LoanUtil; },
/* harmony export */   "AccountTypes": function() { return /* binding */ AccountTypes; }
/* harmony export */ });
/* harmony import */ var _calc_OMCalcWrapper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./calc/OMCalcWrapper */ 98296);
/* harmony import */ var _calc_OMCalcWrapper__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_calc_OMCalcWrapper__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _calc_loan_LoanUtil__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./calc/loan/LoanUtil */ 45104);
/* harmony import */ var _calc_loan_LoanUtil__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_calc_loan_LoanUtil__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _calc_AccountTypes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./calc/AccountTypes */ 81939);
/* harmony import */ var _calc_AccountTypes__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_calc_AccountTypes__WEBPACK_IMPORTED_MODULE_2__);



function omCalculator(data, preSerialized){
    return new (_calc_OMCalcWrapper__WEBPACK_IMPORTED_MODULE_0___default())(data, preSerialized);
}

var LoanUtil = (_calc_loan_LoanUtil__WEBPACK_IMPORTED_MODULE_1___default());
var AccountTypes = (_calc_AccountTypes__WEBPACK_IMPORTED_MODULE_2___default());

/***/ }),

/***/ 96893:
/*!********************************************************!*\
  !*** ./node_modules/om-js-calc/src/utils/utilities.js ***!
  \********************************************************/
/***/ (function(module, exports) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 * @file Utilities Library. Has helper utilities used across the app.
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function(){
    Utilities = {};

    /**
     * Converts a number into a dollar formatted string with commas for display. EX: 4623.569 -> $4,624 || 4,623.57
     * @param  {number}  money - The number value to be converted
     * @param  {boolean} hasDollar - Prepends the dollar sign to the string
     * @param  {boolean} round - Rounds the cents value to show a whole dollar.
     * @param  {boolean} dontCutOnZero - If the value isn't rounded but the cent value is 00, don't remove the cent value.
     * @return {string} formattedMoney - Formatted string version of number passed in.
     */
    Utilities.formatMoney = function(money, hasDollar, round, dontCutOnZero){
        var _money = money;

        if(_money === null) return "";

        // Strip out everything but numbers and decimals
        _money = (_money+"").replace(/[^0-9^\.]/g,"")*1;

        // Round the number if needed
        if(round) _money = Math.round(_money);

        // Adds commas where needed
        var formattedMoney = _money.toFixed(2).replace(/./g, function(c, i, a) {
            return i && c !== "." && !((a.length - i) % 3) ? ',' + c : c;
        });

        if(!dontCutOnZero && formattedMoney.substr(formattedMoney.indexOf(".")) == ".00"){
            formattedMoney = formattedMoney.substring(0, formattedMoney.indexOf("."));
        }

        return (hasDollar?"$":"") + formattedMoney;
    };

    /**
     * Converts a value to a percentage or to a whole number. And removes any floating point errors.
     * @param  {number} value - value to be converted
     * @param  {boolean} toDecimal
     * @return {number}
     */
    Utilities.formatPercent = function(value,toDecimal) {
        if (toDecimal) {
            value = Utilities.cleanNumber( value/100 );
        } else {
            value = Utilities.cleanNumber( value*100 );
        }

        return value;
    };

    /**
     * Removes possible floating point errors. EX: 3.53230000000004 -> 3.5323
     * @param  {number} value - to be cleaned
     * @return {number} cleaned number
     */
    Utilities.cleanNumber = function(value){
        value = parseFloat( value );
        return parseFloat(value.toFixed(4));
    };

    /**
     * Returns the styles in a stylesheet by source name match
     * @param  {string} src - stylesheet name
     * @return {string}     string of all stylesheet rules
     */
    Utilities.getStyleSheetContent = function (src) {
        var styleTags = document.getElementsByTagName("link");
        var styleTag = false;
        for(var i in styleTags)
        {
            if(styleTags[i].href && styleTags[i].href.indexOf(src)!=-1)
            {
                styleTag = styleTags[i];
                //break;
            }
        }
        if(!styleTag)
        {
            return false;
        }

        // the style sheet in the style tag
        var sheet = styleTag.sheet ? styleTag.sheet : styleTag.styleSheet;

        var message = "";
        if ('cssText' in sheet) {   // Internet Explorer
            message = sheet.cssText;
        }
        else {  // Firefox, Opera, Google Chrome and Safari
            for (var i = 0; i < sheet.cssRules.length; i++) {
                message += sheet.cssRules[i].cssText;
            }
        }
        return message;
    }

    /**
     * Sends the google analytics to the ga window function
     * @param  {object} trackParams Tracking Parameters.
     *{	'hitType': 'event',
		'eventCategory': eventCategory,
		'eventAction': eventAction,F
		'eventLabel': eventLabel,
		'eventValue': eventValue,
		'nonInteraction': optNoninteraction }
     */
    Utilities.gaActivityTrack = function( trackParams ) {
        if ( window.sendGaActivity ) {
            window.sendGaActivity(
                trackParams.eventCategory,
                trackParams.eventAction,
                trackParams.eventLabel,
                null,
                trackParams.nonInteraction);
            //console.log("Utilities | gaActivityTrack() | Sending data to analytics:  ", trackParams);
        } else {
            //console.log( "Utilities | gaActivityTrack() | Tracking method not available:", trackParams );
        }
    };

    /**
     * Tracking funciton for page changes.
     * @param  {[type]} trackParams [description]
     * {'page': page,
		'title': title}
     * @return {[type]}             [description]
     */
    Utilities.gaPageActivityTrack = function( trackParams ) {
        if ( window.sendGaPageActivity ) {
            sendGaPageActivity(
                trackParams.page,
                trackParams.title);
            //console.log( "Utilities | gaPageActivityTrack() | Sending data to analytics:", trackParams );
        } else {
            //console.log( "Utilities | gaPageActivityTrack() | Tracking methods not available:", trackParams );
        }
    };

    /**
     * copies object variables from source into destination.
     * @param  {object} destination
     * @param  {object} source
     * @return {object}
     */
    Utilities.deepExtend = function(destination, source) {
        for (var property in source) {
            if (typeof source[property] === "object" &&
                source[property] !== null ) {
                destination[property] = destination[property] || {};
                arguments.callee(destination[property], source[property]);
            } else {
                destination[property] = source[property];
            }
        }
        return destination;
    };

    /**
     * recursively copies an object into a new variable
     * @param  {object} obj source object
     * @return {object}     new duplicate object.
     */
    Utilities.clone = function(obj){
        if(obj === null || typeof(obj) != 'object')
            return obj;

        var temp = obj.constructor(); // changed

        for(var key in obj)
            temp[key] = Utilities.clone(obj[key]);

        return temp;
    };

    Utilities.iePsuedoElementHack = function($element) {
        $element = $element || $("body");
        if ($("html").hasClass("ie8")) {

            $element.find('[class^="icon"]').each(function(){
                $(this).append('<span class="psuedoIeFix"></span>');
                $(this).find(".psuedoIeFix").remove();
            })

        }
    }; //end iePsuedoElementHack


    return Utilities;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ 23667:
/*!***************************************************************************!*\
  !*** ./node_modules/voya-orange-money/build/orangemoneyui/feModelBase.js ***!
  \***************************************************************************/
/***/ (function(module) {

(function(f){if(true){module.exports=f()}else { var g; }})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=undefined;if(!f&&c)return require(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=undefined,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FeModelBase = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

//shared with PWEB_MOBILE homepage estimates, see gulp-tasks/build.js fe-base:dist
var FeModelBase = /*#__PURE__*/function () {
  function FeModelBase() {
    _classCallCheck(this, FeModelBase);
  }

  _createClass(FeModelBase, [{
    key: "processFeData",
    value: function processFeData(omCalc) {
      var feData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

      if (feData) {
        this.feData = feData;
      }

      this.ssBenefitAmt = this.getSSBenefitAmt();
      this.ssAddlBenefitsChgFlag = this.feData.socialSecData.socialSecAddlBenefitsChg;
      this.ssAdditionalBenefits = this.getSSAdditionalBenefit();
      this.calc = new omCalc({
        feData: JSON.parse(JSON.stringify(this.feData))
      });
      this.feLandingObject = {
        content: this.content,
        socialSecEnabled: this.feData.socialSecData.socialSecEnabled,
        ssInclude: this.feData.socialSecData.socialSecInclude,
        retireAge: this.retireAge,
        showRetireAgeSlider: this.feData.participantData.memberStatus === 'NON-MEMBER',
        dcPlanData: this.feData.dcPlanData,
        participantData: this.feData.participantData,
        feForecastData: this.feData.feForecast,
        currentPlanId: this.currentPlanId,
        selectedPlan: this.selectedPlan,
        iFrameURLs: this.feData.urls,
        ssAdditionalBenefits: this.ssAdditionalBenefits,
        ssAddlBenefitsChgFlag: this.ssAddlBenefitsChgFlag,
        closeTheGapPlans: this.feData.feData.closeTheGapPlans
      };
    }
  }, {
    key: "getSSBenefitAmt",
    value: function getSSBenefitAmt() {
      return this.feData.feForecast.socialSecurityIncome;
    }
  }, {
    key: "getSSAdditionalBenefit",
    value: function getSSAdditionalBenefit() {
      if (this.feData.socialSecData.specialNeedsEnabled && this.feData.socialSecData.socialSecInclude && (this.feData.socialSecData.isSSEnabled !== null || this.feData.socialSecData.isSSEnabled !== undefined)) {
        if (!this.ssAddlBenefitsChgFlag && this.feData.socialSecData.socialSecAddlBenefits !== null) {
          return this.ssBenefitAmt / 2;
        } else {
          return this.feData.socialSecData.socialSecAddlBenefits || 0;
        }
      }

      return 0;
    }
  }]);

  return FeModelBase;
}();

exports.FeModelBase = FeModelBase;

},{}]},{},[1])(1)
});


/***/ }),

/***/ 42789:
/*!******************************************************************************!*\
  !*** ./node_modules/voya-orange-money/build/orangemoneyui/nonFEModelBase.js ***!
  \******************************************************************************/
/***/ (function(module) {

(function(f){if(true){module.exports=f()}else { var g; }})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=undefined;if(!f&&c)return require(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=undefined,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getAgePrecise = getAgePrecise;
exports.formatTooltip = formatTooltip;
exports.decodeString = decodeString;
exports.makeStrong = makeStrong;
exports.formatMoney = formatMoney;
exports.getSocialSecurityBenefitAmt = getSocialSecurityBenefitAmt;
exports.getPensionBenefitAmt = getPensionBenefitAmt;
exports.cleanNumber = cleanNumber;
exports.getDateFromString = getDateFromString;
exports.getShortStringFromDate = getShortStringFromDate;
exports.getTimeFromString = getTimeFromString;
exports.formatPercent = formatPercent;
exports.getAge = getAge;
exports.clone = clone;
exports.deepExtend = deepExtend;
exports.formatDateTimeString = formatDateTimeString;
exports.decodePlanName = decodePlanName;
exports.getDateDiffInDays = getDateDiffInDays;
exports.roundAndTruncate = roundAndTruncate;
exports.getEligibleOMOtherAccounts = getEligibleOMOtherAccounts;
exports.toFixedNoRounding = toFixedNoRounding;
exports.removeJS = removeJS;
exports.detectIE = detectIE;
exports.getSNSliceColor = getSNSliceColor;

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function getAgePrecise(dob, ref) {
  var today = ref === null || ref === undefined ? new Date() : ref;
  var first = new Date(today);
  /*
   We are struggling here with IE8. The date can't be converted from a string and the
   'getDateFromStirng' method does not work in IE8. Custom solution is in 'parse' polyfill.
   */

  var second = new Date(Date.parse(dob));
  var earlier = new Date();
  var later = new Date();
  var dif, age; // assure positive difference

  if (first.getTime() < second.getTime()) {
    earlier.setTime(first);
    later.setTime(second);
  } else {
    // reverse
    earlier.setTime(second);
    later.setTime(first);
  }

  dif = later.getFullYear() - earlier.getFullYear();
  dif += (later.getMonth() - earlier.getMonth()) / 12;
  dif += (later.getDate() - earlier.getDate()) / 361;
  dif += 0.001; // from George Mazaitis

  age = Math.floor(dif);
  return age;
}

function formatTooltip(toolTipArray, tooltipMessage, isShowZero) {
  var toolTipHtmlString = "<div ><div><table class='tooltip-small-font'>";
  var tooltipMsg = [];

  var _iterator = _createForOfIteratorHelper(toolTipArray),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var tooltipItem = _step.value;

      if (tooltipItem.value !== 0 || isShowZero) {
        tooltipMsg = tooltipItem.label && tooltipItem.label.split('&lt;br /&gt;&lt;br /&gt;') || '';
        toolTipHtmlString = toolTipHtmlString + "<tr><td style='font-weight: bold; '> $" + formatMoney(tooltipItem.value, false, true) + '</td><td>-</td><td>' + (tooltipMsg[0] ? tooltipMsg[0].replace('-', '') : '') + ' </td></tr>';
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  if (tooltipMessage !== undefined && tooltipMessage.length === 0) {
    tooltipMessage = tooltipMsg[1] ? decodeString(tooltipMsg[1]) : '';
  } else if (tooltipMessage === undefined) {
    tooltipMessage = '';
  }

  toolTipHtmlString = toolTipHtmlString + "</table></div><p class='tooltip-small-font'>" + tooltipMessage + '</p></div>';
  return toolTipHtmlString;
}

function decodeString(str) {
  var element = document.createElement('div');

  if (str && typeof str === 'string') {
    // strip script/html tags
    str = str.replace(/<script[^>]*>([\S\s]*?)<\/script>/gim, '');
    str = str.replace(/<\/?\w(?:[^"'>]|"[^"]*"|'[^']*')*>/gim, '');
    element.innerHTML = str;
    str = element.textContent;
    element.textContent = '';
  }

  return str;
}

function makeStrong(str) {
  return '<strong>' + str + '</strong>';
}

function formatMoney(money, hasDollar, round, dontCutOnZero) {
  var _money = money;

  if (_money === null) {
    return '';
  } // Strip out everything but numbers and decimals


  _money = (_money + '').replace(/[^0-9^\.]/g, '') * 1; // Round the number if needed

  if (round) {
    _money = Math.round(_money);
  } // Adds commas where needed


  var formattedMoney = _money.toFixed(2).replace(/./g, function (c, i, a) {
    return i && c !== '.' && !((a.length - i) % 3) ? ',' + c : c;
  });

  if (!dontCutOnZero && formattedMoney.substr(formattedMoney.indexOf('.')) === '.00') {
    formattedMoney = formattedMoney.substring(0, formattedMoney.indexOf('.'));
  }

  return (hasDollar ? '$' : '') + formattedMoney;
} //This looks up the SS Benefits array and map the benefit amount for retAge and ssAge


function getSocialSecurityBenefitAmt(retireAge, socialSecurityStartAge, ssJsonObject) {
  var monthlyBenefit = 0.0;

  if (socialSecurityStartAge >= ssJsonObject.SSThreshold) {
    var x = Math.min(Math.max(retireAge, ssJsonObject.lowRetRef), ssJsonObject.highRetRef) - ssJsonObject.lowRetRef;
    var y = Math.min(Math.max(socialSecurityStartAge, ssJsonObject.lowSSRef), ssJsonObject.highSSRef) - ssJsonObject.lowSSRef;
    monthlyBenefit = ssJsonObject.monthlyBenefits[x][y];
  }

  return monthlyBenefit;
}

function getPensionBenefitAmt(startBenefitAge, yearInRetirement, benefitsObject) {
  var monthlyBenefit = 0.0;
  var arrayObject;

  try {
    if (startBenefitAge >= benefitsObject.lowRef) {
      arrayObject = null;

      if (startBenefitAge >= benefitsObject.highRef) {
        arrayObject = benefitsObject.benefits[benefitsObject.benefits.length - 1];
      } else {
        arrayObject = benefitsObject.benefits[startBenefitAge - benefitsObject.lowRef];
      }

      if (yearInRetirement >= arrayObject.length) {
        monthlyBenefit = arrayObject[arrayObject.length - 1];
      } else {
        monthlyBenefit = arrayObject[yearInRetirement];
      }
    }
  } catch (error) {}

  return monthlyBenefit;
}

function cleanNumber(value) {
  value = parseFloat(value);
  return parseFloat(value.toFixed(4));
} // return Date object from string formated as "YYYY-MM-DDT00:00:00"


function getDateFromString(dateString, includeTime) {
  var date;

  var _dateString;

  var _datePieces;

  var _tIndex = dateString.indexOf('T');

  if (_tIndex > -1) {
    _dateString = dateString.substr(0, _tIndex);
    _datePieces = _dateString.split('-');

    if (!includeTime) {
      date = new Date(_datePieces[0], _datePieces[1] - 1, _datePieces[2]);
    } else {
      var _timeString = dateString.substr(_tIndex + 1);

      var _timePieces = _timeString.split(':');

      date = new Date(_datePieces[0], _datePieces[1] - 1, _datePieces[2], _timePieces[0], _timePieces[1], _timePieces[2]);
    }
  } else {
    date = new Date(dateString);
  }

  return date;
}

function getShortStringFromDate(dateObj, separator) {
  var _separator = separator || '-';

  var _mm = dateObj.getMonth() + 1;

  var _dd = dateObj.getDate();

  var _yy = dateObj.getFullYear();

  if (_mm < 10) {
    _mm = '0' + _mm;
  }

  if (_dd < 10) {
    _dd = '0' + _dd;
  }

  return _yy + _separator + _mm + _separator + _dd;
}

function getTimeFromString(dateString) {
  var _timeString = undefined;

  var _timePieces;

  var _period = 'AM';

  var _tIndex = dateString.indexOf('T');

  if (_tIndex > -1) {
    // First, get the Time part of the string
    _timeString = dateString.substr(_tIndex + 1);
    _timePieces = _timeString.split(':'); // If HH is greater than 12, subtract 12 and flip to PM

    if (_timePieces[0] >= 12) {
      _period = 'PM';
      _timePieces[0] = _timePieces[0] - 12;
    } //Make sure that the hour is shown as 12 not 0


    if (_timePieces[0] == 0) {
      _timePieces[0] = 12;
    } // truncate the 0 off the beginning if necessary


    _timePieces[0] = parseInt(_timePieces[0], 10); //    put them back together

    _timeString = _timePieces.join(':') + ' ' + _period;
  }

  return _timeString;
}

function formatPercent(value, toDecimal) {
  if (toDecimal) {
    value = cleanNumber(value / 100);
  } else {
    value = cleanNumber(value * 100);
  }

  return value;
} //This is from om-modules


function getAge(dob) {
  var age;
  var diff;

  if (dob) {
    diff = new Date() - new Date(dob);
    age = Math.floor(diff / 1000 / 60 / 60 / 24 / 365);
  }

  return age;
}

function clone(obj) {
  if (obj === null || _typeof(obj) !== 'object') {
    return obj;
  }

  var temp = obj.constructor(); // changed

  for (var key in obj) {
    temp[key] = clone(obj[key]);
  }

  return temp;
}

function deepExtend(destination, source) {
  for (var property in source) {
    if (_typeof(source[property]) === 'object' && source[property] !== null) {
      destination[property] = destination[property] || {};
      arguments.callee(destination[property], source[property]);
    } else {
      destination[property] = source[property];
    }
  }

  return destination;
}

function formatDateTimeString(dateString) {
  var _tIndex = dateString.indexOf('T');

  var _dateString = dateString.substr(0, _tIndex);

  var _datePieces = _dateString.split('-');

  var returnString = parseInt(_datePieces[1], 10) + '/' + parseInt(_datePieces[2], 10) + '/' + _datePieces[0].substr(2) + ' ';
  return returnString + getTimeFromString(dateString);
}

function decodePlanName(planName) {
  if (planName && typeof planName === 'string') {
    planName = planName.replace(/\+/g, ' ');
    planName = unescape(planName).trim();
  }

  return planName;
}

function getDateDiffInDays(date1, date2) {
  //Get 1 day in milliseconds
  var one_day = 1000 * 60 * 60 * 24; // convert both dates to milliseconds

  var date1_ms = date1.getTime();
  var date2_ms = date2.getTime(); // calculate the difference in milliseconds

  var difference_ms = date2_ms - date1_ms; // convert back to days and return

  return Math.round(difference_ms / one_day);
}

function roundAndTruncate(dNumber, iDecimals) {
  // round and truncate
  var dInterim = 0.0;
  var dDecimalFactor = Math.pow(10.0,
  /*(double)*/
  iDecimals); // round

  dNumber += 0.500000001 / dDecimalFactor; // truncate

  dNumber *= dDecimalFactor;
  dInterim = Math.floor(dNumber);
  return dInterim / dDecimalFactor;
}

function getEligibleOMOtherAccounts(dashBoardOtherAccounts) {
  var eligibleForOrangeMoneyAccounts = [];

  if (dashBoardOtherAccounts !== null && dashBoardOtherAccounts.dataStatus === 'OK') {
    if (dashBoardOtherAccounts.retirementAccounts && dashBoardOtherAccounts.retirementAccounts.dataStatus === 'OK') {
      dashBoardOtherAccounts.retirementAccounts.accounts.map(function (account) {
        if (account.eligibleForOrangeMoney) {
          eligibleForOrangeMoneyAccounts.push(account);
        }
      });
    }

    if (dashBoardOtherAccounts.annuityAccounts && dashBoardOtherAccounts.annuityAccounts.dataStatus === 'OK') {
      dashBoardOtherAccounts.annuityAccounts.accounts.map(function (account) {
        if (account.eligibleForOrangeMoney) {
          eligibleForOrangeMoneyAccounts.push(account);
        }
      });
    }

    if (dashBoardOtherAccounts.brokerageAccounts && dashBoardOtherAccounts.brokerageAccounts.dataStatus === 'OK') {
      dashBoardOtherAccounts.brokerageAccounts.accounts.map(function (account) {
        if (account.eligibleForOrangeMoney) {
          eligibleForOrangeMoneyAccounts.push(account);
        }
      });
    }
  }

  return eligibleForOrangeMoneyAccounts;
}
/*
 * Round DOWN the decimals.
 * Ex: 123.4567 = 123.45
 * Ex: 123.7654 = 123.76
 * Ex: 123.1234 = 123.12
 */


function toFixedNoRounding(n, p) {
  var result = parseFloat(n.toFixed(p));
  return result <= n ? result : result - parseFloat(Math.pow(0.1, p).toFixed(p));
}

function removeJS(text) {
  return text ? text.replace("javascript:popWin('", '').replace("',500,742,'yes','yes','yes','yes','yes','yes','PopWin')\"", '" target="_blank"') : '';
}
/**
 * detect IE
 * @return {boolean} version of IE or false, if browser is not Internet Explorer
 */


function detectIE() {
  var ua = window.navigator.userAgent; // Test values; Uncomment to check result …
  // IE 10
  // ua = 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0)';
  // IE 11
  // ua = 'Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko';
  // Edge 12 (Spartan)
  // ua = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.71 Safari/537.36 Edge/12.0';
  // Edge 13
  // ua = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2486.0 Safari/537.36 Edge/13.10586';

  var msie = ua.indexOf('MSIE ');

  if (msie > 0) {
    // IE 10 or older => return version number
    return parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);
  }

  var trident = ua.indexOf('Trident/');

  if (trident > 0) {
    // IE 11 => return version number
    var rv = ua.indexOf('rv:');
    return parseInt(ua.substring(rv + 3, ua.indexOf('.', rv)), 10);
  }

  var edge = ua.indexOf('Edge/');

  if (edge > 0) {
    // Edge (IE 12+) => return version number
    return parseInt(ua.substring(edge + 5, ua.indexOf('.', edge)), 10);
  } // other browser


  return false;
}
/*
 * @param {object} data - the slice data object
 * @return {string} color - hex value
 */


function getSNSliceColor(data) {
  var color = data.pensionContributionValue > 0 || data.otherContributionValue > 0 ? '#FCA325' : '#EE7E1A';

  if (data.pensionContributionValue > 0 && data.otherContributionValue > 0) {
    color = '#FEBA27';
  }

  return color;
}

},{}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LABEL_OKAY = exports.LABEL_SORRY = exports.SERVICE_SAVE_SUCCESS_ALT_MSG = exports.FE_SERVICE_ERROR_ALT_MSG = exports.HIDE_SECTION_TEXT = exports.SHOW_SECTION_TEXT = exports.CONSTANTS = exports.CATCHUP_SOURCES = void 0;
var CONSTANTS = {
  STATIC_BENEFIT: 'StaticBenefit',
  CALC_BENEFIT: 'CalcBenefit',
  SLIDER: {
    UPDATE_IRS_ALERT: 'slider:updateIrsSlider'
  },
  ALERT_POPUP: 'alert_popup',
  RESET_ORIGINAL: 'reset_original',
  POST_CONFIRMATION: 'post_confirmation',
  ERRORS: {
    OLTP: 'system-unavailable',
    MGP: 'external-ws-error',
    IADMIN: 'iadmin-edinfo-exception',
    SR_ERROR: 'external-ws-error',
    SYSTEM_ERROR: 'error:systemError'
  },
  OTHER_RETIREMENT_INCOME_PATH: 'voya-orange-money/rs/fe/other-retirement/other-retirement-income',
  PENSION_INCOME_ESTIMATE_PATH: 'voya-orange-money/rs/fe/modals/pension-income-estimate/pension-income-estimate',
  PENSION_INCOME_RESULTS_PATH: 'voya-orange-money/rs/fe/modals/pension-income-results/pension-income-results',
  SR_ERROR_MSG: 'Oops, something went wrong and we cannot project your benefit at this time. For now, you can enter your own estimate using the other option above. Please try back, ' + 'we should have this fixed soon and we apologize for any inconvenience',
  SR_ERROR_MSG_FE: 'We are unable to estimate your pension income at this time.  Please try again soon.',
  SR_ERROR_MSG_FE_ICON: '<i class="voya-field__left-icon fa fa-exclamation-triangle" aria-hidden="true"></i>We are unable to estimate your pension income at this time.  Please try again soon.',
  SR_ERROR_MSG_FE_RET_SYS: '<i class="voya-field__left-icon fa fa-exclamation-triangle" aria-hidden="true"></i>Your retirement system details are unavailable at this time. Please try again soon.'
};
exports.CONSTANTS = CONSTANTS;
var CATCHUP_SOURCES = {
  CATCHUP_AGE_PRETAX: 'CATCHUP_AGE_PRETAX',
  CATCHUP_AGE_ROTH: 'CATCHUP_AGE_ROTH'
};
exports.CATCHUP_SOURCES = CATCHUP_SOURCES;
var SHOW_SECTION_TEXT = 'Show this section';
exports.SHOW_SECTION_TEXT = SHOW_SECTION_TEXT;
var HIDE_SECTION_TEXT = 'Hide this section';
exports.HIDE_SECTION_TEXT = HIDE_SECTION_TEXT;
var FE_SERVICE_ERROR_ALT_MSG = "We're unable to save your changes right now.";
exports.FE_SERVICE_ERROR_ALT_MSG = FE_SERVICE_ERROR_ALT_MSG;
var SERVICE_SAVE_SUCCESS_ALT_MSG = 'Your changes have been saved.';
exports.SERVICE_SAVE_SUCCESS_ALT_MSG = SERVICE_SAVE_SUCCESS_ALT_MSG;
var LABEL_SORRY = 'Sorry!';
exports.LABEL_SORRY = LABEL_SORRY;
var LABEL_OKAY = 'OKAY';
exports.LABEL_OKAY = LABEL_OKAY;

},{}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DollarGraphHeaderModel = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var DollarGraphHeaderModel = function DollarGraphHeaderModel(dollarGraphHeaderObject, isFE) {
  _classCallCheck(this, DollarGraphHeaderModel);

  var income = dollarGraphHeaderObject.estimatedMonthlyIncome;
  var shortfall = dollarGraphHeaderObject.difference;
  var socialSecurityInclude = dollarGraphHeaderObject.includeSS;

  if (!isFE && socialSecurityInclude !== undefined && !socialSecurityInclude) {
    income -= dollarGraphHeaderObject.ssBenefitAmt;
    shortfall += dollarGraphHeaderObject.ssBenefitAmt;
  }

  this.estimatedMonthlyIncome = income;
  this.estimatedMonthlyGoal = dollarGraphHeaderObject.estimatedMonthlyGoal;
  this.differenceOf = shortfall;
};

exports.DollarGraphHeaderModel = DollarGraphHeaderModel;

},{}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DollarGraphSlicesModel = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Created by i706495 on 04/22/2016.
 */
var DollarGraphSlicesModel = function DollarGraphSlicesModel(data) {
  _classCallCheck(this, DollarGraphSlicesModel);

  this.ssAdditionalBenefits = data.ssAdditionalBenefits || 0;
  this.accountBalanceValue = data.accountBalanceValue;
  this.ssContributionValue = data.ssContributionValue;
  this.otherContributionValue = data.otherContributionValue;
  this.pensionContributionValue = data.pensionContributionValue;
  this.shortFall = data.shortFall;
  this.includeSS = data.includeSS;
  this.toolTipData = data.toolTipData;
  this.guaranteedIncomeValue = data.guaranteedIncome || 0;
};

exports.DollarGraphSlicesModel = DollarGraphSlicesModel;

},{}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AboutMeModel = void 0;

var _utilities = require("../../../common/utilities");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var AboutMeModel = /*#__PURE__*/function () {
  function AboutMeModel(aboutMeData) {
    _classCallCheck(this, AboutMeModel);

    var planData = aboutMeData.pptDCAccount;
    var userData = aboutMeData.personalData;
    var incomeReplacementRatio = (0, _utilities.cleanNumber)(userData.incomeReplacementRatio * 100);
    var estimatedSalaryIncrease = (0, _utilities.cleanNumber)(userData.annualSalaryIncrementRate * 100); // Manipulate the date object to fill the three separate fields

    var dob = userData.dob;
    var date = (0, _utilities.getDateFromString)(dob);
    var year = date.getFullYear();
    var month = date.getMonth() + 1;
    var day = date.getDate();
    this.currentSalary = userData.currentAnnualSalary;
    this.estimatedSalaryIncrease = estimatedSalaryIncrease; //userData.annualSalaryIncrementRate;

    this.birthYear = year.toString();
    this.birthMonth = month.toString();
    this.birthDay = day.toString();
    this.userPlans = this.getPlanInfo(planData, aboutMeData.calc);
    this.incomeReplacementRatio = incomeReplacementRatio;
    this.profileHelpText = aboutMeData.profileHelpText;
    this.profileHelpTextTotalContrib = aboutMeData.profileHelpTextTotalContrib;
  }

  _createClass(AboutMeModel, [{
    key: "getPlanInfo",
    value: function getPlanInfo(planData, calc) {
      var plans = [];
      var currentPlan;
      var currentMatchData;

      for (var i = 0; i < planData.length; i++) {
        currentPlan = planData[i];
        currentMatchData = currentPlan.matchData;
        currentMatchData.planId = currentPlan.planInfo.planId; //	Profit Sharing Amount

        if (currentMatchData.profitSharingContributionAmount !== null) {
          currentPlan.hasProfitSharingAmt = true;
          currentPlan.profitSharingAmount = currentMatchData.profitSharingContributionAmount.value;
        } else {
          currentPlan.hasProfitSharingAmt = false;
        } //	Profit Sharing Rate


        if (currentMatchData.profitSharingContributionRate !== null) {
          currentPlan.hasProfitSharingRate = true;
          currentPlan.profitSharingRate = (0, _utilities.cleanNumber)(currentMatchData.profitSharingContributionRate.value * 100);
        } else {
          currentPlan.hasProfitSharingRate = false;
        } //	Show ER Match fields


        var erMatchType = currentMatchData.erMatch.matchType;

        if (erMatchType === 'STANDARD' && currentMatchData.erMatch.matchTierOptions > 0) {
          currentPlan.showErMatch = true;
          currentPlan.includeErMatch = currentMatchData.includeErMatch;

          if (!currentMatchData.erMatchFromRKSystem) {
            currentPlan.percent1 = (0, _utilities.cleanNumber)(currentMatchData.erMatch.percent1 * 100);
            currentPlan.range1 = (0, _utilities.cleanNumber)(currentMatchData.erMatch.range1 * 100);

            if (currentMatchData.erMatch.matchTierOptions > 1) {
              currentPlan.percent2 = (0, _utilities.cleanNumber)(currentMatchData.erMatch.percent2 * 100);
              currentPlan.range2 = (0, _utilities.cleanNumber)(currentMatchData.erMatch.range2 * 100);
            }
          }
        } // Mandatory Employee Contribution


        var eemc = currentMatchData.mandatoryEeContribution;

        if (eemc !== null) {
          currentPlan.includeEeContribution = true;
          currentPlan.mandatoryEeContribution = eemc.unit === 'PERCENT' ? eemc.value * 100 : eemc.value;
          currentPlan.mandatoryEeContribType = eemc.unit; // add boolean for range

          currentPlan.mandatoryEeContribIsRate = eemc.unit === 'PERCENT' ? true : false;
          currentPlan.eeLimits = calc.getMandatoryEeContribLimits(currentPlan.mandatoryEeContribType);
        } else {
          currentPlan.includeEeContribution = false;
        } // Mandatory Employer Contribution


        var ermc = currentMatchData.mandatoryErContribution;

        if (ermc !== null) {
          currentPlan.includeErContribution = true;
          currentPlan.mandatoryErContribution = ermc.unit === 'PERCENT' ? ermc.value * 100 : ermc.value;
          currentPlan.mandatoryErContribType = ermc.unit; // add boolean for range

          currentPlan.mandatoryErContribIsRate = ermc.unit === 'PERCENT' ? true : false;
          currentPlan.erLimits = calc.getMandatoryErContribLimits(currentPlan.mandatoryErContribType);
        } else {
          currentPlan.includeErContribution = false;
        }

        if (currentMatchData.excludeAllVoluntaryContrib) {
          var totalEeAndErContrib = 0.0;

          if (eemc !== null) {
            totalEeAndErContrib += eemc.unit === 'PERCENT' ? eemc.value * 100 : eemc.value;
          }

          if (ermc !== null) {
            totalEeAndErContrib += ermc.unit === 'PERCENT' ? ermc.value * 100 : ermc.value;
          }

          currentMatchData.totalEeAndErContrib = totalEeAndErContrib;
        }

        plans.push(currentPlan);
      }

      return plans;
    }
  }]);

  return AboutMeModel;
}();

exports.AboutMeModel = AboutMeModel;

},{"../../../common/utilities":1}],6:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DollarGraphSlidersModel = void 0;

var _utilities = require("../../../common/utilities");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var DollarGraphSlidersModel = /*#__PURE__*/function () {
  function DollarGraphSlidersModel(dollarGraphSlidersObject) {
    _classCallCheck(this, DollarGraphSlidersModel);

    this.pptDCAccount = dollarGraphSlidersObject.pptDCAccount;
    this.currentPlanID = dollarGraphSlidersObject.currentPlanID;
    this.riskTolerance = this.getInvestmentReturnPct(dollarGraphSlidersObject.personalData);
    this.pptCurrentAge = (0, _utilities.getAgePrecise)((0, _utilities.getDateFromString)(dollarGraphSlidersObject.personalData.dob));
    this.getRetirementAgeInfo(dollarGraphSlidersObject.personalData);
    this.retirementAgeLabel = dollarGraphSlidersObject.retirementAgeLabel;
    this.rateOfReturnSliderLabel = dollarGraphSlidersObject.rateOfReturnSliderLabel;
    this.retireAgeHelpText = dollarGraphSlidersObject.retireAgeHelpText;
    this.contribSliderHelptext = dollarGraphSlidersObject.contribSliderHelptext;
    this.amountPayText = dollarGraphSlidersObject.amountPayText;
    this.rorHelpText = dollarGraphSlidersObject.rorHelpText;
    this.currentAnnualSalary = dollarGraphSlidersObject.personalData.currentAnnualSalary;
    this.sourceLimits = dollarGraphSlidersObject.sourceLimits;
    this.contribHeader = dollarGraphSlidersObject.contribHeader;
    this.selectedPlan = dollarGraphSlidersObject.selectedPlan;
  }

  _createClass(DollarGraphSlidersModel, [{
    key: "getInvestmentReturnPct",
    value: function getInvestmentReturnPct(personalData) {
      var riskTolerance;

      if (personalData) {
        riskTolerance = (0, _utilities.cleanNumber)(personalData.investmentRateOfReturn) * 100;
      } else {
        riskTolerance = 0;
      }

      return riskTolerance;
    }
  }, {
    key: "getRetirementAgeInfo",
    value: function getRetirementAgeInfo(personalData) {
      this.retirementAge = personalData.retirementAge; //Calculating min retirement age

      this.minRetireAge = Math.min(this.pptCurrentAge + 1, 80);

      if (this.retirementAge < this.minRetireAge) {
        this.retirementAge = this.minRetireAge;
      }
    }
  }]);

  return DollarGraphSlidersModel;
}();

exports.DollarGraphSlidersModel = DollarGraphSlidersModel;

},{"../../../common/utilities":1}],7:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NonFeLandingModel = void 0;

var _dollarGraphHeaderModel = require("./../dollar-graph-header-model");

var _dollarGraphSlicesModel = require("./../dollar-graph-slices-model");

var _aboutMeModel = require("./about-me-model");

var _dollarGraphSlidersModel = require("./dollar-graph-sliders-model");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var NonFeLandingModel = /*#__PURE__*/function () {
  function NonFeLandingModel(nonFeLandingObject) {
    var dollarGraphHeaderModel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _dollarGraphHeaderModel.DollarGraphHeaderModel;
    var dollarGraphSlicesModel = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _dollarGraphSlicesModel.DollarGraphSlicesModel;
    var dollarGraphSlidersModel = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _dollarGraphSlidersModel.DollarGraphSlidersModel;

    _classCallCheck(this, NonFeLandingModel);

    this.ssAdditionalBenefits = this.getSSAddlBenefits(nonFeLandingObject);
    this.ssBenefits = this.getSSBenefits(nonFeLandingObject);
    this.income = this.getIncome(nonFeLandingObject);
    this.shortfallVal = this.getDifference(nonFeLandingObject);
    this.dollarGraphHeaderModel = new dollarGraphHeaderModel(this.createDollarGraphHeaderObject(nonFeLandingObject));
    this.dollarGraphSlicesModel = new dollarGraphSlicesModel(this.createDollarGraphSlices(nonFeLandingObject), false
    /*isFE*/
    );
    this.dollarGraphSlidersModel = new dollarGraphSlidersModel(this.createDollarGraphSlidersModel(nonFeLandingObject));
    this.dollarGraphFooterModel = this.createDollarGraphFooterData(nonFeLandingObject);
  }

  _createClass(NonFeLandingModel, [{
    key: "getSSAddlBenefits",
    value: function getSSAddlBenefits(nonFeLandingObject) {
      var ssStartAge = nonFeLandingObject.calculatedSSData.ssStartValue;
      var ssRetireAge = nonFeLandingObject.calculatedSSData.ssStartRetireAgeValue;

      if (ssRetireAge < ssStartAge) {
        return 0;
      } else if (ssRetireAge > ssStartAge) {
        return nonFeLandingObject.ssAdditionalBenefits;
      } else if (ssRetireAge === ssStartAge) {
        return nonFeLandingObject.ssAdditionalBenefits;
      }
    }
  }, {
    key: "getSSBenefits",
    value: function getSSBenefits(nonFeLandingObject) {
      var ssStartAge = nonFeLandingObject.ssStartAge;
      var ssRetireAge = nonFeLandingObject.ssRetireAge;

      if (ssRetireAge < ssStartAge) {
        return 0;
      } else if (ssRetireAge > ssStartAge) {
        return nonFeLandingObject.calcResponse.getMonthlyEstimateFromSocialSecurity();
      } else if (ssRetireAge === ssStartAge) {
        return nonFeLandingObject.calcResponse.getMonthlyEstimateFromSocialSecurity();
      }
    }
  }, {
    key: "getIncome",
    value: function getIncome(nonFeLandingObject) {
      var ssStartAge = nonFeLandingObject.ssStartAge;
      var ssRetireAge = nonFeLandingObject.ssRetireAge;
      var incomeAtSS = nonFeLandingObject.calculatedSSData.ssIncomeSS + nonFeLandingObject.calculatedSSData.ssBenefitSS + this.ssAdditionalBenefits;
      var incomeAtRA = nonFeLandingObject.calculatedSSData.ssIncomeRA + nonFeLandingObject.calculatedSSData.ssBenefitRA + this.ssAdditionalBenefits;

      if (ssRetireAge < ssStartAge) {
        return incomeAtRA;
      } else if (ssRetireAge > ssStartAge) {
        return incomeAtRA;
      } else if (ssRetireAge === ssStartAge) {
        return incomeAtSS;
      }
    }
  }, {
    key: "getIncomeWithLis",
    value: function getIncomeWithLis(nonFeLandingObject) {
      var participantOrangeData = nonFeLandingObject.pptDCAccount;
      var gIncomeSubtotalLisPlans = 0.0;
      var numOfCAccount = participantOrangeData.length;

      for (var i = 0; i < numOfCAccount; i++) {
        if (participantOrangeData[i].planInfo.partHasHundredPctLis) {
          gIncomeSubtotalLisPlans += participantOrangeData[i].planInfo.planGuaranteedIncome;
        }
      }

      return gIncomeSubtotalLisPlans;
    }
  }, {
    key: "checkDCandLisPlansBalance",
    value: function checkDCandLisPlansBalance(nonFeLandingObject) {
      var participantOrangeData = nonFeLandingObject.pptDCAccount;
      var dcBalance = nonFeLandingObject.personalData.currentDcBalance;
      var dcPlansBalanceForLis = 0.0;
      var numOfCAccount = participantOrangeData.length;

      for (var i = 0; i < numOfCAccount; i++) {
        if (participantOrangeData[i].planInfo.partHasHundredPctLis) {
          dcPlansBalanceForLis += participantOrangeData[i].planInfo.planBalance;
        }
      }

      return dcPlansBalanceForLis === dcBalance;
    }
  }, {
    key: "getDifference",
    value: function getDifference(nonFeLandingObject) {
      return nonFeLandingObject.calcResponse.getMonthlySalaryReplacementRequirement() - this.income;
    }
  }, {
    key: "createDollarGraphHeaderObject",
    value: function createDollarGraphHeaderObject(nonFeLandingObject) {
      return {
        estimatedMonthlyIncome: this.income,
        estimatedMonthlyGoal: nonFeLandingObject.calcResponse.getMonthlySalaryReplacementRequirement(),
        difference: this.shortfallVal,
        includeSS: nonFeLandingObject.includeSS,
        ssBenefitAmt: this.ssBenefits
      };
    }
  }, {
    key: "createDollarGraphSlices",
    value: function createDollarGraphSlices(nonFeLandingObject) {
      var calcResponse = nonFeLandingObject.calcResponse;
      this.guaranteedIncome = nonFeLandingObject.guaranteedIncome || 0;
      this.monthlyDCBalance = nonFeLandingObject.getAccountBalWithGuaranteedIncome(nonFeLandingObject.calcResponse.getMonthlyEstimateFromDCBalance(), this.guaranteedIncome); // computed account value

      var accountVal = this.monthlyDCBalance + calcResponse.getMonthlyEstimateFromEmployee() + calcResponse.getMonthlyEstimateFromEmployer(); // computed pension value

      this.pensionVal = calcResponse.getMonthlyEstimateFromPension() + calcResponse.getMonthlyEstimateFromPensionAsIncome(); // computed other value

      this.otherVal = calcResponse.getMonthlyEstimateFromOther() + calcResponse.getMonthlyEstimateFromIncome(); // computed shortfall value

      return {
        accountBalanceValue: accountVal,
        ssContributionValue: this.ssBenefits,
        otherContributionValue: this.otherVal,
        pensionContributionValue: this.pensionVal,
        shortFall: this.shortfallVal,
        includeSS: nonFeLandingObject.includeSS,
        toolTipData: this.getToolTipData(nonFeLandingObject),
        ssAdditionalBenefits: this.ssAdditionalBenefits,
        guaranteedIncome: this.guaranteedIncome
      };
    }
  }, {
    key: "getToolTipData",
    value: function getToolTipData(nonFeLandingObject) {
      var calcResponse = nonFeLandingObject.calcResponse;
      var content = nonFeLandingObject.content;
      var monthlyEmployeeEstimate = calcResponse.getMonthlyEstimateFromEmployee();
      var monthlyEmployerEstimate = calcResponse.getMonthlyEstimateFromEmployer();
      var acctSlicesContent = content.AccountBalanceNonFE_AmtBalAndFutureContrib;
      var pensionSlice = {
        label: content.PensionNonFE_AmtFromPension,
        value: this.pensionVal
      };
      var socialSecuritySlice = {
        label: content.SocialSecurityNonFE_Content1,
        value: this.ssBenefits
      };
      var additionalBenefitsSlice = {
        label: content.SpecialNeeds_SNViewDetailsDollarBillHoverText,
        value: this.ssAdditionalBenefits
      };
      var otherIncomeSlice = {
        label: content.OtherIncomeNonFE,
        value: this.otherVal
      };
      var guaranteedIncomeSlice = {
        label: content.AccountBalanceNonFE_HoverTextGuaranteedIncomeSlice,
        value: this.guaranteedIncome
      };
      var shortFallSlice = {
        label: content.ShortFallNonFE,
        value: this.shortfallVal
      };
      var acctSlices = [];
      acctSlices.push({
        label: 'From My Account Balance',
        value: this.monthlyDCBalance
      });
      acctSlices.push({
        label: 'From My Future Contributions',
        value: monthlyEmployeeEstimate
      });
      acctSlices.push({
        label: 'From My Employer Future Contributions',
        value: monthlyEmployerEstimate
      });
      return {
        acctSlicesInfo: acctSlices,
        acctSlicesContent: acctSlicesContent,
        pensionSliceInfo: pensionSlice,
        socialSecuritySliceInfo: socialSecuritySlice,
        additionalBenefitsSliceInfo: additionalBenefitsSlice,
        otherIncomeSliceInfo: otherIncomeSlice,
        guaranteedIncomeSliceInfo: guaranteedIncomeSlice,
        shortFallSliceInfo: shortFallSlice
      };
    }
  }, {
    key: "createDollarGraphSlidersModel",
    value: function createDollarGraphSlidersModel(nonFeLandingObject) {
      var content = nonFeLandingObject.content;
      return {
        pptDCAccount: nonFeLandingObject.pptDCAccount,
        currentPlanID: nonFeLandingObject.currentPlanID,
        personalData: nonFeLandingObject.personalData,
        retirementAgeLabel: content.SliderSectionTitles_RetirementAgeHeader,
        rateOfReturnSliderLabel: content.SliderSectionTitles_RateOfReturnHeader,
        retireAgeHelpText: content.HelpText_RetireAgeSliderHelp,
        contribSliderHelptext: content.HelpText_ContribSliderHelp,
        amountPayText: content.SliderSectionTitles_ContributionSliderHeader,
        rorHelpText: content.HelpText_RORSliderHelp,
        contribHeader: content.SliderSectionTitles_ContributionSliderHeader,
        sourceLimits: nonFeLandingObject.sourceLimits,
        selectedPlan: nonFeLandingObject.selectedPlan
      };
    }
  }, {
    key: "createDollarGraphFooterData",
    value: function createDollarGraphFooterData(nonFeLandingObject) {
      var content = nonFeLandingObject.content;
      var aboutMeData = {
        pptDCAccount: nonFeLandingObject.pptDCAccount,
        currentPlanID: nonFeLandingObject.currentPlanID,
        personalData: nonFeLandingObject.personalData,
        profileHelpText: content.HelpText_PerInfoHelp,
        profileHelpTextTotalContrib: content.HelpText_AboutMeMandContribHelp,
        calc: nonFeLandingObject.calc
      };
      return {
        aboutMeModel: new _aboutMeModel.AboutMeModel(aboutMeData),
        eMoneyUrl: nonFeLandingObject.eMoneyUrl,
        assumptionsContent: null
      };
    }
  }]);

  return NonFeLandingModel;
}();

exports.NonFeLandingModel = NonFeLandingModel;

},{"./../dollar-graph-header-model":3,"./../dollar-graph-slices-model":4,"./about-me-model":5,"./dollar-graph-sliders-model":6}],8:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NonFeModelBase = void 0;

var _utilities = require("../../../common/utilities");

var _constants = require("../../common/constants");

var _nonFeLandingModel = require("./non-fe-landing-model");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

//shared with PWEB_MOBILE homepage estimates, see gulp-tasks/build.js non-fe-base:dist
var NonFeModelBase = /*#__PURE__*/function () {
  function NonFeModelBase() {
    _classCallCheck(this, NonFeModelBase);
  }

  _createClass(NonFeModelBase, [{
    key: "initializeData",
    value: function initializeData(nonFeData, socialSecurityResponse, pensionResponse, srBenefitsResponse, selectedPlan, mode, pwebReqLoanNav, accountTypes, omCalc) {
      this.accountTypes = accountTypes;
      this.omCalc = omCalc;
      this.orangeData = nonFeData.orangeData;

      if (this.orangeData.participantDefinedContributionAccounts) {
        for (var i = 0; i < this.orangeData.participantDefinedContributionAccounts.length; i++) {
          this.orangeData.participantDefinedContributionAccounts[i].planInfo.planName = (0, _utilities.decodePlanName)(this.orangeData.participantDefinedContributionAccounts[i].planInfo.planName);
        }
      }

      this.cleanOrangeMoneyData();
      this.socialSecurityBenefits = socialSecurityResponse.socialSecurityBenefits;
      this.pension = pensionResponse.pensionView;

      if (srBenefitsResponse) {
        this.srBenefits = srBenefitsResponse.srBenefits;
      }

      this.eMoneyUrl = this.orangeData.urls ? this.orangeData.urls.EMONEY : undefined;
      this.includeSS = this.orangeData.participantData.socialSecData.includeSocialSecurity;
      this.personalData = this.orangeData.participantData;

      if (this.orangeData.participantData.retirementAge > 80) {
        this.orangeData.participantData.retirementAge = 80;
      }

      this.retirementAge = this.orangeData.participantData.retirementAge;

      var _dob = (0, _utilities.getDateFromString)(this.personalData.dob);

      var currAge = (0, _utilities.getAgePrecise)(_dob);
      this.minRetireAge = Math.min(currAge + 1, 80);

      if (this.retirementAge < this.minRetireAge) {
        this.retirementAge = this.minRetireAge;
      } //Defaulting Social Security start age if it is less than current age.


      var socialSecurityAge = this.orangeData.participantData.socialSecData.socialSecStartAge;

      if (socialSecurityAge) {
        var ssStartAgeMin = currAge >= 62 ? currAge + 1 : 62;
        socialSecurityAge = Math.min(Math.max(ssStartAgeMin, socialSecurityAge), 70);
        this.orangeData.participantData.socialSecData.socialSecStartAge = socialSecurityAge;
      }

      this.content = this.orangeData.content;
      this.otherAssets = this.orangeData.otherAssets;
      this.pptDCAccount = this.orangeData.participantDefinedContributionAccounts;
      this.currentPlanID = selectedPlan ? selectedPlan : this.orangeData.participantDefinedContributionAccounts[0].planInfo.planId;
      this.selectedPlan = mode === 'portfolio' ? this.orangeData.participantDefinedContributionAccounts[0].planInfo.planId : selectedPlan; //Finding Out if Loans Enabled for Selected Plan

      var omLoanEnabledForSelectedPlan = false;
      this.pptDCAccount.forEach(function (plan) {
        if (selectedPlan !== null && plan.planInfo.planId == selectedPlan && plan.loanData.omLoanEnable) {
          omLoanEnabledForSelectedPlan = true;
        }
      }); //this.outstandingLoanInfo = outstandingLoanInfo;
      //Gathering OutstandingLoans that needs to display

      this.outstandingLoanInfo = [];
      var outstaningLoanIndex = 0;
      var self = this;
      self.pptDCAccount.forEach(function (plan) {
        if ((mode === 'portfolio' || mode === 'dashboard' || omLoanEnabledForSelectedPlan) && plan.loanData.outstandingLoan) {
          var outStandingLoanObj = {
            planId: plan.planInfo.planId,
            planName: plan.planInfo.planName,
            outstandingLoans: plan.loanData.outstandingLoan,
            earlyLoanPayoffFlag: plan.loanData ? plan.loanData.earlyLoanPayoffFlag : false,
            earlyLoanPayoffMethod: plan.loanData ? plan.loanData.earlyLoanPayoffMethod : '',
            loanPayOff: plan.loanData ? plan.loanData.loanPayOff : false,
            showPlanName: self.pptDCAccount.length > 1
          };
          self.outstandingLoanInfo[outstaningLoanIndex] = outStandingLoanObj;
          outstaningLoanIndex += 1;
        }
      }); //Logic whether to display Loan Options in the drop-down

      self.hasActiveOutstandingLoans = false;

      if (self.outstandingLoanInfo.length > 0) {
        self.outstandingLoanInfo.forEach(function (outstandingLoanObj) {
          if (outstandingLoanObj.outstandingLoans && outstandingLoanObj.outstandingLoans.data.outstandLoanCount > 0) {
            outstandingLoanObj.outstandingLoans.data.outstandingLoanDtls.forEach(function (outstandingLoanDtl) {
              if (outstandingLoanDtl.loanStatus == 'A') {
                self.hasActiveOutstandingLoans = true;
              }
            });
          }
        });
      } //this.loanEligible = this.orangeData.participantDefinedContributionAccounts[0].loanData.loanEligible;


      self.hasLoanOptions = false;
      self.loanEligible = false;
      self.loanModelPlans = [];
      var planIndex = 0;
      self.pptDCAccount.forEach(function (plan) {
        if (mode === 'portfolio' || mode === 'dashboard') {
          if (plan.loanData.omLoanEnable) {
            /* if ((plan.loanData && plan.loanData.loanEligible) || self.hasActiveOutstandingLoans) {
            self.hasLoanOptions = true;
            } */
            //For Portfolio page - Show Loan options only when default loan selected is ELIGIBLE for loan, else don't show loan option in Dropdown
            if ((mode === 'dashboard' || mode === 'portfolio' && plan.planInfo.planId == self.currentPlanID) && (plan.loanData && plan.loanData.loanEligible || self.hasActiveOutstandingLoans)) {
              self.hasLoanOptions = true;
            }

            if (plan.loanData && plan.loanData.loanEligible) {
              if (mode === 'dashboard' || mode === 'portfolio' && plan.planInfo.planId == self.currentPlanID) {
                self.loanEligible = true;
                var planObj = {
                  planId: plan.planInfo.planId,
                  planName: plan.planInfo.planName
                };
                self.loanModelPlans[planIndex] = planObj;
                planIndex += 1;
              }
            }
          }
        } else if (selectedPlan !== null && plan.planInfo.planId == selectedPlan && plan.loanData.omLoanEnable) {
          if (plan.loanData && plan.loanData.loanEligible || self.hasActiveOutstandingLoans) {
            self.hasLoanOptions = true;
          }

          if (plan.loanData && plan.loanData.loanEligible) {
            self.loanEligible = true;
            var _planObj = {
              planId: plan.planInfo.planId,
              planName: plan.planInfo.planName
            };
            self.loanModelPlans[planIndex] = _planObj;
            planIndex += 1;
          }
        }
      });
      self.planLevelLoanEligible = self.loanModelPlans;
      self.showLoanModelPlanSelector = false;

      if (self.pptDCAccount.length > 1 && self.loanEligible && !pwebReqLoanNav) {
        self.showLoanModelPlanSelector = true;
      }

      this.ctClient = this.pptDCAccount[0].loanData ? this.pptDCAccount[0].loanData.ctClient : false;
      this.hasRothContribution = {}; //process the data

      this.processNonFeData(); // set raw and working orange data

      this.rawOrangeData = JSON.parse(JSON.stringify(this.orangeData)); //Models for Components

      this.landingPageModel = new _nonFeLandingModel.NonFeLandingModel(this.nonFeLandingObject);
      console.log(this.landingPageModel);
    }
  }, {
    key: "formatLISText",
    value: function formatLISText(text) {
      var result = '';

      if (text) {
        var splitBeforeText = text.split('[');

        if (splitBeforeText[1]) {
          var splitEndText = splitBeforeText[1].split(']');
          result = splitBeforeText[0] + "<a href=/myvoya/link?type=omlisredirectlink&selectedPlanID=".concat(this.currentPlanID, ">").concat(splitEndText[0], "</a>");

          if (splitEndText[1]) {
            result += splitEndText[1];
          }
        }
      }

      return result;
    }
  }, {
    key: "processNonFeData",
    value: function processNonFeData() {
      var calcResponse = {};
      this.injectPensionToOrangeData();
      /*
       * get the calculated values from omCalculator
       */
      // Common util method for both LIS 100% & non LIS.

      this.getLISOrangeData();
      this.calc = new this.omCalc({
        orangeData: JSON.parse(JSON.stringify(this.orangeData1))
      });
      /*
       * set social security data
       */

      this.setSocialSecurityAmountToCalc();
      /*
       * run initial calculation with the data
       */

      calcResponse = this.calc.compute();
      this.computed = calcResponse.getRetireBenefitEvalResponse();
      this.guaranteedIncome = this.orangeData.participantData.guaranteedIncome || 0;
      /**
       * calculate the ss value and therefore the additional benefits
       */

      var calculatedSSData = this.calcSSBenefit();
      this.ssBenefitAmt = this.getSSBenefitAmt(calculatedSSData, this.computed);
      var ssRetireAge = calculatedSSData.ssStartRetireAgeValue; // on ss panel this is the top slider

      var ssStartAge = calculatedSSData.ssStartValue; // on ss panel this is the bottom slider

      /*
       * calculate and set the social security additional benefits value
       */

      this.ssAdditionalBenefits = this.getSSAdditionalBenefit(calculatedSSData);
      this.ssAddlBenefitsChgFlag = this.orangeData.participantData.socialSecData.socialSecAddlBenefitsChg;
      this.content.HelpText_LifetimeIncomeStrategy = this.formatLISText(this.content.HelpText_LifetimeIncomeStrategy);
      this.nonFeLandingObject = {
        calcResponse: this.computed,
        includeSS: this.includeSS,
        content: this.content,
        pptDCAccount: this.pptDCAccount,
        currentPlanID: this.currentPlanID,
        personalData: this.personalData,
        eMoneyUrl: this.eMoneyUrl,
        sourceLimits: this.updatePlanLimits(),
        calc: this.calc,
        selectedPlan: this.selectedPlan,
        ssAdditionalBenefits: this.ssAdditionalBenefits,
        ssAddlBenefitsChgFlag: this.ssAddlBenefitsChgFlag,
        ssRetireAge: ssRetireAge,
        ssStartAge: ssStartAge,
        calculatedSSData: calculatedSSData,
        guaranteedIncome: this.guaranteedIncome,
        getAccountBalWithGuaranteedIncome: this.getAccountBalWithGuaranteedIncome
      };
    }
  }, {
    key: "getAccountBalWithGuaranteedIncome",
    value: function getAccountBalWithGuaranteedIncome() {
      var accountBalance = this.calcResponse ? this.calcResponse.getMonthlyEstimateFromDCBalance() : this.computed.getMonthlyEstimateFromDCBalance();
      var gIncomeSubtotalNonLisPlans = 0.0;
      var participantOrangeData = this.pptDCAccount;
      var numOfCAccount = participantOrangeData.length;

      for (var i = 0; i < numOfCAccount; i++) {
        if (!participantOrangeData[i].planInfo.partHasHundredPctLis) {
          gIncomeSubtotalNonLisPlans += participantOrangeData[i].planInfo.planGuaranteedIncome;
        }
      }

      var result = accountBalance - gIncomeSubtotalNonLisPlans;

      if (result < 0) {
        result = 0;
      }

      return result;
    }
  }, {
    key: "getSSBenefitAmt",
    value: function getSSBenefitAmt(calculatedSSData, calcResponse) {
      var ssRetireAge = calculatedSSData.ssStartRetireAgeValue;
      var ssStartAge = calculatedSSData.ssStartValue;

      if (ssRetireAge < ssStartAge) {
        return 0;
      } else if (ssRetireAge > ssStartAge) {
        return calcResponse.getMonthlyEstimateFromSocialSecurity();
      } else if (ssRetireAge === ssStartAge) {
        return calcResponse.getMonthlyEstimateFromSocialSecurity();
      }
    }
    /**
     * determines if ss is enabled AND included AND if ssAdditionalBenefits is a number AND
     * greater than 0. IF true, then it recalculates the ssAdditionalBenefits based on the ss benefits
     *
     * @param {object} calculatedSSData
     * @return {number} ssAdditionalBenefits
     */

  }, {
    key: "getSSAdditionalBenefit",
    value: function getSSAdditionalBenefit(calculatedSSData) {
      var ssRetireAge = calculatedSSData.ssStartRetireAgeValue;
      var ssStartAge = calculatedSSData.ssStartValue; //local calculation variable, just read from the source

      var ssAdditionalBenefits = this.orangeData.participantData.socialSecData.socialSecAddlBenefits;

      if (this.orangeData.participantData.socialSecData.specialNeedsEnable && this.orangeData.participantData.socialSecData.socialSecEnable && this.orangeData.participantData.includeSocialSecurity) {
        if (ssAdditionalBenefits && !this.ssAddlBenefitsChgFlag) {
          if (ssRetireAge < ssStartAge) {
            ssAdditionalBenefits = calculatedSSData.ssBenefitSS / 2;
            console.log('calculatedSSData.ssBenefitSS', calculatedSSData.ssBenefitSS);
          } else if (ssRetireAge > ssStartAge) {
            ssAdditionalBenefits = this.ssBenefitAmt / 2;
          } else if (ssRetireAge === ssStartAge) {
            ssAdditionalBenefits = this.ssBenefitAmt / 2;
          }
        }

        console.log('ssAdditionalBenefits======', ssAdditionalBenefits);
        console.log('ssBenefitAmt=============', this.ssBenefitAmt);
        return ssAdditionalBenefits || 0;
      } else {
        return 0;
      }
    }
  }, {
    key: "setSocialSecurityAmountToCalc",
    value: function setSocialSecurityAmountToCalc() {
      var ssAmt = 0;

      if (this.includeSS) {
        var socialStartAge = this.orangeData.participantData.socialSecData.socialSecStartAge;
        var ssBenefits = this.socialSecurityBenefits; // if social security age has been provided by the forces that be

        if (!!socialStartAge) {
          // do some magic to determine what specific numbers to use for the SS calculation
          if (this.retirementAge >= socialStartAge && socialStartAge >= ssBenefits.nra) {
            ssAmt = (0, _utilities.getSocialSecurityBenefitAmt)(this.retirementAge, socialStartAge, ssBenefits);
          } else if (this.retirementAge >= socialStartAge && socialStartAge < ssBenefits.nra) {
            ssAmt = (0, _utilities.getSocialSecurityBenefitAmt)(socialStartAge, socialStartAge, ssBenefits);
          }
        } else {
          ssAmt = (0, _utilities.getSocialSecurityBenefitAmt)(this.retirementAge, this.retirementAge, ssBenefits);
        }
      }

      this.calc.setRetirementAge(this.retirementAge, ssAmt);
    }
    /**
     * Cleans up the raw Orange Money data from the server
     */

  }, {
    key: "cleanOrangeMoneyData",
    value: function cleanOrangeMoneyData() {
      /*
       *	The data we get from backend needs some tweaking. Specifically:
       *	1. Make sure the retirement age is in range
       *	2. Create "includeErMatch" variable in JSON. This concept exists only
       *	   on the frontend, so we create it here and set it to TRUE by default
       *	3. Sort Sources for each plan
       */

      /* ignore:true */
      var orangeDataClean = JSON.parse(JSON.stringify(this.orangeData));
      orangeDataClean.participantData.retirementAge = Math.max((0, _utilities.getAgePrecise)(this.orangeData.participantData.dob) + 1, Math.min(80, this.orangeData.participantData.retirementAge));
      var sourceOrder = ['PRETAX', 'ROTH', 'AFTER_TAX', 'PRETAX_SUPP', 'ROTH_SUPP', 'AFTERTAX_SUPP', 'CATCHUP_AGE_PRETAX', 'CATCHUP_AGE_ROTH']; //convert order array to lookup table

      var sortSourceList = {};

      for (var i = 0, len = sourceOrder.length; i < len; ++i) {
        sortSourceList[sourceOrder[i]] = i;
      }

      var sortSource = function sortSource(a, b) {
        return sortSourceList[a.type] - sortSourceList[b.type];
      };

      var plans = orangeDataClean.participantDefinedContributionAccounts;

      for (var _i = 0; _i < plans.length; ++_i) {
        //sort each source using the lookup table
        plans[_i].planInfo.sources = plans[_i].planInfo.sources.sort(sortSource); // reset the plan MIN limits to zero

        if (plans[_i].planInfo.totalContributionAmount) {
          plans[_i].planInfo.totalContributionAmount.min = 0;
        }

        if (plans[_i].planInfo.totalContributionPercent) {
          plans[_i].planInfo.totalContributionPercent.min = 0;
        } // reset the source MIN limits to zero


        for (var j = 0; j < plans[_i].planInfo.sources.length; j++) {
          if (plans[_i].planInfo.sources[j].percentLimits) {
            plans[_i].planInfo.sources[j].percentLimits.min = 0;
          }

          if (plans[_i].planInfo.sources[j].limits) {
            plans[_i].planInfo.sources[j].limits.min = 0;
          }
        }
      }

      this.orangeData = orangeDataClean;
      /* ignore:false */
    }
    /*
     * This method takes care of different pension plans
     */

  }, {
    key: "injectPensionToOrangeData",
    value: function injectPensionToOrangeData() {
      //checking that what kind of pension..default , vendor or Still River
      var pensionViewType = this.pension.pensionViewFlag;
      var estimatedPensionAmt;
      var annualPensionAmt;
      var lumpSumPensionAmt;

      if (pensionViewType === _constants.CONSTANTS.STATIC_BENEFIT) {
        estimatedPensionAmt = this.pension.vendorData.monthlyIncome;
      } else if (pensionViewType === _constants.CONSTANTS.CALC_BENEFIT) {
        if (this.pension.srData.pensionCalMethod === 'C') {
          estimatedPensionAmt = (0, _utilities.getPensionBenefitAmt)(this.retirementAge, 0, this.srBenefits);
          this.srCalcBenefit = true; //Feeding new DB Mandatory Contribution value to Calculator. mandatoryContrib passed to om calc should be in rate not percent (%)

          this.orangeData.pension.dbMandatoryContrib = this.pension.srData.mandatoryContrib / 100;
        } else if (this.pension.srData.pensionCalMethod === 'M') {
          estimatedPensionAmt = this.pension.srData.anticipMonthlyPensionIncome;
          annualPensionAmt = this.pension.srData.anticpAnnPensBenefRetirem;
          lumpSumPensionAmt = this.pension.srData.anticpLmpSumPenBenRetirem;
        }
      } else {
        estimatedPensionAmt = this.pension.defaultPensionData.monthlyIncome;
      }

      var pensionData = {
        monthlyIncome: estimatedPensionAmt === undefined || estimatedPensionAmt === '' ? null : parseFloat(estimatedPensionAmt),
        annualPension: annualPensionAmt === undefined || annualPensionAmt === '' ? null : parseFloat(annualPensionAmt),
        lumpSumPension: lumpSumPensionAmt === undefined || lumpSumPensionAmt === '' ? null : parseFloat(lumpSumPensionAmt),
        enabled: this.pension.enabled
      };
      this.orangeData.pension.monthlyPension = pensionData.monthlyIncome;
      this.orangeData.pension.annualPension = pensionData.annualPension;
      this.orangeData.pension.lumpSumPension = pensionData.lumpSumPension;
      this.orangeData.pension.enabled = pensionData.enabled;
    }
  }, {
    key: "updatePlanLimits",
    value: function updatePlanLimits() {
      var _this = this;

      // get the source data
      var currentPlanID = this.currentPlanID;
      var planData = this.getWorkingPlan(currentPlanID);
      var srcs = planData.planInfo.sources;
      var acctList = this.calc.compute().getAccountDataList();
      var crcAllowed = planData.planInfo.crcAllowed;
      var limitsList = {};
      srcs.map(function (src) {
        var pLim, lim; // get the account object from the calc that matches our current source

        var accountObj = acctList.find(function (account) {
          if (account.getType() === _this.accountTypes.matchType(src.type) && account.getPlanId() === currentPlanID) {
            return true;
          }
        }); // Once we have the correct account data, we can resume with this check

        if (crcAllowed) {
          pLim = src.percentLimits;
          lim = src.limits;
        } else {
          // use limits from calc account object once we have the correct one
          pLim = {
            min: accountObj.getMinContribRate(),
            max: accountObj.getMaxContribRate()
          };
          lim = {
            min: accountObj.getMinContribDollar(),
            max: accountObj.getMaxContribDollar()
          };
        }

        if (!src.percentLimits) {
          src.percentLimits = pLim;
        }

        if (!src.limits) {
          src.limits = lim;
        }

        limitsList[src.type] = {
          limits: lim,
          percentLimits: pLim
        };
      });
      return limitsList;
    }
  }, {
    key: "getWorkingPlan",
    value: function getWorkingPlan(planID) {
      return this.pptDCAccount.find(function (plan) {
        if (plan.planInfo.planId === planID) {
          return true;
        }
      });
    }
  }, {
    key: "calcSSBenefit",
    value: function calcSSBenefit() {
      if (!this.socialSecurityBenefits) {
        return;
      }

      var retirementAge = this.retirementAge;
      var ssStartAge = this.orangeData.participantData.socialSecData.socialSecStartAge;
      var socialSecurityAge = ssStartAge === 0 ? retirementAge : ssStartAge; //calculating retire and social security start min age

      var currAge = (0, _utilities.getAge)(this.orangeData.participantData.dob);
      var ssRetireAgeMin = Math.min(currAge + 1, 80);
      var ssStartAgeMin = currAge >= 62 ? currAge + 1 : 62;
      var ssDisabled = ssStartAgeMin >= 70;
      socialSecurityAge = Math.min(Math.max(ssStartAgeMin, socialSecurityAge), 70);
      this.orangeData.participantData.socialSecData.socialSecStartAge = socialSecurityAge;
      var includeSS = this.includeSS;
      var benefitAtRA = 0;

      if (includeSS) {
        if (retirementAge >= socialSecurityAge && socialSecurityAge >= this.socialSecurityBenefits.nra) {
          benefitAtRA = (0, _utilities.getSocialSecurityBenefitAmt)(retirementAge, socialSecurityAge, this.socialSecurityBenefits);
        } else if (retirementAge >= socialSecurityAge && socialSecurityAge < this.socialSecurityBenefits.nra) {
          benefitAtRA = (0, _utilities.getSocialSecurityBenefitAmt)(socialSecurityAge, socialSecurityAge, this.socialSecurityBenefits);
        }
      }

      var benefitAtNRA = includeSS ? (0, _utilities.getSocialSecurityBenefitAmt)(this.socialSecurityBenefits.nra, this.socialSecurityBenefits.nra, this.socialSecurityBenefits) : 0;
      var benefitAtSS = includeSS ? (0, _utilities.getSocialSecurityBenefitAmt)(retirementAge, socialSecurityAge, this.socialSecurityBenefits) : 0;
      var calculatedNRAAmt = (0, _utilities.getSocialSecurityBenefitAmt)(retirementAge, this.socialSecurityBenefits.nra, this.socialSecurityBenefits);
      var nraAmount = 0; //= includeSS ? calculatedNRA : 0;

      var enteredPIA = this.orangeData.participantData.socialSecData.enteredPIA; //if (includeSS) {

      if (enteredPIA && enteredPIA !== 0) {
        nraAmount = enteredPIA;
      } else {
        nraAmount = calculatedNRAAmt;
      } //}
      //If it is Still River Plan getting updated pension Amount as per the age
      //if (this.srBenefits) {
      //    let estimatedPensionAmt = getPensionBenefitAmt(retirementAge, 0, this.srBenefits);
      //    this.calc.setPensionAmount(estimatedPensionAmt);
      //}


      var pensionViewType = this.pension.pensionViewFlag;

      if (pensionViewType && pensionViewType === _constants.CONSTANTS.CALC_BENEFIT && this.pension.srData.pensionCalMethod === 'C' && this.srBenefits) {
        var estimatedPensionAmt = (0, _utilities.getPensionBenefitAmt)(retirementAge, 0, this.srBenefits);
        this.orangeData.pension.monthlyPension = estimatedPensionAmt === '' ? null : parseFloat(estimatedPensionAmt);
        this.calc.setPensionAmount(estimatedPensionAmt);
      } //Defect#37947 -- SR amounts needs to be updated on SS Panel
      // Common util method for both LIS 100% & non LIS.


      this.getLISOrangeData();
      this.calc.reserialize({
        orangeData: JSON.parse(JSON.stringify(this.orangeData1))
      });
      this.calc.setRetirementAge(retirementAge, benefitAtRA);
      var RABenefitResponse = this.calc.compute().getRetireBenefitEvalResponse();
      var goal = RABenefitResponse.getMonthlySalaryReplacementRequirement();
      var otherIncomeAtRA = this.sumOfNonSS(RABenefitResponse);
      var shortfallAtRA = goal - (otherIncomeAtRA + benefitAtRA);
      this.calc.setRetirementAge(retirementAge, benefitAtSS);
      var SSBenefitResponse = this.calc.compute().getRetireBenefitEvalResponse();
      var otherIncomeAtSS = socialSecurityAge >= retirementAge ? this.sumOfNonSS(SSBenefitResponse) : 0;
      var shortfallAtSS = goal - (otherIncomeAtSS + benefitAtSS);
      return {
        calculatedNRAAmt: calculatedNRAAmt,
        goal: goal,
        nra: this.socialSecurityBenefits.nra,
        ssBenefitRA: benefitAtRA,
        ssBenefitNRA: benefitAtNRA,
        ssBenefitSS: benefitAtSS,
        ssDisabled: ssDisabled,
        ssIncomeRA: otherIncomeAtRA,
        ssIncomeSS: otherIncomeAtSS,
        ssNRAAmount: nraAmount,
        ssRetireAgeMin: ssRetireAgeMin,
        ssShortfallRA: shortfallAtRA,
        ssShortfallSS: shortfallAtSS,
        ssStartRetireAgeValue: retirementAge,
        ssStartAgeMin: ssStartAgeMin,
        ssStartValue: socialSecurityAge
      };
    } // Common util method for both LIS 100% & non LIS.

  }, {
    key: "getLISOrangeData",
    value: function getLISOrangeData() {
      this.orangeData1 = JSON.parse(JSON.stringify(this.orangeData));
      var numOfCAccount = this.orangeData1.participantDefinedContributionAccounts.length;

      for (var i = 0; i < numOfCAccount; i++) {
        //Only for LIS-100%
        if (this.orangeData1.participantDefinedContributionAccounts[i].planInfo.partHasHundredPctLis) {
          this.orangeData1.participantData.currentDcBalance = this.orangeData1.participantData.currentDcBalance - this.orangeData1.participantDefinedContributionAccounts[i].planInfo.planBalance;
          var numOfSources = this.orangeData1.participantDefinedContributionAccounts[i].planInfo.sources.length;

          for (var j = 0; j < numOfSources; j++) {
            this.orangeData1.participantDefinedContributionAccounts[i].planInfo.sources[j].contribution = 0;
          }

          if (this.orangeData1.participantDefinedContributionAccounts[i].matchData) {
            this.orangeData1.participantDefinedContributionAccounts[i].matchData.mandatoryEeContribution ? this.orangeData1.participantDefinedContributionAccounts[i].matchData.mandatoryEeContribution.value = 0 : '';
            this.orangeData1.participantDefinedContributionAccounts[i].matchData.mandatoryErContribution ? this.orangeData1.participantDefinedContributionAccounts[i].matchData.mandatoryErContribution.value = 0 : '';
          }
        }
      }
    } //LIS-100% End

  }, {
    key: "sumOfNonSS",
    value: function sumOfNonSS(calcResponse) {
      // computed account value
      var accountVal = calcResponse.getMonthlyEstimateFromDCBalance() + calcResponse.getMonthlyEstimateFromEmployee() + calcResponse.getMonthlyEstimateFromEmployer(); // computed pension value

      var pensionVal = calcResponse.getMonthlyEstimateFromPension() + calcResponse.getMonthlyEstimateFromPensionAsIncome(); // computed other value

      var otherVal = calcResponse.getMonthlyEstimateFromOther() + calcResponse.getMonthlyEstimateFromIncome();
      var income = (accountVal || 0) + (pensionVal || 0) + (otherVal || 0);
      var additionalIncome = this.getIncomeWithoutLis() - calcResponse.getMonthlyEstimateFromDCBalance();

      if (additionalIncome > 0) {
        income += additionalIncome;
      }

      income += this.getIncomeWithLis();
      return income;
    }
  }, {
    key: "getIncomeWithLis",
    value: function getIncomeWithLis() {
      var participantOrangeData = this.pptDCAccount;
      var gIncomeSubtotalLisPlans = 0.0;
      var numOfCAccount = participantOrangeData.length;

      for (var i = 0; i < numOfCAccount; i++) {
        if (participantOrangeData[i].planInfo.partHasHundredPctLis) {
          gIncomeSubtotalLisPlans += participantOrangeData[i].planInfo.planGuaranteedIncome;
        }
      }

      return gIncomeSubtotalLisPlans;
    }
  }, {
    key: "getIncomeWithoutLis",
    value: function getIncomeWithoutLis() {
      var participantOrangeData = this.pptDCAccount;
      var gIncomeSubtotalLisPlans = 0.0;
      var numOfCAccount = participantOrangeData.length;

      for (var i = 0; i < numOfCAccount; i++) {
        if (!participantOrangeData[i].planInfo.partHasHundredPctLis) {
          gIncomeSubtotalLisPlans += participantOrangeData[i].planInfo.planGuaranteedIncome;
        }
      }

      return gIncomeSubtotalLisPlans;
    }
  }]);

  return NonFeModelBase;
}();

exports.NonFeModelBase = NonFeModelBase;

},{"../../../common/utilities":1,"../../common/constants":2,"./non-fe-landing-model":7}]},{},[8])(8)
});


/***/ }),

/***/ 78817:
/*!****************************************************************!*\
  !*** ./shared-lib/components/mx-widget/mx-widget.component.ts ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
var _constants_content_json__WEBPACK_IMPORTED_MODULE_5___namespace_cache;
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "WIDGET_TIMOUT_DURATION": function() { return /* binding */ WIDGET_TIMOUT_DURATION; },
/* harmony export */   "MXWidgetComponent": function() { return /* binding */ MXWidgetComponent; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! tslib */ 42321);
/* harmony import */ var _Users_vijay_a_Documents_GitHub_MYVOYAGE_node_modules_ngtools_webpack_src_loaders_direct_resource_js_mx_widget_component_html__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !./node_modules/@ngtools/webpack/src/loaders/direct-resource.js!./mx-widget.component.html */ 47828);
/* harmony import */ var _mx_widget_component_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mx-widget.component.scss */ 55380);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/core */ 2316);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rxjs */ 94283);
/* harmony import */ var _shared_lib_services_mx_service_mx_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @shared-lib/services/mx-service/mx.service */ 60236);
/* harmony import */ var _shared_lib_services_utility_utility_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @shared-lib/services/utility/utility.service */ 96182);
/* harmony import */ var _mobile_app_modules_shared_service_platform_platform_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @mobile/app/modules/shared/service/platform/platform.service */ 65536);
/* harmony import */ var _constants_content_json__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./constants/content.json */ 5032);









const WIDGET_TIMOUT_DURATION = 14 * 60 * 1000;
let MXWidgetComponent = class MXWidgetComponent {
    constructor(mxService, sharedUtilityService, platformService) {
        this.mxService = mxService;
        this.sharedUtilityService = sharedUtilityService;
        this.platformService = platformService;
        this.subAccount = false;
        this.hasError = false;
        this.content = /*#__PURE__*/ (_constants_content_json__WEBPACK_IMPORTED_MODULE_5___namespace_cache || (_constants_content_json__WEBPACK_IMPORTED_MODULE_5___namespace_cache = __webpack_require__.t(_constants_content_json__WEBPACK_IMPORTED_MODULE_5__, 2)));
        this.widgetTimeout = 0;
        this.platformSubscription = new rxjs__WEBPACK_IMPORTED_MODULE_6__.Subscription();
    }
    ngOnInit() {
        this.refreshWidget();
        this.isWeb = this.sharedUtilityService.getIsWeb();
        this.platformSubscription.add(this.platformService.onResume$.subscribe(this.onResume.bind(this)));
        this.platformSubscription.add(this.platformService.onPause$.subscribe(this.onPause.bind(this)));
    }
    onResume() {
        if (new Date().getTime() > this.widgetTimeout) {
            this.refreshWidget();
        }
    }
    onPause() {
        this.widgetTimeout = new Date().getTime() + WIDGET_TIMOUT_DURATION;
    }
    refreshWidget() {
        this.hasError = false;
        this.mxService
            .displayWidget(this.widgetType, {
            id: this.tagName,
            height: this.height,
            autoload: false,
        }, this.subAccount)
            .then((res) => {
            this.hasError = !res;
        });
    }
    ngOnDestroy() {
        this.platformSubscription.unsubscribe();
    }
};
MXWidgetComponent.ctorParameters = () => [
    { type: _shared_lib_services_mx_service_mx_service__WEBPACK_IMPORTED_MODULE_2__.MXService },
    { type: _shared_lib_services_utility_utility_service__WEBPACK_IMPORTED_MODULE_3__.SharedUtilityService },
    { type: _mobile_app_modules_shared_service_platform_platform_service__WEBPACK_IMPORTED_MODULE_4__.PlatformService }
];
MXWidgetComponent.propDecorators = {
    tagName: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Input }],
    widgetType: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Input }],
    height: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Input }],
    subAccount: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Input }]
};
MXWidgetComponent = (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_7__.Component)({
        selector: 'app-mx-widget',
        template: _Users_vijay_a_Documents_GitHub_MYVOYAGE_node_modules_ngtools_webpack_src_loaders_direct_resource_js_mx_widget_component_html__WEBPACK_IMPORTED_MODULE_0__.default,
        styles: [_mx_widget_component_scss__WEBPACK_IMPORTED_MODULE_1__]
    })
], MXWidgetComponent);



/***/ }),

/***/ 56502:
/*!*************************************************************!*\
  !*** ./shared-lib/components/mx-widget/mx-widget.module.ts ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MXWidgetModule": function() { return /* binding */ MXWidgetModule; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ 42321);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ 2316);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/common */ 54364);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ionic/angular */ 7602);
/* harmony import */ var _mx_widget_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mx-widget.component */ 78817);





let MXWidgetModule = class MXWidgetModule {
};
MXWidgetModule = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.NgModule)({
        imports: [_angular_common__WEBPACK_IMPORTED_MODULE_3__.CommonModule, _ionic_angular__WEBPACK_IMPORTED_MODULE_4__.IonicModule],
        declarations: [_mx_widget_component__WEBPACK_IMPORTED_MODULE_0__.MXWidgetComponent],
        exports: [_mx_widget_component__WEBPACK_IMPORTED_MODULE_0__.MXWidgetComponent],
    })
], MXWidgetModule);



/***/ }),

/***/ 12848:
/*!**************************************************************************!*\
  !*** ./shared-lib/modules/orange-money/services/orange-money.service.ts ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "OrangeMoneyService": function() { return /* binding */ OrangeMoneyService; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! tslib */ 42321);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @angular/core */ 2316);
/* harmony import */ var _shared_lib_services_account_constants_endpoints__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @shared-lib/services/account/constants/endpoints */ 51222);
/* harmony import */ var om_js_calc_src_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! om-js-calc/src/index */ 88410);
/* harmony import */ var voya_orange_money_build_orangemoneyui_nonFEModelBase_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! voya-orange-money/build/orangemoneyui/nonFEModelBase.js */ 42789);
/* harmony import */ var voya_orange_money_build_orangemoneyui_nonFEModelBase_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(voya_orange_money_build_orangemoneyui_nonFEModelBase_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var voya_orange_money_build_orangemoneyui_feModelBase_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! voya-orange-money/build/orangemoneyui/feModelBase.js */ 23667);
/* harmony import */ var voya_orange_money_build_orangemoneyui_feModelBase_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(voya_orange_money_build_orangemoneyui_feModelBase_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _shared_lib_services_account_models_orange_money_model__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @shared-lib/services/account/models/orange-money.model */ 58697);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! rxjs */ 94283);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! rxjs */ 13413);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! rxjs */ 34361);
/* harmony import */ var _shared_lib_services_account_account_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @shared-lib/services/account/account.service */ 61040);
/* harmony import */ var _shared_lib_constants_dummy__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @shared-lib/constants/dummy */ 30885);
/* harmony import */ var _shared_lib_services_utility_utility_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @shared-lib/services/utility/utility.service */ 96182);
/* harmony import */ var _shared_lib_services_base_base_factory_provider__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @shared-lib/services/base/base-factory-provider */ 53911);
/* harmony import */ var _shared_lib_services_access_access_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @shared-lib/services/access/access.service */ 49071);













let OrangeMoneyService = class OrangeMoneyService {
    constructor(baseService, utilityService, accountService, accessService) {
        this.baseService = baseService;
        this.utilityService = utilityService;
        this.accountService = accountService;
        this.accessService = accessService;
        this.oData = null;
        this.orangeDataSubject = null;
        this.subscription = new rxjs__WEBPACK_IMPORTED_MODULE_10__.Subscription();
        this.endpoints = this.utilityService.appendBaseUrlToEndpoints(_shared_lib_services_account_constants_endpoints__WEBPACK_IMPORTED_MODULE_0__.endPoints);
        this.nonFEModelBase = new voya_orange_money_build_orangemoneyui_nonFEModelBase_js__WEBPACK_IMPORTED_MODULE_2__.NonFeModelBase();
        this.feModelBase = new voya_orange_money_build_orangemoneyui_feModelBase_js__WEBPACK_IMPORTED_MODULE_3__.FeModelBase();
        this.orangeDataSubject = new rxjs__WEBPACK_IMPORTED_MODULE_11__.ReplaySubject(1);
    }
    getOMEligibility() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_12__.__awaiter)(this, void 0, void 0, function* () {
            if (this.omEligibility === undefined) {
                const data = yield this.baseService.get(this.endpoints.omEligibility + '/' + _shared_lib_constants_dummy__WEBPACK_IMPORTED_MODULE_6__.dummyPartyID);
                this.omEligibility = data.eligible;
            }
            return this.omEligibility;
        });
    }
    getOrangeData(refresh = false) {
        if (this.oData == null || refresh) {
            this.oData = (0,rxjs__WEBPACK_IMPORTED_MODULE_13__.from)(this.baseService.get(this.endpoints.getrrinfo));
            const subscription = this.oData.subscribe(result => {
                this.orangeDataSubject.next(result);
            }, () => {
                this.orangeDataSubject.next({});
            });
            this.subscription.add(subscription);
        }
        return this.orangeDataSubject;
    }
    setOrangeData(omData) {
        this.orangeDataSubject.next(omData);
    }
    saveRetiremnetAgeFE(age) {
        var _a, _b;
        return (0,tslib__WEBPACK_IMPORTED_MODULE_12__.__awaiter)(this, void 0, void 0, function* () {
            const planId = ((_a = this.accountService.getAccount()) === null || _a === void 0 ? void 0 : _a.planId)
                ? this.accountService.getAccount().planId
                : (_b = (yield this.accessService.checkMyvoyageAccess())) === null || _b === void 0 ? void 0 : _b.currentPlan.planId;
            return this.baseService.post(this.endpoints.saveRetirementAgeFE, {
                contributionUpdate: {
                    planId: planId,
                    crc: true,
                    retirementAge: age,
                    regularUnit: 'PERCENT',
                    sources: [],
                    saveRetirementAge: true,
                },
            });
        });
    }
    saveRetirementAgeNonFE(age, orangeData) {
        var _a;
        const sources = [];
        orangeData.orangeData.participantDefinedContributionAccounts[0].planInfo.sources.forEach(source => {
            sources.push({
                amount: source.contribution,
                id: source.id,
                type: source.type,
            });
        });
        const payload = {
            contributionUpdate: {
                planId: ((_a = this.accountService.getAccount()) === null || _a === void 0 ? void 0 : _a.planId)
                    ? this.accountService.getAccount().planId
                    : orangeData.orangeData.participantDefinedContributionAccounts[0]
                        .planInfo.planId,
                crc: orangeData.orangeData.participantDefinedContributionAccounts[0]
                    .planInfo.crcAllowed,
                retirementAge: age,
                investmentRateOfReturn: orangeData.orangeData.participantData.investmentRateOfReturn,
                regularUnit: orangeData.orangeData.participantDefinedContributionAccounts[0]
                    .contributionData.regularContributionUnit,
                catchupUnit: orangeData.orangeData.participantDefinedContributionAccounts[0]
                    .planInfo.catchupContributionType,
                sources: sources,
            },
        };
        return this.baseService.post(this.endpoints.saveRetirementAgeNonFE, payload);
    }
    saveSalaryFE(salary, growthRate, desiredGoal, minimumGoal) {
        return this.baseService.post(this.endpoints.saveSalaryFE, {
            contributionUpdate: {},
            aboutMeData: {
                salary: salary,
                growthRate: growthRate,
                desiredGoal: desiredGoal * 12,
                minimumGoal: minimumGoal * 12,
            },
        });
    }
    saveSalaryNonFE(salary, dob, omData) {
        var _a;
        return this.baseService.post(this.endpoints.saveSalaryNonFE, {
            pptProfile: {
                currentAnnualSalary: salary,
                dob: dob,
                plans: [
                    {
                        planId: ((_a = this.accountService.getAccount()) === null || _a === void 0 ? void 0 : _a.planId)
                            ? this.accountService.getAccount().planId
                            : omData.orangeData.participantDefinedContributionAccounts[0]
                                .planInfo.planId,
                    },
                ],
            },
        });
    }
    getOrangeMoneyStatus(omData) {
        if (!omData ||
            omData.errorCode === 'system-unavailable' ||
            omData.errorCode === 'insufficient-data') {
            return _shared_lib_services_account_models_orange_money_model__WEBPACK_IMPORTED_MODULE_4__.OMStatus.SERVICE_DOWN;
        }
        if (omData.madLibData || omData.errorCode === 'opt-out') {
            return _shared_lib_services_account_models_orange_money_model__WEBPACK_IMPORTED_MODULE_4__.OMStatus.MADLIB_OM;
        }
        if (omData.orangeData) {
            return _shared_lib_services_account_models_orange_money_model__WEBPACK_IMPORTED_MODULE_4__.OMStatus.ORANGE_DATA;
        }
        if (omData.feForecastData) {
            if (omData.feForecastData.feForecast.errorCode) {
                return _shared_lib_services_account_models_orange_money_model__WEBPACK_IMPORTED_MODULE_4__.OMStatus.MADLIB_FE;
            }
            else {
                return _shared_lib_services_account_models_orange_money_model__WEBPACK_IMPORTED_MODULE_4__.OMStatus.FE_DATA;
            }
        }
        return _shared_lib_services_account_models_orange_money_model__WEBPACK_IMPORTED_MODULE_4__.OMStatus.UNKNOWN;
    }
    // *************** getrrinfo Call ***************
    getEstimates(omData) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_12__.__awaiter)(this, void 0, void 0, function* () {
            const status = this.getOrangeMoneyStatus(omData);
            switch (status) {
                case _shared_lib_services_account_models_orange_money_model__WEBPACK_IMPORTED_MODULE_4__.OMStatus.ORANGE_DATA:
                    return this.getNonFEEstimates(omData);
                case _shared_lib_services_account_models_orange_money_model__WEBPACK_IMPORTED_MODULE_4__.OMStatus.FE_DATA:
                    return this.getFEData(omData);
                case _shared_lib_services_account_models_orange_money_model__WEBPACK_IMPORTED_MODULE_4__.OMStatus.MADLIB_OM:
                case _shared_lib_services_account_models_orange_money_model__WEBPACK_IMPORTED_MODULE_4__.OMStatus.MADLIB_FE:
                case _shared_lib_services_account_models_orange_money_model__WEBPACK_IMPORTED_MODULE_4__.OMStatus.SERVICE_DOWN:
                case _shared_lib_services_account_models_orange_money_model__WEBPACK_IMPORTED_MODULE_4__.OMStatus.UNKNOWN:
                    return null;
            }
        });
    }
    getpension() {
        return this.baseService.get(this.endpoints.getpension);
    }
    getsrbenefits() {
        return this.baseService.get(this.endpoints.getsrbenefits);
    }
    getssbenefits() {
        return this.baseService.get(this.endpoints.getssbenefits);
    }
    getFEData(data) {
        const monthly = data.feForecastData.feForecast.totalIncome;
        const goal = data.feForecastData.feForecast.goal;
        return {
            estimatedMonthlyIncome: monthly,
            estimatedMonthlyGoal: goal,
            difference: goal - monthly,
            retirementAge: data.feForecastData.participantData.selectedRetirementAge,
            currSalary: data.feForecastData.participantData.salary.amount,
        };
    }
    getNonFEEstimates(omData) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_12__.__awaiter)(this, void 0, void 0, function* () {
            //SS Benefits Call
            const ssBenefits = yield this.getssbenefits();
            //Pension Call
            const pension = yield this.getpension();
            if (pension.errorMessage) {
                return undefined;
            }
            //checking if it is SR Plan
            const pensionViewType = pension.pensionView.pensionViewFlag;
            let srBenefitsResponse;
            if (pensionViewType === 'CalcBenefit' &&
                pension.pensionView.srData.pensionCalMethod === 'C') {
                srBenefitsResponse = yield this.getsrbenefits();
                if (!srBenefitsResponse || srBenefitsResponse.errorMessage) {
                    return undefined;
                }
            }
            this.nonFEModelBase.initializeData(omData, ssBenefits, pension, srBenefitsResponse, undefined, 'portfolio', false, om_js_calc_src_index__WEBPACK_IMPORTED_MODULE_1__.AccountTypes, om_js_calc_src_index__WEBPACK_IMPORTED_MODULE_1__.omCalculator);
            const estimates = this.createDollarGraphHeaderObject(this.nonFEModelBase.nonFeLandingObject);
            return Object.assign(Object.assign({}, estimates), { retirementAge: omData.orangeData.participantData.retirementAge, currSalary: omData.orangeData.participantData.currentAnnualSalary });
        });
    }
    createDollarGraphHeaderObject(nonFeLandingObject) {
        this.ssAdditionalBenefits = this.getSSAddlBenefits(nonFeLandingObject);
        this.income = this.getIncome(nonFeLandingObject);
        this.shortfallVal = this.getDifference(nonFeLandingObject);
        return {
            estimatedMonthlyIncome: Math.round(this.income),
            estimatedMonthlyGoal: Math.round(nonFeLandingObject.calcResponse.getMonthlySalaryReplacementRequirement()),
            difference: Math.round(this.shortfallVal),
        };
    }
    getSSAddlBenefits(nonFeLandingObject) {
        const ssStartAge = nonFeLandingObject.calculatedSSData.ssStartValue;
        const ssRetireAge = nonFeLandingObject.calculatedSSData.ssStartRetireAgeValue;
        if (ssRetireAge < ssStartAge) {
            return 0;
        }
        else if (ssRetireAge > ssStartAge) {
            return nonFeLandingObject.ssAdditionalBenefits;
        }
        else if (ssRetireAge === ssStartAge) {
            return nonFeLandingObject.ssAdditionalBenefits;
        }
    }
    getDifference(nonFeLandingObject) {
        return (nonFeLandingObject.calcResponse.getMonthlySalaryReplacementRequirement() -
            this.income);
    }
    getIncome(nonFeLandingObject) {
        const ssStartAge = nonFeLandingObject.ssStartAge;
        const ssRetireAge = nonFeLandingObject.ssRetireAge;
        const incomeAtSS = nonFeLandingObject.calculatedSSData.ssIncomeSS +
            nonFeLandingObject.calculatedSSData.ssBenefitSS +
            this.ssAdditionalBenefits;
        const incomeAtRA = nonFeLandingObject.calculatedSSData.ssIncomeRA +
            nonFeLandingObject.calculatedSSData.ssBenefitRA +
            this.ssAdditionalBenefits;
        if (ssRetireAge < ssStartAge) {
            return incomeAtRA;
        }
        else if (ssRetireAge > ssStartAge) {
            return incomeAtRA;
        }
        else if (ssRetireAge === ssStartAge) {
            return incomeAtSS;
        }
    }
    updateOrangeMoneyOptOut() {
        return this.baseService.post(this.endpoints.updateOptOut, { optOut: false });
    }
    postMadlibData(dob, salary, feeling) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_12__.__awaiter)(this, void 0, void 0, function* () {
            return this.baseService.post(this.endpoints.saveMadlib, {
                dob: dob,
                salary: salary,
                feeling: feeling,
            });
        });
    }
    getSalary() {
        return new Promise(resolve => {
            this.getOrangeData().subscribe((omData) => (0,tslib__WEBPACK_IMPORTED_MODULE_12__.__awaiter)(this, void 0, void 0, function* () {
                const { currSalary } = yield this.getEstimates(omData);
                resolve(currSalary);
            }));
        });
    }
};
OrangeMoneyService.ctorParameters = () => [
    { type: _shared_lib_services_base_base_factory_provider__WEBPACK_IMPORTED_MODULE_8__.BaseService },
    { type: _shared_lib_services_utility_utility_service__WEBPACK_IMPORTED_MODULE_7__.SharedUtilityService },
    { type: _shared_lib_services_account_account_service__WEBPACK_IMPORTED_MODULE_5__.AccountService },
    { type: _shared_lib_services_access_access_service__WEBPACK_IMPORTED_MODULE_9__.AccessService }
];
OrangeMoneyService = (0,tslib__WEBPACK_IMPORTED_MODULE_12__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_14__.Injectable)({
        providedIn: 'root',
    })
], OrangeMoneyService);



/***/ }),

/***/ 58697:
/*!******************************************************************!*\
  !*** ./shared-lib/services/account/models/orange-money.model.ts ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "OMStatus": function() { return /* binding */ OMStatus; }
/* harmony export */ });
var OMStatus;
(function (OMStatus) {
    OMStatus[OMStatus["ORANGE_DATA"] = 0] = "ORANGE_DATA";
    OMStatus[OMStatus["FE_DATA"] = 1] = "FE_DATA";
    OMStatus[OMStatus["MADLIB_OM"] = 2] = "MADLIB_OM";
    OMStatus[OMStatus["MADLIB_FE"] = 3] = "MADLIB_FE";
    OMStatus[OMStatus["SERVICE_DOWN"] = 4] = "SERVICE_DOWN";
    OMStatus[OMStatus["UNKNOWN"] = 5] = "UNKNOWN";
})(OMStatus || (OMStatus = {}));


/***/ }),

/***/ 55813:
/*!*******************************************************************!*\
  !*** ./shared-lib/services/mx-service/models/widget-type.enum.ts ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "WidgetType": function() { return /* binding */ WidgetType; }
/* harmony export */ });
var WidgetType;
(function (WidgetType) {
    WidgetType["CONNECT"] = "connect_widget";
    WidgetType["FINSTRONG"] = "finstrong_widget";
    WidgetType["FINSTRONG_MINI"] = "mini_finstrong_widget";
    WidgetType["MANAGE_ACCOUNT"] = "connections_widget";
    WidgetType["PULSE"] = "pulse_widget";
    WidgetType["NET_WORTH"] = "net_worth_widget";
    WidgetType["NET_WORTH_MINI"] = "mini_net_worth_widget";
    WidgetType["TRANSACTIONS"] = "transactions_widget";
    WidgetType["PULSE_CAROUSEL_MINI"] = "mini_pulse_carousel_widget";
    WidgetType["MINI_SPENDING_WIDGET"] = "mini_spending_widget";
    WidgetType["MINI_BUDGET_WIDGET"] = "mini_budgets_widget";
    WidgetType["SPENDING_WIDGET"] = "spending_widget";
    WidgetType["BUDGET_WIDGET"] = "budgets_widget";
})(WidgetType || (WidgetType = {}));


/***/ }),

/***/ 47828:
/*!*********************************************************************************************************************************!*\
  !*** ./node_modules/@ngtools/webpack/src/loaders/direct-resource.js!./shared-lib/components/mx-widget/mx-widget.component.html ***!
  \*********************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<div\n  *ngIf=\"!hasError\"\n  id=\"{{ tagName }}\"\n  [ngClass]=\"isWeb ? 'web-mx-widget-component' : 'mobile-mx-widget-component'\"\n></div>\n<div *ngIf=\"hasError\" class=\"error-window\">\n  <ion-text>{{ content.widgetError }}</ion-text>\n  <ion-button (click)=\"refreshWidget()\" fill=\"clear\" color=\"btncolor\">\n    {{ content.retry }}\n  </ion-button>\n</div>\n");

/***/ }),

/***/ 55380:
/*!******************************************************************!*\
  !*** ./shared-lib/components/mx-widget/mx-widget.component.scss ***!
  \******************************************************************/
/***/ (function(module) {

"use strict";
module.exports = "@media screen and (min-height: 500px) and (max-height: 600px) {\n  #mx-manage-accounts {\n    height: 400px;\n  }\n}\n@media screen and (min-height: 600px) and (max-height: 800px) {\n  #mx-manage-accounts {\n    height: 500px;\n  }\n}\n@media screen and (min-height: 600px) and (max-height: 800px) {\n  #mx-manage-accounts {\n    height: 500px;\n  }\n}\n@media screen and (min-height: 800px) and (max-height: 1200px) {\n  #mx-manage-accounts {\n    height: 700px;\n  }\n}\n@media screen and (max-width: 920px) {\n  .web-mx-widget-component {\n    height: 400px;\n  }\n}\n.error-window {\n  display: flex;\n  flex-direction: column;\n  padding: 60px;\n}\n.error-window ion-text {\n  font-size: 18px;\n  margin-bottom: 20px;\n}\n.error-window ion-button,\n.error-window ion-text {\n  margin: auto;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm14LXdpZGdldC5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDRTtFQURGO0lBRUksYUFBQTtFQUNGO0FBQ0Y7QUFBRTtFQUpGO0lBS0ksYUFBQTtFQUdGO0FBQ0Y7QUFGRTtFQVBGO0lBUUksYUFBQTtFQUtGO0FBQ0Y7QUFKRTtFQVZGO0lBV0ksYUFBQTtFQU9GO0FBQ0Y7QUFKRTtFQURGO0lBRUksYUFBQTtFQVFGO0FBQ0Y7QUFMQTtFQUNFLGFBQUE7RUFDQSxzQkFBQTtFQUNBLGFBQUE7QUFRRjtBQU5FO0VBQ0UsZUFBQTtFQUNBLG1CQUFBO0FBUUo7QUFMRTs7RUFFRSxZQUFBO0FBT0oiLCJmaWxlIjoibXgtd2lkZ2V0LmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiI214LW1hbmFnZS1hY2NvdW50cyB7XG4gIEBtZWRpYSBzY3JlZW4gYW5kIChtaW4taGVpZ2h0OiA1MDBweCkgYW5kIChtYXgtaGVpZ2h0OiA2MDBweCkge1xuICAgIGhlaWdodDogNDAwcHg7XG4gIH1cbiAgQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi1oZWlnaHQ6IDYwMHB4KSBhbmQgKG1heC1oZWlnaHQ6IDgwMHB4KSB7XG4gICAgaGVpZ2h0OiA1MDBweDtcbiAgfVxuICBAbWVkaWEgc2NyZWVuIGFuZCAobWluLWhlaWdodDogNjAwcHgpIGFuZCAobWF4LWhlaWdodDogODAwcHgpIHtcbiAgICBoZWlnaHQ6IDUwMHB4O1xuICB9XG4gIEBtZWRpYSBzY3JlZW4gYW5kIChtaW4taGVpZ2h0OiA4MDBweCkgYW5kIChtYXgtaGVpZ2h0OiAxMjAwcHgpIHtcbiAgICBoZWlnaHQ6IDcwMHB4O1xuICB9XG59XG4ud2ViLW14LXdpZGdldC1jb21wb25lbnQge1xuICBAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA5MjBweCkge1xuICAgIGhlaWdodDogNDAwcHg7XG4gIH1cbn1cblxuLmVycm9yLXdpbmRvdyB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIHBhZGRpbmc6IDYwcHg7XG5cbiAgaW9uLXRleHQge1xuICAgIGZvbnQtc2l6ZTogMThweDtcbiAgICBtYXJnaW4tYm90dG9tOiAyMHB4O1xuICB9XG5cbiAgaW9uLWJ1dHRvbixcbiAgaW9uLXRleHQge1xuICAgIG1hcmdpbjogYXV0bztcbiAgfVxufVxuIl19 */";

/***/ }),

/***/ 5032:
/*!****************************************************************!*\
  !*** ./shared-lib/components/mx-widget/constants/content.json ***!
  \****************************************************************/
/***/ (function(module) {

"use strict";
module.exports = JSON.parse('{"retry":"Retry","widgetError":"Failed to load widget"}');

/***/ })

}]);
//# sourceMappingURL=default-shared-lib_components_mx-widget_mx-widget_module_ts-shared-lib_modules_orange-money_s-772f2d-es2015.js.map