{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { endPoints } from '@shared-lib/services/account/constants/endpoints';\nimport { omCalculator, AccountTypes } from 'om-js-calc/src/index';\nimport { NonFeModelBase } from 'voya-orange-money/build/orangemoneyui/nonFEModelBase.js';\nimport { FeModelBase } from 'voya-orange-money/build/orangemoneyui/feModelBase.js';\nimport { OMStatus } from '@shared-lib/services/account/models/orange-money.model';\nimport { from, ReplaySubject, Subscription } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@shared-lib/services/base/base-factory-provider\";\nimport * as i2 from \"@shared-lib/services/utility/utility.service\";\nimport * as i3 from \"@shared-lib/services/account/account.service\";\nimport * as i4 from \"@shared-lib/services/access/access.service\";\nexport let OrangeMoneyService = /*#__PURE__*/(() => {\n  class OrangeMoneyService {\n    constructor(baseService, utilityService, accountService, accessService) {\n      this.baseService = baseService;\n      this.utilityService = utilityService;\n      this.accountService = accountService;\n      this.accessService = accessService;\n      this.oData = null;\n      this.orangeDataSubject = null;\n      this.subscription = new Subscription();\n      this.endpoints = this.utilityService.appendBaseUrlToEndpoints(endPoints);\n      this.nonFEModelBase = new NonFeModelBase();\n      this.feModelBase = new FeModelBase();\n      this.orangeDataSubject = new ReplaySubject(1);\n    }\n\n    getOMEligibility() {\n      return __awaiter(this, void 0, void 0, function* () {\n        console.log(\"this.omEligibleData :\");\n\n        if (this.omEligibleData === undefined) {\n          this.omEligibleData = yield this.baseService.get(this.endpoints.omEligibility);\n        }\n\n        console.log(\"this.omEligibleData :\");\n        return this.omEligibleData;\n      });\n    }\n\n    getOrangeData(refresh = false) {\n      if (this.oData == null || refresh) {\n        this.oData = from(this.baseService.get(this.endpoints.getrrinfo));\n        const subscription = this.oData.subscribe(result => {\n          this.orangeDataSubject.next(result);\n        }, () => {\n          this.orangeDataSubject.next({});\n        });\n        this.subscription.add(subscription);\n      }\n\n      return this.orangeDataSubject;\n    }\n\n    setOrangeData(omData) {\n      this.orangeDataSubject.next(omData);\n    }\n\n    saveRetiremnetAgeFE(age) {\n      var _a, _b;\n\n      return __awaiter(this, void 0, void 0, function* () {\n        const planId = ((_a = this.accountService.getAccount()) === null || _a === void 0 ? void 0 : _a.planId) ? this.accountService.getAccount().planId : (_b = yield this.accessService.checkMyvoyageAccess()) === null || _b === void 0 ? void 0 : _b.currentPlan.planId;\n        return this.baseService.post(this.endpoints.saveRetirementAgeFE, {\n          contributionUpdate: {\n            planId: planId,\n            crc: true,\n            retirementAge: age,\n            regularUnit: 'PERCENT',\n            sources: [],\n            saveRetirementAge: true\n          }\n        });\n      });\n    }\n\n    saveRetirementAgeNonFE(age, orangeData) {\n      var _a;\n\n      const sources = [];\n      orangeData.orangeData.participantDefinedContributionAccounts[0].planInfo.sources.forEach(source => {\n        sources.push({\n          amount: source.contribution,\n          id: source.id,\n          type: source.type\n        });\n      });\n      const payload = {\n        contributionUpdate: {\n          planId: ((_a = this.accountService.getAccount()) === null || _a === void 0 ? void 0 : _a.planId) ? this.accountService.getAccount().planId : orangeData.orangeData.participantDefinedContributionAccounts[0].planInfo.planId,\n          crc: orangeData.orangeData.participantDefinedContributionAccounts[0].planInfo.crcAllowed,\n          retirementAge: age,\n          investmentRateOfReturn: orangeData.orangeData.participantData.investmentRateOfReturn,\n          regularUnit: orangeData.orangeData.participantDefinedContributionAccounts[0].contributionData.regularContributionUnit,\n          catchupUnit: orangeData.orangeData.participantDefinedContributionAccounts[0].planInfo.catchupContributionType,\n          sources: sources\n        }\n      };\n      return this.baseService.post(this.endpoints.saveRetirementAgeNonFE, payload);\n    }\n\n    saveSalaryFE(salary, growthRate, desiredGoal, minimumGoal) {\n      return this.baseService.post(this.endpoints.saveSalaryFE, {\n        contributionUpdate: {},\n        aboutMeData: {\n          salary: salary,\n          growthRate: growthRate,\n          desiredGoal: desiredGoal * 12,\n          minimumGoal: minimumGoal * 12\n        }\n      });\n    }\n\n    saveSalaryNonFE(salary, dob, omData) {\n      var _a;\n\n      return this.baseService.post(this.endpoints.saveSalaryNonFE, {\n        pptProfile: {\n          currentAnnualSalary: salary,\n          dob: dob,\n          plans: [{\n            planId: ((_a = this.accountService.getAccount()) === null || _a === void 0 ? void 0 : _a.planId) ? this.accountService.getAccount().planId : omData.orangeData.participantDefinedContributionAccounts[0].planInfo.planId\n          }]\n        }\n      });\n    }\n\n    getOrangeMoneyStatus(omData) {\n      if (!omData || omData.errorCode === 'system-unavailable' || omData.errorCode === 'insufficient-data') {\n        return OMStatus.SERVICE_DOWN;\n      }\n\n      if (omData.madLibData || omData.errorCode === 'opt-out') {\n        return OMStatus.MADLIB_OM;\n      }\n\n      if (omData.orangeData) {\n        return OMStatus.ORANGE_DATA;\n      }\n\n      if (omData.feForecastData) {\n        if (omData.feForecastData.feForecast.errorCode) {\n          return OMStatus.MADLIB_FE;\n        } else {\n          return OMStatus.FE_DATA;\n        }\n      }\n\n      return OMStatus.UNKNOWN;\n    } // *************** getrrinfo Call ***************\n\n\n    getEstimates(omData) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const status = this.getOrangeMoneyStatus(omData);\n\n        switch (status) {\n          case OMStatus.ORANGE_DATA:\n            return this.getNonFEEstimates(omData);\n\n          case OMStatus.FE_DATA:\n            return this.getFEData(omData);\n\n          case OMStatus.MADLIB_OM:\n          case OMStatus.MADLIB_FE:\n          case OMStatus.SERVICE_DOWN:\n          case OMStatus.UNKNOWN:\n            return null;\n        }\n      });\n    }\n\n    getpension() {\n      return this.baseService.get(this.endpoints.getpension);\n    }\n\n    getsrbenefits() {\n      return this.baseService.get(this.endpoints.getsrbenefits);\n    }\n\n    getssbenefits() {\n      return this.baseService.get(this.endpoints.getssbenefits);\n    }\n\n    getFEData(data) {\n      const monthly = data.feForecastData.feForecast.totalIncome;\n      const goal = data.feForecastData.feForecast.goal;\n      return {\n        estimatedMonthlyIncome: monthly,\n        estimatedMonthlyGoal: goal,\n        difference: goal - monthly,\n        retirementAge: data.feForecastData.participantData.selectedRetirementAge,\n        currSalary: data.feForecastData.participantData.salary.amount\n      };\n    }\n\n    getNonFEEstimates(omData) {\n      return __awaiter(this, void 0, void 0, function* () {\n        //SS Benefits Call\n        const ssBenefits = yield this.getssbenefits(); //Pension Call\n\n        const pension = yield this.getpension();\n\n        if (pension.errorMessage) {\n          return undefined;\n        } //checking if it is SR Plan\n\n\n        const pensionViewType = pension.pensionView.pensionViewFlag;\n        let srBenefitsResponse;\n\n        if (pensionViewType === 'CalcBenefit' && pension.pensionView.srData.pensionCalMethod === 'C') {\n          srBenefitsResponse = yield this.getsrbenefits();\n\n          if (!srBenefitsResponse || srBenefitsResponse.errorMessage) {\n            return undefined;\n          }\n        }\n\n        this.nonFEModelBase.initializeData(omData, ssBenefits, pension, srBenefitsResponse, undefined, 'portfolio', false, AccountTypes, omCalculator);\n        const estimates = this.createDollarGraphHeaderObject(this.nonFEModelBase.nonFeLandingObject);\n        return Object.assign(Object.assign({}, estimates), {\n          retirementAge: omData.orangeData.participantData.retirementAge,\n          currSalary: omData.orangeData.participantData.currentAnnualSalary\n        });\n      });\n    }\n\n    createDollarGraphHeaderObject(nonFeLandingObject) {\n      this.ssAdditionalBenefits = this.getSSAddlBenefits(nonFeLandingObject);\n      this.income = this.getIncome(nonFeLandingObject);\n      this.shortfallVal = this.getDifference(nonFeLandingObject);\n      return {\n        estimatedMonthlyIncome: Math.round(this.income),\n        estimatedMonthlyGoal: Math.round(nonFeLandingObject.calcResponse.getMonthlySalaryReplacementRequirement()),\n        difference: Math.round(this.shortfallVal)\n      };\n    }\n\n    getSSAddlBenefits(nonFeLandingObject) {\n      const ssStartAge = nonFeLandingObject.calculatedSSData.ssStartValue;\n      const ssRetireAge = nonFeLandingObject.calculatedSSData.ssStartRetireAgeValue;\n\n      if (ssRetireAge < ssStartAge) {\n        return 0;\n      } else if (ssRetireAge > ssStartAge) {\n        return nonFeLandingObject.ssAdditionalBenefits;\n      } else if (ssRetireAge === ssStartAge) {\n        return nonFeLandingObject.ssAdditionalBenefits;\n      }\n    }\n\n    getDifference(nonFeLandingObject) {\n      return nonFeLandingObject.calcResponse.getMonthlySalaryReplacementRequirement() - this.income;\n    }\n\n    getIncome(nonFeLandingObject) {\n      const ssStartAge = nonFeLandingObject.ssStartAge;\n      const ssRetireAge = nonFeLandingObject.ssRetireAge;\n      const incomeAtSS = nonFeLandingObject.calculatedSSData.ssIncomeSS + nonFeLandingObject.calculatedSSData.ssBenefitSS + this.ssAdditionalBenefits;\n      const incomeAtRA = nonFeLandingObject.calculatedSSData.ssIncomeRA + nonFeLandingObject.calculatedSSData.ssBenefitRA + this.ssAdditionalBenefits;\n\n      if (ssRetireAge < ssStartAge) {\n        return incomeAtRA;\n      } else if (ssRetireAge > ssStartAge) {\n        return incomeAtRA;\n      } else if (ssRetireAge === ssStartAge) {\n        return incomeAtSS;\n      }\n    }\n\n    updateOrangeMoneyOptOut() {\n      return this.baseService.post(this.endpoints.updateOptOut, {\n        optOut: false\n      });\n    }\n\n    postMadlibData(dob, salary, feeling) {\n      return __awaiter(this, void 0, void 0, function* () {\n        return this.baseService.post(this.endpoints.saveMadlib, {\n          dob: dob,\n          salary: salary,\n          feeling: feeling\n        });\n      });\n    }\n\n    getSalary() {\n      return new Promise(resolve => {\n        this.getOrangeData().subscribe(omData => __awaiter(this, void 0, void 0, function* () {\n          const {\n            currSalary\n          } = yield this.getEstimates(omData);\n          resolve(currSalary);\n        }));\n      });\n    }\n\n  }\n\n  OrangeMoneyService.ɵfac = function OrangeMoneyService_Factory(t) {\n    return new (t || OrangeMoneyService)(i0.ɵɵinject(i1.BaseService), i0.ɵɵinject(i2.SharedUtilityService), i0.ɵɵinject(i3.AccountService), i0.ɵɵinject(i4.AccessService));\n  };\n\n  OrangeMoneyService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: OrangeMoneyService,\n    factory: OrangeMoneyService.ɵfac,\n    providedIn: 'root'\n  });\n  return OrangeMoneyService;\n})();","map":null,"metadata":{},"sourceType":"module"}