{"ast":null,"code":"define(['./ObjFactory', './annuityRate/AnnuityMonthlyBenefit', './AccountTypes', './IncomeTypes', './util/CalcUtilities', './AccumCensus', './ReplacementIncome', './BaseAccumulator', './LimitUtilities', './loan/LoanUtil'], function (ObjFactory, AnnuityMonthlyBenefit, AccountTypes, IncomeTypes, CalcUtilities, AccumCensus, ReplacementIncome, BaseAccumulator, LimitUtilities, LoanUtil) {\n  //  Constructor\n  var OMCalculator = function () {\n    //  Private var declarations ------------------------------------\n    var _accountList = null;\n    var _accumCommon = null;\n    var _settleCommon = null;\n    var _incomeList = null;\n    var _rber = null; //  Privileged method declarations ------------------------------------\n\n    this.init = function (ac, sc, al, il) {\n      _accountList = al;\n      _accumCommon = ac;\n      _settleCommon = sc;\n      _incomeList = il;\n      _rber = null;\n    };\n\n    this.getRetireBenefitEvalResponse = function () {\n      return _rber;\n    };\n\n    this.align = function () {\n      var ba = ObjFactory.getBaseAccumulatorInstance(); //  ba:BaseAccumulator\n\n      ba.init(_accumCommon, _accountList);\n      ba.align();\n      _rber = legacyRetirementHandler(_accumCommon, _settleCommon, _accountList, _incomeList, ba.getCensusList()); // 170612   set loan drop amount if there is a loan (handling multiple plan situation\n\n      var loanPlanIndex = BaseAccumulator.getModelledLoanPlanIndex(_accountList);\n\n      if (loanPlanIndex > -1) {\n        var index = -1;\n        var loanDropRber = null;\n        var loanPlanId = BaseAccumulator.getModelledLoanPlanId(_accountList); // clone accountList\n\n        var clonedAccountList = [];\n\n        for (var i = 0; i < _accountList.length; i++) {\n          var cl = OMCalculator.cloneAccount(_accountList[i]);\n          clonedAccountList.push(cl);\n        } // reduce contrib amounts to 0. for appropriate account types\n        // use plan id if it set...\n\n\n        if (loanPlanId != \"\") {\n          for (var i = 0; i < clonedAccountList.length; i++) {\n            var aa = clonedAccountList[i];\n            index = LimitUtilities.checkList(aa.getType(), LoanUtil.LoanRepaymentImpactTypes, true);\n\n            if (index > -1 && loanPlanId == aa.getPlanId()) {\n              aa.adjustStartContrib(0.0);\n            }\n          }\n        } // else use plan index\n        else {\n          for (var i = 0; i < clonedAccountList.length; i++) {\n            var aa = clonedAccountList[i];\n            index = LimitUtilities.checkList(aa.getType(), LoanUtil.LoanRepaymentImpactTypes, true);\n\n            if (index > -1 && loanPlanIndex == aa.getPlanIndex()) {\n              aa.adjustStartContrib(0.0);\n            }\n          }\n        }\n\n        ba.init(_accumCommon, clonedAccountList);\n        ba.align();\n        loanDropRber = legacyRetirementHandler(_accumCommon, _settleCommon, clonedAccountList, _incomeList, ba.getCensusList());\n\n        _rber.setLoanContribDropValue(CalcUtilities.roundAndTruncate(_rber.getSumOfMonthlySources() - loanDropRber.getSumOfMonthlySources(), 2));\n      }\n    };\n\n    function legacyRetirementHandler(ac, sc, al, il, cl) {\n      var rber = ObjFactory.getRetireBenefitEvalResponseInstance();\n      var inflationDiscount = CalcUtilities.discountingRate(ac.getFull(), sc.getRateOfInflation());\n      var spiaMonthlyValuePer1000 = AnnuityMonthlyBenefit.getInstance().get(sc.getRetireAge());\n      var currentAnnualSalary = sc.getCurrentAnnualSalary();\n      var replacementRatio = sc.getReplacementRatio();\n      var rateOfRothEnhancement = sc.getRateOfRothBump() > 0.0 && sc.getRateOfRothBump() != 1.0 ? 1.0 / (1.0 - sc.getRateOfRothBump()) - 1.0 : 0.0; // rate for Roth bump\n      // gather results for retirement return\n\n      var balance = 0;\n      var eeContribs = 0;\n      var erContribs = 0;\n      var other = 0;\n      var socialsec = 0;\n      var income = 0;\n      var pensionBalance = 0;\n      var pensionIncome = 0;\n      var newLoanBalanceImpact = 0;\n      var newLoanRepayment = 0;\n      var existingLoanRepayment = 0; // 170811   get roth component of balance to handle roth bump in loans\n\n      var rothProportion = getRothProportion(al, OMCalculator.TYPE_ROTHPROPORTION_DEFERRALS);\n      OMCalculator.adjustBalances(al, rothProportion); // 170531  new salary replacement requirements\n\n      var adjustedAnnualSalary = ReplacementIncome.getAdjustedCurrentDollarSalary(sc.getReplacementIncomeType(), sc.getCurrentAnnualSalary(), ac.getFull(), sc.getRateOfIncrease(), sc.getRateOfInflation(), cl); //  gather account calculations/data\n\n      for (var i = 0; i < al.length; i++) {\n        var aa = al[i];\n\n        switch (aa.getType()) {\n          case AccountTypes.TYPE_DB_MANDATORY_EE:\n            // not a contribution\n            break;\n\n          case AccountTypes.TYPE_NOINCREASE:\n          case AccountTypes.TYPE_NOGROWTH:\n            other += aa.getEeLumpAmount() + aa.getEeEarningsOnLumpAmount() + aa.getErLumpAmount() + aa.getErEarningsOnLumpAmount();\n            other += aa.getEeContribBucket() + aa.getEeEarningsOnContribs();\n            other += aa.getErContribBucket() + aa.getErEarningsOnContribs();\n            break;\n\n          case AccountTypes.TYPE_MANDATORY_ER:\n          case AccountTypes.TYPE_RECURRING_ER:\n            balance += aa.getEeLumpAmount() + aa.getEeEarningsOnLumpAmount() + aa.getErLumpAmount() + aa.getErEarningsOnLumpAmount();\n            erContribs += aa.getEeContribBucket() + aa.getEeEarningsOnContribs() + aa.getErContribBucket() + aa.getErEarningsOnContribs();\n            break;\n\n          case AccountTypes.TYPE_PENSION_CASH_BAL:\n          case AccountTypes.TYPE_PENSION_LUMP_SUM:\n            pensionBalance += aa.getEeLumpAmount() + aa.getEeEarningsOnLumpAmount() + aa.getErLumpAmount() + aa.getErEarningsOnLumpAmount() + aa.getEeContribBucket() + aa.getEeEarningsOnContribs() + aa.getErContribBucket() + aa.getErEarningsOnContribs(); // note this behavior\n\n            break;\n          // 170531 roth enhancement\n\n          case AccountTypes.TYPE_ROTH:\n          case AccountTypes.TYPE_SUPPL_ROTH:\n          case AccountTypes.TYPE_ROTH_AGECATCHUP:\n            // enhance accumulations for roth by a tax rate\n            balance += (1.0 + rateOfRothEnhancement) * (aa.getEeLumpAmount() + aa.getEeEarningsOnLumpAmount() + aa.getErLumpAmount() + aa.getErEarningsOnLumpAmount());\n            eeContribs += (1.0 + rateOfRothEnhancement) * (aa.getEeContribBucket() + aa.getEeEarningsOnContribs());\n            erContribs += (1.0 + rateOfRothEnhancement) * (aa.getErContribBucket() + aa.getErEarningsOnContribs());\n            break;\n\n          case AccountTypes.TYPE_EXISTINGLOAN:\n            // enhance accumulations proportionately for roth bump\n            existingLoanRepayment += (1.0 + rothProportion * rateOfRothEnhancement) * (aa.getEeContribBucket() + aa.getEeEarningsOnContribs());\n            break;\n\n          case AccountTypes.TYPE_NEWLOAN:\n            // enhance accumulations proportionately for roth bump\n            newLoanBalanceImpact += (1.0 + rothProportion * rateOfRothEnhancement) * (aa.getEeLumpAmount() + aa.getEeEarningsOnLumpAmount()); // always(?) negative\n\n            newLoanRepayment += (1.0 + rothProportion * rateOfRothEnhancement) * (aa.getEeContribBucket() + aa.getEeEarningsOnContribs());\n            break;\n\n          default:\n            balance += aa.getEeLumpAmount() + aa.getEeEarningsOnLumpAmount() + aa.getErLumpAmount() + aa.getErEarningsOnLumpAmount();\n            eeContribs += aa.getEeContribBucket() + aa.getEeEarningsOnContribs();\n            erContribs += aa.getErContribBucket() + aa.getErEarningsOnContribs();\n            break;\n        }\n      }\n\n      for (var j = 0; j < il.length; j++) {\n        var id = il[j];\n\n        switch (id.getType()) {\n          case IncomeTypes.SOCIALSECURITY:\n            socialsec += _settleCommon.doSocialSecurity() ? id.getMonthlyAmount() : 0;\n            break;\n\n          case IncomeTypes.PENSION:\n            pensionIncome += id.getMonthlyAmount();\n            break;\n\n          case IncomeTypes.ASSET:\n          case IncomeTypes.EMPLOYMENT:\n          case IncomeTypes.OTHER:\n            income += id.getMonthlyAmount();\n            break;\n\n          default:\n            income += id.getMonthlyAmount();\n            break;\n        }\n      }\n\n      rber.setInflationDiscount(inflationDiscount);\n      rber.setAnnuityRate(spiaMonthlyValuePer1000);\n      rber.setYearsToRetire(ac.getFull());\n      rber.setCurrentAnnualSalary(currentAnnualSalary);\n      rber.setReplacementRatio(replacementRatio);\n      rber.setAdjustedAnnualSalary(adjustedAnnualSalary);\n      rber.setMonthlyEstimateFromDCBalance(CalcUtilities.roundAndTruncate(balance * inflationDiscount / 1000 * spiaMonthlyValuePer1000, 2));\n      rber.setMonthlyEstimateFromEmployee(CalcUtilities.roundAndTruncate(eeContribs * inflationDiscount / 1000 * spiaMonthlyValuePer1000, 2));\n      rber.setMonthlyEstimateFromEmployer(CalcUtilities.roundAndTruncate(erContribs * inflationDiscount / 1000 * spiaMonthlyValuePer1000, 2));\n      rber.setMonthlyEstimateFromSocialSecurity(CalcUtilities.roundAndTruncate(socialsec, 2));\n      rber.setMonthlyEstimateFromPensionAsIncome(CalcUtilities.roundAndTruncate(pensionIncome, 2));\n      rber.setMonthlyEstimateFromPension(CalcUtilities.roundAndTruncate(pensionBalance * inflationDiscount / 1000.0 * spiaMonthlyValuePer1000, 2));\n      rber.setMonthlyEstimateFromOther(CalcUtilities.roundAndTruncate(other * inflationDiscount / 1000 * spiaMonthlyValuePer1000, 2));\n      rber.setMonthlyEstimateFromIncome(CalcUtilities.roundAndTruncate(income, 2));\n      rber.setMonthlySalaryReplacementRequirement(CalcUtilities.roundAndTruncate(adjustedAnnualSalary * replacementRatio / 12, 2));\n      rber.setMonthlyEstimateFromExistingLoanRepayment(CalcUtilities.roundAndTruncate(existingLoanRepayment * inflationDiscount / 1000. * spiaMonthlyValuePer1000, 2));\n      rber.setMonthlyEstimateFromNewLoanRepayment(CalcUtilities.roundAndTruncate(newLoanRepayment * inflationDiscount / 1000. * spiaMonthlyValuePer1000, 2));\n      rber.setMonthlyEstimateFromNewLoanBalanceImpact(CalcUtilities.roundAndTruncate(newLoanBalanceImpact * inflationDiscount / 1000. * spiaMonthlyValuePer1000, 2));\n      return rber;\n    }\n\n    function getRothProportion(al, type) {\n      var retValue = 0.0;\n      var total = 0.0;\n      var totalRoth = 0.0;\n\n      switch (type) {\n        case OMCalculator.TYPE_ROTHPROPORTION_BALANCES:\n          total = BaseAccumulator.getLumpAmountAccordingToType(al, LoanUtil.LoanRepaymentImpactTypes);\n          totalRoth = BaseAccumulator.getLumpAmountAccordingToType(al, LoanUtil.RothTypes);\n          break;\n\n        case OMCalculator.TYPE_ROTHPROPORTION_DEFERRALS:\n        default:\n          total = OMCalculator.getInitialContribs(al, LoanUtil.LoanRepaymentImpactTypes);\n          totalRoth = OMCalculator.getInitialContribs(al, LoanUtil.RothTypes);\n          break;\n      }\n\n      retValue = total > 0.009 ? totalRoth / total : 0.0;\n      return retValue;\n    }\n  }; // adjust aggregate balance according to roth proportion; insert roth balance according to roth proportion\n\n\n  OMCalculator.adjustBalances = function (accountList, rothProportion) {\n    var eeLump = 0.0,\n        erLump = 0.0,\n        eeEarnings = 0.0,\n        erEarnings = 0.0;\n    var isAggregate = false,\n        isRothBalance = false;\n    var typeIndex = -1;\n    var rothIndex = -1;\n\n    if (rothProportion > 0.0) {\n      var objectIndex = 0; // index of objects\n\n      for (var i = 0; i < accountList.length; i++) {\n        var aa = accountList[i];\n        typeIndex = LimitUtilities.checkList(aa.getType(), LoanUtil.RothTypes, true);\n\n        if (typeIndex > -1) {\n          rothIndex = objectIndex;\n\n          if (aa.getEeLumpAmount() + aa.getEeEarningsOnLumpAmount() + aa.getErLumpAmount() + aa.getErEarningsOnLumpAmount() > 0.) {\n            isRothBalance = true;\n          }\n        }\n\n        objectIndex++;\n      }\n\n      for (var i = 0; i < accountList.length; i++) {\n        var aa = accountList[i];\n\n        if (AccountTypes.TYPE_AGGREGATE_BALANCE == aa.getType()) {\n          if (aa.getEeLumpAmount() + aa.getEeEarningsOnLumpAmount() + aa.getErLumpAmount() + aa.getErEarningsOnLumpAmount() > 0.) {\n            isAggregate = true;\n            eeLump = aa.getEeLumpAmount();\n            eeEarnings = aa.getEeEarningsOnLumpAmount();\n            erLump = aa.getErLumpAmount();\n            erEarnings = aa.getErEarningsOnLumpAmount();\n\n            if (!isRothBalance) {\n              aa.setEeLumpAmount(eeLump * (1.0 - rothProportion));\n              aa.touchEeEarningsOnLumpAmount(-eeEarnings + eeEarnings * (1.0 - rothProportion));\n              aa.setErLumpAmount(erLump * (1.0 - rothProportion));\n              aa.touchErEarningsOnLumpAmount(-erEarnings + erEarnings * (1.0 - rothProportion));\n            }\n          }\n        }\n      }\n\n      if (isAggregate && !isRothBalance && rothIndex > -1) {\n        var aa = accountList[rothIndex];\n        aa.setEeLumpAmount(eeLump * rothProportion);\n        aa.touchEeEarningsOnLumpAmount(eeEarnings * rothProportion);\n        aa.setErLumpAmount(erLump * rothProportion);\n        aa.touchErEarningsOnLumpAmount(erEarnings * rothProportion);\n      }\n    }\n  };\n\n  OMCalculator.getInitialContribs = function (accountList, typeList) {\n    var retValue = 0.;\n    var index = -1;\n\n    for (var i = 0; i < accountList.length; i++) {\n      var aa = accountList[i];\n      index = LimitUtilities.checkList(aa.getType(), typeList, true);\n\n      if (index > -1) {\n        retValue += aa.getInitialEeContribAmount();\n      }\n    }\n\n    return retValue;\n  };\n\n  OMCalculator.cloneAccount = function (ac) {\n    var cl = ObjFactory.getAccountAccumInstance();\n    cl.setPlanName(ac.getPlanName());\n    cl.setPlanLabel(ac.getPlanLabel());\n    cl.setPlanId(ac.getPlanId());\n    cl.setPlanIndex(ac.getPlanIndex());\n    cl.setPlanType(ac.getPlanType());\n    cl.setPriority(ac.getPriority());\n    cl.setName(ac.getName());\n    cl.setLabel(ac.getLabel());\n    cl.setId(ac.getId());\n    cl.setIndex(ac.getIndex());\n    cl.setType(ac.getType());\n    cl.setIRC(ac.getIRC());\n    cl.setStartContrib(ac.getContribType(), ac.getStartContrib());\n    cl.setRateOfReturn(ac.getRateOfReturn());\n    cl.setRateOfWithholding(ac.getRateOfWithholding());\n    cl.setRateOfIncrease(ac.getRateOfIncrease());\n    cl.setContribIterationThreshold(ac.getContribIterationThreshold());\n    cl.setModes(ac.getModes());\n    cl.setEeLumpAmount(ac.getEeLumpAmount());\n    cl.setErLumpAmount(ac.getErLumpAmount()); // by reference on these...\n\n    if (ac.isMinMaxLimit()) {\n      cl.setMinMaxLimit(ac.getMinMaxLimit());\n    }\n\n    if (ac.isLoan()) {\n      cl.setLoan(ac.getLoan());\n    }\n\n    if (ac.isEmployerMatch()) {\n      cl.setEmployerMatchWrapper(ac.getEmployerMatchWrapper());\n    }\n\n    return cl;\n  };\n\n  OMCalculator.TYPE_ROTHPROPORTION_BALANCES = 0;\n  OMCalculator.TYPE_ROTHPROPORTION_DEFERRALS = 1;\n  return OMCalculator;\n});","map":null,"metadata":{},"sourceType":"script"}