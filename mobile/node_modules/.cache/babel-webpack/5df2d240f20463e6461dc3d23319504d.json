{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { ReplaySubject, Subject, Subscription } from 'rxjs';\nimport { throttleTime } from 'rxjs/operators';\nimport { endPoints } from './constants/endpoints';\nimport { SessionTimeoutPopupComponent } from '../../components/session-timeout-popup/session-timeout-popup.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@shared-lib/services/utility/utility.service\";\nimport * as i2 from \"@shared-lib/services/base/base-factory-provider\";\nimport * as i3 from \"../logout/logout.service\";\nimport * as i4 from \"@ionic/angular\";\nimport * as i5 from \"@angular/router\";\nexport let SessionTimeoutService = /*#__PURE__*/(() => {\n  class SessionTimeoutService {\n    constructor(utilityService, baseService, logoutService, modalController, router) {\n      this.utilityService = utilityService;\n      this.baseService = baseService;\n      this.logoutService = logoutService;\n      this.modalController = modalController;\n      this.router = router;\n      this.endPoints = endPoints;\n      this.warningTimerAmount = 780000;\n      this.isOpenWarningModal = false;\n      this.isSecurePage = true;\n      this.subscription = new Subscription();\n      this.isOnLoad = true;\n      this.expiringCountDownAmount = 1000;\n      this.pingChanged = new Subject();\n      this.sessionExpiringCounterSubject = new ReplaySubject(1);\n    }\n\n    watcherInitiated() {\n      this.setEventListener();\n      this.endPoints = this.utilityService.appendBaseUrlToEndpoints(endPoints);\n      this.subscription.add(this.pingChanged.pipe(throttleTime(50000)).subscribe(() => {\n        this.pingServer();\n      }));\n      this.setWarningCountDown();\n      this.subscription.add(this.logoutService.getTerminatedUser().subscribe(data => {\n        if (data) {\n          this.isSecurePage = false;\n          this.killWarningCountDown();\n          this.killSessionExpiringCountDown();\n        }\n      }));\n      this.pingServerOnPageLoad();\n    }\n\n    setWarningCountDown() {\n      this.warningTimer = setTimeout(() => {\n        this.openWarningModal();\n      }, this.warningTimerAmount);\n    }\n\n    killWarningCountDown() {\n      clearTimeout(this.warningTimer);\n    }\n\n    setSessionExpiringCountDown() {\n      let counter = 120;\n      this.sessionExpiringTimer = setInterval(() => {\n        if (counter === 0) {\n          document.body.style.pointerEvents = 'auto';\n          this.router.navigateByUrl('/session-timeout');\n        } else {\n          const sessionExpiringCounter = `${this.timeTransform(counter)}`;\n          this.setSessionExpiringCounter(sessionExpiringCounter);\n        }\n\n        counter--;\n      }, this.expiringCountDownAmount);\n    }\n\n    killSessionExpiringCountDown() {\n      clearInterval(this.sessionExpiringTimer);\n    }\n\n    timeTransform(value) {\n      const minutes = Math.floor(value % 3600 / 60);\n      return ('00' + minutes).slice(-2) + ':' + ('00' + Math.floor(value - minutes * 60)).slice(-2);\n    }\n\n    openWarningModal() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.isOpenWarningModal = true;\n        document.body.style.pointerEvents = 'none';\n        this.setSessionExpiringCounter('2:00');\n        this.setSessionExpiringCountDown();\n        const modal = yield this.modalController.create({\n          component: SessionTimeoutPopupComponent,\n          cssClass: 'modal-not-fullscreen',\n          swipeToClose: false,\n          componentProps: {\n            saveFunction: () => __awaiter(this, void 0, void 0, function* () {\n              return Promise.resolve(true);\n            })\n          },\n          backdropDismiss: false\n        });\n        modal.onDidDismiss().then(data => {\n          if (data.data.saved) {\n            this.pingServer();\n          } else {\n            this.logoutService.action();\n          }\n\n          this.isOpenWarningModal = false;\n          document.body.style.pointerEvents = 'auto';\n        });\n        return modal.present();\n      });\n    }\n\n    pingServer() {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (this.isSecurePage) {\n          const response = yield this.baseService.get(this.endPoints.check_session + '?' + Date.now());\n          this.killWarningCountDown();\n          this.killSessionExpiringCountDown();\n\n          if (response.status === 'OK') {\n            this.setWarningCountDown();\n          } else {\n            this.router.navigateByUrl('/session-timeout');\n          }\n        }\n      });\n    }\n\n    setEventListener() {\n      document.body.addEventListener('click', this.handleEvent.bind(this));\n      document.body.addEventListener('touchmove', this.handleEvent.bind(this));\n    }\n\n    handleEvent(e) {\n      if (e.target.getAttribute('type') && e.target.getAttribute('type') === 'submit') {\n        return true;\n      }\n\n      if (!this.isOpenWarningModal) {\n        this.pingChanged.next(true);\n      }\n    }\n\n    pingServerOnPageLoad() {\n      if (this.isOnLoad) {\n        this.pingServer();\n      }\n\n      this.isOnLoad = false;\n    }\n\n    setSessionExpiringCounter(data) {\n      this.sessionExpiringCounterSubject.next(data);\n    }\n\n    getSessionExpiringCounter() {\n      return this.sessionExpiringCounterSubject.asObservable();\n    }\n\n    ngOnDestroy() {\n      this.subscription.unsubscribe();\n    }\n\n  }\n\n  SessionTimeoutService.ɵfac = function SessionTimeoutService_Factory(t) {\n    return new (t || SessionTimeoutService)(i0.ɵɵinject(i1.SharedUtilityService), i0.ɵɵinject(i2.BaseService), i0.ɵɵinject(i3.WebLogoutService), i0.ɵɵinject(i4.ModalController), i0.ɵɵinject(i5.Router));\n  };\n\n  SessionTimeoutService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SessionTimeoutService,\n    factory: SessionTimeoutService.ɵfac,\n    providedIn: 'root'\n  });\n  return SessionTimeoutService;\n})();","map":null,"metadata":{},"sourceType":"module"}