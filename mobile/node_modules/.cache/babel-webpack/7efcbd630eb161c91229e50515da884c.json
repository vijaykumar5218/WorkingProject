{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { BehaviorSubject, from, ReplaySubject, Subscription } from 'rxjs';\nimport { ConsentType } from './constants/consentType.enum';\nimport { endpoints } from './constants/endpoints';\nimport { NavigationStart } from '@angular/router';\nimport { skip } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../base/base-factory-provider\";\nimport * as i2 from \"../utility/utility.service\";\nimport * as i3 from \"@angular/router\";\nexport let ConsentService = /*#__PURE__*/(() => {\n  class ConsentService {\n    constructor(baseService, utilityService, router) {\n      this.baseService = baseService;\n      this.utilityService = utilityService;\n      this.router = router;\n      this.subscription = new Subscription();\n      this.medicalConsentSubject = new ReplaySubject(1);\n      this.justGaveConsent = new BehaviorSubject(false);\n      this.endpoints = this.utilityService.appendBaseUrlToEndpoints(endpoints);\n    }\n\n    getMedicalConsent(refresh = false) {\n      if (!this.medicalConsentData || refresh) {\n        this.medicalConsentData = from(this.baseService.post(this.endpoints.getConsent, {\n          consentTypeName: ConsentType.MEDICAL\n        }));\n        const subscription = this.medicalConsentData.subscribe(result => this.medicalConsentSubject.next(result.consentStatus === 'APPROVED'));\n        this.subscription.add(subscription);\n      }\n\n      return this.medicalConsentSubject;\n    }\n\n    setConsent(type, approved) {\n      if (approved) {\n        this.setJustGaveConsent();\n      }\n\n      return this.baseService.post(this.endpoints.saveConsent, {\n        consentTypeName: type,\n        consentStatus: approved ? 'APPROVED' : 'DENIED'\n      });\n    }\n\n    setJustGaveConsent() {\n      this.justGaveConsent.next(true);\n      const sub = this.router.events.pipe(skip(1)).subscribe(event => __awaiter(this, void 0, void 0, function* () {\n        if (event instanceof NavigationStart) {\n          this.justGaveConsent.next(false);\n          sub.unsubscribe();\n        }\n      }));\n    }\n\n    ngOnDestroy() {\n      this.subscription.unsubscribe();\n    }\n\n  }\n\n  ConsentService.ɵfac = function ConsentService_Factory(t) {\n    return new (t || ConsentService)(i0.ɵɵinject(i1.BaseService), i0.ɵɵinject(i2.SharedUtilityService), i0.ɵɵinject(i3.Router));\n  };\n\n  ConsentService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ConsentService,\n    factory: ConsentService.ɵfac,\n    providedIn: 'root'\n  });\n  return ConsentService;\n})();","map":null,"metadata":{},"sourceType":"module"}