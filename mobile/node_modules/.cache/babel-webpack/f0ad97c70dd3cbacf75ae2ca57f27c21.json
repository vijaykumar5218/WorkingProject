{"ast":null,"code":"(function (f) {\n  if (typeof exports === \"object\" && typeof module !== \"undefined\") {\n    module.exports = f();\n  } else if (typeof define === \"function\" && define.amd) {\n    define([], f);\n  } else {\n    var g;\n\n    if (typeof window !== \"undefined\") {\n      g = window;\n    } else if (typeof global !== \"undefined\") {\n      g = global;\n    } else if (typeof self !== \"undefined\") {\n      g = self;\n    } else {\n      g = this;\n    }\n\n    g.NonFEModule = f();\n  }\n})(function () {\n  var define, module, exports;\n  return function () {\n    function r(e, n, t) {\n      function o(i, f) {\n        if (!n[i]) {\n          if (!e[i]) {\n            var c = \"function\" == typeof require && require;\n            if (!f && c) return c(i, !0);\n            if (u) return u(i, !0);\n            var a = new Error(\"Cannot find module '\" + i + \"'\");\n            throw a.code = \"MODULE_NOT_FOUND\", a;\n          }\n\n          var p = n[i] = {\n            exports: {}\n          };\n          e[i][0].call(p.exports, function (r) {\n            var n = e[i][1][r];\n            return o(n || r);\n          }, p, p.exports, r, e, n, t);\n        }\n\n        return n[i].exports;\n      }\n\n      for (var u = \"function\" == typeof require && require, i = 0; i < t.length; i++) o(t[i]);\n\n      return o;\n    }\n\n    return r;\n  }()({\n    1: [function (require, module, exports) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      exports.getAgePrecise = getAgePrecise;\n      exports.formatTooltip = formatTooltip;\n      exports.decodeString = decodeString;\n      exports.makeStrong = makeStrong;\n      exports.formatMoney = formatMoney;\n      exports.getSocialSecurityBenefitAmt = getSocialSecurityBenefitAmt;\n      exports.getPensionBenefitAmt = getPensionBenefitAmt;\n      exports.cleanNumber = cleanNumber;\n      exports.getDateFromString = getDateFromString;\n      exports.getShortStringFromDate = getShortStringFromDate;\n      exports.getTimeFromString = getTimeFromString;\n      exports.formatPercent = formatPercent;\n      exports.getAge = getAge;\n      exports.clone = clone;\n      exports.deepExtend = deepExtend;\n      exports.formatDateTimeString = formatDateTimeString;\n      exports.decodePlanName = decodePlanName;\n      exports.getDateDiffInDays = getDateDiffInDays;\n      exports.roundAndTruncate = roundAndTruncate;\n      exports.getEligibleOMOtherAccounts = getEligibleOMOtherAccounts;\n      exports.toFixedNoRounding = toFixedNoRounding;\n      exports.removeJS = removeJS;\n      exports.detectIE = detectIE;\n      exports.getSNSliceColor = getSNSliceColor;\n\n      function _typeof(obj) {\n        \"@babel/helpers - typeof\";\n\n        if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n          _typeof = function _typeof(obj) {\n            return typeof obj;\n          };\n        } else {\n          _typeof = function _typeof(obj) {\n            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n          };\n        }\n\n        return _typeof(obj);\n      }\n\n      function _createForOfIteratorHelper(o, allowArrayLike) {\n        var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n        if (!it) {\n          if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n            if (it) o = it;\n            var i = 0;\n\n            var F = function F() {};\n\n            return {\n              s: F,\n              n: function n() {\n                if (i >= o.length) return {\n                  done: true\n                };\n                return {\n                  done: false,\n                  value: o[i++]\n                };\n              },\n              e: function e(_e) {\n                throw _e;\n              },\n              f: F\n            };\n          }\n\n          throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n        }\n\n        var normalCompletion = true,\n            didErr = false,\n            err;\n        return {\n          s: function s() {\n            it = it.call(o);\n          },\n          n: function n() {\n            var step = it.next();\n            normalCompletion = step.done;\n            return step;\n          },\n          e: function e(_e2) {\n            didErr = true;\n            err = _e2;\n          },\n          f: function f() {\n            try {\n              if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n            } finally {\n              if (didErr) throw err;\n            }\n          }\n        };\n      }\n\n      function _unsupportedIterableToArray(o, minLen) {\n        if (!o) return;\n        if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n        var n = Object.prototype.toString.call(o).slice(8, -1);\n        if (n === \"Object\" && o.constructor) n = o.constructor.name;\n        if (n === \"Map\" || n === \"Set\") return Array.from(o);\n        if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n      }\n\n      function _arrayLikeToArray(arr, len) {\n        if (len == null || len > arr.length) len = arr.length;\n\n        for (var i = 0, arr2 = new Array(len); i < len; i++) {\n          arr2[i] = arr[i];\n        }\n\n        return arr2;\n      }\n\n      function getAgePrecise(dob, ref) {\n        var today = ref === null || ref === undefined ? new Date() : ref;\n        var first = new Date(today);\n        /*\n         We are struggling here with IE8. The date can't be converted from a string and the\n         'getDateFromStirng' method does not work in IE8. Custom solution is in 'parse' polyfill.\n         */\n\n        var second = new Date(Date.parse(dob));\n        var earlier = new Date();\n        var later = new Date();\n        var dif, age; // assure positive difference\n\n        if (first.getTime() < second.getTime()) {\n          earlier.setTime(first);\n          later.setTime(second);\n        } else {\n          // reverse\n          earlier.setTime(second);\n          later.setTime(first);\n        }\n\n        dif = later.getFullYear() - earlier.getFullYear();\n        dif += (later.getMonth() - earlier.getMonth()) / 12;\n        dif += (later.getDate() - earlier.getDate()) / 361;\n        dif += 0.001; // from George Mazaitis\n\n        age = Math.floor(dif);\n        return age;\n      }\n\n      function formatTooltip(toolTipArray, tooltipMessage, isShowZero) {\n        var toolTipHtmlString = \"<div ><div><table class='tooltip-small-font'>\";\n        var tooltipMsg = [];\n\n        var _iterator = _createForOfIteratorHelper(toolTipArray),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var tooltipItem = _step.value;\n\n            if (tooltipItem.value !== 0 || isShowZero) {\n              tooltipMsg = tooltipItem.label && tooltipItem.label.split('&lt;br /&gt;&lt;br /&gt;') || '';\n              toolTipHtmlString = toolTipHtmlString + \"<tr><td style='font-weight: bold; '> $\" + formatMoney(tooltipItem.value, false, true) + '</td><td>-</td><td>' + (tooltipMsg[0] ? tooltipMsg[0].replace('-', '') : '') + ' </td></tr>';\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        if (tooltipMessage !== undefined && tooltipMessage.length === 0) {\n          tooltipMessage = tooltipMsg[1] ? decodeString(tooltipMsg[1]) : '';\n        } else if (tooltipMessage === undefined) {\n          tooltipMessage = '';\n        }\n\n        toolTipHtmlString = toolTipHtmlString + \"</table></div><p class='tooltip-small-font'>\" + tooltipMessage + '</p></div>';\n        return toolTipHtmlString;\n      }\n\n      function decodeString(str) {\n        var element = document.createElement('div');\n\n        if (str && typeof str === 'string') {\n          // strip script/html tags\n          str = str.replace(/<script[^>]*>([\\S\\s]*?)<\\/script>/gim, '');\n          str = str.replace(/<\\/?\\w(?:[^\"'>]|\"[^\"]*\"|'[^']*')*>/gim, '');\n          element.innerHTML = str;\n          str = element.textContent;\n          element.textContent = '';\n        }\n\n        return str;\n      }\n\n      function makeStrong(str) {\n        return '<strong>' + str + '</strong>';\n      }\n\n      function formatMoney(money, hasDollar, round, dontCutOnZero) {\n        var _money = money;\n\n        if (_money === null) {\n          return '';\n        } // Strip out everything but numbers and decimals\n\n\n        _money = (_money + '').replace(/[^0-9^\\.]/g, '') * 1; // Round the number if needed\n\n        if (round) {\n          _money = Math.round(_money);\n        } // Adds commas where needed\n\n\n        var formattedMoney = _money.toFixed(2).replace(/./g, function (c, i, a) {\n          return i && c !== '.' && !((a.length - i) % 3) ? ',' + c : c;\n        });\n\n        if (!dontCutOnZero && formattedMoney.substr(formattedMoney.indexOf('.')) === '.00') {\n          formattedMoney = formattedMoney.substring(0, formattedMoney.indexOf('.'));\n        }\n\n        return (hasDollar ? '$' : '') + formattedMoney;\n      } //This looks up the SS Benefits array and map the benefit amount for retAge and ssAge\n\n\n      function getSocialSecurityBenefitAmt(retireAge, socialSecurityStartAge, ssJsonObject) {\n        var monthlyBenefit = 0.0;\n\n        if (socialSecurityStartAge >= ssJsonObject.SSThreshold) {\n          var x = Math.min(Math.max(retireAge, ssJsonObject.lowRetRef), ssJsonObject.highRetRef) - ssJsonObject.lowRetRef;\n          var y = Math.min(Math.max(socialSecurityStartAge, ssJsonObject.lowSSRef), ssJsonObject.highSSRef) - ssJsonObject.lowSSRef;\n          monthlyBenefit = ssJsonObject.monthlyBenefits[x][y];\n        }\n\n        return monthlyBenefit;\n      }\n\n      function getPensionBenefitAmt(startBenefitAge, yearInRetirement, benefitsObject) {\n        var monthlyBenefit = 0.0;\n        var arrayObject;\n\n        try {\n          if (startBenefitAge >= benefitsObject.lowRef) {\n            arrayObject = null;\n\n            if (startBenefitAge >= benefitsObject.highRef) {\n              arrayObject = benefitsObject.benefits[benefitsObject.benefits.length - 1];\n            } else {\n              arrayObject = benefitsObject.benefits[startBenefitAge - benefitsObject.lowRef];\n            }\n\n            if (yearInRetirement >= arrayObject.length) {\n              monthlyBenefit = arrayObject[arrayObject.length - 1];\n            } else {\n              monthlyBenefit = arrayObject[yearInRetirement];\n            }\n          }\n        } catch (error) {}\n\n        return monthlyBenefit;\n      }\n\n      function cleanNumber(value) {\n        value = parseFloat(value);\n        return parseFloat(value.toFixed(4));\n      } // return Date object from string formated as \"YYYY-MM-DDT00:00:00\"\n\n\n      function getDateFromString(dateString, includeTime) {\n        var date;\n\n        var _dateString;\n\n        var _datePieces;\n\n        var _tIndex = dateString.indexOf('T');\n\n        if (_tIndex > -1) {\n          _dateString = dateString.substr(0, _tIndex);\n          _datePieces = _dateString.split('-');\n\n          if (!includeTime) {\n            date = new Date(_datePieces[0], _datePieces[1] - 1, _datePieces[2]);\n          } else {\n            var _timeString = dateString.substr(_tIndex + 1);\n\n            var _timePieces = _timeString.split(':');\n\n            date = new Date(_datePieces[0], _datePieces[1] - 1, _datePieces[2], _timePieces[0], _timePieces[1], _timePieces[2]);\n          }\n        } else {\n          date = new Date(dateString);\n        }\n\n        return date;\n      }\n\n      function getShortStringFromDate(dateObj, separator) {\n        var _separator = separator || '-';\n\n        var _mm = dateObj.getMonth() + 1;\n\n        var _dd = dateObj.getDate();\n\n        var _yy = dateObj.getFullYear();\n\n        if (_mm < 10) {\n          _mm = '0' + _mm;\n        }\n\n        if (_dd < 10) {\n          _dd = '0' + _dd;\n        }\n\n        return _yy + _separator + _mm + _separator + _dd;\n      }\n\n      function getTimeFromString(dateString) {\n        var _timeString = undefined;\n\n        var _timePieces;\n\n        var _period = 'AM';\n\n        var _tIndex = dateString.indexOf('T');\n\n        if (_tIndex > -1) {\n          // First, get the Time part of the string\n          _timeString = dateString.substr(_tIndex + 1);\n          _timePieces = _timeString.split(':'); // If HH is greater than 12, subtract 12 and flip to PM\n\n          if (_timePieces[0] >= 12) {\n            _period = 'PM';\n            _timePieces[0] = _timePieces[0] - 12;\n          } //Make sure that the hour is shown as 12 not 0\n\n\n          if (_timePieces[0] == 0) {\n            _timePieces[0] = 12;\n          } // truncate the 0 off the beginning if necessary\n\n\n          _timePieces[0] = parseInt(_timePieces[0], 10); //    put them back together\n\n          _timeString = _timePieces.join(':') + ' ' + _period;\n        }\n\n        return _timeString;\n      }\n\n      function formatPercent(value, toDecimal) {\n        if (toDecimal) {\n          value = cleanNumber(value / 100);\n        } else {\n          value = cleanNumber(value * 100);\n        }\n\n        return value;\n      } //This is from om-modules\n\n\n      function getAge(dob) {\n        var age;\n        var diff;\n\n        if (dob) {\n          diff = new Date() - new Date(dob);\n          age = Math.floor(diff / 1000 / 60 / 60 / 24 / 365);\n        }\n\n        return age;\n      }\n\n      function clone(obj) {\n        if (obj === null || _typeof(obj) !== 'object') {\n          return obj;\n        }\n\n        var temp = obj.constructor(); // changed\n\n        for (var key in obj) {\n          temp[key] = clone(obj[key]);\n        }\n\n        return temp;\n      }\n\n      function deepExtend(destination, source) {\n        for (var property in source) {\n          if (_typeof(source[property]) === 'object' && source[property] !== null) {\n            destination[property] = destination[property] || {};\n            arguments.callee(destination[property], source[property]);\n          } else {\n            destination[property] = source[property];\n          }\n        }\n\n        return destination;\n      }\n\n      function formatDateTimeString(dateString) {\n        var _tIndex = dateString.indexOf('T');\n\n        var _dateString = dateString.substr(0, _tIndex);\n\n        var _datePieces = _dateString.split('-');\n\n        var returnString = parseInt(_datePieces[1], 10) + '/' + parseInt(_datePieces[2], 10) + '/' + _datePieces[0].substr(2) + ' ';\n        return returnString + getTimeFromString(dateString);\n      }\n\n      function decodePlanName(planName) {\n        if (planName && typeof planName === 'string') {\n          planName = planName.replace(/\\+/g, ' ');\n          planName = unescape(planName).trim();\n        }\n\n        return planName;\n      }\n\n      function getDateDiffInDays(date1, date2) {\n        //Get 1 day in milliseconds\n        var one_day = 1000 * 60 * 60 * 24; // convert both dates to milliseconds\n\n        var date1_ms = date1.getTime();\n        var date2_ms = date2.getTime(); // calculate the difference in milliseconds\n\n        var difference_ms = date2_ms - date1_ms; // convert back to days and return\n\n        return Math.round(difference_ms / one_day);\n      }\n\n      function roundAndTruncate(dNumber, iDecimals) {\n        // round and truncate\n        var dInterim = 0.0;\n        var dDecimalFactor = Math.pow(10.0,\n        /*(double)*/\n        iDecimals); // round\n\n        dNumber += 0.500000001 / dDecimalFactor; // truncate\n\n        dNumber *= dDecimalFactor;\n        dInterim = Math.floor(dNumber);\n        return dInterim / dDecimalFactor;\n      }\n\n      function getEligibleOMOtherAccounts(dashBoardOtherAccounts) {\n        var eligibleForOrangeMoneyAccounts = [];\n\n        if (dashBoardOtherAccounts !== null && dashBoardOtherAccounts.dataStatus === 'OK') {\n          if (dashBoardOtherAccounts.retirementAccounts && dashBoardOtherAccounts.retirementAccounts.dataStatus === 'OK') {\n            dashBoardOtherAccounts.retirementAccounts.accounts.map(function (account) {\n              if (account.eligibleForOrangeMoney) {\n                eligibleForOrangeMoneyAccounts.push(account);\n              }\n            });\n          }\n\n          if (dashBoardOtherAccounts.annuityAccounts && dashBoardOtherAccounts.annuityAccounts.dataStatus === 'OK') {\n            dashBoardOtherAccounts.annuityAccounts.accounts.map(function (account) {\n              if (account.eligibleForOrangeMoney) {\n                eligibleForOrangeMoneyAccounts.push(account);\n              }\n            });\n          }\n\n          if (dashBoardOtherAccounts.brokerageAccounts && dashBoardOtherAccounts.brokerageAccounts.dataStatus === 'OK') {\n            dashBoardOtherAccounts.brokerageAccounts.accounts.map(function (account) {\n              if (account.eligibleForOrangeMoney) {\n                eligibleForOrangeMoneyAccounts.push(account);\n              }\n            });\n          }\n        }\n\n        return eligibleForOrangeMoneyAccounts;\n      }\n      /*\n       * Round DOWN the decimals.\n       * Ex: 123.4567 = 123.45\n       * Ex: 123.7654 = 123.76\n       * Ex: 123.1234 = 123.12\n       */\n\n\n      function toFixedNoRounding(n, p) {\n        var result = parseFloat(n.toFixed(p));\n        return result <= n ? result : result - parseFloat(Math.pow(0.1, p).toFixed(p));\n      }\n\n      function removeJS(text) {\n        return text ? text.replace(\"javascript:popWin('\", '').replace(\"',500,742,'yes','yes','yes','yes','yes','yes','PopWin')\\\"\", '\" target=\"_blank\"') : '';\n      }\n      /**\n       * detect IE\n       * @return {boolean} version of IE or false, if browser is not Internet Explorer\n       */\n\n\n      function detectIE() {\n        var ua = window.navigator.userAgent; // Test values; Uncomment to check result …\n        // IE 10\n        // ua = 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0)';\n        // IE 11\n        // ua = 'Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko';\n        // Edge 12 (Spartan)\n        // ua = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.71 Safari/537.36 Edge/12.0';\n        // Edge 13\n        // ua = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2486.0 Safari/537.36 Edge/13.10586';\n\n        var msie = ua.indexOf('MSIE ');\n\n        if (msie > 0) {\n          // IE 10 or older => return version number\n          return parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);\n        }\n\n        var trident = ua.indexOf('Trident/');\n\n        if (trident > 0) {\n          // IE 11 => return version number\n          var rv = ua.indexOf('rv:');\n          return parseInt(ua.substring(rv + 3, ua.indexOf('.', rv)), 10);\n        }\n\n        var edge = ua.indexOf('Edge/');\n\n        if (edge > 0) {\n          // Edge (IE 12+) => return version number\n          return parseInt(ua.substring(edge + 5, ua.indexOf('.', edge)), 10);\n        } // other browser\n\n\n        return false;\n      }\n      /*\n       * @param {object} data - the slice data object\n       * @return {string} color - hex value\n       */\n\n\n      function getSNSliceColor(data) {\n        var color = data.pensionContributionValue > 0 || data.otherContributionValue > 0 ? '#FCA325' : '#EE7E1A';\n\n        if (data.pensionContributionValue > 0 && data.otherContributionValue > 0) {\n          color = '#FEBA27';\n        }\n\n        return color;\n      }\n    }, {}],\n    2: [function (require, module, exports) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      exports.LABEL_OKAY = exports.LABEL_SORRY = exports.SERVICE_SAVE_SUCCESS_ALT_MSG = exports.FE_SERVICE_ERROR_ALT_MSG = exports.HIDE_SECTION_TEXT = exports.SHOW_SECTION_TEXT = exports.CONSTANTS = exports.CATCHUP_SOURCES = void 0;\n      var CONSTANTS = {\n        STATIC_BENEFIT: 'StaticBenefit',\n        CALC_BENEFIT: 'CalcBenefit',\n        SLIDER: {\n          UPDATE_IRS_ALERT: 'slider:updateIrsSlider'\n        },\n        ALERT_POPUP: 'alert_popup',\n        RESET_ORIGINAL: 'reset_original',\n        POST_CONFIRMATION: 'post_confirmation',\n        ERRORS: {\n          OLTP: 'system-unavailable',\n          MGP: 'external-ws-error',\n          IADMIN: 'iadmin-edinfo-exception',\n          SR_ERROR: 'external-ws-error',\n          SYSTEM_ERROR: 'error:systemError'\n        },\n        OTHER_RETIREMENT_INCOME_PATH: 'voya-orange-money/rs/fe/other-retirement/other-retirement-income',\n        PENSION_INCOME_ESTIMATE_PATH: 'voya-orange-money/rs/fe/modals/pension-income-estimate/pension-income-estimate',\n        PENSION_INCOME_RESULTS_PATH: 'voya-orange-money/rs/fe/modals/pension-income-results/pension-income-results',\n        SR_ERROR_MSG: 'Oops, something went wrong and we cannot project your benefit at this time. For now, you can enter your own estimate using the other option above. Please try back, ' + 'we should have this fixed soon and we apologize for any inconvenience',\n        SR_ERROR_MSG_FE: 'We are unable to estimate your pension income at this time.  Please try again soon.',\n        SR_ERROR_MSG_FE_ICON: '<i class=\"voya-field__left-icon fa fa-exclamation-triangle\" aria-hidden=\"true\"></i>We are unable to estimate your pension income at this time.  Please try again soon.',\n        SR_ERROR_MSG_FE_RET_SYS: '<i class=\"voya-field__left-icon fa fa-exclamation-triangle\" aria-hidden=\"true\"></i>Your retirement system details are unavailable at this time. Please try again soon.'\n      };\n      exports.CONSTANTS = CONSTANTS;\n      var CATCHUP_SOURCES = {\n        CATCHUP_AGE_PRETAX: 'CATCHUP_AGE_PRETAX',\n        CATCHUP_AGE_ROTH: 'CATCHUP_AGE_ROTH'\n      };\n      exports.CATCHUP_SOURCES = CATCHUP_SOURCES;\n      var SHOW_SECTION_TEXT = 'Show this section';\n      exports.SHOW_SECTION_TEXT = SHOW_SECTION_TEXT;\n      var HIDE_SECTION_TEXT = 'Hide this section';\n      exports.HIDE_SECTION_TEXT = HIDE_SECTION_TEXT;\n      var FE_SERVICE_ERROR_ALT_MSG = \"We're unable to save your changes right now.\";\n      exports.FE_SERVICE_ERROR_ALT_MSG = FE_SERVICE_ERROR_ALT_MSG;\n      var SERVICE_SAVE_SUCCESS_ALT_MSG = 'Your changes have been saved.';\n      exports.SERVICE_SAVE_SUCCESS_ALT_MSG = SERVICE_SAVE_SUCCESS_ALT_MSG;\n      var LABEL_SORRY = 'Sorry!';\n      exports.LABEL_SORRY = LABEL_SORRY;\n      var LABEL_OKAY = 'OKAY';\n      exports.LABEL_OKAY = LABEL_OKAY;\n    }, {}],\n    3: [function (require, module, exports) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      exports.DollarGraphHeaderModel = void 0;\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      var DollarGraphHeaderModel = function DollarGraphHeaderModel(dollarGraphHeaderObject, isFE) {\n        _classCallCheck(this, DollarGraphHeaderModel);\n\n        var income = dollarGraphHeaderObject.estimatedMonthlyIncome;\n        var shortfall = dollarGraphHeaderObject.difference;\n        var socialSecurityInclude = dollarGraphHeaderObject.includeSS;\n\n        if (!isFE && socialSecurityInclude !== undefined && !socialSecurityInclude) {\n          income -= dollarGraphHeaderObject.ssBenefitAmt;\n          shortfall += dollarGraphHeaderObject.ssBenefitAmt;\n        }\n\n        this.estimatedMonthlyIncome = income;\n        this.estimatedMonthlyGoal = dollarGraphHeaderObject.estimatedMonthlyGoal;\n        this.differenceOf = shortfall;\n      };\n\n      exports.DollarGraphHeaderModel = DollarGraphHeaderModel;\n    }, {}],\n    4: [function (require, module, exports) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      exports.DollarGraphSlicesModel = void 0;\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n      /**\n       * Created by i706495 on 04/22/2016.\n       */\n\n\n      var DollarGraphSlicesModel = function DollarGraphSlicesModel(data) {\n        _classCallCheck(this, DollarGraphSlicesModel);\n\n        this.ssAdditionalBenefits = data.ssAdditionalBenefits || 0;\n        this.accountBalanceValue = data.accountBalanceValue;\n        this.ssContributionValue = data.ssContributionValue;\n        this.otherContributionValue = data.otherContributionValue;\n        this.pensionContributionValue = data.pensionContributionValue;\n        this.shortFall = data.shortFall;\n        this.includeSS = data.includeSS;\n        this.toolTipData = data.toolTipData;\n        this.guaranteedIncomeValue = data.guaranteedIncome || 0;\n      };\n\n      exports.DollarGraphSlicesModel = DollarGraphSlicesModel;\n    }, {}],\n    5: [function (require, module, exports) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      exports.AboutMeModel = void 0;\n\n      var _utilities = require(\"../../../common/utilities\");\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _defineProperties(target, props) {\n        for (var i = 0; i < props.length; i++) {\n          var descriptor = props[i];\n          descriptor.enumerable = descriptor.enumerable || false;\n          descriptor.configurable = true;\n          if (\"value\" in descriptor) descriptor.writable = true;\n          Object.defineProperty(target, descriptor.key, descriptor);\n        }\n      }\n\n      function _createClass(Constructor, protoProps, staticProps) {\n        if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n        if (staticProps) _defineProperties(Constructor, staticProps);\n        return Constructor;\n      }\n\n      var AboutMeModel = /*#__PURE__*/function () {\n        function AboutMeModel(aboutMeData) {\n          _classCallCheck(this, AboutMeModel);\n\n          var planData = aboutMeData.pptDCAccount;\n          var userData = aboutMeData.personalData;\n          var incomeReplacementRatio = (0, _utilities.cleanNumber)(userData.incomeReplacementRatio * 100);\n          var estimatedSalaryIncrease = (0, _utilities.cleanNumber)(userData.annualSalaryIncrementRate * 100); // Manipulate the date object to fill the three separate fields\n\n          var dob = userData.dob;\n          var date = (0, _utilities.getDateFromString)(dob);\n          var year = date.getFullYear();\n          var month = date.getMonth() + 1;\n          var day = date.getDate();\n          this.currentSalary = userData.currentAnnualSalary;\n          this.estimatedSalaryIncrease = estimatedSalaryIncrease; //userData.annualSalaryIncrementRate;\n\n          this.birthYear = year.toString();\n          this.birthMonth = month.toString();\n          this.birthDay = day.toString();\n          this.userPlans = this.getPlanInfo(planData, aboutMeData.calc);\n          this.incomeReplacementRatio = incomeReplacementRatio;\n          this.profileHelpText = aboutMeData.profileHelpText;\n          this.profileHelpTextTotalContrib = aboutMeData.profileHelpTextTotalContrib;\n        }\n\n        _createClass(AboutMeModel, [{\n          key: \"getPlanInfo\",\n          value: function getPlanInfo(planData, calc) {\n            var plans = [];\n            var currentPlan;\n            var currentMatchData;\n\n            for (var i = 0; i < planData.length; i++) {\n              currentPlan = planData[i];\n              currentMatchData = currentPlan.matchData;\n              currentMatchData.planId = currentPlan.planInfo.planId; //\tProfit Sharing Amount\n\n              if (currentMatchData.profitSharingContributionAmount !== null) {\n                currentPlan.hasProfitSharingAmt = true;\n                currentPlan.profitSharingAmount = currentMatchData.profitSharingContributionAmount.value;\n              } else {\n                currentPlan.hasProfitSharingAmt = false;\n              } //\tProfit Sharing Rate\n\n\n              if (currentMatchData.profitSharingContributionRate !== null) {\n                currentPlan.hasProfitSharingRate = true;\n                currentPlan.profitSharingRate = (0, _utilities.cleanNumber)(currentMatchData.profitSharingContributionRate.value * 100);\n              } else {\n                currentPlan.hasProfitSharingRate = false;\n              } //\tShow ER Match fields\n\n\n              var erMatchType = currentMatchData.erMatch.matchType;\n\n              if (erMatchType === 'STANDARD' && currentMatchData.erMatch.matchTierOptions > 0) {\n                currentPlan.showErMatch = true;\n                currentPlan.includeErMatch = currentMatchData.includeErMatch;\n\n                if (!currentMatchData.erMatchFromRKSystem) {\n                  currentPlan.percent1 = (0, _utilities.cleanNumber)(currentMatchData.erMatch.percent1 * 100);\n                  currentPlan.range1 = (0, _utilities.cleanNumber)(currentMatchData.erMatch.range1 * 100);\n\n                  if (currentMatchData.erMatch.matchTierOptions > 1) {\n                    currentPlan.percent2 = (0, _utilities.cleanNumber)(currentMatchData.erMatch.percent2 * 100);\n                    currentPlan.range2 = (0, _utilities.cleanNumber)(currentMatchData.erMatch.range2 * 100);\n                  }\n                }\n              } // Mandatory Employee Contribution\n\n\n              var eemc = currentMatchData.mandatoryEeContribution;\n\n              if (eemc !== null) {\n                currentPlan.includeEeContribution = true;\n                currentPlan.mandatoryEeContribution = eemc.unit === 'PERCENT' ? eemc.value * 100 : eemc.value;\n                currentPlan.mandatoryEeContribType = eemc.unit; // add boolean for range\n\n                currentPlan.mandatoryEeContribIsRate = eemc.unit === 'PERCENT' ? true : false;\n                currentPlan.eeLimits = calc.getMandatoryEeContribLimits(currentPlan.mandatoryEeContribType);\n              } else {\n                currentPlan.includeEeContribution = false;\n              } // Mandatory Employer Contribution\n\n\n              var ermc = currentMatchData.mandatoryErContribution;\n\n              if (ermc !== null) {\n                currentPlan.includeErContribution = true;\n                currentPlan.mandatoryErContribution = ermc.unit === 'PERCENT' ? ermc.value * 100 : ermc.value;\n                currentPlan.mandatoryErContribType = ermc.unit; // add boolean for range\n\n                currentPlan.mandatoryErContribIsRate = ermc.unit === 'PERCENT' ? true : false;\n                currentPlan.erLimits = calc.getMandatoryErContribLimits(currentPlan.mandatoryErContribType);\n              } else {\n                currentPlan.includeErContribution = false;\n              }\n\n              if (currentMatchData.excludeAllVoluntaryContrib) {\n                var totalEeAndErContrib = 0.0;\n\n                if (eemc !== null) {\n                  totalEeAndErContrib += eemc.unit === 'PERCENT' ? eemc.value * 100 : eemc.value;\n                }\n\n                if (ermc !== null) {\n                  totalEeAndErContrib += ermc.unit === 'PERCENT' ? ermc.value * 100 : ermc.value;\n                }\n\n                currentMatchData.totalEeAndErContrib = totalEeAndErContrib;\n              }\n\n              plans.push(currentPlan);\n            }\n\n            return plans;\n          }\n        }]);\n\n        return AboutMeModel;\n      }();\n\n      exports.AboutMeModel = AboutMeModel;\n    }, {\n      \"../../../common/utilities\": 1\n    }],\n    6: [function (require, module, exports) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      exports.DollarGraphSlidersModel = void 0;\n\n      var _utilities = require(\"../../../common/utilities\");\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _defineProperties(target, props) {\n        for (var i = 0; i < props.length; i++) {\n          var descriptor = props[i];\n          descriptor.enumerable = descriptor.enumerable || false;\n          descriptor.configurable = true;\n          if (\"value\" in descriptor) descriptor.writable = true;\n          Object.defineProperty(target, descriptor.key, descriptor);\n        }\n      }\n\n      function _createClass(Constructor, protoProps, staticProps) {\n        if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n        if (staticProps) _defineProperties(Constructor, staticProps);\n        return Constructor;\n      }\n\n      var DollarGraphSlidersModel = /*#__PURE__*/function () {\n        function DollarGraphSlidersModel(dollarGraphSlidersObject) {\n          _classCallCheck(this, DollarGraphSlidersModel);\n\n          this.pptDCAccount = dollarGraphSlidersObject.pptDCAccount;\n          this.currentPlanID = dollarGraphSlidersObject.currentPlanID;\n          this.riskTolerance = this.getInvestmentReturnPct(dollarGraphSlidersObject.personalData);\n          this.pptCurrentAge = (0, _utilities.getAgePrecise)((0, _utilities.getDateFromString)(dollarGraphSlidersObject.personalData.dob));\n          this.getRetirementAgeInfo(dollarGraphSlidersObject.personalData);\n          this.retirementAgeLabel = dollarGraphSlidersObject.retirementAgeLabel;\n          this.rateOfReturnSliderLabel = dollarGraphSlidersObject.rateOfReturnSliderLabel;\n          this.retireAgeHelpText = dollarGraphSlidersObject.retireAgeHelpText;\n          this.contribSliderHelptext = dollarGraphSlidersObject.contribSliderHelptext;\n          this.amountPayText = dollarGraphSlidersObject.amountPayText;\n          this.rorHelpText = dollarGraphSlidersObject.rorHelpText;\n          this.currentAnnualSalary = dollarGraphSlidersObject.personalData.currentAnnualSalary;\n          this.sourceLimits = dollarGraphSlidersObject.sourceLimits;\n          this.contribHeader = dollarGraphSlidersObject.contribHeader;\n          this.selectedPlan = dollarGraphSlidersObject.selectedPlan;\n        }\n\n        _createClass(DollarGraphSlidersModel, [{\n          key: \"getInvestmentReturnPct\",\n          value: function getInvestmentReturnPct(personalData) {\n            var riskTolerance;\n\n            if (personalData) {\n              riskTolerance = (0, _utilities.cleanNumber)(personalData.investmentRateOfReturn) * 100;\n            } else {\n              riskTolerance = 0;\n            }\n\n            return riskTolerance;\n          }\n        }, {\n          key: \"getRetirementAgeInfo\",\n          value: function getRetirementAgeInfo(personalData) {\n            this.retirementAge = personalData.retirementAge; //Calculating min retirement age\n\n            this.minRetireAge = Math.min(this.pptCurrentAge + 1, 80);\n\n            if (this.retirementAge < this.minRetireAge) {\n              this.retirementAge = this.minRetireAge;\n            }\n          }\n        }]);\n\n        return DollarGraphSlidersModel;\n      }();\n\n      exports.DollarGraphSlidersModel = DollarGraphSlidersModel;\n    }, {\n      \"../../../common/utilities\": 1\n    }],\n    7: [function (require, module, exports) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      exports.NonFeLandingModel = void 0;\n\n      var _dollarGraphHeaderModel = require(\"./../dollar-graph-header-model\");\n\n      var _dollarGraphSlicesModel = require(\"./../dollar-graph-slices-model\");\n\n      var _aboutMeModel = require(\"./about-me-model\");\n\n      var _dollarGraphSlidersModel = require(\"./dollar-graph-sliders-model\");\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _defineProperties(target, props) {\n        for (var i = 0; i < props.length; i++) {\n          var descriptor = props[i];\n          descriptor.enumerable = descriptor.enumerable || false;\n          descriptor.configurable = true;\n          if (\"value\" in descriptor) descriptor.writable = true;\n          Object.defineProperty(target, descriptor.key, descriptor);\n        }\n      }\n\n      function _createClass(Constructor, protoProps, staticProps) {\n        if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n        if (staticProps) _defineProperties(Constructor, staticProps);\n        return Constructor;\n      }\n\n      var NonFeLandingModel = /*#__PURE__*/function () {\n        function NonFeLandingModel(nonFeLandingObject) {\n          var dollarGraphHeaderModel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _dollarGraphHeaderModel.DollarGraphHeaderModel;\n          var dollarGraphSlicesModel = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _dollarGraphSlicesModel.DollarGraphSlicesModel;\n          var dollarGraphSlidersModel = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _dollarGraphSlidersModel.DollarGraphSlidersModel;\n\n          _classCallCheck(this, NonFeLandingModel);\n\n          this.ssAdditionalBenefits = this.getSSAddlBenefits(nonFeLandingObject);\n          this.ssBenefits = this.getSSBenefits(nonFeLandingObject);\n          this.income = this.getIncome(nonFeLandingObject);\n          this.shortfallVal = this.getDifference(nonFeLandingObject);\n          this.dollarGraphHeaderModel = new dollarGraphHeaderModel(this.createDollarGraphHeaderObject(nonFeLandingObject));\n          this.dollarGraphSlicesModel = new dollarGraphSlicesModel(this.createDollarGraphSlices(nonFeLandingObject), false\n          /*isFE*/\n          );\n          this.dollarGraphSlidersModel = new dollarGraphSlidersModel(this.createDollarGraphSlidersModel(nonFeLandingObject));\n          this.dollarGraphFooterModel = this.createDollarGraphFooterData(nonFeLandingObject);\n        }\n\n        _createClass(NonFeLandingModel, [{\n          key: \"getSSAddlBenefits\",\n          value: function getSSAddlBenefits(nonFeLandingObject) {\n            var ssStartAge = nonFeLandingObject.calculatedSSData.ssStartValue;\n            var ssRetireAge = nonFeLandingObject.calculatedSSData.ssStartRetireAgeValue;\n\n            if (ssRetireAge < ssStartAge) {\n              return 0;\n            } else if (ssRetireAge > ssStartAge) {\n              return nonFeLandingObject.ssAdditionalBenefits;\n            } else if (ssRetireAge === ssStartAge) {\n              return nonFeLandingObject.ssAdditionalBenefits;\n            }\n          }\n        }, {\n          key: \"getSSBenefits\",\n          value: function getSSBenefits(nonFeLandingObject) {\n            var ssStartAge = nonFeLandingObject.ssStartAge;\n            var ssRetireAge = nonFeLandingObject.ssRetireAge;\n\n            if (ssRetireAge < ssStartAge) {\n              return 0;\n            } else if (ssRetireAge > ssStartAge) {\n              return nonFeLandingObject.calcResponse.getMonthlyEstimateFromSocialSecurity();\n            } else if (ssRetireAge === ssStartAge) {\n              return nonFeLandingObject.calcResponse.getMonthlyEstimateFromSocialSecurity();\n            }\n          }\n        }, {\n          key: \"getIncome\",\n          value: function getIncome(nonFeLandingObject) {\n            var ssStartAge = nonFeLandingObject.ssStartAge;\n            var ssRetireAge = nonFeLandingObject.ssRetireAge;\n            var incomeAtSS = nonFeLandingObject.calculatedSSData.ssIncomeSS + nonFeLandingObject.calculatedSSData.ssBenefitSS + this.ssAdditionalBenefits;\n            var incomeAtRA = nonFeLandingObject.calculatedSSData.ssIncomeRA + nonFeLandingObject.calculatedSSData.ssBenefitRA + this.ssAdditionalBenefits;\n\n            if (ssRetireAge < ssStartAge) {\n              return incomeAtRA;\n            } else if (ssRetireAge > ssStartAge) {\n              return incomeAtRA;\n            } else if (ssRetireAge === ssStartAge) {\n              return incomeAtSS;\n            }\n          }\n        }, {\n          key: \"getIncomeWithLis\",\n          value: function getIncomeWithLis(nonFeLandingObject) {\n            var participantOrangeData = nonFeLandingObject.pptDCAccount;\n            var gIncomeSubtotalLisPlans = 0.0;\n            var numOfCAccount = participantOrangeData.length;\n\n            for (var i = 0; i < numOfCAccount; i++) {\n              if (participantOrangeData[i].planInfo.partHasHundredPctLis) {\n                gIncomeSubtotalLisPlans += participantOrangeData[i].planInfo.planGuaranteedIncome;\n              }\n            }\n\n            return gIncomeSubtotalLisPlans;\n          }\n        }, {\n          key: \"checkDCandLisPlansBalance\",\n          value: function checkDCandLisPlansBalance(nonFeLandingObject) {\n            var participantOrangeData = nonFeLandingObject.pptDCAccount;\n            var dcBalance = nonFeLandingObject.personalData.currentDcBalance;\n            var dcPlansBalanceForLis = 0.0;\n            var numOfCAccount = participantOrangeData.length;\n\n            for (var i = 0; i < numOfCAccount; i++) {\n              if (participantOrangeData[i].planInfo.partHasHundredPctLis) {\n                dcPlansBalanceForLis += participantOrangeData[i].planInfo.planBalance;\n              }\n            }\n\n            return dcPlansBalanceForLis === dcBalance;\n          }\n        }, {\n          key: \"getDifference\",\n          value: function getDifference(nonFeLandingObject) {\n            return nonFeLandingObject.calcResponse.getMonthlySalaryReplacementRequirement() - this.income;\n          }\n        }, {\n          key: \"createDollarGraphHeaderObject\",\n          value: function createDollarGraphHeaderObject(nonFeLandingObject) {\n            return {\n              estimatedMonthlyIncome: this.income,\n              estimatedMonthlyGoal: nonFeLandingObject.calcResponse.getMonthlySalaryReplacementRequirement(),\n              difference: this.shortfallVal,\n              includeSS: nonFeLandingObject.includeSS,\n              ssBenefitAmt: this.ssBenefits\n            };\n          }\n        }, {\n          key: \"createDollarGraphSlices\",\n          value: function createDollarGraphSlices(nonFeLandingObject) {\n            var calcResponse = nonFeLandingObject.calcResponse;\n            this.guaranteedIncome = nonFeLandingObject.guaranteedIncome || 0;\n            this.monthlyDCBalance = nonFeLandingObject.getAccountBalWithGuaranteedIncome(nonFeLandingObject.calcResponse.getMonthlyEstimateFromDCBalance(), this.guaranteedIncome); // computed account value\n\n            var accountVal = this.monthlyDCBalance + calcResponse.getMonthlyEstimateFromEmployee() + calcResponse.getMonthlyEstimateFromEmployer(); // computed pension value\n\n            this.pensionVal = calcResponse.getMonthlyEstimateFromPension() + calcResponse.getMonthlyEstimateFromPensionAsIncome(); // computed other value\n\n            this.otherVal = calcResponse.getMonthlyEstimateFromOther() + calcResponse.getMonthlyEstimateFromIncome(); // computed shortfall value\n\n            return {\n              accountBalanceValue: accountVal,\n              ssContributionValue: this.ssBenefits,\n              otherContributionValue: this.otherVal,\n              pensionContributionValue: this.pensionVal,\n              shortFall: this.shortfallVal,\n              includeSS: nonFeLandingObject.includeSS,\n              toolTipData: this.getToolTipData(nonFeLandingObject),\n              ssAdditionalBenefits: this.ssAdditionalBenefits,\n              guaranteedIncome: this.guaranteedIncome\n            };\n          }\n        }, {\n          key: \"getToolTipData\",\n          value: function getToolTipData(nonFeLandingObject) {\n            var calcResponse = nonFeLandingObject.calcResponse;\n            var content = nonFeLandingObject.content;\n            var monthlyEmployeeEstimate = calcResponse.getMonthlyEstimateFromEmployee();\n            var monthlyEmployerEstimate = calcResponse.getMonthlyEstimateFromEmployer();\n            var acctSlicesContent = content.AccountBalanceNonFE_AmtBalAndFutureContrib;\n            var pensionSlice = {\n              label: content.PensionNonFE_AmtFromPension,\n              value: this.pensionVal\n            };\n            var socialSecuritySlice = {\n              label: content.SocialSecurityNonFE_Content1,\n              value: this.ssBenefits\n            };\n            var additionalBenefitsSlice = {\n              label: content.SpecialNeeds_SNViewDetailsDollarBillHoverText,\n              value: this.ssAdditionalBenefits\n            };\n            var otherIncomeSlice = {\n              label: content.OtherIncomeNonFE,\n              value: this.otherVal\n            };\n            var guaranteedIncomeSlice = {\n              label: content.AccountBalanceNonFE_HoverTextGuaranteedIncomeSlice,\n              value: this.guaranteedIncome\n            };\n            var shortFallSlice = {\n              label: content.ShortFallNonFE,\n              value: this.shortfallVal\n            };\n            var acctSlices = [];\n            acctSlices.push({\n              label: 'From My Account Balance',\n              value: this.monthlyDCBalance\n            });\n            acctSlices.push({\n              label: 'From My Future Contributions',\n              value: monthlyEmployeeEstimate\n            });\n            acctSlices.push({\n              label: 'From My Employer Future Contributions',\n              value: monthlyEmployerEstimate\n            });\n            return {\n              acctSlicesInfo: acctSlices,\n              acctSlicesContent: acctSlicesContent,\n              pensionSliceInfo: pensionSlice,\n              socialSecuritySliceInfo: socialSecuritySlice,\n              additionalBenefitsSliceInfo: additionalBenefitsSlice,\n              otherIncomeSliceInfo: otherIncomeSlice,\n              guaranteedIncomeSliceInfo: guaranteedIncomeSlice,\n              shortFallSliceInfo: shortFallSlice\n            };\n          }\n        }, {\n          key: \"createDollarGraphSlidersModel\",\n          value: function createDollarGraphSlidersModel(nonFeLandingObject) {\n            var content = nonFeLandingObject.content;\n            return {\n              pptDCAccount: nonFeLandingObject.pptDCAccount,\n              currentPlanID: nonFeLandingObject.currentPlanID,\n              personalData: nonFeLandingObject.personalData,\n              retirementAgeLabel: content.SliderSectionTitles_RetirementAgeHeader,\n              rateOfReturnSliderLabel: content.SliderSectionTitles_RateOfReturnHeader,\n              retireAgeHelpText: content.HelpText_RetireAgeSliderHelp,\n              contribSliderHelptext: content.HelpText_ContribSliderHelp,\n              amountPayText: content.SliderSectionTitles_ContributionSliderHeader,\n              rorHelpText: content.HelpText_RORSliderHelp,\n              contribHeader: content.SliderSectionTitles_ContributionSliderHeader,\n              sourceLimits: nonFeLandingObject.sourceLimits,\n              selectedPlan: nonFeLandingObject.selectedPlan\n            };\n          }\n        }, {\n          key: \"createDollarGraphFooterData\",\n          value: function createDollarGraphFooterData(nonFeLandingObject) {\n            var content = nonFeLandingObject.content;\n            var aboutMeData = {\n              pptDCAccount: nonFeLandingObject.pptDCAccount,\n              currentPlanID: nonFeLandingObject.currentPlanID,\n              personalData: nonFeLandingObject.personalData,\n              profileHelpText: content.HelpText_PerInfoHelp,\n              profileHelpTextTotalContrib: content.HelpText_AboutMeMandContribHelp,\n              calc: nonFeLandingObject.calc\n            };\n            return {\n              aboutMeModel: new _aboutMeModel.AboutMeModel(aboutMeData),\n              eMoneyUrl: nonFeLandingObject.eMoneyUrl,\n              assumptionsContent: null\n            };\n          }\n        }]);\n\n        return NonFeLandingModel;\n      }();\n\n      exports.NonFeLandingModel = NonFeLandingModel;\n    }, {\n      \"./../dollar-graph-header-model\": 3,\n      \"./../dollar-graph-slices-model\": 4,\n      \"./about-me-model\": 5,\n      \"./dollar-graph-sliders-model\": 6\n    }],\n    8: [function (require, module, exports) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      exports.NonFeModelBase = void 0;\n\n      var _utilities = require(\"../../../common/utilities\");\n\n      var _constants = require(\"../../common/constants\");\n\n      var _nonFeLandingModel = require(\"./non-fe-landing-model\");\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _defineProperties(target, props) {\n        for (var i = 0; i < props.length; i++) {\n          var descriptor = props[i];\n          descriptor.enumerable = descriptor.enumerable || false;\n          descriptor.configurable = true;\n          if (\"value\" in descriptor) descriptor.writable = true;\n          Object.defineProperty(target, descriptor.key, descriptor);\n        }\n      }\n\n      function _createClass(Constructor, protoProps, staticProps) {\n        if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n        if (staticProps) _defineProperties(Constructor, staticProps);\n        return Constructor;\n      } //shared with PWEB_MOBILE homepage estimates, see gulp-tasks/build.js non-fe-base:dist\n\n\n      var NonFeModelBase = /*#__PURE__*/function () {\n        function NonFeModelBase() {\n          _classCallCheck(this, NonFeModelBase);\n        }\n\n        _createClass(NonFeModelBase, [{\n          key: \"initializeData\",\n          value: function initializeData(nonFeData, socialSecurityResponse, pensionResponse, srBenefitsResponse, selectedPlan, mode, pwebReqLoanNav, accountTypes, omCalc) {\n            this.accountTypes = accountTypes;\n            this.omCalc = omCalc;\n            this.orangeData = nonFeData.orangeData;\n\n            if (this.orangeData.participantDefinedContributionAccounts) {\n              for (var i = 0; i < this.orangeData.participantDefinedContributionAccounts.length; i++) {\n                this.orangeData.participantDefinedContributionAccounts[i].planInfo.planName = (0, _utilities.decodePlanName)(this.orangeData.participantDefinedContributionAccounts[i].planInfo.planName);\n              }\n            }\n\n            this.cleanOrangeMoneyData();\n            this.socialSecurityBenefits = socialSecurityResponse.socialSecurityBenefits;\n            this.pension = pensionResponse.pensionView;\n\n            if (srBenefitsResponse) {\n              this.srBenefits = srBenefitsResponse.srBenefits;\n            }\n\n            this.eMoneyUrl = this.orangeData.urls ? this.orangeData.urls.EMONEY : undefined;\n            this.includeSS = this.orangeData.participantData.socialSecData.includeSocialSecurity;\n            this.personalData = this.orangeData.participantData;\n\n            if (this.orangeData.participantData.retirementAge > 80) {\n              this.orangeData.participantData.retirementAge = 80;\n            }\n\n            this.retirementAge = this.orangeData.participantData.retirementAge;\n\n            var _dob = (0, _utilities.getDateFromString)(this.personalData.dob);\n\n            var currAge = (0, _utilities.getAgePrecise)(_dob);\n            this.minRetireAge = Math.min(currAge + 1, 80);\n\n            if (this.retirementAge < this.minRetireAge) {\n              this.retirementAge = this.minRetireAge;\n            } //Defaulting Social Security start age if it is less than current age.\n\n\n            var socialSecurityAge = this.orangeData.participantData.socialSecData.socialSecStartAge;\n\n            if (socialSecurityAge) {\n              var ssStartAgeMin = currAge >= 62 ? currAge + 1 : 62;\n              socialSecurityAge = Math.min(Math.max(ssStartAgeMin, socialSecurityAge), 70);\n              this.orangeData.participantData.socialSecData.socialSecStartAge = socialSecurityAge;\n            }\n\n            this.content = this.orangeData.content;\n            this.otherAssets = this.orangeData.otherAssets;\n            this.pptDCAccount = this.orangeData.participantDefinedContributionAccounts;\n            this.currentPlanID = selectedPlan ? selectedPlan : this.orangeData.participantDefinedContributionAccounts[0].planInfo.planId;\n            this.selectedPlan = mode === 'portfolio' ? this.orangeData.participantDefinedContributionAccounts[0].planInfo.planId : selectedPlan; //Finding Out if Loans Enabled for Selected Plan\n\n            var omLoanEnabledForSelectedPlan = false;\n            this.pptDCAccount.forEach(function (plan) {\n              if (selectedPlan !== null && plan.planInfo.planId == selectedPlan && plan.loanData.omLoanEnable) {\n                omLoanEnabledForSelectedPlan = true;\n              }\n            }); //this.outstandingLoanInfo = outstandingLoanInfo;\n            //Gathering OutstandingLoans that needs to display\n\n            this.outstandingLoanInfo = [];\n            var outstaningLoanIndex = 0;\n            var self = this;\n            self.pptDCAccount.forEach(function (plan) {\n              if ((mode === 'portfolio' || mode === 'dashboard' || omLoanEnabledForSelectedPlan) && plan.loanData.outstandingLoan) {\n                var outStandingLoanObj = {\n                  planId: plan.planInfo.planId,\n                  planName: plan.planInfo.planName,\n                  outstandingLoans: plan.loanData.outstandingLoan,\n                  earlyLoanPayoffFlag: plan.loanData ? plan.loanData.earlyLoanPayoffFlag : false,\n                  earlyLoanPayoffMethod: plan.loanData ? plan.loanData.earlyLoanPayoffMethod : '',\n                  loanPayOff: plan.loanData ? plan.loanData.loanPayOff : false,\n                  showPlanName: self.pptDCAccount.length > 1\n                };\n                self.outstandingLoanInfo[outstaningLoanIndex] = outStandingLoanObj;\n                outstaningLoanIndex += 1;\n              }\n            }); //Logic whether to display Loan Options in the drop-down\n\n            self.hasActiveOutstandingLoans = false;\n\n            if (self.outstandingLoanInfo.length > 0) {\n              self.outstandingLoanInfo.forEach(function (outstandingLoanObj) {\n                if (outstandingLoanObj.outstandingLoans && outstandingLoanObj.outstandingLoans.data.outstandLoanCount > 0) {\n                  outstandingLoanObj.outstandingLoans.data.outstandingLoanDtls.forEach(function (outstandingLoanDtl) {\n                    if (outstandingLoanDtl.loanStatus == 'A') {\n                      self.hasActiveOutstandingLoans = true;\n                    }\n                  });\n                }\n              });\n            } //this.loanEligible = this.orangeData.participantDefinedContributionAccounts[0].loanData.loanEligible;\n\n\n            self.hasLoanOptions = false;\n            self.loanEligible = false;\n            self.loanModelPlans = [];\n            var planIndex = 0;\n            self.pptDCAccount.forEach(function (plan) {\n              if (mode === 'portfolio' || mode === 'dashboard') {\n                if (plan.loanData.omLoanEnable) {\n                  /* if ((plan.loanData && plan.loanData.loanEligible) || self.hasActiveOutstandingLoans) {\n                  self.hasLoanOptions = true;\n                  } */\n                  //For Portfolio page - Show Loan options only when default loan selected is ELIGIBLE for loan, else don't show loan option in Dropdown\n                  if ((mode === 'dashboard' || mode === 'portfolio' && plan.planInfo.planId == self.currentPlanID) && (plan.loanData && plan.loanData.loanEligible || self.hasActiveOutstandingLoans)) {\n                    self.hasLoanOptions = true;\n                  }\n\n                  if (plan.loanData && plan.loanData.loanEligible) {\n                    if (mode === 'dashboard' || mode === 'portfolio' && plan.planInfo.planId == self.currentPlanID) {\n                      self.loanEligible = true;\n                      var planObj = {\n                        planId: plan.planInfo.planId,\n                        planName: plan.planInfo.planName\n                      };\n                      self.loanModelPlans[planIndex] = planObj;\n                      planIndex += 1;\n                    }\n                  }\n                }\n              } else if (selectedPlan !== null && plan.planInfo.planId == selectedPlan && plan.loanData.omLoanEnable) {\n                if (plan.loanData && plan.loanData.loanEligible || self.hasActiveOutstandingLoans) {\n                  self.hasLoanOptions = true;\n                }\n\n                if (plan.loanData && plan.loanData.loanEligible) {\n                  self.loanEligible = true;\n                  var _planObj = {\n                    planId: plan.planInfo.planId,\n                    planName: plan.planInfo.planName\n                  };\n                  self.loanModelPlans[planIndex] = _planObj;\n                  planIndex += 1;\n                }\n              }\n            });\n            self.planLevelLoanEligible = self.loanModelPlans;\n            self.showLoanModelPlanSelector = false;\n\n            if (self.pptDCAccount.length > 1 && self.loanEligible && !pwebReqLoanNav) {\n              self.showLoanModelPlanSelector = true;\n            }\n\n            this.ctClient = this.pptDCAccount[0].loanData ? this.pptDCAccount[0].loanData.ctClient : false;\n            this.hasRothContribution = {}; //process the data\n\n            this.processNonFeData(); // set raw and working orange data\n\n            this.rawOrangeData = JSON.parse(JSON.stringify(this.orangeData)); //Models for Components\n\n            this.landingPageModel = new _nonFeLandingModel.NonFeLandingModel(this.nonFeLandingObject);\n            console.log(this.landingPageModel);\n          }\n        }, {\n          key: \"formatLISText\",\n          value: function formatLISText(text) {\n            var result = '';\n\n            if (text) {\n              var splitBeforeText = text.split('[');\n\n              if (splitBeforeText[1]) {\n                var splitEndText = splitBeforeText[1].split(']');\n                result = splitBeforeText[0] + \"<a href=/myvoya/link?type=omlisredirectlink&selectedPlanID=\".concat(this.currentPlanID, \">\").concat(splitEndText[0], \"</a>\");\n\n                if (splitEndText[1]) {\n                  result += splitEndText[1];\n                }\n              }\n            }\n\n            return result;\n          }\n        }, {\n          key: \"processNonFeData\",\n          value: function processNonFeData() {\n            var calcResponse = {};\n            this.injectPensionToOrangeData();\n            /*\n             * get the calculated values from omCalculator\n             */\n            // Common util method for both LIS 100% & non LIS.\n\n            this.getLISOrangeData();\n            this.calc = new this.omCalc({\n              orangeData: JSON.parse(JSON.stringify(this.orangeData1))\n            });\n            /*\n             * set social security data\n             */\n\n            this.setSocialSecurityAmountToCalc();\n            /*\n             * run initial calculation with the data\n             */\n\n            calcResponse = this.calc.compute();\n            this.computed = calcResponse.getRetireBenefitEvalResponse();\n            this.guaranteedIncome = this.orangeData.participantData.guaranteedIncome || 0;\n            /**\n             * calculate the ss value and therefore the additional benefits\n             */\n\n            var calculatedSSData = this.calcSSBenefit();\n            this.ssBenefitAmt = this.getSSBenefitAmt(calculatedSSData, this.computed);\n            var ssRetireAge = calculatedSSData.ssStartRetireAgeValue; // on ss panel this is the top slider\n\n            var ssStartAge = calculatedSSData.ssStartValue; // on ss panel this is the bottom slider\n\n            /*\n             * calculate and set the social security additional benefits value\n             */\n\n            this.ssAdditionalBenefits = this.getSSAdditionalBenefit(calculatedSSData);\n            this.ssAddlBenefitsChgFlag = this.orangeData.participantData.socialSecData.socialSecAddlBenefitsChg;\n            this.content.HelpText_LifetimeIncomeStrategy = this.formatLISText(this.content.HelpText_LifetimeIncomeStrategy);\n            this.nonFeLandingObject = {\n              calcResponse: this.computed,\n              includeSS: this.includeSS,\n              content: this.content,\n              pptDCAccount: this.pptDCAccount,\n              currentPlanID: this.currentPlanID,\n              personalData: this.personalData,\n              eMoneyUrl: this.eMoneyUrl,\n              sourceLimits: this.updatePlanLimits(),\n              calc: this.calc,\n              selectedPlan: this.selectedPlan,\n              ssAdditionalBenefits: this.ssAdditionalBenefits,\n              ssAddlBenefitsChgFlag: this.ssAddlBenefitsChgFlag,\n              ssRetireAge: ssRetireAge,\n              ssStartAge: ssStartAge,\n              calculatedSSData: calculatedSSData,\n              guaranteedIncome: this.guaranteedIncome,\n              getAccountBalWithGuaranteedIncome: this.getAccountBalWithGuaranteedIncome\n            };\n          }\n        }, {\n          key: \"getAccountBalWithGuaranteedIncome\",\n          value: function getAccountBalWithGuaranteedIncome() {\n            var accountBalance = this.calcResponse ? this.calcResponse.getMonthlyEstimateFromDCBalance() : this.computed.getMonthlyEstimateFromDCBalance();\n            var gIncomeSubtotalNonLisPlans = 0.0;\n            var participantOrangeData = this.pptDCAccount;\n            var numOfCAccount = participantOrangeData.length;\n\n            for (var i = 0; i < numOfCAccount; i++) {\n              if (!participantOrangeData[i].planInfo.partHasHundredPctLis) {\n                gIncomeSubtotalNonLisPlans += participantOrangeData[i].planInfo.planGuaranteedIncome;\n              }\n            }\n\n            var result = accountBalance - gIncomeSubtotalNonLisPlans;\n\n            if (result < 0) {\n              result = 0;\n            }\n\n            return result;\n          }\n        }, {\n          key: \"getSSBenefitAmt\",\n          value: function getSSBenefitAmt(calculatedSSData, calcResponse) {\n            var ssRetireAge = calculatedSSData.ssStartRetireAgeValue;\n            var ssStartAge = calculatedSSData.ssStartValue;\n\n            if (ssRetireAge < ssStartAge) {\n              return 0;\n            } else if (ssRetireAge > ssStartAge) {\n              return calcResponse.getMonthlyEstimateFromSocialSecurity();\n            } else if (ssRetireAge === ssStartAge) {\n              return calcResponse.getMonthlyEstimateFromSocialSecurity();\n            }\n          }\n          /**\n           * determines if ss is enabled AND included AND if ssAdditionalBenefits is a number AND\n           * greater than 0. IF true, then it recalculates the ssAdditionalBenefits based on the ss benefits\n           *\n           * @param {object} calculatedSSData\n           * @return {number} ssAdditionalBenefits\n           */\n\n        }, {\n          key: \"getSSAdditionalBenefit\",\n          value: function getSSAdditionalBenefit(calculatedSSData) {\n            var ssRetireAge = calculatedSSData.ssStartRetireAgeValue;\n            var ssStartAge = calculatedSSData.ssStartValue; //local calculation variable, just read from the source\n\n            var ssAdditionalBenefits = this.orangeData.participantData.socialSecData.socialSecAddlBenefits;\n\n            if (this.orangeData.participantData.socialSecData.specialNeedsEnable && this.orangeData.participantData.socialSecData.socialSecEnable && this.orangeData.participantData.includeSocialSecurity) {\n              if (ssAdditionalBenefits && !this.ssAddlBenefitsChgFlag) {\n                if (ssRetireAge < ssStartAge) {\n                  ssAdditionalBenefits = calculatedSSData.ssBenefitSS / 2;\n                  console.log('calculatedSSData.ssBenefitSS', calculatedSSData.ssBenefitSS);\n                } else if (ssRetireAge > ssStartAge) {\n                  ssAdditionalBenefits = this.ssBenefitAmt / 2;\n                } else if (ssRetireAge === ssStartAge) {\n                  ssAdditionalBenefits = this.ssBenefitAmt / 2;\n                }\n              }\n\n              console.log('ssAdditionalBenefits======', ssAdditionalBenefits);\n              console.log('ssBenefitAmt=============', this.ssBenefitAmt);\n              return ssAdditionalBenefits || 0;\n            } else {\n              return 0;\n            }\n          }\n        }, {\n          key: \"setSocialSecurityAmountToCalc\",\n          value: function setSocialSecurityAmountToCalc() {\n            var ssAmt = 0;\n\n            if (this.includeSS) {\n              var socialStartAge = this.orangeData.participantData.socialSecData.socialSecStartAge;\n              var ssBenefits = this.socialSecurityBenefits; // if social security age has been provided by the forces that be\n\n              if (!!socialStartAge) {\n                // do some magic to determine what specific numbers to use for the SS calculation\n                if (this.retirementAge >= socialStartAge && socialStartAge >= ssBenefits.nra) {\n                  ssAmt = (0, _utilities.getSocialSecurityBenefitAmt)(this.retirementAge, socialStartAge, ssBenefits);\n                } else if (this.retirementAge >= socialStartAge && socialStartAge < ssBenefits.nra) {\n                  ssAmt = (0, _utilities.getSocialSecurityBenefitAmt)(socialStartAge, socialStartAge, ssBenefits);\n                }\n              } else {\n                ssAmt = (0, _utilities.getSocialSecurityBenefitAmt)(this.retirementAge, this.retirementAge, ssBenefits);\n              }\n            }\n\n            this.calc.setRetirementAge(this.retirementAge, ssAmt);\n          }\n          /**\n           * Cleans up the raw Orange Money data from the server\n           */\n\n        }, {\n          key: \"cleanOrangeMoneyData\",\n          value: function cleanOrangeMoneyData() {\n            /*\n             *\tThe data we get from backend needs some tweaking. Specifically:\n             *\t1. Make sure the retirement age is in range\n             *\t2. Create \"includeErMatch\" variable in JSON. This concept exists only\n             *\t   on the frontend, so we create it here and set it to TRUE by default\n             *\t3. Sort Sources for each plan\n             */\n\n            /* ignore:true */\n            var orangeDataClean = JSON.parse(JSON.stringify(this.orangeData));\n            orangeDataClean.participantData.retirementAge = Math.max((0, _utilities.getAgePrecise)(this.orangeData.participantData.dob) + 1, Math.min(80, this.orangeData.participantData.retirementAge));\n            var sourceOrder = ['PRETAX', 'ROTH', 'AFTER_TAX', 'PRETAX_SUPP', 'ROTH_SUPP', 'AFTERTAX_SUPP', 'CATCHUP_AGE_PRETAX', 'CATCHUP_AGE_ROTH']; //convert order array to lookup table\n\n            var sortSourceList = {};\n\n            for (var i = 0, len = sourceOrder.length; i < len; ++i) {\n              sortSourceList[sourceOrder[i]] = i;\n            }\n\n            var sortSource = function sortSource(a, b) {\n              return sortSourceList[a.type] - sortSourceList[b.type];\n            };\n\n            var plans = orangeDataClean.participantDefinedContributionAccounts;\n\n            for (var _i = 0; _i < plans.length; ++_i) {\n              //sort each source using the lookup table\n              plans[_i].planInfo.sources = plans[_i].planInfo.sources.sort(sortSource); // reset the plan MIN limits to zero\n\n              if (plans[_i].planInfo.totalContributionAmount) {\n                plans[_i].planInfo.totalContributionAmount.min = 0;\n              }\n\n              if (plans[_i].planInfo.totalContributionPercent) {\n                plans[_i].planInfo.totalContributionPercent.min = 0;\n              } // reset the source MIN limits to zero\n\n\n              for (var j = 0; j < plans[_i].planInfo.sources.length; j++) {\n                if (plans[_i].planInfo.sources[j].percentLimits) {\n                  plans[_i].planInfo.sources[j].percentLimits.min = 0;\n                }\n\n                if (plans[_i].planInfo.sources[j].limits) {\n                  plans[_i].planInfo.sources[j].limits.min = 0;\n                }\n              }\n            }\n\n            this.orangeData = orangeDataClean;\n            /* ignore:false */\n          }\n          /*\n           * This method takes care of different pension plans\n           */\n\n        }, {\n          key: \"injectPensionToOrangeData\",\n          value: function injectPensionToOrangeData() {\n            //checking that what kind of pension..default , vendor or Still River\n            var pensionViewType = this.pension.pensionViewFlag;\n            var estimatedPensionAmt;\n            var annualPensionAmt;\n            var lumpSumPensionAmt;\n\n            if (pensionViewType === _constants.CONSTANTS.STATIC_BENEFIT) {\n              estimatedPensionAmt = this.pension.vendorData.monthlyIncome;\n            } else if (pensionViewType === _constants.CONSTANTS.CALC_BENEFIT) {\n              if (this.pension.srData.pensionCalMethod === 'C') {\n                estimatedPensionAmt = (0, _utilities.getPensionBenefitAmt)(this.retirementAge, 0, this.srBenefits);\n                this.srCalcBenefit = true; //Feeding new DB Mandatory Contribution value to Calculator. mandatoryContrib passed to om calc should be in rate not percent (%)\n\n                this.orangeData.pension.dbMandatoryContrib = this.pension.srData.mandatoryContrib / 100;\n              } else if (this.pension.srData.pensionCalMethod === 'M') {\n                estimatedPensionAmt = this.pension.srData.anticipMonthlyPensionIncome;\n                annualPensionAmt = this.pension.srData.anticpAnnPensBenefRetirem;\n                lumpSumPensionAmt = this.pension.srData.anticpLmpSumPenBenRetirem;\n              }\n            } else {\n              estimatedPensionAmt = this.pension.defaultPensionData.monthlyIncome;\n            }\n\n            var pensionData = {\n              monthlyIncome: estimatedPensionAmt === undefined || estimatedPensionAmt === '' ? null : parseFloat(estimatedPensionAmt),\n              annualPension: annualPensionAmt === undefined || annualPensionAmt === '' ? null : parseFloat(annualPensionAmt),\n              lumpSumPension: lumpSumPensionAmt === undefined || lumpSumPensionAmt === '' ? null : parseFloat(lumpSumPensionAmt),\n              enabled: this.pension.enabled\n            };\n            this.orangeData.pension.monthlyPension = pensionData.monthlyIncome;\n            this.orangeData.pension.annualPension = pensionData.annualPension;\n            this.orangeData.pension.lumpSumPension = pensionData.lumpSumPension;\n            this.orangeData.pension.enabled = pensionData.enabled;\n          }\n        }, {\n          key: \"updatePlanLimits\",\n          value: function updatePlanLimits() {\n            var _this = this; // get the source data\n\n\n            var currentPlanID = this.currentPlanID;\n            var planData = this.getWorkingPlan(currentPlanID);\n            var srcs = planData.planInfo.sources;\n            var acctList = this.calc.compute().getAccountDataList();\n            var crcAllowed = planData.planInfo.crcAllowed;\n            var limitsList = {};\n            srcs.map(function (src) {\n              var pLim, lim; // get the account object from the calc that matches our current source\n\n              var accountObj = acctList.find(function (account) {\n                if (account.getType() === _this.accountTypes.matchType(src.type) && account.getPlanId() === currentPlanID) {\n                  return true;\n                }\n              }); // Once we have the correct account data, we can resume with this check\n\n              if (crcAllowed) {\n                pLim = src.percentLimits;\n                lim = src.limits;\n              } else {\n                // use limits from calc account object once we have the correct one\n                pLim = {\n                  min: accountObj.getMinContribRate(),\n                  max: accountObj.getMaxContribRate()\n                };\n                lim = {\n                  min: accountObj.getMinContribDollar(),\n                  max: accountObj.getMaxContribDollar()\n                };\n              }\n\n              if (!src.percentLimits) {\n                src.percentLimits = pLim;\n              }\n\n              if (!src.limits) {\n                src.limits = lim;\n              }\n\n              limitsList[src.type] = {\n                limits: lim,\n                percentLimits: pLim\n              };\n            });\n            return limitsList;\n          }\n        }, {\n          key: \"getWorkingPlan\",\n          value: function getWorkingPlan(planID) {\n            return this.pptDCAccount.find(function (plan) {\n              if (plan.planInfo.planId === planID) {\n                return true;\n              }\n            });\n          }\n        }, {\n          key: \"calcSSBenefit\",\n          value: function calcSSBenefit() {\n            if (!this.socialSecurityBenefits) {\n              return;\n            }\n\n            var retirementAge = this.retirementAge;\n            var ssStartAge = this.orangeData.participantData.socialSecData.socialSecStartAge;\n            var socialSecurityAge = ssStartAge === 0 ? retirementAge : ssStartAge; //calculating retire and social security start min age\n\n            var currAge = (0, _utilities.getAge)(this.orangeData.participantData.dob);\n            var ssRetireAgeMin = Math.min(currAge + 1, 80);\n            var ssStartAgeMin = currAge >= 62 ? currAge + 1 : 62;\n            var ssDisabled = ssStartAgeMin >= 70;\n            socialSecurityAge = Math.min(Math.max(ssStartAgeMin, socialSecurityAge), 70);\n            this.orangeData.participantData.socialSecData.socialSecStartAge = socialSecurityAge;\n            var includeSS = this.includeSS;\n            var benefitAtRA = 0;\n\n            if (includeSS) {\n              if (retirementAge >= socialSecurityAge && socialSecurityAge >= this.socialSecurityBenefits.nra) {\n                benefitAtRA = (0, _utilities.getSocialSecurityBenefitAmt)(retirementAge, socialSecurityAge, this.socialSecurityBenefits);\n              } else if (retirementAge >= socialSecurityAge && socialSecurityAge < this.socialSecurityBenefits.nra) {\n                benefitAtRA = (0, _utilities.getSocialSecurityBenefitAmt)(socialSecurityAge, socialSecurityAge, this.socialSecurityBenefits);\n              }\n            }\n\n            var benefitAtNRA = includeSS ? (0, _utilities.getSocialSecurityBenefitAmt)(this.socialSecurityBenefits.nra, this.socialSecurityBenefits.nra, this.socialSecurityBenefits) : 0;\n            var benefitAtSS = includeSS ? (0, _utilities.getSocialSecurityBenefitAmt)(retirementAge, socialSecurityAge, this.socialSecurityBenefits) : 0;\n            var calculatedNRAAmt = (0, _utilities.getSocialSecurityBenefitAmt)(retirementAge, this.socialSecurityBenefits.nra, this.socialSecurityBenefits);\n            var nraAmount = 0; //= includeSS ? calculatedNRA : 0;\n\n            var enteredPIA = this.orangeData.participantData.socialSecData.enteredPIA; //if (includeSS) {\n\n            if (enteredPIA && enteredPIA !== 0) {\n              nraAmount = enteredPIA;\n            } else {\n              nraAmount = calculatedNRAAmt;\n            } //}\n            //If it is Still River Plan getting updated pension Amount as per the age\n            //if (this.srBenefits) {\n            //    let estimatedPensionAmt = getPensionBenefitAmt(retirementAge, 0, this.srBenefits);\n            //    this.calc.setPensionAmount(estimatedPensionAmt);\n            //}\n\n\n            var pensionViewType = this.pension.pensionViewFlag;\n\n            if (pensionViewType && pensionViewType === _constants.CONSTANTS.CALC_BENEFIT && this.pension.srData.pensionCalMethod === 'C' && this.srBenefits) {\n              var estimatedPensionAmt = (0, _utilities.getPensionBenefitAmt)(retirementAge, 0, this.srBenefits);\n              this.orangeData.pension.monthlyPension = estimatedPensionAmt === '' ? null : parseFloat(estimatedPensionAmt);\n              this.calc.setPensionAmount(estimatedPensionAmt);\n            } //Defect#37947 -- SR amounts needs to be updated on SS Panel\n            // Common util method for both LIS 100% & non LIS.\n\n\n            this.getLISOrangeData();\n            this.calc.reserialize({\n              orangeData: JSON.parse(JSON.stringify(this.orangeData1))\n            });\n            this.calc.setRetirementAge(retirementAge, benefitAtRA);\n            var RABenefitResponse = this.calc.compute().getRetireBenefitEvalResponse();\n            var goal = RABenefitResponse.getMonthlySalaryReplacementRequirement();\n            var otherIncomeAtRA = this.sumOfNonSS(RABenefitResponse);\n            var shortfallAtRA = goal - (otherIncomeAtRA + benefitAtRA);\n            this.calc.setRetirementAge(retirementAge, benefitAtSS);\n            var SSBenefitResponse = this.calc.compute().getRetireBenefitEvalResponse();\n            var otherIncomeAtSS = socialSecurityAge >= retirementAge ? this.sumOfNonSS(SSBenefitResponse) : 0;\n            var shortfallAtSS = goal - (otherIncomeAtSS + benefitAtSS);\n            return {\n              calculatedNRAAmt: calculatedNRAAmt,\n              goal: goal,\n              nra: this.socialSecurityBenefits.nra,\n              ssBenefitRA: benefitAtRA,\n              ssBenefitNRA: benefitAtNRA,\n              ssBenefitSS: benefitAtSS,\n              ssDisabled: ssDisabled,\n              ssIncomeRA: otherIncomeAtRA,\n              ssIncomeSS: otherIncomeAtSS,\n              ssNRAAmount: nraAmount,\n              ssRetireAgeMin: ssRetireAgeMin,\n              ssShortfallRA: shortfallAtRA,\n              ssShortfallSS: shortfallAtSS,\n              ssStartRetireAgeValue: retirementAge,\n              ssStartAgeMin: ssStartAgeMin,\n              ssStartValue: socialSecurityAge\n            };\n          } // Common util method for both LIS 100% & non LIS.\n\n        }, {\n          key: \"getLISOrangeData\",\n          value: function getLISOrangeData() {\n            this.orangeData1 = JSON.parse(JSON.stringify(this.orangeData));\n            var numOfCAccount = this.orangeData1.participantDefinedContributionAccounts.length;\n\n            for (var i = 0; i < numOfCAccount; i++) {\n              //Only for LIS-100%\n              if (this.orangeData1.participantDefinedContributionAccounts[i].planInfo.partHasHundredPctLis) {\n                this.orangeData1.participantData.currentDcBalance = this.orangeData1.participantData.currentDcBalance - this.orangeData1.participantDefinedContributionAccounts[i].planInfo.planBalance;\n                var numOfSources = this.orangeData1.participantDefinedContributionAccounts[i].planInfo.sources.length;\n\n                for (var j = 0; j < numOfSources; j++) {\n                  this.orangeData1.participantDefinedContributionAccounts[i].planInfo.sources[j].contribution = 0;\n                }\n\n                if (this.orangeData1.participantDefinedContributionAccounts[i].matchData) {\n                  this.orangeData1.participantDefinedContributionAccounts[i].matchData.mandatoryEeContribution ? this.orangeData1.participantDefinedContributionAccounts[i].matchData.mandatoryEeContribution.value = 0 : '';\n                  this.orangeData1.participantDefinedContributionAccounts[i].matchData.mandatoryErContribution ? this.orangeData1.participantDefinedContributionAccounts[i].matchData.mandatoryErContribution.value = 0 : '';\n                }\n              }\n            }\n          } //LIS-100% End\n\n        }, {\n          key: \"sumOfNonSS\",\n          value: function sumOfNonSS(calcResponse) {\n            // computed account value\n            var accountVal = calcResponse.getMonthlyEstimateFromDCBalance() + calcResponse.getMonthlyEstimateFromEmployee() + calcResponse.getMonthlyEstimateFromEmployer(); // computed pension value\n\n            var pensionVal = calcResponse.getMonthlyEstimateFromPension() + calcResponse.getMonthlyEstimateFromPensionAsIncome(); // computed other value\n\n            var otherVal = calcResponse.getMonthlyEstimateFromOther() + calcResponse.getMonthlyEstimateFromIncome();\n            var income = (accountVal || 0) + (pensionVal || 0) + (otherVal || 0);\n            var additionalIncome = this.getIncomeWithoutLis() - calcResponse.getMonthlyEstimateFromDCBalance();\n\n            if (additionalIncome > 0) {\n              income += additionalIncome;\n            }\n\n            income += this.getIncomeWithLis();\n            return income;\n          }\n        }, {\n          key: \"getIncomeWithLis\",\n          value: function getIncomeWithLis() {\n            var participantOrangeData = this.pptDCAccount;\n            var gIncomeSubtotalLisPlans = 0.0;\n            var numOfCAccount = participantOrangeData.length;\n\n            for (var i = 0; i < numOfCAccount; i++) {\n              if (participantOrangeData[i].planInfo.partHasHundredPctLis) {\n                gIncomeSubtotalLisPlans += participantOrangeData[i].planInfo.planGuaranteedIncome;\n              }\n            }\n\n            return gIncomeSubtotalLisPlans;\n          }\n        }, {\n          key: \"getIncomeWithoutLis\",\n          value: function getIncomeWithoutLis() {\n            var participantOrangeData = this.pptDCAccount;\n            var gIncomeSubtotalLisPlans = 0.0;\n            var numOfCAccount = participantOrangeData.length;\n\n            for (var i = 0; i < numOfCAccount; i++) {\n              if (!participantOrangeData[i].planInfo.partHasHundredPctLis) {\n                gIncomeSubtotalLisPlans += participantOrangeData[i].planInfo.planGuaranteedIncome;\n              }\n            }\n\n            return gIncomeSubtotalLisPlans;\n          }\n        }]);\n\n        return NonFeModelBase;\n      }();\n\n      exports.NonFeModelBase = NonFeModelBase;\n    }, {\n      \"../../../common/utilities\": 1,\n      \"../../common/constants\": 2,\n      \"./non-fe-landing-model\": 7\n    }]\n  }, {}, [8])(8);\n});","map":null,"metadata":{},"sourceType":"script"}