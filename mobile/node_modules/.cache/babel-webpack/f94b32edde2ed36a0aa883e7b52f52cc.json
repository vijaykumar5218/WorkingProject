{"ast":null,"code":"import { Status } from '@shared-lib/constants/status.enum';\nimport { take } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../journey.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/router\";\nexport let JourneyUtilityService = /*#__PURE__*/(() => {\n  class JourneyUtilityService {\n    constructor(journeyService, currencyPipe, router) {\n      this.journeyService = journeyService;\n      this.currencyPipe = currencyPipe;\n      this.router = router;\n    }\n\n    processInnerHTMLData(str, elements, journeyId) {\n      let result = str;\n      elements.forEach((ele, i) => {\n        let answer = this.journeyService.journeyServiceMap[journeyId][ele.answerId];\n\n        if (answer !== undefined && str) {\n          if (ele.type === 'dollar') {\n            answer = this.currencyPipe.transform(answer, 'USD', true, '1.0-0');\n          }\n\n          if (ele.bold) {\n            answer = '<strong>' + answer + '</strong>';\n          }\n\n          if (ele.textColor) {\n            answer = `<span style=\"color:${ele.textColor}\">${answer}</span>`;\n          }\n\n          result = result.replace('{' + i + '}', answer);\n        }\n      });\n      return result;\n    }\n\n    updateRadioStateValue(answer, radioButtonFilled, element, requiredCompleted, elements) {\n      let stringifiedAnswer = JSON.stringify(answer);\n\n      if (stringifiedAnswer === '{}') {\n        stringifiedAnswer = '';\n      }\n\n      if ((requiredCompleted || !elements) && (radioButtonFilled || !element.isRequired)) {\n        return stringifiedAnswer;\n      } else {\n        return undefined;\n      }\n    }\n\n    radioButtonClick(element, isToggle, option, idSuffix) {\n      let answer;\n      this.elements = [];\n      let isRequiredValidObj;\n      element.options.forEach(ele => {\n        if (ele === option) {\n          option.checked = this.setCheckedValue(isToggle, option);\n\n          if (option.checked) {\n            answer = option.id;\n            isRequiredValidObj = this.setElements(option.elements, isToggle, idSuffix);\n          } else if (isToggle && !option.checked) {\n            this.elements = [];\n          }\n        } else {\n          ele.checked = false;\n        }\n      });\n      return {\n        value: answer,\n        isRequiredValid: isRequiredValidObj === undefined ? false : isRequiredValidObj.isRequiredValid,\n        elements: isRequiredValidObj === undefined ? [] : isRequiredValidObj.elements,\n        element: element\n      };\n    }\n\n    setCheckedValue(isToggle, option) {\n      return isToggle ? !option.checked : true;\n    }\n\n    setElements(elements, isToggle, idSuffix) {\n      let valid = false;\n      elements === null || elements === void 0 ? void 0 : elements.forEach((el, i) => {\n        el.idSuffix = idSuffix + i;\n\n        if (this.checkValidation(el) && !isToggle) {\n          valid = true;\n        }\n      });\n      this.elements = elements;\n      return {\n        isRequiredValid: valid,\n        elements: elements,\n        value: ''\n      };\n    }\n\n    checkValidation(element) {\n      return element.isRequired ? true : false;\n    }\n\n    addAccountIconName(accounts, linkedId) {\n      let selectedAccount;\n      accounts === null || accounts === void 0 ? void 0 : accounts.forEach(acct => {\n        if (acct.guid === linkedId) {\n          selectedAccount = acct;\n          acct.radioButtonIconName = 'radio-button-on';\n        } else {\n          acct.radioButtonIconName = 'radio-button-off';\n        }\n      });\n      return selectedAccount;\n    }\n\n    journeyRouterNavigation(url) {\n      if (url.includes('/journeys')) {\n        this.journeyService.fetchJourneys().pipe(take(1)).subscribe(journeysResponse => {\n          const notComingSoon = this.checkNotComingSoonDeepLink(journeysResponse, url);\n\n          if ((journeysResponse === null || journeysResponse === void 0 ? void 0 : journeysResponse.recommended) && journeysResponse.recommended.length > 0 && notComingSoon) {\n            this.journeyTypeRouterNavigation(journeysResponse, 'recommended');\n          } else {\n            if ((journeysResponse === null || journeysResponse === void 0 ? void 0 : journeysResponse.all) && journeysResponse.all.length > 0 && notComingSoon) {\n              this.journeyTypeRouterNavigation(journeysResponse, 'all');\n            }\n          }\n        });\n      }\n    }\n\n    journeyTypeRouterNavigation(journeysResponse, type) {\n      const journeyID = journeysResponse[type][0].journeyID;\n      const journeyStatus = this.journeyService.getJourneyStatus(journeysResponse[type][0].steps);\n\n      if (journeyStatus === Status.inProgress) {\n        this.router.navigate(['/journeys/journey/' + journeyID + '/steps'], {\n          queryParams: {\n            journeyType: type\n          }\n        });\n      } else {\n        this.router.navigate(['/journeys/journey/' + journeyID + '/overview'], {\n          queryParams: {\n            journeyType: type,\n            fromJourneys: true\n          }\n        });\n      }\n    }\n\n    checkNotComingSoonDeepLink(journeyRes, url) {\n      if (url === '/journeys') {\n        return true;\n      } else if (url.includes('/steps') || url.includes('/resources') || url.includes('/overview')) {\n        const id = parseInt(url.split('/')[3]);\n        const journeyIndex = journeyRes.all.findIndex(journey => journey.journeyID === id);\n\n        if (journeyIndex == -1 || this.journeyService.isComingSoon(journeyRes.all[journeyIndex])) {\n          return true;\n        } else {\n          return false;\n        }\n      } else {\n        return false;\n      }\n    }\n\n  }\n\n  JourneyUtilityService.ɵfac = function JourneyUtilityService_Factory(t) {\n    return new (t || JourneyUtilityService)(i0.ɵɵinject(i1.JourneyService), i0.ɵɵinject(i2.CurrencyPipe), i0.ɵɵinject(i3.Router));\n  };\n\n  JourneyUtilityService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: JourneyUtilityService,\n    factory: JourneyUtilityService.ɵfac,\n    providedIn: 'root'\n  });\n  return JourneyUtilityService;\n})();","map":null,"metadata":{},"sourceType":"module"}