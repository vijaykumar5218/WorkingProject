{"ast":null,"code":"import _asyncToGenerator from \"/Users/vijay.a/Documents/GitHub/MYVOYAGE/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { WebPlugin } from '@capacitor/core';\n\nfunction translatedConnection() {\n  const connection = window.navigator.connection || window.navigator.mozConnection || window.navigator.webkitConnection;\n  let result = 'unknown';\n  const type = connection ? connection.type || connection.effectiveType : null;\n\n  if (type && typeof type === 'string') {\n    switch (type) {\n      // possible type values\n      case 'bluetooth':\n      case 'cellular':\n        result = 'cellular';\n        break;\n\n      case 'none':\n        result = 'none';\n        break;\n\n      case 'ethernet':\n      case 'wifi':\n      case 'wimax':\n        result = 'wifi';\n        break;\n\n      case 'other':\n      case 'unknown':\n        result = 'unknown';\n        break;\n      // possible effectiveType values\n\n      case 'slow-2g':\n      case '2g':\n      case '3g':\n        result = 'cellular';\n        break;\n\n      case '4g':\n        result = 'wifi';\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  return result;\n}\n\nexport class NetworkWeb extends WebPlugin {\n  constructor() {\n    super();\n\n    this.handleOnline = () => {\n      const connectionType = translatedConnection();\n      const status = {\n        connected: true,\n        connectionType: connectionType\n      };\n      this.notifyListeners('networkStatusChange', status);\n    };\n\n    this.handleOffline = () => {\n      const status = {\n        connected: false,\n        connectionType: 'none'\n      };\n      this.notifyListeners('networkStatusChange', status);\n    };\n\n    if (typeof window !== 'undefined') {\n      window.addEventListener('online', this.handleOnline);\n      window.addEventListener('offline', this.handleOffline);\n    }\n  }\n\n  getStatus() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (!window.navigator) {\n        throw _this.unavailable('Browser does not support the Network Information API');\n      }\n\n      const connected = window.navigator.onLine;\n      const connectionType = translatedConnection();\n      const status = {\n        connected,\n        connectionType: connected ? connectionType : 'none'\n      };\n      return status;\n    })();\n  }\n\n}\nconst Network = new NetworkWeb();\nexport { Network };","map":{"version":3,"sources":["/Users/vijay.a/Documents/GitHub/MYVOYAGE/node_modules/@capacitor/network/dist/esm/web.js"],"names":["WebPlugin","translatedConnection","connection","window","navigator","mozConnection","webkitConnection","result","type","effectiveType","NetworkWeb","constructor","handleOnline","connectionType","status","connected","notifyListeners","handleOffline","addEventListener","getStatus","unavailable","onLine","Network"],"mappings":";AAAA,SAASA,SAAT,QAA0B,iBAA1B;;AACA,SAASC,oBAAT,GAAgC;AAC5B,QAAMC,UAAU,GAAGC,MAAM,CAACC,SAAP,CAAiBF,UAAjB,IACfC,MAAM,CAACC,SAAP,CAAiBC,aADF,IAEfF,MAAM,CAACC,SAAP,CAAiBE,gBAFrB;AAGA,MAAIC,MAAM,GAAG,SAAb;AACA,QAAMC,IAAI,GAAGN,UAAU,GAAGA,UAAU,CAACM,IAAX,IAAmBN,UAAU,CAACO,aAAjC,GAAiD,IAAxE;;AACA,MAAID,IAAI,IAAI,OAAOA,IAAP,KAAgB,QAA5B,EAAsC;AAClC,YAAQA,IAAR;AACI;AACA,WAAK,WAAL;AACA,WAAK,UAAL;AACID,QAAAA,MAAM,GAAG,UAAT;AACA;;AACJ,WAAK,MAAL;AACIA,QAAAA,MAAM,GAAG,MAAT;AACA;;AACJ,WAAK,UAAL;AACA,WAAK,MAAL;AACA,WAAK,OAAL;AACIA,QAAAA,MAAM,GAAG,MAAT;AACA;;AACJ,WAAK,OAAL;AACA,WAAK,SAAL;AACIA,QAAAA,MAAM,GAAG,SAAT;AACA;AACJ;;AACA,WAAK,SAAL;AACA,WAAK,IAAL;AACA,WAAK,IAAL;AACIA,QAAAA,MAAM,GAAG,UAAT;AACA;;AACJ,WAAK,IAAL;AACIA,QAAAA,MAAM,GAAG,MAAT;AACA;;AACJ;AACI;AA5BR;AA8BH;;AACD,SAAOA,MAAP;AACH;;AACD,OAAO,MAAMG,UAAN,SAAyBV,SAAzB,CAAmC;AACtCW,EAAAA,WAAW,GAAG;AACV;;AACA,SAAKC,YAAL,GAAoB,MAAM;AACtB,YAAMC,cAAc,GAAGZ,oBAAoB,EAA3C;AACA,YAAMa,MAAM,GAAG;AACXC,QAAAA,SAAS,EAAE,IADA;AAEXF,QAAAA,cAAc,EAAEA;AAFL,OAAf;AAIA,WAAKG,eAAL,CAAqB,qBAArB,EAA4CF,MAA5C;AACH,KAPD;;AAQA,SAAKG,aAAL,GAAqB,MAAM;AACvB,YAAMH,MAAM,GAAG;AACXC,QAAAA,SAAS,EAAE,KADA;AAEXF,QAAAA,cAAc,EAAE;AAFL,OAAf;AAIA,WAAKG,eAAL,CAAqB,qBAArB,EAA4CF,MAA5C;AACH,KAND;;AAOA,QAAI,OAAOX,MAAP,KAAkB,WAAtB,EAAmC;AAC/BA,MAAAA,MAAM,CAACe,gBAAP,CAAwB,QAAxB,EAAkC,KAAKN,YAAvC;AACAT,MAAAA,MAAM,CAACe,gBAAP,CAAwB,SAAxB,EAAmC,KAAKD,aAAxC;AACH;AACJ;;AACKE,EAAAA,SAAS,GAAG;AAAA;;AAAA;AACd,UAAI,CAAChB,MAAM,CAACC,SAAZ,EAAuB;AACnB,cAAM,KAAI,CAACgB,WAAL,CAAiB,sDAAjB,CAAN;AACH;;AACD,YAAML,SAAS,GAAGZ,MAAM,CAACC,SAAP,CAAiBiB,MAAnC;AACA,YAAMR,cAAc,GAAGZ,oBAAoB,EAA3C;AACA,YAAMa,MAAM,GAAG;AACXC,QAAAA,SADW;AAEXF,QAAAA,cAAc,EAAEE,SAAS,GAAGF,cAAH,GAAoB;AAFlC,OAAf;AAIA,aAAOC,MAAP;AAVc;AAWjB;;AAlCqC;AAoC1C,MAAMQ,OAAO,GAAG,IAAIZ,UAAJ,EAAhB;AACA,SAASY,OAAT","sourcesContent":["import { WebPlugin } from '@capacitor/core';\nfunction translatedConnection() {\n    const connection = window.navigator.connection ||\n        window.navigator.mozConnection ||\n        window.navigator.webkitConnection;\n    let result = 'unknown';\n    const type = connection ? connection.type || connection.effectiveType : null;\n    if (type && typeof type === 'string') {\n        switch (type) {\n            // possible type values\n            case 'bluetooth':\n            case 'cellular':\n                result = 'cellular';\n                break;\n            case 'none':\n                result = 'none';\n                break;\n            case 'ethernet':\n            case 'wifi':\n            case 'wimax':\n                result = 'wifi';\n                break;\n            case 'other':\n            case 'unknown':\n                result = 'unknown';\n                break;\n            // possible effectiveType values\n            case 'slow-2g':\n            case '2g':\n            case '3g':\n                result = 'cellular';\n                break;\n            case '4g':\n                result = 'wifi';\n                break;\n            default:\n                break;\n        }\n    }\n    return result;\n}\nexport class NetworkWeb extends WebPlugin {\n    constructor() {\n        super();\n        this.handleOnline = () => {\n            const connectionType = translatedConnection();\n            const status = {\n                connected: true,\n                connectionType: connectionType,\n            };\n            this.notifyListeners('networkStatusChange', status);\n        };\n        this.handleOffline = () => {\n            const status = {\n                connected: false,\n                connectionType: 'none',\n            };\n            this.notifyListeners('networkStatusChange', status);\n        };\n        if (typeof window !== 'undefined') {\n            window.addEventListener('online', this.handleOnline);\n            window.addEventListener('offline', this.handleOffline);\n        }\n    }\n    async getStatus() {\n        if (!window.navigator) {\n            throw this.unavailable('Browser does not support the Network Information API');\n        }\n        const connected = window.navigator.onLine;\n        const connectionType = translatedConnection();\n        const status = {\n            connected,\n            connectionType: connected ? connectionType : 'none',\n        };\n        return status;\n    }\n}\nconst Network = new NetworkWeb();\nexport { Network };\n"]},"metadata":{},"sourceType":"module"}