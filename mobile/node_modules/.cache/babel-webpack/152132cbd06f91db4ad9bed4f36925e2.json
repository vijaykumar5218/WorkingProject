{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { endpoints } from '../constants/collegeEndpoints';\nimport { ReplaySubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../base/base-factory-provider\";\nimport * as i2 from \"../../utility/utility.service\";\nimport * as i3 from \"../journey.service\";\nconst detailedFeeMapping = {\n  college_type: 'typeCollegeId',\n  years_of_attendance: 'totalYears',\n  college_start_age: 'collegeStartAge',\n  current_age: 'currentAge',\n  inflation: 'inflation'\n};\nexport let CollegeService = /*#__PURE__*/(() => {\n  class CollegeService {\n    constructor(baseService, utilityService, journeyService) {\n      this.baseService = baseService;\n      this.utilityService = utilityService;\n      this.journeyService = journeyService;\n      this.valueChange = new ReplaySubject(1);\n      this.totalYears = 4;\n      this.collegeStartAge = 18;\n      this.inflation = 3.3;\n      this.firstInitialize = true;\n      this.detailedFeesInputs = {};\n      this.addedDependents = [];\n      this.endpoints = this.utilityService.appendBaseUrlToEndpoints(endpoints);\n    }\n\n    initialize(journey) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const collegeData = yield this.getCollegeData();\n        this.initializeDependents(collegeData, journey);\n        yield this.setAnswers(journey);\n\n        if (!this.firstInitialize) {\n          this.journeyService.updateJourneySteps(journey.steps, journey.journeyID, false);\n        }\n\n        this.firstInitialize = false;\n      });\n    }\n\n    getCollegeData() {\n      if (!this.collegeJourneyDataPromise) {\n        this.collegeJourneyDataPromise = this.baseService.get(this.endpoints.getCollegeData);\n      }\n\n      return this.collegeJourneyDataPromise;\n    }\n\n    initializeDependents(collegeData, journey) {\n      journey.steps.forEach(step => {\n        var _a;\n\n        (_a = step.content) === null || _a === void 0 ? void 0 : _a.pageElements.forEach(pageElement => {\n          this.updateDependents(collegeData.dependents, pageElement);\n          this.setOptions(pageElement, collegeData.collegeTypes, 'typeCollege');\n          this.setOptions(pageElement, collegeData.filingStatuses, 'filingStatus');\n          this.setOptions(pageElement, collegeData.states, 'stateResidence');\n        });\n      });\n    }\n\n    setOptions(pageElement, optionArray, key) {\n      const elementIndex = pageElement.elements.findIndex(el => el.id === key);\n\n      if (elementIndex > -1) {\n        const typeElement = pageElement.elements[elementIndex];\n        const typeOptions = [];\n\n        if (optionArray.length > 0) {\n          optionArray.forEach(opt => {\n            typeOptions.push({\n              id: opt.id,\n              label: opt.label,\n              value: opt.value\n            });\n          });\n          typeElement.id = 'input';\n          typeElement.type = 'select';\n          typeElement.options = typeOptions;\n        } else {\n          pageElement.elements.splice(elementIndex, 1);\n        }\n      }\n    }\n\n    initializeDependentFromList(dependents, journey) {\n      journey.steps.forEach(step => {\n        var _a;\n\n        (_a = step.content) === null || _a === void 0 ? void 0 : _a.pageElements.forEach(pageElement => {\n          this.updateDependents(dependents, pageElement);\n        });\n      });\n    }\n\n    checkAddAChildAnswer(parsedAnswer, journey) {\n      if (parsedAnswer['addAChildModal']) {\n        this.initializeDependentFromList(parsedAnswer['addAChildModal'], journey);\n      }\n    }\n\n    setAnswers(journey) {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (!this.allDependentSteps) {\n          this.allDependentSteps = JSON.parse(JSON.stringify(journey.steps));\n        }\n\n        const answerList = this.journeyService.getAnswerList(journey);\n        answerList === null || answerList === void 0 ? void 0 : answerList.forEach(answer => {\n          const parsedAnswer = this.journeyService.safeParse(answer);\n\n          if (parsedAnswer) {\n            this.checkAddAChildAnswer(parsedAnswer, journey);\n            this.setWhoAreYouSavingFor(parsedAnswer, journey);\n            const typeCollegeAns = this.journeyService.safeParse(parsedAnswer['typeCollege']);\n\n            if (typeCollegeAns) {\n              this.typeCollege = typeCollegeAns.label;\n              this.typeCollegeId = typeCollegeAns.id;\n            }\n\n            if (parsedAnswer['calculateFinancialAid']) {\n              const parseAns = this.journeyService.safeParse(parsedAnswer['calculateFinancialAid']);\n              this.scholarshipsNotIncluded = parseAns['calculateFinancialAid'] === 'yes' ? false : true;\n            }\n          }\n        });\n        yield this.updateDetailedFees();\n        yield this.setCurrentAge();\n        this.valueChange.next();\n      });\n    }\n\n    setCurrentAge() {\n      var _a;\n\n      return __awaiter(this, void 0, void 0, function* () {\n        if (this.whoAreYouSavingForId) {\n          this.currentAge = (_a = this.addedDependents.find(dep => dep.id === this.whoAreYouSavingForId)) === null || _a === void 0 ? void 0 : _a.age;\n        }\n      });\n    }\n\n    setWhoAreYouSavingFor(parsedAnswer, journey) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const whoAreYouSavingForAns = this.journeyService.safeParse(parsedAnswer['whoAreYouSavingFor']);\n\n        if (whoAreYouSavingForAns) {\n          this.whoAreYouSavingFor = whoAreYouSavingForAns.label;\n          const oldWhoAreYouSavingForId = this.whoAreYouSavingForId;\n          this.whoAreYouSavingForId = whoAreYouSavingForAns.id;\n\n          if (oldWhoAreYouSavingForId !== this.whoAreYouSavingForId) {\n            this.updateStepValues(journey, oldWhoAreYouSavingForId);\n          }\n        }\n      });\n    }\n\n    stepChange(journey) {\n      this.setAnswers(journey);\n    }\n\n    processForSave(stepStatuses) {\n      if (this.whoAreYouSavingForId) {\n        stepStatuses.forEach(step => {\n          if (step.journeyStepName !== 'who_are_you_saving_for') {\n            const index = this.allDependentSteps.findIndex(allDependentStep => {\n              return allDependentStep.journeyStepName === step.journeyStepName;\n            });\n            this.addDependentId(step, index);\n            step.answer = this.allDependentSteps[index].answer;\n          }\n        });\n      }\n    }\n\n    addDependentId(step, i, id = this.whoAreYouSavingForId) {\n      const parsedAnswer = this.journeyService.safeParse(this.allDependentSteps[i].answer);\n      const updatedValue = parsedAnswer ? parsedAnswer : {};\n\n      if (step.value && Object.keys(step.value).length > 0) {\n        updatedValue[id] = step.value;\n      }\n\n      this.allDependentSteps[i].answer = Object.keys(updatedValue).length > 0 ? JSON.stringify(updatedValue) : undefined;\n    }\n\n    updateStepValues(journey, oldDependentId) {\n      journey.steps.forEach((step, i) => {\n        if (step.journeyStepName !== 'who_are_you_saving_for') {\n          if (oldDependentId) {\n            this.addDependentId(step, i, oldDependentId);\n          }\n\n          const parsedAnswer = this.journeyService.safeParse(this.allDependentSteps[i].answer);\n          step.value = undefined;\n\n          if (parsedAnswer && Object.keys(parsedAnswer).length > 0) {\n            const value = parsedAnswer[this.whoAreYouSavingForId];\n            step.answer = typeof value === 'string' ? value : JSON.stringify(value);\n          } else {\n            step.answer = undefined;\n          }\n        }\n      });\n\n      if (this.firstInitialize) {\n        this.journeyService.updateJourneySteps(journey.steps, journey.journeyID, false);\n      }\n    }\n\n    addDependent(dependent) {\n      const journey = this.journeyService.getCurrentJourney();\n      this.initializeDependentFromList([dependent], journey);\n      this.journeyService.updateJourneySteps(journey.steps, journey.journeyID, false);\n    }\n\n    updateDependents(dependents, pageElement) {\n      const dependentIndex = pageElement.elements.findIndex(el => el.answerId === 'whoAreYouSavingFor');\n\n      if (dependentIndex > -1) {\n        const dependentElement = pageElement.elements[dependentIndex];\n        const dependentElements = dependentElement.options ? dependentElement.options : [];\n        const dependentLength = dependentElements.length;\n        dependents.forEach((dep, i) => {\n          if (typeof dep === 'string') {\n            dep = this.journeyService.safeParse(dep);\n          }\n\n          this.trackAddedDependents(dep);\n          dependentElements.push({\n            id: dep.id,\n            label: 'childFirstName' in dep ? dep.childFirstName : dep.firstName,\n            imageUrl: dependentElement.imageUrl,\n            value: dep.id,\n            idSuffix: dependentElement.idSuffix + (dependentLength + i)\n          });\n        });\n        dependentElement.id = 'input';\n        dependentElement.type = 'iconTextButtonSelect';\n        dependentElement.options = dependentElements;\n\n        if (dependents.length === 0) {\n          pageElement.elements.splice(dependentIndex, 1);\n        }\n      }\n    }\n\n    trackAddedDependents(dep) {\n      var _a;\n\n      if (this.addedDependents.findIndex(addedDep => addedDep.id === dep.id) === -1) {\n        this.addedDependents.push({\n          id: dep.id,\n          age: 'childAge' in dep ? dep.childAge : (_a = dep.age) === null || _a === void 0 ? void 0 : _a.toString(),\n          firstName: 'childFirstName' in dep ? dep.childFirstName : dep.firstName\n        });\n      }\n    }\n\n    updateDetailedFees() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const originalObjString = JSON.stringify(this.detailedFeesInputs);\n        let url = this.endpoints.detailedFees;\n        let undefinedInput = false;\n        Object.keys(detailedFeeMapping).forEach(key => {\n          this.detailedFeesInputs[key] = this[detailedFeeMapping[key]];\n\n          if (this.journeyService.isValueEmpty(this.detailedFeesInputs[key])) {\n            undefinedInput = true;\n          }\n\n          url = url + key + '=' + this.detailedFeesInputs[key] + '&';\n        });\n        url = url.substring(0, url.length - 1);\n\n        if (originalObjString !== JSON.stringify(this.detailedFeesInputs) && !undefinedInput) {\n          const detailedFees = yield this.baseService.get(url);\n          this.tuition = detailedFees.tuition;\n          this.roomAndBoard = detailedFees.roomAndBoard;\n          this.fees = detailedFees.fees;\n          this.books = detailedFees.books;\n          this.grantsAndScholarships = detailedFees.grantsAndScholarships;\n          this.grantsAndScholarshipsNegative = -1 * this.grantsAndScholarships;\n          this.total = detailedFees.total;\n          this.averageAmount = detailedFees.averageCostPerYear;\n          this.endYear = detailedFees.endYear;\n          this.totalYears = detailedFees.endYear - detailedFees.startYear;\n        }\n      });\n    }\n\n  }\n\n  CollegeService.ɵfac = function CollegeService_Factory(t) {\n    return new (t || CollegeService)(i0.ɵɵinject(i1.BaseService), i0.ɵɵinject(i2.SharedUtilityService), i0.ɵɵinject(i3.JourneyService));\n  };\n\n  CollegeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CollegeService,\n    factory: CollegeService.ɵfac,\n    providedIn: 'root'\n  });\n  return CollegeService;\n})();","map":null,"metadata":{},"sourceType":"module"}