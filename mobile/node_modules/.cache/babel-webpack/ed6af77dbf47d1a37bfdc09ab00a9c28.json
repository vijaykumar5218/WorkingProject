{"ast":null,"code":"import _asyncToGenerator from \"/Users/vijay.a/Documents/GitHub/MYVOYAGE/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { BrowserVault, Device, Vault, VaultType } from '@ionic-enterprise/identity-vault';\nimport { Capacitor } from '@capacitor/core';\nimport { biometricsVaultConfig, defaultVaultConfig } from './contants/authConstants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport const VAULT_CONFIG_KEY = 'vault_config';\nexport const DEFAULT_FACEID_DISABLED = 'default_faceid_disabled_flag';\nexport let VaultService = /*#__PURE__*/(() => {\n  class VaultService {\n    constructor(router, ngZone) {\n      this.router = router;\n      this.ngZone = ngZone;\n    }\n\n    initializeVault() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        let vaultConfig = JSON.parse(localStorage.getItem(VAULT_CONFIG_KEY));\n\n        if (!vaultConfig) {\n          vaultConfig = defaultVaultConfig;\n        }\n\n        _this.vault = Capacitor.isNativePlatform() ? new Vault(vaultConfig) : new BrowserVault(vaultConfig);\n\n        _this.vault.onError(_this.onVaultError.bind(_this));\n      })();\n    }\n\n    onVaultError(error) {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        if (error.code == 8 || error.code == 13) {\n          _this2.ngZone.run(() => {\n            _this2.router.navigateByUrl('landing');\n          });\n        }\n      })();\n    }\n\n    isFaceIDAvailableOnDevice() {\n      return _asyncToGenerator(function* () {\n        const isBiometricSupport = yield Device.isBiometricsSupported();\n        const isBiometricEnabled = yield Device.isBiometricsEnabled();\n\n        if (isBiometricSupport && isBiometricEnabled) {\n          return true;\n        } else {\n          return false;\n        }\n      })();\n    }\n\n    setDefaultFaceIDDisabled(flag) {\n      localStorage.setItem(DEFAULT_FACEID_DISABLED, flag.toString());\n    }\n\n    defaultFaceIDDisabled() {\n      return localStorage.getItem(DEFAULT_FACEID_DISABLED) === 'true';\n    }\n\n    enableFaceID() {\n      var _this3 = this;\n\n      return _asyncToGenerator(function* () {\n        if (yield _this3.isFaceIDAvailableOnDevice()) {\n          yield _this3.vault.updateConfig(biometricsVaultConfig);\n          localStorage.setItem(VAULT_CONFIG_KEY, JSON.stringify(biometricsVaultConfig));\n          return true;\n        }\n\n        return false;\n      })();\n    }\n\n    disableFaceID() {\n      var _this4 = this;\n\n      return _asyncToGenerator(function* () {\n        yield _this4.vault.updateConfig(defaultVaultConfig);\n        localStorage.setItem(VAULT_CONFIG_KEY, JSON.stringify(defaultVaultConfig));\n      })();\n    }\n\n    clearVault() {\n      var _this5 = this;\n\n      return _asyncToGenerator(function* () {\n        yield _this5.vault.clear();\n      })();\n    }\n\n    isFaceIDEnabled() {\n      const vaultConfig = JSON.parse(localStorage.getItem(VAULT_CONFIG_KEY));\n\n      if (!vaultConfig) {\n        return false;\n      }\n\n      return vaultConfig.type === VaultType.DeviceSecurity;\n    }\n\n    isLocked() {\n      return this.vault.isLocked();\n    }\n\n    lockVault() {\n      var _this6 = this;\n\n      return _asyncToGenerator(function* () {\n        yield _this6.vault.lock();\n      })();\n    }\n\n    unlockVault() {\n      var _this7 = this;\n\n      return _asyncToGenerator(function* () {\n        yield _this7.vault.unlock();\n      })();\n    }\n\n    hasStoredSession() {\n      return this.vault.doesVaultExist();\n    }\n\n  }\n\n  VaultService.ɵfac = function VaultService_Factory(t) {\n    return new (t || VaultService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i0.NgZone));\n  };\n\n  VaultService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: VaultService,\n    factory: VaultService.ɵfac,\n    providedIn: 'root'\n  });\n  return VaultService;\n})();","map":null,"metadata":{},"sourceType":"module"}