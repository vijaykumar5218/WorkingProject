{"ast":null,"code":"define([], function () {\n  //  Constructor\n  var Loan = function () {\n    var that = this;\n    this.__ALIGNED = false;\n    this._loanId = \"\";\n    this._loanType = Loan.LOANTYPE_GENERAL;\n    this._orientation = Loan.ORIENTATION_MONTHLY; // the orientation of term, that is, term is expressed in x increments per annum (default is monthly or 12)\n\n    this._term = 1; // the loan term according to \"orientation\" (term in monthly orientation = num of months repayment)\n\n    this._frequency = this._orientation; // the actual payment frequency of participant; default is per orientation\n\n    this._numOfPayments = 0; // the total number of payments to term\n\n    this._appliedPrincipal = null; // array\n\n    this._appliedInterest = null; // array\n\n    this._remainingPrincipal = null; // array\n\n    this._remainingInterest = null; // array\n\n    this._payment = null; // array\n\n    this._originatingLoanAmount = 0.;\n    this._functionalLoanAmount = 0.;\n    this._specifiedPayment = 0.;\n    this._initialFee = 0.;\n    this._annualFee = 0.;\n    this._totalPrincipal = 0.;\n    this._totalPayments = 0.;\n    this._totalInterest = 0.;\n    this._totalAnnualFees = 0.;\n    this._daysOfUpFrontInterest = 0;\n    this._rate = 0.; // annual\n\n    this._solveType = Loan.LOANSOLVEFOR_NONE;\n    this._interestType = Loan.INTEREST_TYPE_SIMPLE;\n\n    this.initPaymentInstance = function (orientation, annualRate, paymentFrequency, term, loanAmount) {\n      this.setOrientation(orientation);\n      this.setRate(annualRate);\n      this.setFrequency(paymentFrequency);\n      this.setTerm(term);\n      this.setLoanAmount(loanAmount);\n      this.setSolveType(Loan.LOANSOLVEFOR_PAYMENT);\n      this.markNotAligned();\n    };\n\n    this.initTermInstance = function (orientation, annualRate, paymentFrequency, loanAmount, payment) {\n      this.setOrientation(orientation);\n      this.setRate(annualRate);\n      this.setFrequency(paymentFrequency);\n      this.setLoanAmount(loanAmount);\n      this.setSpecifiedPayment(payment);\n      this.setSolveType(Loan.LOANSOLVEFOR_TERM);\n      this.markNotAligned();\n    };\n\n    this.initLoanAmountInstance = function (orientation, annualRate, paymentFrequency, term, payment) {\n      this.setOrientation(orientation);\n      this.setRate(annualRate);\n      this.setTerm(term);\n      this.setFrequency(paymentFrequency);\n      this.setSpecifiedPayment(payment);\n      this.setSolveType(Loan.LOANSOLVEFOR_AMOUNT);\n      this.markNotAligned();\n    };\n\n    this.initPaymentInstanceForExistingLoan = function (orientation, annualRate, paymentFrequency, existingLoanBalanceAmount, daysDiff) {\n      this.setOrientation(orientation);\n      this.setRate(annualRate);\n      this.setFrequency(paymentFrequency);\n      this.setTerm(Loan.duration(daysDiff, orientation, Loan.ORIENTATION_DAYLY)); //this.setTerm( term ) ;\n\n      this.setLoanAmount(existingLoanBalanceAmount);\n      this.setSolveType(Loan.LOANSOLVEFOR_PAYMENT);\n      this.markNotAligned();\n    }; // Begin Setter methods\n\n\n    this.setLoanType = function (n) {\n      this._loanType = n;\n    };\n\n    this.setLoanId = function (s) {\n      this._loanId = s;\n    };\n\n    this.setLoanAmount = function (d) {\n      if (this._solveType == Loan.LOANSOLVEFOR_AMOUNT) {\n        this.markNotAligned();\n        this._solveType = Loan.LOANSOLVEFOR_PAYMENT;\n      }\n\n      if (d != this._originatingLoanAmount) {\n        this.markNotAligned();\n        this._originatingLoanAmount = d;\n      }\n    };\n\n    this.setSpecifiedPayment = function (d) {\n      if (this._solveType == Loan.LOANSOLVEFOR_PAYMENT) {\n        this.markNotAligned();\n        this._solveType = Loan.LOANSOLVEFOR_AMOUNT;\n      }\n\n      if (d != this._specifiedPayment) {\n        this.markNotAligned();\n        this._specifiedPayment = d;\n      }\n    };\n\n    this.setPayment = function (n, d) {\n      align();\n      this._solveType = Loan.LOANSOLVEFOR_NONE;\n\n      if (n > -1 && n < this._payment.length) {\n        if (d != this.payment[n]) {\n          this.markNotAligned();\n          this.payment[n] = d;\n        }\n      }\n    };\n\n    this.setDaysOfUpFrontInterest = function (n) {\n      if (n != this._daysOfUpFrontInterest) {\n        this.markNotAligned();\n        this._daysOfUpFrontInterest = Math.max(n, 0);\n      }\n    };\n\n    this.setOrientation = function (n) {\n      if (n != this._orientation) {\n        this.markNotAligned();\n\n        if (n < 1) {\n          this._orientation = 1;\n        } else {\n          this._orientation = n;\n        }\n      }\n    };\n\n    this.setFrequency = function (n) {\n      if (n != this._frequency) {\n        this.markNotAligned();\n\n        if (n < 1) {\n          this._frequency = 1;\n        } else {\n          this._frequency = n;\n        }\n      }\n    };\n\n    this.setTerm = function (n) {\n      if (this._solveType == Loan.LOANSOLVEFOR_TERM) {\n        this.markNotAligned();\n        this._solveType = Loan.LOANSOLVEFOR_PAYMENT;\n      }\n\n      if (n != this._term) {\n        this.markNotAligned();\n\n        if (n < 1) {\n          this._term = 1;\n        } else {\n          this._term = n;\n        }\n      }\n    };\n\n    this.setRate = function (d) {\n      if (d != this._rate) {\n        this.markNotAligned();\n        this._rate = d;\n      }\n    };\n\n    this.setInitialFee = function (d) {\n      if (d != this._initialFee) {\n        this.markNotAligned();\n        this._initialFee = d;\n      }\n    };\n\n    this.setAnnualFee = function (d) {\n      if (d != this._annualFee) {\n        this.markNotAligned();\n        this._annualFee = d;\n      }\n    };\n\n    this.setInterestType = function (n) {\n      if (n != this._interestType) {\n        this.markNotAligned();\n        this._interestType = n;\n      }\n    };\n\n    this.setInterestTypeToAER = function () {\n      if (Loan.INTEREST_TYPE_AER != this._interestType) {\n        this.markNotAligned();\n        this._interestType = Loan.INTEREST_TYPE_AER;\n      }\n    };\n\n    this.setInterestTypeToSimple = function () {\n      if (Loan.INTEREST_TYPE_SIMPLE != this._interestType) {\n        this.markNotAligned();\n        this._interestType = Loan.INTEREST_TYPE_SIMPLE;\n      }\n    }; // End Setter methods\n    // Begin Getter methods\n\n\n    this.getLoanType = function () {\n      return this._loanType;\n    };\n\n    this.getLoanId = function () {\n      return this._loanId;\n    };\n\n    this.getNumOfPayments = function () {\n      align();\n      return this._numOfPayments;\n    };\n\n    this.getOrientation = function () {\n      return this._orientation;\n    };\n\n    this.getOrientationAsLabel = function () {\n      return Loan.modeToLabel(this._orientation);\n    };\n\n    this.getTerm = function () {\n      align();\n      return this._term;\n    };\n\n    this.getRate = function () {\n      return this._rate;\n    };\n\n    this.getTotalFees = function () {\n      align();\n      return Loan.roundAndTruncate(this._initialFee, 2) + Loan.roundAndTruncate(this._totalAnnualFees, 2);\n    };\n\n    this.getTotalAnnualFees = function () {\n      align();\n      return Loan.roundAndTruncate(this._totalAnnualFees, 2);\n    };\n\n    this.getTotalPrincipal = function () {\n      align();\n      return Loan.roundAndTruncate(this._totalPrincipal, 2);\n    };\n\n    this.getTotalInterest = function () {\n      align(); //return( Loan.roundAndTruncate( this._totalInterest, 2 ) ) ;\n\n      return Loan.roundAndTruncate(this._totalPayments - this._totalPrincipal, 2);\n    };\n\n    this.getTotalPayments = function () {\n      align();\n      return Loan.roundAndTruncate(this._totalPayments, 2);\n    };\n\n    this.getTotalCost = function () {\n      align();\n      return Loan.roundAndTruncate(this.getTotalFees() + this.getTotalInterest() + this.getTotalPrincipal(), 2);\n    };\n\n    this.getDaysOfUpFrontInterest = function () {\n      return this._daysOfUpFrontInterest;\n    };\n\n    this.getRemainingPrincipal = function (p) {\n      align();\n      var d = p > -1 && p < this._remainingPrincipal.length ? this._remainingPrincipal[p] : 0.0;\n      return d;\n    };\n\n    this.getRemainingInterest = function (p) {\n      align();\n      var d = p > -1 && p < this._remainingInterest.length ? this._remainingInterest[p] : 0.0;\n      return d;\n    };\n\n    this.getAppliedPrincipal = function (p) {\n      align();\n      var d = p > -1 && p < this._appliedPrincipal.length ? this._appliedPrincipal[p] : 0.0;\n    };\n\n    this.getAppliedInterest = function (p) {\n      align();\n      var d = p > -1 && p < this._appliedInterest.length ? this._appliedInterest[p] : 0.0;\n      return d;\n    };\n\n    this.getPayment = function (p) {\n      align();\n      var d = p > -1 && p < this._payment.length ? this._payment[p] : 0.0;\n      return d;\n    };\n\n    this.getYear = function (p) {\n      // year index\n      return this._frequency != 0 ? Math.floor(p / this._frequency) : 0;\n    };\n\n    this.getBalance = function (p) {\n      return this.getRemainingPrincipal(p) + this.getRemainingInterest(p);\n    };\n\n    this.getLoanAmount = function () {\n      align();\n      return this._originatingLoanAmount;\n    };\n\n    this.getFunctionalLoanAmount = function () {\n      align();\n      return this._functionalLoanAmount;\n    };\n\n    this.getSpecifiedPayment = function () {\n      align();\n      return this._specifiedPayment;\n    };\n\n    this.getInitialFee = function () {\n      return this._initialFee;\n    };\n\n    this.getAnnualFee = function () {\n      return this._annualFee;\n    };\n\n    this.getFrequency = function () {\n      return this._frequency;\n    };\n\n    this.getFrequencyAsLabel = function () {\n      return Loan.modeToLabel(this._frequency);\n    };\n\n    this.getInterestType = function () {\n      return this._interestType;\n    }; // End Getter methods\n    // Begin dirty check\n\n\n    this.aligned = function () {\n      return this.__ALIGNED;\n    };\n\n    this.notAligned = function () {\n      return !this.__ALIGNED;\n    };\n\n    this.markNotAligned = function () {\n      this.__ALIGNED = false;\n    };\n\n    this.markAligned = function () {\n      this.__ALIGNED = true;\n    };\n\n    this.setSolveType = function (n) {\n      that._solveType = n;\n    }; // End dirty check\n    // Other methods\n\n\n    function align() {\n      if (that.notAligned()) {\n        var modalRate = Loan._getModalRate(that._frequency, that._rate, that._interestType);\n\n        var dailyRate = Loan._getModalRate(Loan.ORIENTATION_DAYLY, that._rate, Loan.INTEREST_TYPE_AER); // modify for up front interest\n\n\n        that._functionalLoanAmount = that._originatingLoanAmount + Loan.roundAndTruncate(that._originatingLoanAmount * (Math.pow(1.0 + dailyRate, that._daysOfUpFrontInterest) - 1.0), 2);\n\n        switch (that._solveType) {\n          case Loan.LOANSOLVEFOR_TERM:\n            that._numOfPayments = Loan.roundAndTruncate(Loan.term(that._specifiedPayment, modalRate, that._functionalLoanAmount), 0);\n\n            if (isNaN(that._numOfPayments)) {\n              that._numOfPayments = that._frequency * 50; // place holder number of years when specified payment is zero\n              //that._specifiedPayment = 0 ;\n            }\n\n            that._term = Loan.duration(that._numOfPayments, that._orientation, that._frequency);\n            that._payment = new Array(that._numOfPayments);\n\n            for (var n = 0; n < that._numOfPayments; n++) {\n              that._payment[n] = that._specifiedPayment;\n            }\n\n            break;\n\n          case Loan.LOANSOLVEFOR_PAYMENT:\n            that._numOfPayments = Loan.numOfPayments(that._term, that._orientation, that._frequency);\n            var temp = Loan.payment(that._functionalLoanAmount, modalRate, that._numOfPayments); // n.b. for matching pweb...\n\n            that._specifiedPayment = Loan.specialRoundAndTruncate(temp, 2);\n            that._payment = new Array(that._numOfPayments);\n\n            for (var n = 0; n < that._numOfPayments; n++) {\n              that._payment[n] = that._specifiedPayment;\n            }\n\n            break;\n\n          case Loan.LOANSOLVEFOR_AMOUNT:\n            that._numOfPayments = Loan.numOfPayments(that._term, that._orientation, that._frequency);\n            that._functionalLoanAmount = Loan.roundAndTruncate(Loan.loanAmount(that._specifiedPayment, modalRate, that._numOfPayments), 2); // modify for up front interest\n\n            that._originatingLoanAmount = Loan.roundAndTruncate(that._functionalLoanAmount * Math.pow(1.0 / (1.0 + dailyRate), that._daysOfUpFrontInterest), 2);\n            that._payment = new Array(that._numOfPayments);\n\n            for (var n = 0; n < that._numOfPayments; n++) {\n              that._payment[n] = that._specifiedPayment;\n            }\n\n            break;\n\n          case Loan.LOANSOLVEFOR_NONE:\n            break;\n        }\n\n        that._remainingPrincipal = new Array(that._numOfPayments);\n        that._remainingInterest = new Array(that._numOfPayments);\n        that._appliedPrincipal = new Array(that._numOfPayments);\n        that._appliedInterest = new Array(that._numOfPayments);\n        that._totalPrincipal = 0.0;\n        that._totalPayments = 0.0;\n        that._totalInterest = 0.0;\n        that._totalAnnualFees = 0.0;\n        var tPrincipal = 0.;\n        var tInterest = 0.;\n        var tPayment = 0.;\n\n        for (var n = 0; n < that._numOfPayments; n++) {\n          //\n          tPrincipal = n == 0 ? that._functionalLoanAmount : that._remainingPrincipal[n - 1];\n          tInterest = n == 0 ? 0. : that._remainingInterest[n - 1];\n          tPayment = that._payment[n]; // establish interest\n\n          tInterest += (tInterest + tPrincipal) * modalRate; // n.b.\n\n          if (tInterest > tPayment) {\n            that._appliedInterest[n] = tPayment;\n            that._appliedPrincipal[n] = 0.;\n            that._remainingInterest[n] = tInterest - tPayment;\n            that._remainingPrincipal[n] = tPrincipal;\n          } else {\n            tPrincipal -= tPayment - tInterest;\n            that._appliedInterest[n] = tInterest;\n            that._remainingInterest[n] = 0.;\n\n            if (tPrincipal < 0.) {\n              that._appliedPrincipal[n] = tPayment - tInterest + tPrincipal;\n              that._appliedInterest[n] += tPrincipal;\n              that._remainingPrincipal[n] = 0.;\n            } else {\n              that._appliedPrincipal[n] = tPayment - tInterest;\n              that._remainingPrincipal[n] = tPrincipal;\n\n              if (n == that._numOfPayments - 1) {\n                that._appliedPrincipal[n] += that._remainingPrincipal[n];\n                that._remainingPrincipal[n] = 0.;\n              }\n            }\n          }\n\n          that._totalPrincipal += that._appliedPrincipal[n];\n          that._totalPayments += that._payment[n];\n          that._totalInterest += that._appliedInterest[n];\n          that._totalAnnualFees += n % that._frequency == 0 && n > 0 ? that._annualFee : 0.;\n        }\n\n        that.markAligned();\n      }\n    }\n\n    ;\n  };\n\n  Loan.payment = function (amount, rate, duration) {\n    return amount * (rate / (1.0 - Math.pow(1.0 + rate, duration * -1.))); //equivalent  return( amount * ( rate / ( 1.0 - ( 1.0 / Math.pow ( 1.0 + rate, duration ) ) ) ) ) ;\n  };\n\n  Loan.loanAmount = function (payment, rate, duration) {\n    return payment * ((1.0 - Math.pow(1.0 + rate, duration * -1.)) / rate); //NOT equivalent!!  return( payment / rate / ( 1.0 - ( 1.0 / Math.pow( 1.0 + rate, duration ) ) ) ) ;\n  };\n\n  Loan.term = function (payment, rate, amount) {\n    return -Math.log(1.0 - amount * rate / payment) / Math.log(1.0 + rate);\n  }; // calculate number of payments to term (duration) of orientation (base) given pay period frequency (frequency)\n\n\n  Loan.numOfPayments = function (duration, base, frequency) {\n    return base > 0 ? Loan.roundAndTruncate(duration * frequency / base, 0) : 0; //return( ( base > 0 ) ? ( Math.ceil( ( ( duration * frequency ) / base ) ) ) : 0 ) ;\n  }; // calculate term or loan duration according to orientation (base) given the number of payments (numOf) of pay period frequency (frequency)\n\n\n  Loan.duration = function (numOf, base, frequency) {\n    return frequency > 0 ? Loan.roundAndTruncate(numOf * base / frequency, 0) : 0; //return( ( frequency > 0 ) ? ( Math.ceil( ( ( numOf * base ) / frequency ) ) ) : 0 ) ;\n  };\n\n  Loan.getModalRate = function (modalPeriods, rateOfReturn) {\n    return Loan._getModalRate(modalPeriods, rateOfReturn, 0);\n  };\n\n  Loan._getModalRate = function (modalPeriods, rateOfReturn, type) {\n    var retValue = 0.;\n\n    if (modalPeriods > 0.) {\n      switch (type) {\n        case Loan.INTEREST_TYPE_AER:\n          retValue = Math.pow(1.0 + rateOfReturn, 1.0 / modalPeriods) - 1.0; // annual effective rate\n\n          break;\n\n        case Loan.INTEREST_TYPE_SIMPLE:\n        default:\n          retValue = rateOfReturn / modalPeriods; // generic method  (Melissa's)\n\n          break;\n      }\n    }\n\n    return retValue;\n  };\n\n  Loan.getPaymentFrequencyInDays = function (payFrequency) {\n    var retValue = 30;\n\n    switch (payFrequency) {\n      case Loan.ORIENTATION_QUARTERLY:\n        retValue = 90;\n        break;\n\n      default:\n        retValue = Math.floor(Loan.ORIENTATION_DAYLY / payFrequency);\n        break;\n    }\n\n    return retValue;\n  };\n\n  Loan.roundAndTruncate = function (number, decimals) {\n    // round and truncate\n    var interim = 0.0;\n    var decimalFactor = Math.pow(10.0, decimals); // round\n\n    number += 0.500000001 / decimalFactor; // truncate\n\n    number *= decimalFactor;\n    interim = Math.floor(number);\n    return interim / decimalFactor;\n  };\n\n  Loan.round = function (number, decimals) {\n    // rounding only\n    if (decimals < 0) {\n      decimals = 0;\n    }\n\n    return number + 0.500000001 / Math.pow(10.0, decimals);\n  };\n\n  Loan.truncate = function (number, decimals) {\n    var interim = 0.0;\n    var decimalFactor = Math.pow(10.0, decimals); // truncate\n\n    number *= decimalFactor;\n    interim = Math.floor(number);\n    return interim / decimalFactor;\n  };\n\n  Loan.specialRoundAndTruncate = function (number, decimals) {\n    var ret = 0.0;\n    var decimalFactor = Math.pow(10.0, decimals);\n    number *= decimalFactor;\n    var high = Math.ceil(number);\n    var low = Math.floor(number);\n\n    if (number - low > 0.499) {\n      // adjust this to target pweb rounding\n      ret = high / decimalFactor;\n    } else {\n      ret = low / decimalFactor;\n    }\n\n    return ret;\n  };\n\n  Loan.modeToLabel = function (mode) {\n    var ret = \"\" + mode;\n\n    switch (mode) {\n      case Loan.ORIENTATION_MONTHLY:\n        ret = \"Monthly\";\n        break;\n\n      case Loan.ORIENTATION_YEARLY:\n        ret = \"Yearly\";\n        break;\n\n      case Loan.ORIENTATION_WEEKLY:\n        ret = \"Weekly\";\n        break;\n\n      case Loan.ORIENTATION_DAYLY:\n        ret = \"Dayly\";\n        break;\n\n      case Loan.ORIENTATION_QUARTERLY:\n        ret = \"Quarterly\";\n        break;\n\n      case Loan.ORIENTATION_FORTNIGHTLY:\n        ret = \"Bi-Weekly\"; //ret = \"Fortnightly\" ;\n\n        break;\n\n      case Loan.ORIENTATION_BIFORTNIGHTLY:\n        ret = \"Bi-Fortnightly\";\n        break;\n\n      case Loan.ORIENTATION_HALFMONTHLY:\n        ret = \"Semi-Monthly\";\n        break;\n\n      case Loan.ORIENTATION_BIMONTHLY:\n        ret = \"Bi-Monthly\";\n        break;\n\n      case Loan.ORIENTATION_SEMIANNUALLY:\n        ret = \"Semi-Annually\";\n        break;\n\n      default:\n        ret = \"\" + mode + \" times per year\";\n        break;\n    }\n\n    return ret;\n  };\n\n  Loan.labelToMode = function (s) {\n    var ret = Loan.ORIENTATION_MONTHLY;\n    s = s.toUpperCase().trim();\n    var isBI = s.indexOf(\"BI\") > -1 || s.indexOf(\"HALF\") > -1 || s.indexOf(\"SEMI\") > -1 || s.indexOf(\"TWICE\") > -1;\n\n    if (s.indexOf(\"MONTH\") > -1) {\n      ret = isBI ? Loan.ORIENTATION_HALFMONTHLY : Loan.ORIENTATION_MONTHLY;\n      ret = s.indexOf(\"BI\") > -1 ? Loan.ORIENTATION_BIMONTHLY : ret;\n    } else {\n      if (s.indexOf(\"WEEK\") > -1) {\n        ret = isBI ? Loan.ORIENTATION_FORTNIGHTLY : Loan.ORIENTATION_WEEKLY;\n      } else {\n        if (s.indexOf(\"YEAR\") > -1 || s.indexOf(\"ANNUAL\") > -1) {\n          ret = isBI ? Loan.ORIENTATION_SEMIANNUALLY : Loan.ORIENTATION_YEARLY;\n        } else {\n          if (s.indexOf(\"FORT\") > -1) {\n            ret = isBI ? Loan.ORIENTATION_BIFORTNIGHTLY : Loan.ORIENTATION_FORTNIGHTLY;\n          } else {\n            if (s.indexOf(\"QUART\") > -1) {\n              ret = Loan.ORIENTATION_QUARTERLY;\n            } else {\n              if (s.indexOf(\"DAY\") > -1) {\n                ret = Loan.ORIENTATION_DAYLY;\n              } else {\n                try {\n                  ret = Integer.parseInt(s.substring(0, 2));\n                } catch (e) {\n                  ret = Loan.ORIENTATION_MONTHLY;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return ret;\n  }; //};\n\n\n  Loan.ORIENTATION_MONTHLY = 12;\n  Loan.ORIENTATION_YEARLY = 1;\n  Loan.ORIENTATION_WEEKLY = 52;\n  Loan.ORIENTATION_DAYLY = 365;\n  Loan.ORIENTATION_QUARTERLY = 4;\n  Loan.ORIENTATION_FORTNIGHTLY = 26;\n  Loan.ORIENTATION_BIFORTNIGHTLY = 13;\n  Loan.ORIENTATION_BIMONTHLY = 6;\n  Loan.ORIENTATION_HALFMONTHLY = 24;\n  Loan.ORIENTATION_SEMIANNURALLY = 1; // \"solve for\" flag\n\n  Loan.LOANSOLVEFOR_NONE = 0;\n  Loan.LOANSOLVEFOR_TERM = 1;\n  Loan.LOANSOLVEFOR_PAYMENT = 2;\n  Loan.LOANSOLVEFOR_AMOUNT = 3;\n  Loan.INTEREST_TYPE_SIMPLE = 0;\n  Loan.INTEREST_TYPE_AER = 1;\n  Loan.LOANTYPE_GENERAL = 0;\n  Loan.LOANTYPE_RESIDENTIAL = 1;\n  return Loan;\n});","map":null,"metadata":{},"sourceType":"script"}