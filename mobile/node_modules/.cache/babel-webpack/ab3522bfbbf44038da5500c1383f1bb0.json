{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { ValidationType } from '@shared-lib/services/journey/constants/validationType.enum';\nimport * as i0 from \"@angular/core\";\nexport let ValidationDirective = /*#__PURE__*/(() => {\n  class ValidationDirective {\n    constructor() {\n      this.ngModelChange = new EventEmitter();\n    }\n\n    onInput(event) {\n      this.clean(event.target);\n    }\n\n    onIonInput(event) {\n      this.clean(event.target);\n    }\n\n    onFocusOut(event) {\n      this.ngModelChange.emit(this.validateMin(event.target));\n    }\n\n    clean(element) {\n      var _a, _b;\n\n      let cleanedValue = element.value ? element.value.toString() : '';\n\n      if (cleanedValue) {\n        cleanedValue = this.cleanNumber(cleanedValue);\n      }\n\n      if (((_b = (_a = this.input) === null || _a === void 0 ? void 0 : _a.validationRules) === null || _b === void 0 ? void 0 : _b.type) === ValidationType.dollar) {\n        cleanedValue = '$' + cleanedValue;\n      }\n\n      element.value = cleanedValue;\n      this.ngModelChange.emit(element.value);\n    }\n\n    cleanNumber(value) {\n      var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n\n      let cleanedValue = value;\n\n      if (((_b = (_a = this.input) === null || _a === void 0 ? void 0 : _a.validationRules) === null || _b === void 0 ? void 0 : _b.type) === ValidationType.number || ((_d = (_c = this.input) === null || _c === void 0 ? void 0 : _c.validationRules) === null || _d === void 0 ? void 0 : _d.type) === ValidationType.dollar || ((_f = (_e = this.input) === null || _e === void 0 ? void 0 : _e.validationRules) === null || _f === void 0 ? void 0 : _f.type) === ValidationType.percentage) {\n        cleanedValue = cleanedValue.replace(/[^0-9.]+/g, '');\n        const decimalPlaces = ((_g = this.input.validationRules) === null || _g === void 0 ? void 0 : _g.decimalPlaces) || 0;\n\n        if (decimalPlaces === 0) {\n          cleanedValue = parseFloat(cleanedValue);\n\n          if (isNaN(cleanedValue)) {\n            cleanedValue = '';\n          } else if (decimalPlaces === 0) {\n            cleanedValue = Math.floor(cleanedValue);\n          }\n        } else {\n          cleanedValue = this.cleanDecimalValue(cleanedValue, decimalPlaces);\n        }\n      } else if (((_j = (_h = this.input) === null || _h === void 0 ? void 0 : _h.validationRules) === null || _j === void 0 ? void 0 : _j.type) === ValidationType.alphabeticWithSpace) {\n        cleanedValue = cleanedValue.replace(/[^A-Za-z ]/g, '');\n      }\n\n      if (typeof cleanedValue === 'number') {\n        cleanedValue = this.validateMax(cleanedValue);\n      }\n\n      return cleanedValue.toString();\n    }\n\n    cleanDecimalValue(cleanedValue, decimalPlaces) {\n      const cleanedValueDecimalSplit = cleanedValue.split('.');\n      cleanedValue = cleanedValueDecimalSplit[0];\n\n      if (cleanedValueDecimalSplit[1] !== undefined) {\n        cleanedValue = cleanedValue + '.' + cleanedValueDecimalSplit[1].substring(0, decimalPlaces);\n      }\n\n      if (cleanedValue != '') {\n        const valueAsNum = parseFloat(cleanedValue);\n        const maxValidatedValue = this.validateMax(valueAsNum);\n\n        if (maxValidatedValue !== valueAsNum) {\n          cleanedValue = maxValidatedValue.toString();\n        }\n      }\n\n      return cleanedValue;\n    }\n\n    validateMax(value) {\n      var _a, _b;\n\n      const max = (_b = (_a = this.input) === null || _a === void 0 ? void 0 : _a.validationRules) === null || _b === void 0 ? void 0 : _b.max;\n\n      if (max && value > max) {\n        value = max;\n      }\n\n      return value;\n    }\n\n    validateMin(element) {\n      var _a, _b;\n\n      const min = (_b = (_a = this.input) === null || _a === void 0 ? void 0 : _a.validationRules) === null || _b === void 0 ? void 0 : _b.min;\n\n      if (min && parseFloat(element.value) < min) {\n        element.value = min.toString();\n      }\n\n      return element.value;\n    }\n\n  }\n\n  ValidationDirective.ɵfac = function ValidationDirective_Factory(t) {\n    return new (t || ValidationDirective)();\n  };\n\n  ValidationDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: ValidationDirective,\n    selectors: [[\"\", \"journeysValidation\", \"\"]],\n    hostBindings: function ValidationDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"input\", function ValidationDirective_input_HostBindingHandler($event) {\n          return ctx.onInput($event);\n        })(\"ionInput\", function ValidationDirective_ionInput_HostBindingHandler($event) {\n          return ctx.onIonInput($event);\n        })(\"focusout\", function ValidationDirective_focusout_HostBindingHandler($event) {\n          return ctx.onFocusOut($event);\n        });\n      }\n    },\n    inputs: {\n      input: \"input\"\n    },\n    outputs: {\n      ngModelChange: \"ngModelChange\"\n    }\n  });\n  return ValidationDirective;\n})();","map":null,"metadata":{},"sourceType":"module"}