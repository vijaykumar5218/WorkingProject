{"ast":null,"code":"define(['./EmployerMatchWrapper', '../../Utilities', './DateTier'], function (EmployerMatchWrapper, Utilities, DateTier) {\n  //  Constructor\n  var DateTierERMatch = Utilities.extend(EmployerMatchWrapper, function () {\n    //  Private var declarations ------------------------------------\n    var that = this;\n    var _dAnnualMaxContrib = 0;\n    var _alDateTiers = null; //  Privileged Method Declarations ------------------------------------\n\n    this.addTier = function (nPayPeriods, sCurrentYYYYMMDD, sTierDateYYYYMMDD, dRangeOfSalary, dRateOfMatch) {\n      var dt = new DateTier(); //  dt:DateTier\n\n      dt.set(nPayPeriods, sCurrentYYYYMMDD, sTierDateYYYYMMDD, dRangeOfSalary, dRateOfMatch);\n\n      _alDateTiers.push(dt);\n    };\n\n    this.setAnnualMaxContrib = function (d) {\n      if (_dAnnualMaxContrib != d) {\n        _dAnnualMaxContrib = d;\n      }\n    };\n\n    this.sort = function () {\n      var bChanged = true;\n\n      while (bChanged) {\n        var o = [];\n        var dth; //  DateTier\n\n        var dtl; //  DateTier\n\n        bChanged = false;\n\n        for (var n = _alDateTiers.length - 1; n > 0; n--) {\n          o = _alDateTiers;\n          dth = o[n];\n          dtl = o[n - 1];\n\n          if (dtl.nYearOffset > dth.nYearOffset || dtl.nYearOffset == dth.nYearOffset && dtl.nPayPeriodOffset > dth.nPayPeriodOffset) {\n            _alDateTiers[n] = dtl;\n            _alDateTiers[n - 1] = dth;\n            bChanged = true;\n          } else {\n            if (dtl.nYearOffset === 0 && dth.nYearOffset === 0 && dtl.nPayPeriodOffset === 0 && dth.nPayPeriodOffset === 0) {\n              if (dtl.em.getTierMatchRate(1) > dth.em.getTierMatchRate(1)) {\n                _alDateTiers[n] = dtl;\n                _alDateTiers[n - 1] = dth;\n                bChanged = true;\n              }\n            }\n          }\n        }\n      }\n    };\n\n    this.getEmployerContrib = function (dModalEeContrib, dAnnualEeContribAscribed, dAnnualSalary, nPayPeriods, _nYearOffset, _nPayPeriodOffset) {\n      var nYearOffset = _nYearOffset || 0;\n      var nPayPeriodOffset = _nPayPeriodOffset || 0;\n      var dReturn = 0;\n      nPayPeriods = Math.max(nPayPeriods, 1);\n      var dMatchingContribThreshold = 0;\n      var o = _alDateTiers;\n      var dt; // 1. step backward through the array\n\n      for (var n = o.length - 1; n > -1; n--) {\n        dt = o[n];\n        dMatchingContribThreshold = dt.em.getTierMatchRange(1) * dAnnualSalary / nPayPeriods;\n        dMatchingContribThreshold -= dAnnualEeContribAscribed / nPayPeriods;\n        dMatchingContribThreshold = Math.max(dMatchingContribThreshold, 0); // 2. if (years).(pay period) > (array.years).(array.payperiod) then...\n\n        if (nYearOffset > dt.nYearOffset) {\n          // 3. calculate match\n          dReturn = Math.min(dModalEeContrib, dMatchingContribThreshold) * dt.em.getTierMatchRate(1);\n          break;\n        }\n\n        if (nYearOffset == dt.nYearOffset && nPayPeriodOffset >= dt.nPayPeriodOffset) {\n          dReturn = Math.min(dModalEeContrib, dMatchingContribThreshold) * dt.em.getTierMatchRate(1);\n          break;\n        }\n      } // check against annual max\n\n\n      dReturn = _dAnnualMaxContrib > 0 ? Math.min(_dAnnualMaxContrib / nPayPeriods, dReturn) : dReturn;\n      return dReturn;\n    };\n\n    this.reset = function () {\n      if (_alDateTiers === null) _alDateTiers = new Array();else _alDateTiers = [];\n    }; //  Private Method Declarations ------------------------------------\n\n\n    (function init() {\n      _alDateTiers = new Array();\n      that.setAnnualMaxContrib(0);\n      that.setCalcPeriodicity(EmployerMatchWrapper.ERMATCHCALC_MODAL);\n    })();\n  }); //  Public Method Declarations ------------------------------------\n\n  DateTierERMatch.prototype.modifyEeContrib = function (dModalEeContrib, dAnnualSalary, nPayPeriods) {\n    // no change\n    return dModalEeContrib;\n  };\n\n  return DateTierERMatch;\n});","map":null,"metadata":{},"sourceType":"script"}