{"ast":null,"code":"define(['./OMCalculator', './ObjFactory', './OMCalculatorResponse', './util/CalcUtilities', './util/DateUtilities', './util/employermatch/ERMatchFactory', './util/employermatch/ERMatchTypes', './util/employermatch/StandardERMatch', './util/employermatch/DateTierERMatch', './util/employermatch/CustomERMatch', './SettleCommon', './OMValidatorResponse', './LimitUtilities', './util/ResponseSerializer', './util/employermatch/MandatoryERMatch', './annuityRate/AnnuityMonthlyBenefit', './IRSConstants', './IncomeTypes', './AccountTypes', './OMObjFactory', './IRSwh'], function (OMCalculator, ObjFactory, OMCalculatorResponse, CalcUtilities, DateUtilities, ERMatchFactory, ERMatchTypes, StandardERMatch, DateTierERMatch, CustomERMatch, SettleCommon, OMValidatorResponse, LimitUtilities, ResponseSerializer, MandatoryERMatch, AnnuityMonthlyBenefit, IRSConstants, IncomeTypes, AccountTypes, OMObjFactory, IRSwh) {\n  var _serializer = new ResponseSerializer();\n\n  var _request;\n\n  var OMCalcWrapper = function (data, preSerialized) {\n    this.reserialize(data, preSerialized);\n  }; //  ------------------------------------------------------------------------------\n  //  ----------------------  PUBLIC METHODS ---------------------------------------\n  //\n\n\n  OMCalcWrapper.prototype.reserialize = function (data, preSerialized) {\n    if (preSerialized) {\n      AnnuityMonthlyBenefit.setMultiple([{\n        \"age\": 18,\n        \"factor\": 2.49\n      }, {\n        \"age\": 19,\n        \"factor\": 2.50\n      }, {\n        \"age\": 20,\n        \"factor\": 2.52\n      }, {\n        \"age\": 21,\n        \"factor\": 2.53\n      }, {\n        \"age\": 22,\n        \"factor\": 2.55\n      }, {\n        \"age\": 23,\n        \"factor\": 2.57\n      }, {\n        \"age\": 24,\n        \"factor\": 2.59\n      }, {\n        \"age\": 25,\n        \"factor\": 2.61\n      }, {\n        \"age\": 26,\n        \"factor\": 2.63\n      }, {\n        \"age\": 27,\n        \"factor\": 2.65\n      }, {\n        \"age\": 28,\n        \"factor\": 2.67\n      }, {\n        \"age\": 29,\n        \"factor\": 2.69\n      }, {\n        \"age\": 30,\n        \"factor\": 2.71\n      }, {\n        \"age\": 31,\n        \"factor\": 2.74\n      }, {\n        \"age\": 32,\n        \"factor\": 2.76\n      }, {\n        \"age\": 33,\n        \"factor\": 2.79\n      }, {\n        \"age\": 34,\n        \"factor\": 2.82\n      }, {\n        \"age\": 35,\n        \"factor\": 2.85\n      }, {\n        \"age\": 36,\n        \"factor\": 2.88\n      }, {\n        \"age\": 37,\n        \"factor\": 2.91\n      }, {\n        \"age\": 38,\n        \"factor\": 2.94\n      }, {\n        \"age\": 39,\n        \"factor\": 2.98\n      }, {\n        \"age\": 40,\n        \"factor\": 3.01\n      }, {\n        \"age\": 41,\n        \"factor\": 3.05\n      }, {\n        \"age\": 42,\n        \"factor\": 3.09\n      }, {\n        \"age\": 43,\n        \"factor\": 3.14\n      }, {\n        \"age\": 44,\n        \"factor\": 3.18\n      }, {\n        \"age\": 45,\n        \"factor\": 3.22\n      }, {\n        \"age\": 46,\n        \"factor\": 3.27\n      }, {\n        \"age\": 47,\n        \"factor\": 3.32\n      }, {\n        \"age\": 48,\n        \"factor\": 3.38\n      }, {\n        \"age\": 49,\n        \"factor\": 3.43\n      }, {\n        \"age\": 50,\n        \"factor\": 3.49\n      }, {\n        \"age\": 51,\n        \"factor\": 3.55\n      }, {\n        \"age\": 52,\n        \"factor\": 3.62\n      }, {\n        \"age\": 53,\n        \"factor\": 3.68\n      }, {\n        \"age\": 54,\n        \"factor\": 3.75\n      }, {\n        \"age\": 55,\n        \"factor\": 3.83\n      }, {\n        \"age\": 56,\n        \"factor\": 3.91\n      }, {\n        \"age\": 57,\n        \"factor\": 3.99\n      }, {\n        \"age\": 58,\n        \"factor\": 4.08\n      }, {\n        \"age\": 59,\n        \"factor\": 4.18\n      }, {\n        \"age\": 60,\n        \"factor\": 4.28\n      }, {\n        \"age\": 61,\n        \"factor\": 4.39\n      }, {\n        \"age\": 62,\n        \"factor\": 4.50\n      }, {\n        \"age\": 63,\n        \"factor\": 4.62\n      }, {\n        \"age\": 64,\n        \"factor\": 4.75\n      }, {\n        \"age\": 65,\n        \"factor\": 4.89\n      }, {\n        \"age\": 66,\n        \"factor\": 5.04\n      }, {\n        \"age\": 67,\n        \"factor\": 5.20\n      }, {\n        \"age\": 68,\n        \"factor\": 5.37\n      }, {\n        \"age\": 69,\n        \"factor\": 5.55\n      }, {\n        \"age\": 70,\n        \"factor\": 5.74\n      }, {\n        \"age\": 71,\n        \"factor\": 5.95\n      }, {\n        \"age\": 72,\n        \"factor\": 6.17\n      }, {\n        \"age\": 73,\n        \"factor\": 6.41\n      }, {\n        \"age\": 74,\n        \"factor\": 6.66\n      }, {\n        \"age\": 75,\n        \"factor\": 6.93\n      }, {\n        \"age\": 76,\n        \"factor\": 7.22\n      }, {\n        \"age\": 77,\n        \"factor\": 7.54\n      }, {\n        \"age\": 78,\n        \"factor\": 7.87\n      }, {\n        \"age\": 79,\n        \"factor\": 8.23\n      }, {\n        \"age\": 80,\n        \"factor\": 8.62\n      }, {\n        \"age\": 81,\n        \"factor\": 9.04\n      }, {\n        \"age\": 82,\n        \"factor\": 9.48\n      }, {\n        \"age\": 83,\n        \"factor\": 9.95\n      }, {\n        \"age\": 84,\n        \"factor\": 10.46\n      }, {\n        \"age\": 85,\n        \"factor\": 11.00\n      }, {\n        \"age\": 86,\n        \"factor\": 11.58\n      }, {\n        \"age\": 87,\n        \"factor\": 12.19\n      }]);\n      IRSConstants.setIRSLimits({\n        \"402g1\": 18000,\n        \"457e15\": 18000,\n        \"age\": 50,\n        \"401a17\": 270000,\n        \"415c1A\": 54000,\n        \"414v\": 6000\n      });\n      IRSwh.set({\n        \"irs.wh.medicare.0.threshold\": 0.0,\n        \"irs.wh.medicare.0.rate\": 0.0145,\n        \"irs.wh.medicare.1.threshold\": 200000.0,\n        \"irs.wh.medicare.1.rate\": 0.0235\n      });\n      _request = data;\n    } else {\n      if (data.orangeData) {\n        // Non-FE Calc\n        if (data.orangeData.annuityFactors) {\n          AnnuityMonthlyBenefit.setMultiple(data.orangeData.annuityFactors);\n        }\n\n        if (data.orangeData.irsLimits) {\n          IRSConstants.setIRSLimits(data.orangeData.irsLimits);\n          IRSwh.set(data.orangeData.irsLimits);\n        }\n\n        _request = _serializer.serialize(data);\n      } else if (data.feData) {\n        // FE calc\n        if (data.feData.annuityFactors) {\n          AnnuityMonthlyBenefit.setMultiple(data.feData.annuityFactors);\n        }\n\n        if (data.feData.irsLimits) {\n          IRSConstants.setIRSLimits(data.feData.irsLimits);\n        }\n\n        _request = _serializer.serializeFE(data);\n      }\n    }\n  };\n  /*\n   *  Run the calculation logic\n   *  return: The evaluated Retirement Benefit response\n   */\n\n\n  OMCalcWrapper.prototype.compute = function (request) {\n    _request = request ? request : _request;\n    var response = getOMCalculatorResponse(_request);\n    return response;\n  };\n  /*\n   *  Run the validation logic\n   *  return: The evaluated Retirement Benefit response\n   */\n\n\n  OMCalcWrapper.prototype.validate = function (request) {\n    _request = request ? request : _request;\n    var validation = getOMValidatorResponse(_request);\n    return validation;\n  };\n  /*\n   *  Update whether or not to include\n   *  the Employer Match Data object in\n   *  the response\n   */\n  // OMCalcWrapper.prototype.includeErMatchData = function(planId, include){\n  //  var _include = include;\n  //  _include = _include == \"false\" ? false : _include;\n  //  _include = _include == \"true\" ? true : _include;\n  //  var accts = _request.getAccountDataList();\n  //  for (var i = 0; i < accts.length; i++) {\n  //    if(accts[i].getPlanId() == planId){\n  //      if(accts[i].getOmErMatchData())\n  //        _include = accts[i].getOmErMatchData().includeInCalculation(_include);\n  //    }\n  //  }\n  //  return _include;\n  // };\n\n\n  OMCalcWrapper.prototype.getAccountList = function () {\n    return _request.getAccountDataList();\n  };\n  /*\n   *  Update a plan's contribution\n   *  @sourceUID: Index of the plan to update\n   *  @contrib:   The new contribution value\n   *  @format:    '%' or '$'\n   */\n\n\n  OMCalcWrapper.prototype.setContribution = function (sourceUID, contrib, format) {\n    var sourceID = AccountTypes.matchType(sourceUID.split(\"|\")[0]);\n    var planID = sourceUID.split(\"|\")[1];\n    var srcMatch;\n\n    var aList = _request.getAccountDataList();\n\n    for (var i = 0; i < aList.length; i++) {\n      var src = aList[i];\n\n      if (src.getType() == sourceID && src.getPlanId() == planID) {\n        aList[i].updateContrib(contrib);\n        break;\n      }\n    }\n  };\n  /*\n   *  Get a plan's contribution\n   *  @planIndex: Index of the plan to retrieve contribution amount for\n   */\n\n\n  OMCalcWrapper.prototype.getContribution = function (planIndex) {\n    var aList = _request.getAccountDataList();\n\n    var rtn = aList[planIndex] ? aList[planIndex].getContrib() * 100 : 0;\n    return rtn;\n  };\n  /*\n   *  Update the user's retirement age\n   *  @age: Updated age value\n   */\n\n\n  OMCalcWrapper.prototype.setRetirementAge = function (age, benefit) {\n    if (age) {\n      _request.getCommonData().setRetireAge(age);\n\n      _request.getCommonData().setSSBenefitAge(age);\n\n      for (var i = 0; i < _request.getIncomeDataList().length; i++) {\n        if (_request.getIncomeDataList()[i].getType() === IncomeTypes.SOCIALSECURITY) {\n          _request.getIncomeDataList()[i].setMonthlyAmount(benefit);\n        }\n      }\n    }\n  };\n  /*\n   *  Update the user's pension amount\n   *  @benefit: Updated benefit value\n   */\n\n\n  OMCalcWrapper.prototype.setPensionAmount = function (benefit) {\n    if (benefit !== undefined) {\n      for (var i = 0; i < _request.getIncomeDataList().length; i++) {\n        if (_request.getIncomeDataList()[i].getType() === IncomeTypes.PENSION) {\n          _request.getIncomeDataList()[i].setMonthlyAmount(benefit);\n        }\n      }\n    }\n  };\n  /*\n   *  Set the user's choice to include SocialSecurity\n   *  in their response.\n   */\n\n\n  OMCalcWrapper.prototype.setSSIndicator = function (include) {\n    _request.getCommonData().setSSIndicator(include);\n  };\n  /*\n   *  Get the user's retirement age\n   *  return: Users retirement age value\n   */\n\n\n  OMCalcWrapper.prototype.getRetirementAge = function (age) {\n    return _request.getCommonData().getRetireAge();\n  };\n  /*\n   *  Update the user's investment style\n   *  @style: Updated style value (decimal value);\n   */\n\n\n  OMCalcWrapper.prototype.setInvestmentStyle = function (style) {\n    //\n    if (style || style === 0) {\n      _request.getCommonData().setRateOfReturn(style);\n    }\n  };\n  /*\n   *  Update the user's investment style\n   *  return: User's investment style value (integer format);\n   */\n\n\n  OMCalcWrapper.prototype.getInvestmentStyle = function (style) {\n    //\n    return _request.getCommonData().getRateOfReturn() * 100;\n  };\n  /*\n   *  Update the user's salary\n   *  @income: Updated salary value\n   */\n\n\n  OMCalcWrapper.prototype.setSalary = function (income) {\n    //\n    if (income) {\n      _request.getCommonData().setAnnualSalary(income);\n    }\n  };\n  /*\n   *  Update the user's salary\n   *  @income: Updated salary value\n   */\n\n\n  OMCalcWrapper.prototype.getSalary = function () {\n    //\n    return _request.getCommonData().getAnnualSalary();\n  };\n\n  OMCalcWrapper.prototype.getMandatoryEeContribLimits = function (type) {\n    for (var i = 0; i < _request.getAccountDataList().length; i++) {\n      var acd = _request.getAccountDataList()[i];\n\n      if (acd.getType() === AccountTypes.TYPE_MANDATORY_EE) {\n        if (type === \"PERCENT\") {\n          return {\n            'min': acd.getMinContribRate(),\n            'max': acd.getMaxContribRate()\n          };\n        } else {\n          return {\n            'min': acd.getMinContribDollar(),\n            'max': acd.getMaxContribDollar()\n          };\n        }\n      }\n    }\n  };\n\n  OMCalcWrapper.prototype.getMandatoryErContribLimits = function (type) {\n    for (var i = 0; i < _request.getAccountDataList().length; i++) {\n      var acd = _request.getAccountDataList()[i];\n\n      if (acd.getType() === AccountTypes.TYPE_MANDATORY_ER) {\n        if (type === \"PERCENT\") {\n          return {\n            'min': acd.getMinContribRate(),\n            'max': acd.getMaxContribRate()\n          };\n        } else {\n          return {\n            'min': acd.getMinContribDollar(),\n            'max': acd.getMaxContribDollar()\n          };\n        }\n      }\n    }\n  };\n  /*\n   *  Create / update the new loan model data to the request\n   */\n\n\n  OMCalcWrapper.prototype.setNewLoanModelData = function (lmd) {\n    // Create new Loan instance & add to the request.\n    if (lmd.loanPayment > 0.0 || lmd.loanAmount > 0.0) {\n      var loan = OMObjFactory.getLoanInstance();\n\n      if (lmd.loanAmount > 0.0) {\n        loan.initPaymentInstance(lmd.loanOrientation, lmd.loanInterestRate, lmd.loanPayFrequency, lmd.loanTerm, lmd.loanAmount);\n      } else {\n        loan.initLoanAmountInstance(lmd.loanOrientation, lmd.loanInterestRate, lmd.loanPayFrequency, lmd.loanTerm, lmd.loanPayment);\n      }\n\n      lmd.loanInitialFee > 0.0 ? loan.setInitialFee(lmd.loanInitialFee) : loan.setInitialFee(0.0);\n      lmd.loanAnnualFee > 0.0 ? loan.setAnnualFee(lmd.loanAnnualFee) : loan.setAnnualFee(0.0);\n      lmd.loanAer ? loan.setInterestTypeToAER() : loan.setInterestTypeToSimple();\n      lmd.loanUpfrontInterest && lmd.loanDaysUpfrontInterest > 0 ? loan.setDaysOfUpFrontInterest(lmd.loanDaysUpfrontInterest) : loan.setDaysOfUpFrontInterest(0);\n\n      var aList = _request.getAccountDataList();\n\n      var isLoanInstanceFound = false;\n      var oldLoanInstance;\n\n      for (var i = 0; i < aList.length; i++) {\n        var accountDataInstance = aList[i];\n\n        if (accountDataInstance.getType() == AccountTypes.TYPE_NEWLOAN) {\n          isLoanInstanceFound = true;\n          oldLoanInstance = accountDataInstance;\n          break;\n        }\n      }\n\n      if (!isLoanInstanceFound) {\n        // Add new loan instance to the request\n        var newLoanInstance = OMObjFactory.getOMAccountDataInstance();\n        newLoanInstance.setType(AccountTypes.TYPE_NEWLOAN);\n        newLoanInstance.setBalance(-loan.getLoanAmount());\n        newLoanInstance.setFrequency(loan.getFrequency());\n        newLoanInstance.setLoan(loan);\n\n        _request.getAccountDataList().push(newLoanInstance);\n      } else {\n        // Update the existing loan instance object\n        oldLoanInstance.setType(AccountTypes.TYPE_NEWLOAN);\n        oldLoanInstance.setBalance(-loan.getLoanAmount());\n        oldLoanInstance.setFrequency(loan.getFrequency());\n        oldLoanInstance.setLoan(loan);\n      }\n    }\n  }; //  ------------------------------------------------------------------------------\n  //  ----------------------  PRIVATE METHODS ---------------------------------------\n  //\n\n  /*\n   *  Retrieve OMCalculator response based on user data\n   *  @request:OMCalculatorRequest  - Valid request object\n   *  return:OMCalculatorResponse - Valid response object\n   */\n\n\n  var getOMCalculatorResponse = function (request) {\n    var accumCommon = prepareAccumCommonFromCommonData(request.getCommonData());\n    var settleCommon = prepareSettleCommonFromCommonData(request.getCommonData());\n    var accountList = prepareAccumListFromDataList(request.getAccountDataList());\n    var incomeList = prepareIncomeListFromDataList(request.getIncomeDataList(), settleCommon); // do the heavy lifting: accumulate all accounts; set error codes\n\n    var calcx = new OMCalculator();\n    calcx.init(accumCommon, settleCommon, accountList, incomeList);\n    calcx.align();\n    return prepareResponse(request, accountList, incomeList, calcx.getRetireBenefitEvalResponse());\n  };\n  /*\n   *  Retrieve OMValidator response based on user data\n   *  @request:OMCalculatorRequest  - Valid request object\n   *  return:OMValidatorResponse - Valid response object\n   */\n\n\n  var getOMValidatorResponse = function (request) {\n    var accumCommon = prepareAccumCommonFromCommonData(request.getCommonData());\n    var accountList = prepareAccumListFromDataList(request.getAccountDataList()); // do the heavy lifting: accumulate all accounts; set error codes\n\n    var ba = ObjFactory.getBaseAccumulatorInstance();\n    ba.init(accumCommon, accountList);\n    ba.validate(); // set up response object\n\n    var response = new OMValidatorResponse();\n    prepareReturnData(request.getCommonData(), request.getAccountDataList(), accountList);\n    response.setCommonData(request.getCommonData());\n    response.setAccountDataList(request.getAccountDataList());\n    return response;\n  };\n\n  var prepareResponse = function (request, accountList, incomeList, rber) {\n    var currentAge = DateUtilities.getAgePrecise(request.getCommonData().getDateOfBirth(), request.getCommonData().getReferenceDate()); // set up response object\n\n    var response = new OMCalculatorResponse();\n    response.setCommonData(request.getCommonData());\n    response.setAccountDataList(request.getAccountDataList());\n    response.setIncomeDataList(request.getIncomeDataList());\n    prepareReturnData(response.getCommonData(), response.getAccountDataList(), accountList);\n    response.setRetireBenefitEvalResponse(rber);\n    return response;\n  };\n\n  var prepareReturnData = function (cd, adList, accountList) {\n    var currentAge = DateUtilities.getAgePrecise(cd.getDateOfBirth(), cd.getReferenceDate()); // set return members of request objects to supply response\n\n    cd.setMinRateOfReturn(0.0);\n    cd.setMaxRateOfReturn(0.12);\n    cd.setMinRetireAge(currentAge + 1);\n    cd.setMaxRetireAge(99);\n    cd.setErrorCode(-1);\n    cd.setErrorString(\"\"); // set return members of request objects to supply response - account details\n\n    var contribMaxs;\n    var contribMins = [0, 0];\n    var annualSalaryRef = cd.getAnnualSalary();\n    var annualSalary401a17Ref = Math.min(annualSalaryRef, IRSConstants.getLimit(IRSConstants._401a17));\n    var evalSalary = annualSalaryRef;\n\n    for (var aa = 0; aa < accountList.length; aa++) {\n      for (var ad = 0; ad < adList.length; ad++) {\n        if (accountList[aa].getIndex() == adList[ad].getIndex()) {\n          // establish min/maxes\n          contribMins[0] = 0;\n          contribMins[1] = 0;\n          evalSalary = LimitUtilities.apply401a17SalaryLimit(accountList[aa].getType(), accountList[aa].getIRC(), true) ? annualSalary401a17Ref : annualSalaryRef;\n          contribMaxs = LimitUtilities.getIRSContribMaxes(accountList[aa].getType(), accountList[aa].getIRC(), accountList[aa].getModes(), evalSalary);\n\n          if (accountList[aa].isMinMaxLimit()) {\n            var temp = LimitUtilities.getNonIRSContribMaxes(accountList[aa].getMinMaxLimit(), accountList[aa].getModes(), evalSalary);\n\n            if (temp[LimitUtilities.MAX_DOLLAR] < contribMaxs[LimitUtilities.MAX_DOLLAR] && temp[LimitUtilities.MAX_DOLLAR] > 0.0) {\n              contribMaxs[LimitUtilities.MAX_RATE] = temp[LimitUtilities.MAX_RATE];\n              contribMaxs[LimitUtilities.MAX_DOLLAR] = temp[LimitUtilities.MAX_DOLLAR];\n            }\n\n            temp = LimitUtilities.getNonIRSContribMins(accountList[aa].getMinMaxLimit(), accountList[aa].getModes(), evalSalary);\n\n            if (temp[LimitUtilities.MAX_DOLLAR] > 0.0) {\n              contribMins[LimitUtilities.MAX_RATE] = temp[LimitUtilities.MAX_RATE];\n              contribMins[LimitUtilities.MAX_DOLLAR] = temp[LimitUtilities.MAX_DOLLAR];\n            }\n          }\n\n          adList[ad].setMinContribRate(CalcUtilities.roundAndTruncate(contribMins[LimitUtilities.MAX_RATE], 3));\n          adList[ad].setMaxContribRate(CalcUtilities.truncate(contribMaxs[LimitUtilities.MAX_RATE], 3));\n          adList[ad].setMinContribDollar(CalcUtilities.roundAndTruncate(contribMins[LimitUtilities.MAX_DOLLAR], 2));\n          adList[ad].setMaxContribDollar(CalcUtilities.truncate(contribMaxs[LimitUtilities.MAX_DOLLAR], 2));\n          adList[ad].setErrorCode(accountList[aa].getErrorCode());\n          adList[ad].setErrorString(accountList[aa].getErrorString());\n          adList[ad].setIrsInfraction(accountList[aa].getIrsInfraction());\n        }\n      }\n    }\n  };\n\n  var prepareAccumCommonFromCommonData = function (omcd) {\n    var currentAge, retireAge; // establish age, accumulation range\n\n    currentAge = DateUtilities.getAgePrecise(omcd.getDateOfBirth(), omcd.getReferenceDate());\n    retireAge = omcd.getRetireAge(); // confirm retireAge >= currentAge + 1\n\n    var accumCommon = ObjFactory.getAccumCommonInstance(); // set common matters\n\n    accumCommon.setAnnualSalary(omcd.getAnnualSalary());\n    accumCommon.setFull(retireAge - currentAge); //accumCommon.setFractional( d ) ;  // only if taking a different approach than MRO\n\n    accumCommon.setRateOfIncrease(omcd.getRateOfIncrease());\n    accumCommon.setRateOfReturn(omcd.getRateOfReturn());\n    accumCommon.setRateOfWithholding(omcd.getRateOfWithholding());\n    accumCommon.setMinMaxLimitList(omcd.getMinMaxLimitList());\n    return accumCommon;\n  };\n\n  var prepareSettleCommonFromCommonData = function (omcd) {\n    var currentAge, retireAge;\n    var currentYear; // establish age, accumulation range\n\n    currentAge = DateUtilities.getAgePrecise(omcd.getDateOfBirth(), omcd.getReferenceDate());\n    retireAge = omcd.getRetireAge(); // confirm retireAge >= currentAge + 1\n\n    currentYear = DateUtilities.getYearInteger(omcd.getReferenceDate());\n    var settleCommon = ObjFactory.getSettleCommonInstance(); // set common matters\n\n    settleCommon.setCurrentAge(currentAge);\n    settleCommon.setRetireAge(retireAge);\n    settleCommon.setRateOfInflation(omcd.getRateOfInflation()); // rate of return is 2% less, but zero or greater\n\n    settleCommon.setRateOfReturn(Math.max(omcd.getRateOfReturn() - 0.02, 0.0));\n    settleCommon.setReplacementRatio(omcd.getReplacementRatio());\n    settleCommon.setSSIndicator(omcd.isSocialSecurity());\n    settleCommon.setCurrentYear(currentYear);\n    settleCommon.setSSBenefitAge(omcd.getSSBenefitAge());\n    settleCommon.setRateOfWithholding(omcd.getRateOfWithholding());\n    settleCommon.setCurrentAnnualSalary(omcd.getAnnualSalary()); // annuity benefit per $1000 of premium: is this best here or elsewhere?\n\n    settleCommon.setSpiaMonthlyValuePer1000(AnnuityMonthlyBenefit.getInstance().get(retireAge)); // 170530 LA\n\n    settleCommon.setRateOfIncrease(omcd.getRateOfIncrease());\n    settleCommon.setRateOfRothBump(omcd.getRateOfRothBump());\n    settleCommon.setReplacementIncomeType(omcd.getReplacementIncomeType());\n    return settleCommon;\n  };\n\n  var prepareAccumListFromDataList = function (omadList) {\n    //List<OMAccountData> adList = this.request.getAccountDataList() ;\n    var accountList = []; // set id to link account objects for return min/max values and error info\n\n    omadList = assureUniqueAccountDataIndex(omadList); //      var index = 0;\n    //      for (var ad = 0; ad < omadList.length; ad++) {\n    //        omadList[ad].setIndex(index++);\n    //      }\n\n    var emData = null;\n    var aaTemp = null; // loop through accounts and load calculator objs from data objs\n\n    for (var ad = 0; ad < omadList.length; ad++) {\n      aaTemp = ObjFactory.getAccountAccumInstance();\n      aaTemp.setPlanName(omadList[ad].getPlanName());\n      aaTemp.setPlanLabel(omadList[ad].getPlanLabel());\n      aaTemp.setPlanId(omadList[ad].getPlanId());\n      aaTemp.setPlanIndex(omadList[ad].getPlanIndex());\n      aaTemp.setPlanType(omadList[ad].getPlanType());\n      aaTemp.setName(omadList[ad].getName());\n      aaTemp.setLabel(omadList[ad].getLabel());\n      aaTemp.setId(omadList[ad].getId());\n      aaTemp.setIndex(omadList[ad].getIndex());\n      aaTemp.setType(omadList[ad].getType());\n      aaTemp.setIRC(omadList[ad].getIRC());\n      aaTemp.setStartContrib(omadList[ad].getContribType(), omadList[ad].getContrib());\n      aaTemp.setContribIterationThreshold(omadList[ad].getContribIterationThreshold());\n      aaTemp.setModes(omadList[ad].getFrequency());\n      aaTemp.setEeLumpAmount(omadList[ad].getBalance());\n      aaTemp.setErLumpAmount(omadList[ad].getErBalance());\n      aaTemp.setMinMaxLimit(omadList[ad].getMinMaxLimit());\n      aaTemp.setLoan(omadList[ad].getLoan());\n      emData = omadList[ad].getOmErMatchData(); // construct employer match object\n\n      if (emData !== null && emData.includeInCalculation()) {\n        var em;\n\n        switch (emData.getType()) {\n          case ERMatchTypes.STANDARD:\n            {\n              em = ERMatchFactory.getStandardInstance(emData.getName());\n              em.setID(emData.getID());\n              em.set(emData.getTier1Match(), emData.getTier1Range(), emData.getTier2Match(), emData.getTier2Range(), emData.getAnnualMax(), emData.getTierAnnualMax());\n              aaTemp.setEmployerMatchWrapper(em);\n            }\n            break;\n\n          case ERMatchTypes.MANDATORY:\n            {\n              em = ERMatchFactory.getMandatoryInstance(emData.getName());\n              em.setID(emData.getID());\n              em.set(emData.getFlatAnnualContrib(), emData.getRateOfSalary());\n              aaTemp.setEmployerMatchWrapper(em);\n            }\n            break;\n\n          case ERMatchTypes.DATETIER:\n            {\n              em = ERMatchFactory.getDateTierInstance(emData.getName());\n              em.setID(emData.getID());\n\n              if (emData.getTier1Match() > 0.0) {\n                em.addTier(aaTemp.getModes(), DateUtilities.today(), emData.getTier1Date(), emData.getTier1Range(), emData.getTier1Match());\n\n                if (emData.getTier2Match() > 0.0) {\n                  em.addTier(aaTemp.getModes(), DateUtilities.today(), emData.getTier2Date(), emData.getTier2Range(), emData.getTier2Match());\n                }\n              }\n\n              aaTemp.setEmployerMatchWrapper(em);\n            }\n            break;\n\n          case ERMatchTypes.CUSTOM:\n            {\n              em = ERMatchFactory.getCustomInstance(emData.getName());\n              em.setID(emData.getID());\n              aaTemp.setEmployerMatchWrapper(em);\n            }\n            break;\n\n          default:\n            break;\n        }\n      }\n\n      accountList.push(aaTemp);\n    }\n\n    return accountList;\n  };\n\n  var prepareIncomeListFromDataList = function (omidList, settleCommon) {\n    var idTemp = null;\n    var incomeDataList = [];\n\n    for (var id = 0; id < omidList.length; id++) {\n      idTemp = ObjFactory.getIncomeDataInstance();\n      idTemp.setAnnualAmount(omidList[id].getAnnualAmount());\n      idTemp.setType(omidList[id].getType());\n      idTemp.setPriority(omidList[id].getPriority());\n      idTemp.setName(omidList[id].getName()); // 160726\n\n      if (IncomeTypes.SOCIALSECURITY === omidList[id].getType() && 0 > omidList[id].getStart()) {\n        omidList[id].setStart(settleCommon.getSSBenefitAge());\n      }\n\n      idTemp.setStart(omidList[id].getStart());\n      idTemp.setStop(omidList[id].getStop());\n      idTemp.setRateOfIncrease(omidList[id].getRateOfIncrease());\n      incomeDataList.push(idTemp);\n    }\n\n    return incomeDataList;\n  };\n\n  var assureUniqueAccountDataIndex = function (accountDataList) {\n    // set unique index for each object based on those indexes that may be already set\n    var index = -1;\n    var adl = accountDataList; // set index var\n\n    for (var i = 0; i < adl.length; i++) {\n      index = Math.max(index, adl[i].getIndex());\n    } // replace \"-1\" indexes\n\n\n    for (var j = 0; j < adl.length; j++) {\n      if (0 > adl[j].getIndex()) {\n        index++;\n        adl[j].setIndex(index);\n      }\n    } // replace any duplicates to make each index unique\n\n\n    var check;\n    var count;\n\n    for (var k = 0; k < adl.length; k++) {\n      check = adl[k].getIndex();\n      count = 0;\n\n      for (var n = 0; n < adl.length; n++) {\n        if (check === adl[n].getIndex()) {\n          count++;\n\n          if (count > 1) {\n            index++;\n            adl[n].setIndex(index);\n          }\n        }\n      }\n    }\n\n    return adl;\n  };\n\n  return OMCalcWrapper;\n});","map":null,"metadata":{},"sourceType":"script"}