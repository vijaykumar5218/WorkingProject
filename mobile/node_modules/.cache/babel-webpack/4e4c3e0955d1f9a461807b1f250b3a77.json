{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { IonicNativePlugin, cordova } from '@ionic-native/core';\nimport * as ɵngcc0 from '@angular/core';\n\nvar PreviewAnyFile =\n/** @class */\nfunction (_super) {\n  __extends(PreviewAnyFile, _super);\n\n  function PreviewAnyFile() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  PreviewAnyFile.prototype.preview = function (url) {\n    return cordova(this, \"preview\", {}, arguments);\n  };\n\n  PreviewAnyFile.prototype.previewBase64 = function (base64, options) {\n    return cordova(this, \"previewBase64\", {}, arguments);\n  };\n\n  PreviewAnyFile.prototype.previewPath = function (url, options) {\n    return cordova(this, \"previewPath\", {}, arguments);\n  };\n\n  PreviewAnyFile.prototype.previewAsset = function (url, options) {\n    return cordova(this, \"previewAsset\", {}, arguments);\n  };\n\n  PreviewAnyFile.pluginName = \"PreviewAnyFile\";\n  PreviewAnyFile.plugin = \"cordova-plugin-preview-any-file\";\n  PreviewAnyFile.pluginRef = \"PreviewAnyFile\";\n  PreviewAnyFile.repo = \"https://github.com/mostafa-mansour1/previewAnyFile\";\n  PreviewAnyFile.install = \"\";\n  PreviewAnyFile.installVariables = [];\n  PreviewAnyFile.platforms = [\"Android\", \"iOS\"];\n\n  PreviewAnyFile.ɵfac = /*@__PURE__*/function () {\n    var ɵPreviewAnyFile_BaseFactory;\n    return function PreviewAnyFile_Factory(t) {\n      return (ɵPreviewAnyFile_BaseFactory || (ɵPreviewAnyFile_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(PreviewAnyFile)))(t || PreviewAnyFile);\n    };\n  }();\n\n  PreviewAnyFile.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: PreviewAnyFile,\n    factory: function (t) {\n      return PreviewAnyFile.ɵfac(t);\n    }\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return PreviewAnyFile;\n}(IonicNativePlugin);\n\nexport { PreviewAnyFile }; //# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9AaW9uaWMtbmF0aXZlL3BsdWdpbnMvcHJldmlldy1hbnktZmlsZS9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQzs7QUFDeEU7QUFHUSxJQXFENEIsa0NBQWlCO0FBQUM7QUFFOUI7QUFBeUU7QUFBTSxJQUtyRyxnQ0FBTyxhQUFDLEdBQVc7QUFLVixJQUtULHNDQUFhLGFBQUMsTUFBYyxFQUFFLE9BQStCO0FBSzlDLElBS2Ysb0NBQVcsYUFBQyxHQUFXLEVBQUUsT0FBK0I7QUFLM0MsSUFLYixxQ0FBWSxhQUFDLEdBQVcsRUFBRSxPQUErQjtBQUl0QztBQUFrRDtBQUErRDtBQUFpRDtBQUFnRjtBQUFpQztBQUEwQztrREExQ2pWLFVBQVU7Ozs7MEJBQ0w7QUFBQyx5QkExRFA7QUFBRSxFQTBEa0MsaUJBQWlCO0FBQ3BELFNBRFksY0FBYztBQUFJIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUGx1Z2luLCBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUHJldmlld0FueUZpbGVPcHRpb25zIHtcbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoZSBmaWxlIHRvIHByZXZpZXcuXG4gICAqL1xuICBuYW1lPzogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIG1pbWUgdHlwZSBvZiB0aGUgZmlsZSB0byBwcmV2aWV3LlxuICAgKi9cbiAgbWltZVR5cGU6IHN0cmluZztcbn1cblxuLyoqXG4gKiBAbmFtZSBQcmV2aWV3QW55RmlsZVxuICogQGRlc2NyaXB0aW9uXG4gKiBXaGF0ZXZlciB0aGUgZmlsZSBpcyBQREYgZG9jdW1lbnQsIFdvcmQgZG9jdW1lbnQsIEV4Y2VsLCBvZmZpY2UgZG9jdW1lbnQsemlwIGFyY2hpdmUgZmlsZSwgaW1hZ2UsIHRleHQsIGh0bWwgb3IgYW55dGhpbmcgZWxzZSwgeW91IGNhbiBwZXJmb3JtIGEgcHJldmlldyBieSB0aGlzIGNvcmRvdmEgUGx1Z2luIHRvIHByZXZpZXcgYW55IGZpbGUgaW4gbmF0aXZlIG1vZGUgYnkgcHJvdmlkaW5nIHRoZSBsb2NhbCBvciBleHRlcm5hbCBVUkwuXG4gKlxuICogIFJlcXVpcmVzIENvcmRvdmEgcGx1Z2luOiBgY29yZG92YS1wbHVnaW4tcHJldmlldy1hbnktZmlsZWAuIEZvciBtb3JlIGluZm8sIHBsZWFzZSBzZWUgdGhlIFtwcmV2aWV3QW55RmlsZSBwbHVnaW4gZG9jc10oaHR0cHM6Ly9naXRodWIuY29tL21vc3RhZmEtbWFuc291cjEvcHJldmlld0FueUZpbGUpLlxuICpcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgUHJldmlld0FueUZpbGUgfSBmcm9tICdAaW9uaWMtbmF0aXZlL3ByZXZpZXctYW55LWZpbGUvbmd4JztcbiAqXG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSBwcmV2aWV3QW55RmlsZTogUHJldmlld0FueUZpbGUpIHsgfVxuICpcbiAqIC4uLlxuICpcbiAqXG4gKiB0aGlzLnByZXZpZXdBbnlGaWxlLnByZXZpZXcoJ2ZpbGU6Ly9maWxlcGF0aC5leHQnKVxuICogICAudGhlbigocmVzOiBhbnkpID0+IGNvbnNvbGUubG9nKHJlcykpXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xuICpcbiAqIGBgYFxuICpcbiAqXG4gKiAuLi5cbiAqXG4gKlxuICogdGhpcy5wcmV2aWV3QW55RmlsZS5wcmV2aWV3UGF0aCgnaHR0cDovL3d3dy5kb21haW4uY29tL3NhbXBsZWZpbGUnKVxuICogICAudGhlbigocmVzOiBhbnkpID0+IGNvbnNvbGUubG9nKHJlcykpXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xuICpcbiAqIGBgYFxuICovXG5cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnUHJldmlld0FueUZpbGUnLFxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1wcmV2aWV3LWFueS1maWxlJywgLy8gbnBtIHBhY2thZ2UgbmFtZSwgZXhhbXBsZTogY29yZG92YS1wbHVnaW4tY2FtZXJhXG4gIHBsdWdpblJlZjogJ1ByZXZpZXdBbnlGaWxlJywgLy8gdGhlIHZhcmlhYmxlIHJlZmVyZW5jZSB0byBjYWxsIHRoZSBwbHVnaW4sIGV4YW1wbGU6IG5hdmlnYXRvci5nZW9sb2NhdGlvblxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL21vc3RhZmEtbWFuc291cjEvcHJldmlld0FueUZpbGUnLCAvLyB0aGUgZ2l0aHViIHJlcG9zaXRvcnkgVVJMIGZvciB0aGUgcGx1Z2luXG4gIGluc3RhbGw6ICcnLCAvLyBPUFRJT05BTCBpbnN0YWxsIGNvbW1hbmQsIGluIGNhc2UgdGhlIHBsdWdpbiByZXF1aXJlcyB2YXJpYWJsZXNcbiAgaW5zdGFsbFZhcmlhYmxlczogW10sIC8vIE9QVElPTkFMIHRoZSBwbHVnaW4gcmVxdWlyZXMgdmFyaWFibGVzXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLCAvLyBBcnJheSBvZiBwbGF0Zm9ybXMgc3VwcG9ydGVkLCBleGFtcGxlOiBbJ0FuZHJvaWQnLCAnaU9TJ11cbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUHJldmlld0FueUZpbGUgZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XG4gIC8qKlxuICAgKiB0aGlzIGZ1bmN0aW9uIHJldHVybiBTVUNDRVNTIGluIHN1Y2Nlc3MgY2FsbGJhY2sgaWYgdGhlIGZpbGUgc3VjY2Vzc2Z1bGx5IG9wZW5lZCwgaWYgdGhlIGNvbnRlbnQgaXMgYmFzZTY0IHlvdSBoYXZlIHRvIHdyaXRlIGl0IGludG8gZmlsZSBieSBjb3Jkb3ZhLXBsdWdpbi1maWxlXG4gICAqIEBwYXJhbSB1cmwge3N0cmluZ30gZnVsbCBhYnNvbHV0ZSBVUkwgZm9yIHRoZSBmaWxlLCBpZiB0aGUgcGF0aCBpcyBjb250ZW50Oi8vIHlvdSBuZWVkIHRvIHJlc29sdmUgdGhlIG5hdGl2ZSB1cmwsIGlmIHRoZSBwYXRoIGlzIGh0dHBzOi8vIGl0IG1heSBub3Qgd29yayBpbiBhbmRyb2lkXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyBpZiB0aGUgZmlsZSBvcGVuZWQgcmVqZWN0IGlmIG5vdDtcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgcHJldmlldyh1cmw6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIHByZXZpZXdQYXRoIGZ1bmN0aW9uIHdpbGwgcmV0dXJuIHN1Y2Nlc3MgY2FsbGJhY2sgaWYgdGhlIGZpbGUgc3VjY2Vzc2Z1bGx5IG9wZW5lZCwgaWYgdGhlIGNvbnRlbnQgaXMgYmFzZTY0IHlvdSBoYXZlIHRvIHVzZSBwcmV2aWV3QmFzZTY0IG1ldGhvZFxuICAgKiBAcGFyYW0gYmFzZTY0IHtTdHJpbmd9IGJhc2U2NCBzdHJpbmcgY29udGVudFxuICAgKiBAcGFyYW0gb3B0aW9ucyB7UHJldmlld0FueUZpbGVPcHRpb25zfSBkZWZpbmUgdGhlIG5hbWUgb2YgdGhlIGZpbGUgd2l0aCBleHRlbnNpb24gb3IgaXQncyBtaW1lVHlwZSwgaWYgdGhlIGNvcnJlY3QgZXh0ZW5zaW9uIG5vdCBleGlzdCBpbiB0aGUgcGF0aFxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBwcmV2aWV3QmFzZTY0KGJhc2U2NDogc3RyaW5nLCBvcHRpb25zPzogUHJldmlld0FueUZpbGVPcHRpb25zKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogcHJldmlld1BhdGggZnVuY3Rpb24gd2lsbCByZXR1cm4gc3VjY2VzcyBjYWxsYmFjayBpZiB0aGUgZmlsZSBzdWNjZXNzZnVsbHkgb3BlbmVkLCBpZiB0aGUgY29udGVudCBpcyBiYXNlNjQgeW91IGhhdmUgdG8gdXNlIHByZXZpZXdCYXNlNjQgbWV0aG9kXG4gICAqIEBwYXJhbSB1cmwge1N0cmluZ30gZnVsbCBhYnNvbHV0ZSBVUkwgLT4gZmlsZTovLywgY29udGVudDovLywgaHR0cDovLywgaHR0cHMsIC4uLiBldGMsIGlmIGV4dGVuc2lvbiBub3QgZXhpc3QsIHlvdSBtdXN0IGRlZmluZSBpdCBpbiB0aGUgb3B0IHBhcmFtXG4gICAqIEBwYXJhbSBvcHRpb25zIHtQcmV2aWV3QW55RmlsZU9wdGlvbnN9IGRlZmluZSB0aGUgbmFtZSBvZiB0aGUgZmlsZSB3aXRoIGV4dGVuc2lvbiBvciBpdCdzIG1pbWVUeXBlLCBpZiB0aGUgY29ycmVjdCBleHRlbnNpb24gbm90IGV4aXN0IGluIHRoZSBwYXRoXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHByZXZpZXdQYXRoKHVybDogc3RyaW5nLCBvcHRpb25zPzogUHJldmlld0FueUZpbGVPcHRpb25zKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogcHJldmlld1BhdGggZnVuY3Rpb24gd2lsbCByZXR1cm4gc3VjY2VzcyBjYWxsYmFjayBpZiB0aGUgZmlsZSBzdWNjZXNzZnVsbHkgb3BlbmVkLCBpZiB0aGUgY29udGVudCBpcyBiYXNlNjQgeW91IGhhdmUgdG8gdXNlIHByZXZpZXdCYXNlNjQgbWV0aG9kXG4gICAqIEBwYXJhbSB1cmwge1N0cmluZ30gZnVsbCBhYnNvbHV0ZSBVUkwgLT4gZmlsZTovLywgY29udGVudDovLywgaHR0cDovLywgaHR0cHMsIC4uLiBldGMsIGlmIGV4dGVuc2lvbiBub3QgZXhpc3QsIHlvdSBtdXN0IGRlZmluZSBpdCBpbiB0aGUgb3B0IHBhcmFtXG4gICAqIEBwYXJhbSBvcHRpb25zIHtQcmV2aWV3QW55RmlsZU9wdGlvbnN9IGRlZmluZSB0aGUgbmFtZSBvZiB0aGUgZmlsZSB3aXRoIGV4dGVuc2lvbiBvciBpdCdzIG1pbWVUeXBlLCBpZiB0aGUgY29ycmVjdCBleHRlbnNpb24gbm90IGV4aXN0IGluIHRoZSBwYXRoXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHByZXZpZXdBc3NldCh1cmw6IHN0cmluZywgb3B0aW9ucz86IFByZXZpZXdBbnlGaWxlT3B0aW9ucyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuO1xuICB9XG59XG4iXX0=","map":null,"metadata":{},"sourceType":"module"}