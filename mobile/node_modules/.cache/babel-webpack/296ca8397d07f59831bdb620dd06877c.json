{"ast":null,"code":"import _asyncToGenerator from \"/Users/vijay.a/Documents/GitHub/MYVOYAGE/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { WebPlugin } from \"@capacitor/core\";\nexport class FirebaseAnalyticsWeb extends WebPlugin {\n  constructor() {\n    super();\n    this.not_supported_mssg = \"This method is not supported\";\n    this.options_missing_mssg = \"Firebase options are missing\";\n    this.duplicate_app_mssg = \"Firebase app already exists\";\n    this.analytics_missing_mssg = \"Firebase analytics is not initialized. Make sure initializeFirebase() is called once\";\n    this.scripts = [{\n      key: \"firebase-app\",\n      src: \"https://www.gstatic.com/firebasejs/8.2.3/firebase-app.js\"\n    }, {\n      key: \"firebase-ac\",\n      src: \"https://www.gstatic.com/firebasejs/8.2.3/firebase-analytics.js\"\n    }];\n    this.ready = new Promise(resolve => this.readyResolver = resolve);\n    this.configure();\n  }\n  /**\n   * Configure and Initialize FirebaseApp if not present\n   * @param options - web app's Firebase configuration\n   * @returns firebase analytics object reference\n   * Platform: Web\n   */\n\n\n  initializeFirebase(options) {\n    var _this = this;\n\n    return new Promise( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (resolve, reject) {\n        yield _this.ready;\n\n        if (_this.hasFirebaseInitialized()) {\n          reject(_this.duplicate_app_mssg);\n          return;\n        }\n\n        if (!options) {\n          reject(_this.options_missing_mssg);\n          return;\n        }\n\n        const app = window.firebase.initializeApp(options);\n        _this.analyticsRef = app.analytics();\n        resolve(_this.analyticsRef);\n      });\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n  }\n  /**\n   * Sets the user ID property.\n   * @param options - userId: unique identifier of the user to log\n   * Platform: Web/Android/iOS\n   */\n\n\n  setUserId(options) {\n    var _this2 = this;\n\n    return new Promise( /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(function* (resolve, reject) {\n        yield _this2.ready;\n\n        if (!_this2.analyticsRef) {\n          reject(_this2.analytics_missing_mssg);\n          return;\n        }\n\n        const {\n          userId\n        } = options || {\n          userId: undefined\n        };\n\n        if (!userId) {\n          reject(\"userId property is missing\");\n          return;\n        }\n\n        _this2.analyticsRef.setUserId(userId);\n\n        resolve();\n      });\n\n      return function (_x3, _x4) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  }\n  /**\n   * Sets a user property to a given value.\n   * @param options - name: The name of the user property to set.\n   *                  value: The value of the user property.\n   * Platform: Web/Android/iOS\n   */\n\n\n  setUserProperty(options) {\n    var _this3 = this;\n\n    return new Promise( /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator(function* (resolve, reject) {\n        yield _this3.ready;\n\n        if (!_this3.analyticsRef) {\n          reject(_this3.analytics_missing_mssg);\n          return;\n        }\n\n        const {\n          name,\n          value\n        } = options || {\n          name: undefined,\n          value: undefined\n        };\n\n        if (!name) {\n          reject(\"name property is missing\");\n          return;\n        }\n\n        if (!value) {\n          reject(\"value property is missing\");\n          return;\n        }\n\n        let property = {};\n        property[name] = value;\n\n        _this3.analyticsRef.setUserProperties(property);\n\n        resolve();\n      });\n\n      return function (_x5, _x6) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n  }\n  /**\n   * Retrieves the app instance id from the service.\n   * @returns - instanceId: current instance if of the app\n   * Platform: Web/Android/iOS\n   */\n\n\n  getAppInstanceId() {\n    return new Promise((resolve, _reject) => resolve);\n  }\n  /**\n   * Sets the current screen name, which specifies the current visual context in your app.\n   * @param options - screenName: the activity to which the screen name and class name apply.\n   *                  nameOverride: the name of the current screen. Set to null to clear the current screen name.\n   * Platform: Android/iOS\n   */\n\n\n  setScreenName(_options) {\n    return new Promise((resolve, _reject) => resolve);\n  }\n  /**\n   * Clears all analytics data for this app from the device and resets the app instance id.\n   * Platform: Android/iOS\n   */\n\n\n  reset() {\n    return new Promise((resolve, _reject) => resolve);\n  }\n  /**\n   * Logs an app event.\n   * @param options - name: unique name of the event\n   *                  params: the map of event parameters.\n   * Platform: Web/Android/iOS\n   */\n\n\n  logEvent(options) {\n    var _this4 = this;\n\n    return new Promise( /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator(function* (resolve, reject) {\n        yield _this4.ready;\n\n        if (!_this4.analyticsRef) {\n          reject(_this4.analytics_missing_mssg);\n          return;\n        }\n\n        const {\n          name,\n          params\n        } = options || {\n          name: undefined,\n          params: undefined\n        };\n\n        if (!name) {\n          reject(\"name property is missing\");\n          return;\n        }\n\n        _this4.analyticsRef.logEvent(name, params);\n\n        resolve();\n      });\n\n      return function (_x7, _x8) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n  }\n  /**\n   * Sets whether analytics collection is enabled for this app on this device.\n   * @param options - enabled: boolean true/false to enable/disable logging\n   * Platform: Web/Android/iOS\n   */\n\n\n  setCollectionEnabled(options) {\n    var _this5 = this;\n\n    return new Promise( /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator(function* (resolve, reject) {\n        yield _this5.ready;\n\n        if (!_this5.analyticsRef) {\n          reject(_this5.analytics_missing_mssg);\n          return;\n        }\n\n        const {\n          enabled\n        } = options || {\n          enabled: false\n        };\n\n        _this5.analyticsRef.setAnalyticsCollectionEnabled(enabled);\n\n        resolve();\n      });\n\n      return function (_x9, _x10) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n  }\n  /**\n   * Sets the duration of inactivity that terminates the current session.\n   * @param options - duration: duration of inactivity\n   * Platform: Android/iOS\n   */\n\n\n  setSessionTimeoutDuration(_options) {\n    return new Promise((_resolve, reject) => {\n      reject(this.not_supported_mssg);\n    });\n  }\n  /**\n   * Returns analytics reference object\n   */\n\n\n  get remoteConfig() {\n    return this.analyticsRef;\n  }\n\n  enable() {\n    var _this6 = this;\n\n    return new Promise( /*#__PURE__*/function () {\n      var _ref6 = _asyncToGenerator(function* (resolve, reject) {\n        yield _this6.ready;\n\n        if (!_this6.analyticsRef) {\n          reject(_this6.analytics_missing_mssg);\n          return;\n        }\n\n        _this6.analyticsRef.setAnalyticsCollectionEnabled(true);\n\n        resolve();\n      });\n\n      return function (_x11, _x12) {\n        return _ref6.apply(this, arguments);\n      };\n    }());\n  }\n\n  disable() {\n    var _this7 = this;\n\n    return new Promise( /*#__PURE__*/function () {\n      var _ref7 = _asyncToGenerator(function* (resolve, reject) {\n        yield _this7.ready;\n\n        if (!_this7.analyticsRef) {\n          reject(_this7.analytics_missing_mssg);\n          return;\n        }\n\n        _this7.analyticsRef.setAnalyticsCollectionEnabled(false);\n\n        resolve();\n      });\n\n      return function (_x13, _x14) {\n        return _ref7.apply(this, arguments);\n      };\n    }());\n  }\n  /**\n   * Ready resolver to check and load firebase analytics\n   */\n\n\n  configure() {\n    var _this8 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        yield _this8.loadScripts();\n\n        if (window.firebase && window.firebase.analytics && _this8.hasFirebaseInitialized()) {\n          _this8.analyticsRef = window.firebase.analytics();\n        }\n      } catch (error) {\n        throw error;\n      }\n\n      const interval = setInterval(() => {\n        if (!window.firebase) {\n          return;\n        }\n\n        clearInterval(interval);\n\n        _this8.readyResolver();\n      }, 50);\n    })();\n  }\n  /**\n   * Check for existing loaded script and load new scripts\n   */\n\n\n  loadScripts() {\n    var _this9 = this;\n\n    const firebaseAppScript = this.scripts[0];\n    const firebaseAnalyticsScript = this.scripts[1];\n    return new Promise( /*#__PURE__*/function () {\n      var _ref8 = _asyncToGenerator(function* (resolve, _reject) {\n        const scripts = _this9.scripts.map(script => script.key);\n\n        if (document.getElementById(scripts[0]) && document.getElementById(scripts[1])) {\n          return resolve(null);\n        }\n\n        yield _this9.loadScript(firebaseAppScript.key, firebaseAppScript.src);\n        yield _this9.loadScript(firebaseAnalyticsScript.key, firebaseAnalyticsScript.src);\n        resolve(null);\n      });\n\n      return function (_x15, _x16) {\n        return _ref8.apply(this, arguments);\n      };\n    }());\n  }\n  /**\n   * Loaded single script with provided id and source\n   * @param id - unique identifier of the script\n   * @param src - source of the script\n   */\n\n\n  loadScript(id, src) {\n    return new Promise((resolve, reject) => {\n      const file = document.createElement(\"script\");\n      file.type = \"text/javascript\";\n      file.src = src;\n      file.id = id;\n      file.onload = resolve;\n      file.onerror = reject;\n      document.querySelector(\"head\").appendChild(file);\n    });\n  }\n  /**\n   * Returns true/false if firebase object reference exists inside window\n   */\n\n\n  hasFirebaseInitialized() {\n    if (!window.firebase) {\n      return false;\n    }\n\n    const firebaseApps = window.firebase.apps;\n\n    if (firebaseApps && firebaseApps.length === 0) {\n      return false;\n    }\n\n    return true;\n  }\n\n}","map":{"version":3,"sources":["/Users/vijay.a/Documents/GitHub/MYVOYAGE/node_modules/@capacitor-community/firebase-analytics/dist/esm/web.js"],"names":["WebPlugin","FirebaseAnalyticsWeb","constructor","not_supported_mssg","options_missing_mssg","duplicate_app_mssg","analytics_missing_mssg","scripts","key","src","ready","Promise","resolve","readyResolver","configure","initializeFirebase","options","reject","hasFirebaseInitialized","app","window","firebase","initializeApp","analyticsRef","analytics","setUserId","userId","undefined","setUserProperty","name","value","property","setUserProperties","getAppInstanceId","_reject","setScreenName","_options","reset","logEvent","params","setCollectionEnabled","enabled","setAnalyticsCollectionEnabled","setSessionTimeoutDuration","_resolve","remoteConfig","enable","disable","loadScripts","error","interval","setInterval","clearInterval","firebaseAppScript","firebaseAnalyticsScript","map","script","document","getElementById","loadScript","id","file","createElement","type","onload","onerror","querySelector","appendChild","firebaseApps","apps","length"],"mappings":"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","sourcesContent":["import { WebPlugin } from \"@capacitor/core\";\nexport class FirebaseAnalyticsWeb extends WebPlugin {\n    constructor() {\n        super();\n        this.not_supported_mssg = \"This method is not supported\";\n        this.options_missing_mssg = \"Firebase options are missing\";\n        this.duplicate_app_mssg = \"Firebase app already exists\";\n        this.analytics_missing_mssg = \"Firebase analytics is not initialized. Make sure initializeFirebase() is called once\";\n        this.scripts = [\n            {\n                key: \"firebase-app\",\n                src: \"https://www.gstatic.com/firebasejs/8.2.3/firebase-app.js\",\n            },\n            {\n                key: \"firebase-ac\",\n                src: \"https://www.gstatic.com/firebasejs/8.2.3/firebase-analytics.js\",\n            },\n        ];\n        this.ready = new Promise((resolve) => (this.readyResolver = resolve));\n        this.configure();\n    }\n    /**\n     * Configure and Initialize FirebaseApp if not present\n     * @param options - web app's Firebase configuration\n     * @returns firebase analytics object reference\n     * Platform: Web\n     */\n    initializeFirebase(options) {\n        return new Promise(async (resolve, reject) => {\n            await this.ready;\n            if (this.hasFirebaseInitialized()) {\n                reject(this.duplicate_app_mssg);\n                return;\n            }\n            if (!options) {\n                reject(this.options_missing_mssg);\n                return;\n            }\n            const app = window.firebase.initializeApp(options);\n            this.analyticsRef = app.analytics();\n            resolve(this.analyticsRef);\n        });\n    }\n    /**\n     * Sets the user ID property.\n     * @param options - userId: unique identifier of the user to log\n     * Platform: Web/Android/iOS\n     */\n    setUserId(options) {\n        return new Promise(async (resolve, reject) => {\n            await this.ready;\n            if (!this.analyticsRef) {\n                reject(this.analytics_missing_mssg);\n                return;\n            }\n            const { userId } = options || { userId: undefined };\n            if (!userId) {\n                reject(\"userId property is missing\");\n                return;\n            }\n            this.analyticsRef.setUserId(userId);\n            resolve();\n        });\n    }\n    /**\n     * Sets a user property to a given value.\n     * @param options - name: The name of the user property to set.\n     *                  value: The value of the user property.\n     * Platform: Web/Android/iOS\n     */\n    setUserProperty(options) {\n        return new Promise(async (resolve, reject) => {\n            await this.ready;\n            if (!this.analyticsRef) {\n                reject(this.analytics_missing_mssg);\n                return;\n            }\n            const { name, value } = options || { name: undefined, value: undefined };\n            if (!name) {\n                reject(\"name property is missing\");\n                return;\n            }\n            if (!value) {\n                reject(\"value property is missing\");\n                return;\n            }\n            let property = {};\n            property[name] = value;\n            this.analyticsRef.setUserProperties(property);\n            resolve();\n        });\n    }\n    /**\n     * Retrieves the app instance id from the service.\n     * @returns - instanceId: current instance if of the app\n     * Platform: Web/Android/iOS\n     */\n    getAppInstanceId() {\n        return new Promise((resolve, _reject) => resolve);\n    }\n    /**\n     * Sets the current screen name, which specifies the current visual context in your app.\n     * @param options - screenName: the activity to which the screen name and class name apply.\n     *                  nameOverride: the name of the current screen. Set to null to clear the current screen name.\n     * Platform: Android/iOS\n     */\n    setScreenName(_options) {\n        return new Promise((resolve, _reject) => resolve);\n    }\n    /**\n     * Clears all analytics data for this app from the device and resets the app instance id.\n     * Platform: Android/iOS\n     */\n    reset() {\n        return new Promise((resolve, _reject) => resolve);\n    }\n    /**\n     * Logs an app event.\n     * @param options - name: unique name of the event\n     *                  params: the map of event parameters.\n     * Platform: Web/Android/iOS\n     */\n    logEvent(options) {\n        return new Promise(async (resolve, reject) => {\n            await this.ready;\n            if (!this.analyticsRef) {\n                reject(this.analytics_missing_mssg);\n                return;\n            }\n            const { name, params } = options || {\n                name: undefined,\n                params: undefined,\n            };\n            if (!name) {\n                reject(\"name property is missing\");\n                return;\n            }\n            this.analyticsRef.logEvent(name, params);\n            resolve();\n        });\n    }\n    /**\n     * Sets whether analytics collection is enabled for this app on this device.\n     * @param options - enabled: boolean true/false to enable/disable logging\n     * Platform: Web/Android/iOS\n     */\n    setCollectionEnabled(options) {\n        return new Promise(async (resolve, reject) => {\n            await this.ready;\n            if (!this.analyticsRef) {\n                reject(this.analytics_missing_mssg);\n                return;\n            }\n            const { enabled } = options || { enabled: false };\n            this.analyticsRef.setAnalyticsCollectionEnabled(enabled);\n            resolve();\n        });\n    }\n    /**\n     * Sets the duration of inactivity that terminates the current session.\n     * @param options - duration: duration of inactivity\n     * Platform: Android/iOS\n     */\n    setSessionTimeoutDuration(_options) {\n        return new Promise((_resolve, reject) => {\n            reject(this.not_supported_mssg);\n        });\n    }\n    /**\n     * Returns analytics reference object\n     */\n    get remoteConfig() {\n        return this.analyticsRef;\n    }\n    enable() {\n        return new Promise(async (resolve, reject) => {\n            await this.ready;\n            if (!this.analyticsRef) {\n                reject(this.analytics_missing_mssg);\n                return;\n            }\n            this.analyticsRef.setAnalyticsCollectionEnabled(true);\n            resolve();\n        });\n    }\n    disable() {\n        return new Promise(async (resolve, reject) => {\n            await this.ready;\n            if (!this.analyticsRef) {\n                reject(this.analytics_missing_mssg);\n                return;\n            }\n            this.analyticsRef.setAnalyticsCollectionEnabled(false);\n            resolve();\n        });\n    }\n    /**\n     * Ready resolver to check and load firebase analytics\n     */\n    async configure() {\n        try {\n            await this.loadScripts();\n            if (window.firebase &&\n                window.firebase.analytics &&\n                this.hasFirebaseInitialized()) {\n                this.analyticsRef = window.firebase.analytics();\n            }\n        }\n        catch (error) {\n            throw error;\n        }\n        const interval = setInterval(() => {\n            if (!window.firebase) {\n                return;\n            }\n            clearInterval(interval);\n            this.readyResolver();\n        }, 50);\n    }\n    /**\n     * Check for existing loaded script and load new scripts\n     */\n    loadScripts() {\n        const firebaseAppScript = this.scripts[0];\n        const firebaseAnalyticsScript = this.scripts[1];\n        return new Promise(async (resolve, _reject) => {\n            const scripts = this.scripts.map((script) => script.key);\n            if (document.getElementById(scripts[0]) &&\n                document.getElementById(scripts[1])) {\n                return resolve(null);\n            }\n            await this.loadScript(firebaseAppScript.key, firebaseAppScript.src);\n            await this.loadScript(firebaseAnalyticsScript.key, firebaseAnalyticsScript.src);\n            resolve(null);\n        });\n    }\n    /**\n     * Loaded single script with provided id and source\n     * @param id - unique identifier of the script\n     * @param src - source of the script\n     */\n    loadScript(id, src) {\n        return new Promise((resolve, reject) => {\n            const file = document.createElement(\"script\");\n            file.type = \"text/javascript\";\n            file.src = src;\n            file.id = id;\n            file.onload = resolve;\n            file.onerror = reject;\n            document.querySelector(\"head\").appendChild(file);\n        });\n    }\n    /**\n     * Returns true/false if firebase object reference exists inside window\n     */\n    hasFirebaseInitialized() {\n        if (!window.firebase) {\n            return false;\n        }\n        const firebaseApps = window.firebase.apps;\n        if (firebaseApps && firebaseApps.length === 0) {\n            return false;\n        }\n        return true;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}