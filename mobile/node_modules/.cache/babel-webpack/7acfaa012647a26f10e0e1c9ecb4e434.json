{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { CapQualtrics } from 'capacitor-qualtrics';\nimport { QualtricsProperty } from './constants/qualtrics-properties.enum';\nimport { QUALTRICS_BRAND_ID, QUALTRICS_PROJECT_ID, QUALTRICS_EXT_REF_ID } from './constants/qualtrics-config';\nimport { NavigationEnd } from '@angular/router';\nimport { endPoints } from './constants/endpoints';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@shared-lib/services/base/base-factory-provider\";\nimport * as i3 from \"@shared-lib/services/utility/utility.service\";\nimport * as i4 from \"@ionic/angular\";\nexport const QUALTRICS_EVAL_INTERVAL = 10 * 1000; //35 seconds\n\nexport let QualtricsService = /*#__PURE__*/(() => {\n  class QualtricsService {\n    constructor(router, baseService, utilityService, platform) {\n      this.router = router;\n      this.baseService = baseService;\n      this.utilityService = utilityService;\n      this.platform = platform;\n      this.endPoints = endPoints;\n      this.qualtrics = CapQualtrics;\n    }\n\n    initialize() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.endPoints = this.utilityService.appendBaseUrlToEndpoints(this.endPoints);\n        const result = yield this.qualtrics.initialize({\n          brandID: QUALTRICS_BRAND_ID,\n          projectID: QUALTRICS_PROJECT_ID,\n          extRefID: QUALTRICS_EXT_REF_ID\n        });\n\n        if (result.success) {\n          this.setUpRouteListener();\n          this.startEvaluationTimer();\n        }\n      });\n    }\n\n    setUpRouteListener() {\n      this.subscription = this.router.events.subscribe(this.routeChanged.bind(this));\n    }\n\n    routeChanged(event) {\n      if (event instanceof NavigationEnd) {\n        const pageUrl = event.urlAfterRedirects;\n        this.registerViewVisit(pageUrl);\n        this.setProperty(QualtricsProperty.PAGE_NAME, pageUrl);\n      }\n    }\n\n    startEvaluationTimer() {\n      this.clearEvaluationTimer();\n      this.evalTimer = setInterval(this.evaluateProject.bind(this), QUALTRICS_EVAL_INTERVAL);\n    }\n\n    clearEvaluationTimer() {\n      if (this.evalTimer) {\n        clearInterval(this.evalTimer);\n      }\n    }\n\n    getUserProperties() {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (!this.userProperties) {\n          this.userProperties = yield this.baseService.get(this.endPoints.qualtricsUserProps);\n        }\n\n        return this.userProperties;\n      });\n    }\n\n    setUserProperties(paticipant) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const result = yield this.getUserProperties();\n        this.setProperty(QualtricsProperty.APP_ID, 'myVoyage');\n        this.setProperty(QualtricsProperty.CLIENT_ID, result.clientId);\n        const planIds = [];\n        result.planIdList.forEach(plan => {\n          planIds.push(plan.planId);\n        });\n        this.setProperty(QualtricsProperty.PLAN, planIds.join(','));\n        this.setProperty(QualtricsProperty.PARTY_ID, result.partyId);\n        this.setProperty(QualtricsProperty.EMAIL, result.email);\n        this.setProperty(QualtricsProperty.PHONE, result.mobile);\n        this.setProperty(QualtricsProperty.FIRST_TIME_USER, result.firstTimeLogin ? 'Y' : 'N');\n        this.setProperty(QualtricsProperty.FIRST_NAME, paticipant.firstName);\n\n        if (this.platform.is('ios')) {\n          this.setProperty(QualtricsProperty.DEVICE_TYPE, 'ios');\n        } else if (this.platform.is('android')) {\n          this.setProperty(QualtricsProperty.DEVICE_TYPE, 'android');\n        } else {\n          this.setProperty(QualtricsProperty.DEVICE_TYPE, 'web');\n        }\n      });\n    }\n\n    setProperty(prop, val) {\n      return __awaiter(this, void 0, void 0, function* () {\n        return this.qualtrics.setProperty({\n          propName: prop,\n          propVal: val\n        });\n      });\n    }\n\n    registerViewVisit(viewName) {\n      return __awaiter(this, void 0, void 0, function* () {\n        return this.qualtrics.registerViewVisit({\n          viewName: viewName\n        });\n      });\n    }\n\n    evaluateProject(bypass = false) {\n      return __awaiter(this, void 0, void 0, function* () {\n        return this.qualtrics.evaluate({\n          bypass: bypass\n        });\n      });\n    }\n\n    evaluateInterceptId(interceptId, bypass = false) {\n      return __awaiter(this, void 0, void 0, function* () {\n        return this.qualtrics.evaluateInterceptId({\n          interceptId: interceptId,\n          bypass: bypass\n        });\n      });\n    }\n\n    ngOnDestroy() {\n      if (this.subscription) {\n        this.subscription.unsubscribe();\n      }\n\n      this.clearEvaluationTimer();\n    }\n\n  }\n\n  QualtricsService.ɵfac = function QualtricsService_Factory(t) {\n    return new (t || QualtricsService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.BaseService), i0.ɵɵinject(i3.SharedUtilityService), i0.ɵɵinject(i4.Platform));\n  };\n\n  QualtricsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: QualtricsService,\n    factory: QualtricsService.ɵfac,\n    providedIn: 'root'\n  });\n  return QualtricsService;\n})();","map":null,"metadata":{},"sourceType":"module"}