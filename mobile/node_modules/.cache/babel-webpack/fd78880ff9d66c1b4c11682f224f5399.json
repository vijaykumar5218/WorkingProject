{"ast":null,"code":"define(['../CalcUtilities', './match/ConsecutiveTierEmployerMatch', './EmployerMatchWrapper', './ERMatchTypes', '../../Utilities'], function (CalcUtilities, ConsecutiveTierEmployerMatch, EmployerMatchWrapper, ERMatchTypes, Utilities) {\n  var StandardERMatch = Utilities.extend(EmployerMatchWrapper, function () {\n    //  Private Variable Declarations  ------------------------------\n    var that = this;\n    var _em = null;\n    var _dAnnualMaxContrib = 0;\n    var _nTierToApplyAnnualMax = ERMatchTypes.MAX_TIER_DEFAULT; // zero-based; if not index, max applies to combined tiers\n    //  Privileged Method Declarations  ------------------------------\n\n    this.setAnnualMaxContrib = function (d) {\n      if (_dAnnualMaxContrib != d) {\n        _dAnnualMaxContrib = d;\n      }\n    };\n\n    this.setTierAnnualMax = function (n) {\n      if (_nTierToApplyAnnualMax != n) {\n        _nTierToApplyAnnualMax = n;\n      }\n    };\n\n    this.set = function (d1stRateOfMatch, d1stRangeOfSalary, d2ndRateOfMatch, d2ndRangeOfSalary, dAnnualMaxContrib, nTierToApplyAnnualMax) {\n      var _d1stRateOfMatch = d1stRateOfMatch || 0;\n\n      var _d1stRangeOfSalary = d1stRangeOfSalary || 0;\n\n      var _d2ndRateOfMatch = d2ndRateOfMatch || 0;\n\n      var _d2ndRangeOfSalary = d2ndRangeOfSalary || 0;\n\n      var _dAnnualMaxContrib = dAnnualMaxContrib || 0;\n\n      var _nTierToApplyAnnualMax = isNaN(nTierToApplyAnnualMax) ? ERMatchTypes.MAX_TIER_DEFAULT : nTierToApplyAnnualMax;\n\n      _set(_d1stRateOfMatch, _d1stRangeOfSalary, _d2ndRateOfMatch, _d2ndRangeOfSalary, _dAnnualMaxContrib, _nTierToApplyAnnualMax);\n    };\n\n    this.getAnnualMaxContrib = function () {\n      return _dAnnualMaxContrib;\n    };\n\n    this.getTierAnnualMax = function () {\n      return _nTierToApplyAnnualMax;\n    };\n\n    this.getEmployerContrib = function (dModalEeContrib, dAnnualEeContribAscribed, dAnnualSalary, nPayPeriods) {\n      var dReturn = 0;\n      var dMatchingContrib = 0;\n      var dAnnualAscribedMatching = 0;\n      nPayPeriods = nPayPeriods > 0 ? nPayPeriods : 1; // for tier-specific\n\n      var nTiers = _em.getTierCount();\n\n      var nTierToApplyMax = that.getTierAnnualMax(); // if annual max IS tier-specific\n\n      if (_dAnnualMaxContrib > 0 && nTierToApplyMax > -1 && nTierToApplyMax < nTiers) {\n        var tierSpecific = new Array(nTiers);\n\n        for (var n = 0; n < nTiers; n++) {\n          dMatchingContrib = _em.getEmployerMatchingContribPerTier(dModalEeContrib + dAnnualEeContribAscribed / nPayPeriods, CalcUtilities.truncate(dAnnualSalary / nPayPeriods, 2), n);\n          dMatchingContrib -= _em.getEmployerMatchingContribPerTier(dAnnualEeContribAscribed / nPayPeriods, CalcUtilities.truncate(dAnnualSalary / nPayPeriods, 2), n);\n          dAnnualAscribedMatching = _em.getEmployerMatchingContribPerTier(dAnnualEeContribAscribed, CalcUtilities.truncate(dAnnualSalary, 2), n);\n          tierSpecific[n] = Math.max(dMatchingContrib, 0.);\n          tierSpecific[n] = n == nTierToApplyMax ? Math.min(Math.max((_dAnnualMaxContrib - dAnnualAscribedMatching) / nPayPeriods, 0.), tierSpecific[n]) : tierSpecific[n];\n        }\n\n        dReturn = _totalArray(tierSpecific);\n      } // annual max IS NOT tier-specific\n      else {\n        dMatchingContrib = _em.getEmployerMatchingContrib(dModalEeContrib + dAnnualEeContribAscribed / nPayPeriods, CalcUtilities.truncate(dAnnualSalary / nPayPeriods, 2));\n        dMatchingContrib -= _em.getEmployerMatchingContrib(dAnnualEeContribAscribed / nPayPeriods, CalcUtilities.truncate(dAnnualSalary / nPayPeriods, 2));\n        dAnnualAscribedMatching = _em.getEmployerMatchingContrib(dAnnualEeContribAscribed, CalcUtilities.truncate(dAnnualSalary, 2));\n        dReturn = Math.max(dMatchingContrib, 0); // check against annual max\n\n        dReturn = _dAnnualMaxContrib > 0 ? Math.min(Math.max((_dAnnualMaxContrib - dAnnualAscribedMatching) / nPayPeriods, 0), dReturn) : dReturn;\n      }\n\n      return dReturn;\n    };\n\n    this.reset = function () {\n      _set(0, 0, 0, 0, 0, _nTierToApplyAnnualMax);\n    }; //  Private Method Declarations  ---------------------------------\n\n\n    (function init() {\n      // two tier employer match\n      _em = new ConsecutiveTierEmployerMatch(ERMatchTypes.STANDARD_TIER_COUNT);\n      _dAnnualMaxContrib = 0;\n      _nTierToApplyAnnualMax = ERMatchTypes.MAX_TIER_DEFAULT; // default - max applies to all tiers combined\n    })();\n\n    function _set(d1stRateOfMatch, d1stRangeOfSalary, d2ndRateOfMatch, d2ndRangeOfSalary, dAnnualMaxContrib, nTierToApplyAnnualMax) {\n      _em.setFirstTier(d1stRangeOfSalary, d1stRateOfMatch);\n\n      _em.setSecondTier(d2ndRangeOfSalary, d2ndRateOfMatch);\n\n      that.setAnnualMaxContrib(dAnnualMaxContrib);\n      that.setTierAnnualMax(nTierToApplyAnnualMax);\n    }\n\n    function _totalArray(_dd) {\n      var dReturn = 0;\n\n      for (var n = 0; n < _dd.length; n++) {\n        dReturn += _dd[n];\n      }\n\n      return dReturn;\n    }\n  });\n\n  StandardERMatch.prototype.modifyEeContrib = function (dModalEeContrib, dAnnualSalary, nPayPeriods) {\n    return dModalEeContrib;\n  };\n\n  return StandardERMatch;\n});","map":null,"metadata":{},"sourceType":"script"}