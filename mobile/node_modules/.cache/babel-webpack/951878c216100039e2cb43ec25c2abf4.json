{"ast":null,"code":"define(['./AccountAccum', './AccountTypes', './IRSConstants', './LimitUtilities', '../utils/utilities'], function (AccountAccum, AccountTypes, IRSConstants, LimitUtilities, Utilities) {\n  var ErrorUtilities = {};\n\n  ErrorUtilities.createErrorStringForSingleAccountIRSInfraction = function (aa) {\n    var errorBuffer = \"\";\n    var maxes = null;\n    errorBuffer += \"\" + AccountTypes.getUserLabel(aa.getType()) + \" \" + IRSConstants.getIRClabel(aa.getIRC());\n    errorBuffer += \" contributions may not exceed \"; //double limit = LimitUtilities.transIRSContribMax2ContribType( aa.getContribType(), aa.getType(), aa.getIRC(), aa.getFrequency(), aa.getIterationAnnualSalary() ) ;\n\n    maxes = LimitUtilities.getIRSContribMaxes(aa.getType(), aa.getIRC(), aa.getFrequency(), aa.getIterationEeAnnualSalary());\n\n    if (aa.getContribType() == AccountTypes.CONTRIB_RATE) {\n      errorBuffer += ErrorUtilities.formatPercent(maxes[LimitUtilities.MAX_RATE], 2);\n      errorBuffer += \" of pay.\";\n    } else {\n      errorBuffer += ErrorUtilities.formatMoney(maxes[LimitUtilities.MAX_DOLLAR]);\n      errorBuffer += \" per pay period.\";\n    }\n\n    errorBuffer += \"  Please adjust contributions before proceeding.\";\n    return errorBuffer;\n  };\n\n  ErrorUtilities.createErrorStringForMultipleAccountIRSInfraction = function (prime, al) {\n    var errorBuffer = \"\";\n    var maxes = null;\n    var index = -1;\n    var primeIndex = LimitUtilities.getIndexForGrouped_402g1_457e15_414_vLimits(prime.getType(), prime.getIRC());\n    var count = 0;\n    errorBuffer += \"The total of \";\n\n    for (var i = 0; i < al.length; i++) {\n      var aa = al[i];\n      index = -1;\n      index = LimitUtilities.getIndexForGrouped_402g1_457e15_414_vLimits(aa.getType(), aa.getIRC());\n\n      if (index > -1 && primeIndex == index && aa.getStartContrib() > 0) {\n        errorBuffer += (count > 0 ? \" and \" : \"\") + (AccountTypes.getUserLabel(aa.getType()) + \" \" + IRSConstants.getIRClabel(aa.getIRC()));\n        count++;\n      }\n    }\n\n    errorBuffer += \" contributions may not exceed \";\n    maxes = LimitUtilities.getIRSContribMaxes(prime.getType(), prime.getIRC(), prime.getFrequency(), prime.getIterationEeAnnualSalary());\n\n    if (prime.getContribType() == AccountTypes.CONTRIB_RATE) {\n      errorBuffer += ErrorUtilities.formatPercent(maxes[LimitUtilities.MAX_RATE], 2);\n      errorBuffer += \" of pay.\";\n    } else {\n      errorBuffer += ErrorUtilities.formatMoney(maxes[LimitUtilities.MAX_DOLLAR]);\n      errorBuffer += \" per pay period.\";\n    }\n\n    errorBuffer += \"  Please adjust contributions before proceeding.\";\n    return errorBuffer;\n  };\n\n  ErrorUtilities.createErrorStringForMultiple = function (rate, amount) {\n    var errorBuffer = \"\";\n    errorBuffer += \"The total plan contributions may not exceed \";\n    errorBuffer += ErrorUtilities.formatMoney(amount);\n    errorBuffer += \" per pay period or \";\n    errorBuffer += ErrorUtilities.formatPercent(rate, 2);\n    errorBuffer += \" of pay.\";\n    errorBuffer += \"  Please adjust contributions before proceeding.\";\n    return errorBuffer;\n  };\n\n  ErrorUtilities.createErrorStringForExceedingSalary = function () {\n    var errorBuffer = \"\";\n    errorBuffer += \"The total contributions may not exceed salary.\";\n    errorBuffer += \"  Please adjust contributions before proceeding.\";\n    return errorBuffer;\n  };\n\n  ErrorUtilities.createErrorStringForSingleAccountNonIRSInfraction = function (aa) {\n    var errorBuffer = \"\";\n    var max = 0; //errorBuffer +=  \"Your \" ;\n\n    errorBuffer += \"\" + AccountTypes.getUserLabel(aa.getType()) + \" \" + IRSConstants.getIRClabel(aa.getIRC());\n    errorBuffer += \" contributions may not exceed \";\n    max = aa.getMinMaxLimit().getAnnualMax(aa.getIterationEeAnnualSalary());\n\n    if (aa.getContribType() == AccountTypes.CONTRIB_RATE) {\n      errorBuffer += ErrorUtilities.formatPercent(max / aa.getIterationEeAnnualSalary(), 2);\n      errorBuffer += \" of pay.\";\n    } else {\n      errorBuffer += ErrorUtilities.formatMoney(max / aa.getFrequency());\n      errorBuffer += \" per pay period.\";\n    }\n\n    errorBuffer += \"  Please adjust contributions before proceeding.\";\n    return errorBuffer;\n  };\n\n  ErrorUtilities.createErrorStringFor415IRSInfraction = function (remainingLimit, prime, al) {\n    var errorBuffer = \"\";\n    var index = -1;\n    var count = 0;\n    var delineate = true;\n\n    for (var i = 0; i < al.length; i++) {\n      var aa = al[i];\n      index = -1;\n      index = LimitUtilities.getIndexForGrouped_415c1A_Limit(aa.getType(), aa.getIRC());\n\n      if (index > -1 && !(aa.getType() == AccountTypes.TYPE_PRETAX || aa.getType() == AccountTypes.TYPE_ROTH || aa.getType() == AccountTypes.TYPE_AFTERTAX)) {\n        delineate = false;\n      }\n    }\n\n    var maxes = LimitUtilities.getIRSContribMaxes(prime.getType(), prime.getIRC(), prime.getFrequency(), prime.getIterationEeAnnualSalary());\n\n    if (delineate) {\n      errorBuffer += \"The total of \";\n\n      for (var i = 0; i < al.length; i++) {\n        var aa = al[i];\n        index = -1;\n        index = LimitUtilities.getIndexForGrouped_415c1A_Limit(aa.getType(), aa.getIRC());\n\n        if (index > -1) {\n          errorBuffer += (count > 0 ? \" and \" : \"\") + (AccountTypes.getUserLabel(aa.getType()) + \" \" + IRSConstants.getIRClabel(aa.getIRC()));\n          count++;\n        }\n      }\n\n      errorBuffer += \" contributions may not exceed \";\n\n      if (prime.getContribType() == AccountTypes.CONTRIB_RATE) {\n        errorBuffer += ErrorUtilities.formatPercent(maxes[LimitUtilities.MAX_RATE], 2);\n        errorBuffer += \" of pay.\";\n      } else {\n        errorBuffer += ErrorUtilities.formatMoney(maxes[LimitUtilities.MAX_DOLLAR]);\n        errorBuffer += \" per pay period.\";\n      }\n\n      errorBuffer += \"  Please adjust contributions before proceeding.\";\n    } else {\n      //var limit = IRSConstants.getInstance().getLimit(IRSConstants._415c1A) ;\n      errorBuffer += ErrorUtilities.createErrorStringForMultiple(maxes[LimitUtilities.MAX_RATE], maxes[LimitUtilities.MAX_DOLLAR]);\n    }\n\n    return errorBuffer;\n  };\n\n  ErrorUtilities.formatPercent = function (d, nDecimalDigits) {\n    var rtn = Utilities.cleanNumber(d > 1 ? d : d * 100);\n    return rtn + \"%\";\n  };\n\n  ErrorUtilities.formatMoney = function (d) {\n    return \"$\" + d.toFixed(2);\n  };\n\n  return ErrorUtilities;\n});","map":null,"metadata":{},"sourceType":"script"}