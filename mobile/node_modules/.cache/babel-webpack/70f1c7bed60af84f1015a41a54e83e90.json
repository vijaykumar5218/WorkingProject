{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic/angular\";\nexport let PlatformService = /*#__PURE__*/(() => {\n  class PlatformService {\n    constructor(platform) {\n      this.platform = platform;\n      this.onReady = new Subject();\n      this.onResume = new Subject();\n      this.onPause = new Subject();\n      this.pauseBackgroundListeners = false;\n      this.onReady$ = this.onReady.asObservable();\n      this.onResume$ = this.onResume.asObservable();\n      this.onPause$ = this.onPause.asObservable();\n    }\n\n    initialize() {\n      this.platform.ready().then(() => {\n        this.onReady.next();\n      });\n      this.platform.resume.subscribe(this.resume.bind(this));\n      this.platform.pause.subscribe(this.pause.bind(this));\n    }\n\n    resume() {\n      return __awaiter(this, void 0, void 0, function* () {\n        console.log('============ Got On Resume =============', this.pauseBackgroundListeners);\n\n        if (this.pauseBackgroundListeners) {\n          return;\n        }\n\n        console.log('============ Got On Resume (After pause check) =============');\n        this.pauseBackgroundListeners = true;\n        const result = yield this.initialResume();\n        this.pauseBackgroundListeners = false;\n\n        if (result) {\n          console.log('============ Calling other resumes =============');\n          this.onResume.next();\n        }\n      });\n    }\n\n    pause() {\n      if (this.pauseBackgroundListeners) {\n        return;\n      }\n\n      this.onPause.next();\n    }\n\n    setInitialResume(resume) {\n      this.initialResume = resume;\n    }\n\n    isIos() {\n      return this.platform.is('ios');\n    }\n\n    keyboardDidShow() {\n      return this.platform.keyboardDidShow;\n    }\n\n    backButton() {\n      return this.platform.backButton;\n    }\n\n  }\n\n  PlatformService.ɵfac = function PlatformService_Factory(t) {\n    return new (t || PlatformService)(i0.ɵɵinject(i1.Platform));\n  };\n\n  PlatformService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PlatformService,\n    factory: PlatformService.ɵfac,\n    providedIn: 'root'\n  });\n  return PlatformService;\n})();","map":null,"metadata":{},"sourceType":"module"}