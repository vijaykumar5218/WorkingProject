{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { EventEmitter } from '@angular/core';\nimport { ValidationType } from '@shared-lib/services/journey/constants/validationType.enum';\nimport { Subscription } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@shared-lib/services/journey/journey.service\";\nimport * as i2 from \"../service/input.service\";\nimport * as i3 from \"@ionic/angular\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"../../../../../directives/validation/validation.directive\";\nimport * as i6 from \"@angular/common\";\nconst _c0 = [\"inputEl\"];\n\nconst _c1 = function (a0) {\n  return {\n    \"large-input\": a0\n  };\n};\n\nexport let TextFieldComponent = /*#__PURE__*/(() => {\n  class TextFieldComponent {\n    constructor(journeyService, inputService, modalController) {\n      this.journeyService = journeyService;\n      this.inputService = inputService;\n      this.modalController = modalController;\n      this.valueChange = new EventEmitter();\n      this.blur = new EventEmitter();\n      this.validationType = ValidationType;\n      this.subscription = new Subscription();\n    }\n\n    ngOnInit() {\n      this.subscription.add(this.inputService.getValidationRules$().subscribe(validationRules => {\n        this.input.validationRules = validationRules;\n      }));\n    }\n\n    ngAfterViewInit() {\n      if (this.value) {\n        this.emitValueChange();\n      }\n    }\n\n    emitValueChange() {\n      this.valueChange.emit(this.value);\n    }\n\n    emitBlur() {\n      var _a, _b;\n\n      return __awaiter(this, void 0, void 0, function* () {\n        if (((_a = this.input.validationRules) === null || _a === void 0 ? void 0 : _a.emptyAllowed) === false && this.journeyService.isValueEmpty(this.value)) {\n          this.value = this.journeyService.addDollar(this.input.validationRules.min.toString(), this.input);\n\n          if ((_b = this.input) === null || _b === void 0 ? void 0 : _b.displayErrorPopup) {\n            this.journeyService.openModal({\n              element: Object.assign(Object.assign({}, this.input), {\n                id: 'error-msg'\n              })\n            }, false);\n          }\n        }\n\n        this.emitValueChange();\n        this.blur.emit();\n      });\n    }\n\n    ngOnDestroy() {\n      this.subscription.unsubscribe();\n    }\n\n  }\n\n  TextFieldComponent.ɵfac = function TextFieldComponent_Factory(t) {\n    return new (t || TextFieldComponent)(i0.ɵɵdirectiveInject(i1.JourneyService), i0.ɵɵdirectiveInject(i2.InputService), i0.ɵɵdirectiveInject(i3.ModalController));\n  };\n\n  TextFieldComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TextFieldComponent,\n    selectors: [[\"journeys-steps-step-input-text-field\"]],\n    viewQuery: function TextFieldComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputEl = _t.first);\n      }\n    },\n    inputs: {\n      value: \"value\",\n      placeholder: \"placeholder\",\n      padding: \"padding\",\n      input: \"input\",\n      idSuffix: \"idSuffix\"\n    },\n    outputs: {\n      valueChange: \"valueChange\",\n      blur: \"blur\"\n    },\n    decls: 2,\n    vars: 10,\n    consts: [[3, \"ngModel\", \"placeholder\", \"inputmode\", \"journeysValidation\", \"input\", \"id\", \"ngClass\", \"ngModelChange\", \"ionChange\", \"ionBlur\"], [\"inputEl\", \"\"]],\n    template: function TextFieldComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-input\", 0, 1);\n        i0.ɵɵlistener(\"ngModelChange\", function TextFieldComponent_Template_ion_input_ngModelChange_0_listener($event) {\n          return ctx.value = $event;\n        })(\"ionChange\", function TextFieldComponent_Template_ion_input_ionChange_0_listener() {\n          return ctx.emitValueChange();\n        })(\"ionBlur\", function TextFieldComponent_Template_ion_input_ionBlur_0_listener() {\n          return ctx.emitBlur();\n        });\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵstyleProp(\"--padding-start\", ctx.padding);\n        i0.ɵɵproperty(\"ngModel\", ctx.value)(\"placeholder\", ctx.placeholder)(\"inputmode\", (ctx.input.validationRules == null ? null : ctx.input.validationRules.type) === ctx.validationType.number || (ctx.input.validationRules == null ? null : ctx.input.validationRules.type) === ctx.validationType.dollar ? \"numeric\" : \"text\")(\"input\", ctx.input)(\"id\", \"journeyInput\" + (ctx.idSuffix || ctx.input.idSuffix))(\"ngClass\", i0.ɵɵpureFunction1(8, _c1, ctx.input.largeInput));\n      }\n    },\n    directives: [i3.IonInput, i3.TextValueAccessor, i4.NgControlStatus, i4.NgModel, i5.ValidationDirective, i6.NgClass],\n    styles: [\"[_nghost-%COMP%]{display:block}[_nghost-%COMP%]   ion-input[_ngcontent-%COMP%]:not(.large-input){height:100%;border:1px solid var(--secondary-colors-medium-gray-2);border-radius:4px;color:var(--primary-colors-voya-black)!important;font-size:16px;font-weight:bold;--placeholder-color: var(--voya-grey-font);--padding-start: 0px}[_nghost-%COMP%]   ion-input[_ngcontent-%COMP%]:not(.large-input).has-focus{border-color:var(--primary-colors-voya-dark-blue);color:var(--primary-colors-voya-dark-blue)!important}[_nghost-%COMP%]   ion-input.large-input[_ngcontent-%COMP%]{color:var(--primary-colors-voya-dark-blue)!important;font-size:52px;font-weight:bold;width:174px;text-align:center;border-bottom:1px solid var(--primary-colors-voya-dark-blue);line-height:53px;--padding-start: 0px;--padding-end: 0px;--padding-bottom: 0px;--padding-top: 0px}\"]\n  });\n  return TextFieldComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}