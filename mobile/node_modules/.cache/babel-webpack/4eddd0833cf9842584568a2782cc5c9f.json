{"ast":null,"code":"import _asyncToGenerator from \"/Users/vijay.a/Documents/GitHub/MYVOYAGE/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { AccessService } from '@shared-lib/services/access/access.service';\nimport { firstValueFrom, ReplaySubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let VoyaGlobalCacheService = /*#__PURE__*/(() => {\n  class VoyaGlobalCacheService {\n    constructor(http, injector) {\n      this.http = http;\n      this.injector = injector;\n      this.dataCache = {};\n      this.translationPreferenceResponse = new ReplaySubject(1);\n      this.w = window;\n    }\n\n    initVoyaGlobalCache() {\n      var _this = this;\n\n      if (!window.fetchMethod) {\n        window.fetchMethod = /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(function* (url, opts) {\n            const myWorkplaceDashboardEnabled = localStorage.getItem('myWorkplaceDashboardEnabled') === 'true';\n\n            const pageName = _this.getPageName();\n\n            url = _this.constructURL(url, myWorkplaceDashboardEnabled, pageName);\n            const angularOpts = {\n              headers: opts.headers,\n              withCredentials: true\n            };\n\n            if (_this.dataCache[url]) {\n              return Promise.resolve(new Response(JSON.stringify(yield _this.dataCache[url])));\n            }\n\n            let promise;\n\n            if (opts.method === 'GET') {\n              promise = _this.handleGetCall(url, opts);\n            } else if (opts.method === 'POST') {\n              _this.setClientBrandPostBody(url, myWorkplaceDashboardEnabled, opts, pageName);\n\n              if (url.includes('/setPref')) {\n                promise = firstValueFrom(_this.http.post(url, opts.body, { ...angularOpts,\n                  responseType: 'text'\n                }));\n                return new Response(yield promise);\n              }\n\n              promise = firstValueFrom(_this.http.post(url, opts.body, angularOpts));\n            }\n\n            _this.dataCache[url] = promise;\n\n            if (url.includes('/getPref')) {\n              _this.translationPreferenceResponse.next(yield promise);\n            }\n\n            return new Response(JSON.stringify(yield promise));\n          });\n\n          return function (_x, _x2) {\n            return _ref.apply(this, arguments);\n          };\n        }();\n\n        this.requireNav();\n      }\n    }\n\n    getPageName() {\n      return sessionStorage.getItem('isMyBenefitshub') === 'true' ? 'myBenefitshub' : 'dashboard';\n    }\n\n    setClientBrandPostBody(url, myWorkplaceDashboardEnabled, opts, pageName) {\n      if (url.includes('/clientbrand') && myWorkplaceDashboardEnabled) {\n        let body = JSON.parse(opts.body);\n        body = { ...body,\n          pageName: pageName\n        };\n        opts.body = JSON.stringify(body);\n      }\n    }\n\n    requireNav() {\n      require('voya-global-nav');\n    }\n\n    constructURL(url, myWorkplaceDashboardEnabled, pageName) {\n      if (url.includes('/dashboard/primaryNavLinks') || url.includes('/dashboard/responsivenav')) {\n        const sessionID = localStorage.getItem('sessionId');\n        url = `${url}?sessionID=${sessionID}&pageName=${pageName}`;\n      } else if (url.includes('/clientBrand') && myWorkplaceDashboardEnabled) {\n        url = url.replace('public/rsglobal/clientBrand', 'postlogin/clientbrand');\n      } else if (url.includes('/dashboard/retirement/vds/footer')) {\n        url = `${url}?pageName=${pageName}`;\n      }\n\n      return url;\n    }\n\n    handleGetCall(url, opts) {\n      let promise;\n      const accessService = this.injector.get(AccessService);\n\n      if (url.includes('/myvoyageenabled')) {\n        promise = accessService.checkMyvoyageAccess();\n      } else {\n        promise = firstValueFrom(this.http.get(url, {\n          headers: opts.headers,\n          withCredentials: true\n        }));\n      }\n\n      return promise;\n    }\n\n    getTranslationPreference() {\n      return this.translationPreferenceResponse;\n    }\n\n  }\n\n  VoyaGlobalCacheService.ɵfac = function VoyaGlobalCacheService_Factory(t) {\n    return new (t || VoyaGlobalCacheService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i0.Injector));\n  };\n\n  VoyaGlobalCacheService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: VoyaGlobalCacheService,\n    factory: VoyaGlobalCacheService.ɵfac,\n    providedIn: 'root'\n  });\n  return VoyaGlobalCacheService;\n})();","map":null,"metadata":{},"sourceType":"module"}