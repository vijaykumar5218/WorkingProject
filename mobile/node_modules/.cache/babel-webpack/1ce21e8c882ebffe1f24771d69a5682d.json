{"ast":null,"code":"define(['./AccountTypes', './IRSwh', './util/CalcUtilities', './AccumCensus'], function (AccountTypes, IRSwh, CalcUtilities, AccumCensus) {\n  //  Constructor\n  var ReplacementIncome = function () {};\n\n  ReplacementIncome.getAdjustedCurrentDollarSalary = function (type, current, years, rateOfIncrease, rateOfInflation, censusList) {\n    var ret = 0.0;\n    var census = null;\n    years = Math.max(years - 1, 0); // adjust to year prior to retirement: this is the last year of salary reductions and is reference for salary manipulations\n    // new default: balance increase and inflation rates to establish an at-retirement view of salary in current dollars\n\n    ret = current * ReplacementIncome.getBalancedRate(years, rateOfIncrease, rateOfInflation);\n\n    switch (type) {\n      case ReplacementIncome.TYPE_LIFESTYLE_CURRENT:\n        census = censusList[0]; // first object in list\n\n        if (census != null) {\n          ret = ReplacementIncome.getLifeStyleAdjustedSalary(census) * ReplacementIncome.getBalancedRate(years, rateOfIncrease, rateOfInflation);\n        }\n\n        break;\n\n      case ReplacementIncome.TYPE_LIFESTYLE_FUTURE:\n        census = censusList[censusList.length - 1]; // last object in list\n\n        if (census != null) {\n          ret = ReplacementIncome.getLifeStyleAdjustedSalary(census) * CalcUtilities.discountingRate(census.getPeriodRef(), rateOfInflation);\n        }\n\n        break;\n\n      case ReplacementIncome.TYPE_OLD:\n        // as done prior to 2017/07\n        ret = current;\n        break;\n\n      case ReplacementIncome.TYPE_STANDARD:\n      default:\n        break;\n    }\n\n    return CalcUtilities.roundAndTruncate(ret, 2);\n  };\n\n  ReplacementIncome.getBalancedRate = function (years, rateOfIncrease, rateOfInflation) {\n    return Math.pow(1.0 + rateOfIncrease, years) * Math.pow(1.0 / (1.0 + rateOfInflation), years);\n  };\n\n  ReplacementIncome.getLifeStyleAdjustedSalary = function (census) {\n    var salary = census.getSalary();\n    var mediWh = IRSwh.getWithholding(IRSwh.MC, salary); // withholding for Medicare\n\n    var eeContribs = census.getEEContribs();\n    return salary - eeContribs - mediWh;\n  };\n\n  ReplacementIncome.getReplacementIncomeCalcType = function (typeText) {\n    var ret = ReplacementIncome.TYPE_STANDARD;\n    var s = \"\";\n\n    if (typeof typeText === 'string') {\n      s = typeText.toUpperCase().trim();\n    }\n\n    if (s.indexOf(\"CURRENT\") > -1) {\n      ret = ReplacementIncome.TYPE_LIFESTYLE_CURRENT;\n    } else {\n      if (s.indexOf(\"FUTURE\") > -1) {\n        ret = ReplacementIncome.TYPE_LIFESTYLE_FUTURE;\n      } else {\n        if (s.indexOf(\"OLD\") > -1) {\n          ret = ReplacementIncome.TYPE_OLD;\n        }\n      }\n    }\n\n    return ret;\n  };\n\n  ReplacementIncome.TYPE_STANDARD = 0; // default (cf. next description)\n\n  ReplacementIncome.TYPE_BALANCED = 0; // (default) current salary adjusted by both increase and inflation rates to produce current dollars (orienting to future purchasing power)\n\n  ReplacementIncome.TYPE_LIFESTYLE_CURRENT = 1; // LA \"LifeStyle\" salary definition captured for current (first) year, then adjusted as above\n\n  ReplacementIncome.TYPE_LIFESTYLE_FUTURE = 2; // LA \"LifeStyle\" salary definition captured in year prior to retirement (the last year of salary and reductions), then adjusted by inflation\n\n  ReplacementIncome.TYPE_OLD = 9; // current salary remains unadjusted (today's behavior)\n  // account types that define \"Life Style\" salary\n\n  ReplacementIncome.LifeStyleTypes = [AccountTypes.TYPE_DB_MANDATORY_EE, AccountTypes.TYPE_MANDATORY_EE, AccountTypes.TYPE_PRETAX, AccountTypes.TYPE_ROTH, AccountTypes.TYPE_SUPPL_PRETAX, AccountTypes.TYPE_SUPPL_ROTH, AccountTypes.TYPE_PRETAX_AGECATCHUP, AccountTypes.TYPE_ROTH_AGECATCHUP, AccountTypes.TYPE_AFTERTAX, AccountTypes.TYPE_SUPPL_AFTERTAX];\n  return ReplacementIncome;\n});","map":null,"metadata":{},"sourceType":"script"}