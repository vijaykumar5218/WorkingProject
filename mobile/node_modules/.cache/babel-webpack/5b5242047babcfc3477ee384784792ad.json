{"ast":null,"code":"import _asyncToGenerator from \"/Users/vijay.a/Documents/GitHub/MYVOYAGE/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { WebPlugin } from '@capacitor/core';\nexport class BadgeWeb extends WebPlugin {\n  constructor() {\n    super();\n    this.restore();\n  }\n\n  checkPermissions() {\n    return _asyncToGenerator(function* () {\n      return {\n        display: 'granted'\n      };\n    })();\n  }\n\n  requestPermissions() {\n    return _asyncToGenerator(function* () {\n      return {\n        display: 'granted'\n      };\n    })();\n  }\n\n  get() {\n    return _asyncToGenerator(function* () {\n      const value = localStorage.getItem(BadgeWeb.STORAGE_KEY);\n      const count = value ? parseInt(value, 10) : 0;\n      return {\n        count\n      };\n    })();\n  }\n\n  set(options) {\n    return _asyncToGenerator(function* () {\n      const count = options.count;\n\n      if (count === 0) {\n        yield navigator.clearAppBadge();\n      } else {\n        yield navigator.setAppBadge(count);\n      }\n\n      const value = count.toString();\n      localStorage.setItem(BadgeWeb.STORAGE_KEY, value);\n    })();\n  }\n\n  increase() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        count\n      } = yield _this.get();\n      yield _this.set({\n        count: count + 1\n      });\n    })();\n  }\n\n  decrease() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        count\n      } = yield _this2.get();\n\n      if (count < 1) {\n        return;\n      }\n\n      yield _this2.set({\n        count: count - 1\n      });\n    })();\n  }\n\n  clear() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this3.set({\n        count: 0\n      });\n    })();\n  }\n\n  isSupported() {\n    return _asyncToGenerator(function* () {\n      const result = {\n        isSupported: 'setAppBadge' in navigator\n      };\n      return result;\n    })();\n  }\n\n  restore() {\n    return _asyncToGenerator(function* () {\n      const value = localStorage.getItem(BadgeWeb.STORAGE_KEY);\n\n      if (!value) {\n        return;\n      }\n\n      const count = parseInt(value, 10);\n      yield navigator.setAppBadge(count);\n    })();\n  }\n\n}\nBadgeWeb.STORAGE_KEY = 'capacitor.badge';","map":{"version":3,"sources":["/Users/vijay.a/Documents/GitHub/MYVOYAGE/node_modules/@capawesome/capacitor-badge/dist/esm/web.js"],"names":["WebPlugin","BadgeWeb","constructor","restore","checkPermissions","display","requestPermissions","get","value","localStorage","getItem","STORAGE_KEY","count","parseInt","set","options","navigator","clearAppBadge","setAppBadge","toString","setItem","increase","decrease","clear","isSupported","result"],"mappings":";AAAA,SAASA,SAAT,QAA0B,iBAA1B;AACA,OAAO,MAAMC,QAAN,SAAuBD,SAAvB,CAAiC;AACpCE,EAAAA,WAAW,GAAG;AACV;AACA,SAAKC,OAAL;AACH;;AACKC,EAAAA,gBAAgB,GAAG;AAAA;AACrB,aAAO;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAAP;AADqB;AAExB;;AACKC,EAAAA,kBAAkB,GAAG;AAAA;AACvB,aAAO;AAAED,QAAAA,OAAO,EAAE;AAAX,OAAP;AADuB;AAE1B;;AACKE,EAAAA,GAAG,GAAG;AAAA;AACR,YAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqBT,QAAQ,CAACU,WAA9B,CAAd;AACA,YAAMC,KAAK,GAAGJ,KAAK,GAAGK,QAAQ,CAACL,KAAD,EAAQ,EAAR,CAAX,GAAyB,CAA5C;AACA,aAAO;AAAEI,QAAAA;AAAF,OAAP;AAHQ;AAIX;;AACKE,EAAAA,GAAG,CAACC,OAAD,EAAU;AAAA;AACf,YAAMH,KAAK,GAAGG,OAAO,CAACH,KAAtB;;AACA,UAAIA,KAAK,KAAK,CAAd,EAAiB;AACb,cAAMI,SAAS,CAACC,aAAV,EAAN;AACH,OAFD,MAGK;AACD,cAAMD,SAAS,CAACE,WAAV,CAAsBN,KAAtB,CAAN;AACH;;AACD,YAAMJ,KAAK,GAAGI,KAAK,CAACO,QAAN,EAAd;AACAV,MAAAA,YAAY,CAACW,OAAb,CAAqBnB,QAAQ,CAACU,WAA9B,EAA2CH,KAA3C;AATe;AAUlB;;AACKa,EAAAA,QAAQ,GAAG;AAAA;;AAAA;AACb,YAAM;AAAET,QAAAA;AAAF,gBAAkB,KAAI,CAACL,GAAL,EAAxB;AACA,YAAM,KAAI,CAACO,GAAL,CAAS;AAAEF,QAAAA,KAAK,EAAEA,KAAK,GAAG;AAAjB,OAAT,CAAN;AAFa;AAGhB;;AACKU,EAAAA,QAAQ,GAAG;AAAA;;AAAA;AACb,YAAM;AAAEV,QAAAA;AAAF,gBAAkB,MAAI,CAACL,GAAL,EAAxB;;AACA,UAAIK,KAAK,GAAG,CAAZ,EAAe;AACX;AACH;;AACD,YAAM,MAAI,CAACE,GAAL,CAAS;AAAEF,QAAAA,KAAK,EAAEA,KAAK,GAAG;AAAjB,OAAT,CAAN;AALa;AAMhB;;AACKW,EAAAA,KAAK,GAAG;AAAA;;AAAA;AACV,YAAM,MAAI,CAACT,GAAL,CAAS;AAAEF,QAAAA,KAAK,EAAE;AAAT,OAAT,CAAN;AADU;AAEb;;AACKY,EAAAA,WAAW,GAAG;AAAA;AAChB,YAAMC,MAAM,GAAG;AACXD,QAAAA,WAAW,EAAE,iBAAiBR;AADnB,OAAf;AAGA,aAAOS,MAAP;AAJgB;AAKnB;;AACKtB,EAAAA,OAAO,GAAG;AAAA;AACZ,YAAMK,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqBT,QAAQ,CAACU,WAA9B,CAAd;;AACA,UAAI,CAACH,KAAL,EAAY;AACR;AACH;;AACD,YAAMI,KAAK,GAAGC,QAAQ,CAACL,KAAD,EAAQ,EAAR,CAAtB;AACA,YAAMQ,SAAS,CAACE,WAAV,CAAsBN,KAAtB,CAAN;AANY;AAOf;;AAtDmC;AAwDxCX,QAAQ,CAACU,WAAT,GAAuB,iBAAvB","sourcesContent":["import { WebPlugin } from '@capacitor/core';\nexport class BadgeWeb extends WebPlugin {\n    constructor() {\n        super();\n        this.restore();\n    }\n    async checkPermissions() {\n        return { display: 'granted' };\n    }\n    async requestPermissions() {\n        return { display: 'granted' };\n    }\n    async get() {\n        const value = localStorage.getItem(BadgeWeb.STORAGE_KEY);\n        const count = value ? parseInt(value, 10) : 0;\n        return { count };\n    }\n    async set(options) {\n        const count = options.count;\n        if (count === 0) {\n            await navigator.clearAppBadge();\n        }\n        else {\n            await navigator.setAppBadge(count);\n        }\n        const value = count.toString();\n        localStorage.setItem(BadgeWeb.STORAGE_KEY, value);\n    }\n    async increase() {\n        const { count } = await this.get();\n        await this.set({ count: count + 1 });\n    }\n    async decrease() {\n        const { count } = await this.get();\n        if (count < 1) {\n            return;\n        }\n        await this.set({ count: count - 1 });\n    }\n    async clear() {\n        await this.set({ count: 0 });\n    }\n    async isSupported() {\n        const result = {\n            isSupported: 'setAppBadge' in navigator,\n        };\n        return result;\n    }\n    async restore() {\n        const value = localStorage.getItem(BadgeWeb.STORAGE_KEY);\n        if (!value) {\n            return;\n        }\n        const count = parseInt(value, 10);\n        await navigator.setAppBadge(count);\n    }\n}\nBadgeWeb.STORAGE_KEY = 'capacitor.badge';\n"]},"metadata":{},"sourceType":"module"}