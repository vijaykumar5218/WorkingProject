{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../mobile/src/app/modules/shared/service/authentication/authentication.service\";\nimport * as i2 from \"@shared-lib/services/event-tracker/event-tracking.service\";\nimport * as i3 from \"../utility/utility.service\";\nexport let PushNotificationsService = /*#__PURE__*/(() => {\n  class PushNotificationsService {\n    constructor(authService, eventTrackingService, utilityService) {\n      this.authService = authService;\n      this.eventTrackingService = eventTrackingService;\n      this.utilityService = utilityService;\n\n      if (!this.utilityService.getIsWeb()) {\n        this.mcSDK = window.MCCordovaPlugin;\n        this.mcSDK.setOnNotificationOpenedListener(event => __awaiter(this, void 0, void 0, function* () {\n          this.authService.didLaunchWithURL(event.values.url);\n          this.captureCTAClickEvent(event.values.url);\n        }));\n      }\n    }\n\n    setContactKey(partyId) {\n      this.mcSDK.setContactKey(partyId);\n    }\n\n    captureCTAClickEvent(url) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const eventTrackingEvent = {\n          eventName: 'CTAClick',\n          passThruAttributes: [{\n            attributeName: 'source',\n            attributeValue: 'push'\n          }, {\n            attributeName: 'redirect_url',\n            attributeValue: url\n          }]\n        };\n\n        if (this.authChangeSubscription) {\n          this.authChangeSubscription.unsubscribe();\n        }\n\n        const isAuthenticated = yield this.authService.isAuthenticated();\n\n        if (isAuthenticated) {\n          this.eventTrackingService.eventTracking(eventTrackingEvent);\n        } else {\n          this.authChangeSubscription = this.authService.authenticationChange$.subscribe(isAuthenticated => {\n            if (isAuthenticated) {\n              this.eventTrackingService.eventTracking(eventTrackingEvent);\n              this.authChangeSubscription.unsubscribe();\n              this.authChangeSubscription = undefined;\n            }\n          });\n        }\n      });\n    }\n\n  }\n\n  PushNotificationsService.ɵfac = function PushNotificationsService_Factory(t) {\n    return new (t || PushNotificationsService)(i0.ɵɵinject(i1.AuthenticationService), i0.ɵɵinject(i2.EventTrackingService), i0.ɵɵinject(i3.SharedUtilityService));\n  };\n\n  PushNotificationsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PushNotificationsService,\n    factory: PushNotificationsService.ɵfac,\n    providedIn: 'root'\n  });\n  return PushNotificationsService;\n})();","map":null,"metadata":{},"sourceType":"module"}