{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { endpoints } from '../constants/collegeEndpoints';\nimport { ReplaySubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../base/base-factory-provider\";\nimport * as i2 from \"../../utility/utility.service\";\nimport * as i3 from \"../journey.service\";\nexport let CollegeService = /*#__PURE__*/(() => {\n  class CollegeService {\n    constructor(baseService, utilityService, journeyService) {\n      this.baseService = baseService;\n      this.utilityService = utilityService;\n      this.journeyService = journeyService;\n      this.valueChange = new ReplaySubject(1);\n      this.endpoints = this.utilityService.appendBaseUrlToEndpoints(endpoints);\n    }\n\n    initialize(journey) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const collegeData = yield this.getCollegeData();\n        this.initializeDependents(collegeData, journey);\n        this.setAnswers(this.journeyService.getAnswerList(journey));\n      });\n    }\n\n    getCollegeData() {\n      if (!this.collegeJourneyDataPromise) {\n        this.collegeJourneyDataPromise = this.baseService.get(this.endpoints.getCollegeData);\n      }\n\n      return this.collegeJourneyDataPromise;\n    }\n\n    initializeDependents(collegeData, journey) {\n      journey.steps.forEach(step => {\n        var _a;\n\n        (_a = step.content) === null || _a === void 0 ? void 0 : _a.pageElements.forEach(pageElement => {\n          const dependentIndex = pageElement.elements.findIndex(el => el.id === 'dependentButtons');\n\n          if (dependentIndex > -1) {\n            const dependentElement = pageElement.elements[dependentIndex];\n            const dependentElements = [];\n\n            if (collegeData.dependents.length > 0) {\n              collegeData.dependents.forEach((dep, i) => {\n                dependentElements.push({\n                  id: dep.id,\n                  label: dep.firstName,\n                  imageUrl: dependentElement.imageUrl,\n                  value: dep.id,\n                  idSuffix: dependentElement.idSuffix + i\n                });\n              });\n              dependentElement.id = 'input';\n              dependentElement.type = 'iconTextButtonSelect';\n              dependentElement.options = dependentElements;\n            } else {\n              pageElement.elements.splice(dependentIndex, 1);\n            }\n          }\n\n          this.setOptions(pageElement, collegeData.collegeTypes, 'typeCollege');\n          this.setOptions(pageElement, collegeData.filingStatuses, 'filingStatus');\n          this.setOptions(pageElement, collegeData.states, 'stateResidence');\n        });\n      });\n    }\n\n    setOptions(pageElement, optionArray, key) {\n      const elementIndex = pageElement.elements.findIndex(el => el.id === key);\n\n      if (elementIndex > -1) {\n        const typeElement = pageElement.elements[elementIndex];\n        const typeOptions = [];\n\n        if (optionArray.length > 0) {\n          optionArray.forEach(opt => {\n            typeOptions.push({\n              id: opt.id,\n              label: opt.label,\n              value: opt.value\n            });\n          });\n          typeElement.id = 'input';\n          typeElement.type = 'select';\n          typeElement.options = typeOptions;\n        } else {\n          pageElement.elements.splice(elementIndex, 1);\n        }\n      }\n    }\n\n    setAnswers(answerList) {\n      answerList === null || answerList === void 0 ? void 0 : answerList.forEach(answer => {\n        const parsedAnswer = this.journeyService.safeParse(answer);\n\n        if (parsedAnswer && parsedAnswer['whoAreYouSavingFor']) {\n          const ans = this.journeyService.safeParse(parsedAnswer['whoAreYouSavingFor']);\n          this.whoAreYouSavingFor = ans === null || ans === void 0 ? void 0 : ans.label;\n        }\n      });\n      this.valueChange.next();\n    }\n\n    stepChange(journey) {\n      this.setAnswers(this.journeyService.getAnswerList(journey));\n    }\n\n  }\n\n  CollegeService.ɵfac = function CollegeService_Factory(t) {\n    return new (t || CollegeService)(i0.ɵɵinject(i1.BaseService), i0.ɵɵinject(i2.SharedUtilityService), i0.ɵɵinject(i3.JourneyService));\n  };\n\n  CollegeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CollegeService,\n    factory: CollegeService.ɵfac,\n    providedIn: 'root'\n  });\n  return CollegeService;\n})();","map":null,"metadata":{},"sourceType":"module"}