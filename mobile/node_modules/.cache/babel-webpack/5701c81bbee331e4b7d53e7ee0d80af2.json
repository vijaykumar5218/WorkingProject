{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { endpoints } from './constants/endpoints';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../base/base-factory-provider\";\nimport * as i2 from \"../utility/utility.service\";\nexport let AccessService = /*#__PURE__*/(() => {\n  class AccessService {\n    constructor(baseService, utilityService) {\n      this.baseService = baseService;\n      this.utilityService = utilityService;\n      this.endpoints = endpoints;\n      this.endpoints = this.utilityService.appendBaseUrlToEndpoints(endpoints);\n    }\n\n    checkMyvoyageAccess(refresh = false) {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (!this.accessResult || refresh) {\n          this.accessResult = yield this.baseService.get(this.endpoints.myvoyageAccess);\n        }\n\n        return this.accessResult;\n      });\n    }\n\n    checkWorkplaceAccess(refresh = false) {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          if (!this.workplaceAccessResult || refresh) {\n            this.workplaceAccessResult = yield this.baseService.get(this.endpoints.myWorkplaceDashboardEnabled);\n          }\n        } catch (e) {\n          console.log(e);\n          this.workplaceAccessResult = {\n            myWorkplaceDashboardEnabled: false\n          };\n        }\n\n        return this.workplaceAccessResult;\n      });\n    }\n\n  }\n\n  AccessService.ɵfac = function AccessService_Factory(t) {\n    return new (t || AccessService)(i0.ɵɵinject(i1.BaseService), i0.ɵɵinject(i2.SharedUtilityService));\n  };\n\n  AccessService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AccessService,\n    factory: AccessService.ɵfac,\n    providedIn: 'root'\n  });\n  return AccessService;\n})();","map":null,"metadata":{},"sourceType":"module"}