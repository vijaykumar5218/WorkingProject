{"ast":null,"code":"/**\n * @file Utilities Library. Has helper utilities used across the app.\n */\ndefine([], function () {\n  Utilities = {};\n  /**\n   * Converts a number into a dollar formatted string with commas for display. EX: 4623.569 -> $4,624 || 4,623.57\n   * @param  {number}  money - The number value to be converted\n   * @param  {boolean} hasDollar - Prepends the dollar sign to the string\n   * @param  {boolean} round - Rounds the cents value to show a whole dollar.\n   * @param  {boolean} dontCutOnZero - If the value isn't rounded but the cent value is 00, don't remove the cent value.\n   * @return {string} formattedMoney - Formatted string version of number passed in.\n   */\n\n  Utilities.formatMoney = function (money, hasDollar, round, dontCutOnZero) {\n    var _money = money;\n    if (_money === null) return \"\"; // Strip out everything but numbers and decimals\n\n    _money = (_money + \"\").replace(/[^0-9^\\.]/g, \"\") * 1; // Round the number if needed\n\n    if (round) _money = Math.round(_money); // Adds commas where needed\n\n    var formattedMoney = _money.toFixed(2).replace(/./g, function (c, i, a) {\n      return i && c !== \".\" && !((a.length - i) % 3) ? ',' + c : c;\n    });\n\n    if (!dontCutOnZero && formattedMoney.substr(formattedMoney.indexOf(\".\")) == \".00\") {\n      formattedMoney = formattedMoney.substring(0, formattedMoney.indexOf(\".\"));\n    }\n\n    return (hasDollar ? \"$\" : \"\") + formattedMoney;\n  };\n  /**\n   * Converts a value to a percentage or to a whole number. And removes any floating point errors.\n   * @param  {number} value - value to be converted\n   * @param  {boolean} toDecimal\n   * @return {number}\n   */\n\n\n  Utilities.formatPercent = function (value, toDecimal) {\n    if (toDecimal) {\n      value = Utilities.cleanNumber(value / 100);\n    } else {\n      value = Utilities.cleanNumber(value * 100);\n    }\n\n    return value;\n  };\n  /**\n   * Removes possible floating point errors. EX: 3.53230000000004 -> 3.5323\n   * @param  {number} value - to be cleaned\n   * @return {number} cleaned number\n   */\n\n\n  Utilities.cleanNumber = function (value) {\n    value = parseFloat(value);\n    return parseFloat(value.toFixed(4));\n  };\n  /**\n   * Returns the styles in a stylesheet by source name match\n   * @param  {string} src - stylesheet name\n   * @return {string}     string of all stylesheet rules\n   */\n\n\n  Utilities.getStyleSheetContent = function (src) {\n    var styleTags = document.getElementsByTagName(\"link\");\n    var styleTag = false;\n\n    for (var i in styleTags) {\n      if (styleTags[i].href && styleTags[i].href.indexOf(src) != -1) {\n        styleTag = styleTags[i]; //break;\n      }\n    }\n\n    if (!styleTag) {\n      return false;\n    } // the style sheet in the style tag\n\n\n    var sheet = styleTag.sheet ? styleTag.sheet : styleTag.styleSheet;\n    var message = \"\";\n\n    if ('cssText' in sheet) {\n      // Internet Explorer\n      message = sheet.cssText;\n    } else {\n      // Firefox, Opera, Google Chrome and Safari\n      for (var i = 0; i < sheet.cssRules.length; i++) {\n        message += sheet.cssRules[i].cssText;\n      }\n    }\n\n    return message;\n  };\n  /**\n   * Sends the google analytics to the ga window function\n   * @param  {object} trackParams Tracking Parameters.\n   *{\t'hitType': 'event',\n  'eventCategory': eventCategory,\n  'eventAction': eventAction,F\n  'eventLabel': eventLabel,\n  'eventValue': eventValue,\n  'nonInteraction': optNoninteraction }\n   */\n\n\n  Utilities.gaActivityTrack = function (trackParams) {\n    if (window.sendGaActivity) {\n      window.sendGaActivity(trackParams.eventCategory, trackParams.eventAction, trackParams.eventLabel, null, trackParams.nonInteraction); //console.log(\"Utilities | gaActivityTrack() | Sending data to analytics:  \", trackParams);\n    } else {//console.log( \"Utilities | gaActivityTrack() | Tracking method not available:\", trackParams );\n    }\n  };\n  /**\n   * Tracking funciton for page changes.\n   * @param  {[type]} trackParams [description]\n   * {'page': page,\n  'title': title}\n   * @return {[type]}             [description]\n   */\n\n\n  Utilities.gaPageActivityTrack = function (trackParams) {\n    if (window.sendGaPageActivity) {\n      sendGaPageActivity(trackParams.page, trackParams.title); //console.log( \"Utilities | gaPageActivityTrack() | Sending data to analytics:\", trackParams );\n    } else {//console.log( \"Utilities | gaPageActivityTrack() | Tracking methods not available:\", trackParams );\n    }\n  };\n  /**\n   * copies object variables from source into destination.\n   * @param  {object} destination\n   * @param  {object} source\n   * @return {object}\n   */\n\n\n  Utilities.deepExtend = function (destination, source) {\n    for (var property in source) {\n      if (typeof source[property] === \"object\" && source[property] !== null) {\n        destination[property] = destination[property] || {};\n        arguments.callee(destination[property], source[property]);\n      } else {\n        destination[property] = source[property];\n      }\n    }\n\n    return destination;\n  };\n  /**\n   * recursively copies an object into a new variable\n   * @param  {object} obj source object\n   * @return {object}     new duplicate object.\n   */\n\n\n  Utilities.clone = function (obj) {\n    if (obj === null || typeof obj != 'object') return obj;\n    var temp = obj.constructor(); // changed\n\n    for (var key in obj) temp[key] = Utilities.clone(obj[key]);\n\n    return temp;\n  };\n\n  Utilities.iePsuedoElementHack = function ($element) {\n    $element = $element || $(\"body\");\n\n    if ($(\"html\").hasClass(\"ie8\")) {\n      $element.find('[class^=\"icon\"]').each(function () {\n        $(this).append('<span class=\"psuedoIeFix\"></span>');\n        $(this).find(\".psuedoIeFix\").remove();\n      });\n    }\n  }; //end iePsuedoElementHack\n\n\n  return Utilities;\n});","map":null,"metadata":{},"sourceType":"script"}