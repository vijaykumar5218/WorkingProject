{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { endPoints } from '../constants/endpoints';\nimport { VoyaIABController } from '@mobile/app/modules/shared/service/in-app-browser/controllers/voya-iab-controller';\nimport { version } from '../constants/version';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@shared-lib/services/base/base-factory-provider\";\nimport * as i2 from \"@shared-lib/services/utility/utility.service\";\nimport * as i3 from \"@mobile/app/modules/shared/service/in-app-browser/in-app-browser.service\";\nimport * as i4 from \"@shared-lib/services/access/access.service\";\nimport * as i5 from \"../../../shared/service/attestation/attestation.service\";\nimport * as i6 from \"../../../shared/service/alert-window/alert-window.service\";\nimport * as i7 from \"../../../shared/service/platform/platform.service\";\nexport let LandingService = /*#__PURE__*/(() => {\n  class LandingService {\n    constructor(baseService, utilityService, inAppBrowser, accessService, attestationService, alertWindowService, platformService) {\n      this.baseService = baseService;\n      this.utilityService = utilityService;\n      this.inAppBrowser = inAppBrowser;\n      this.accessService = accessService;\n      this.attestationService = attestationService;\n      this.alertWindowService = alertWindowService;\n      this.platformService = platformService;\n      this.endPoints = endPoints;\n      this.closed = true;\n      this.endPoints = this.utilityService.appendBaseUrlToEndpoints(endPoints);\n    }\n\n    getAllLaunchContent(refresh = false) {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (!this.allLaunchContentPromise || refresh) {\n          this.allLaunchContentPromise = this.baseService.get(this.endPoints.landingContent, false);\n        }\n\n        return this.allLaunchContentPromise;\n      });\n    }\n\n    getLandingContent() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const result = yield this.getAllLaunchContent();\n        return JSON.parse(result.loginJSON);\n      });\n    }\n\n    getNoAccessMessage() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const result = yield this.getAllLaunchContent();\n        return JSON.parse(result.LoginNoAccessMessage);\n      });\n    }\n\n    openInBrowser(url) {\n      this.inAppBrowser.openInAppBrowser(url, new VoyaIABController());\n    }\n\n    checkMyvoyageAccess() {\n      return __awaiter(this, void 0, void 0, function* () {\n        return this.accessService.checkMyvoyageAccess(true);\n      });\n    }\n\n    validateApplication() {\n      return this.attestationService.attestApplication();\n    }\n\n    openVersionAlert() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.openAlert();\n\n        if (!this.resumeSubscription) {\n          this.resumeSubscription = this.platformService.onResume$.subscribe(() => {\n            this.openAlert();\n          });\n        }\n      });\n    }\n\n    openAlert() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const appVersionContent = JSON.parse((yield this.getAllLaunchContent(true)).AppVersionJSON);\n\n        if (version < appVersionContent.minVersion && this.closed) {\n          this.closed = false;\n          this.alertWindowService.presentAlert({\n            cssClass: 'version-alert',\n            message: appVersionContent.alertText,\n            header: ' ',\n            backdropDismiss: false,\n            buttons: [{\n              text: appVersionContent.downloadText,\n              handler: () => {\n                this.closed = true;\n                const appUrl = this.platformService.isIos() ? appVersionContent.iosAppUrl : appVersionContent.androidAppUrl;\n                window.open(appUrl);\n              }\n            }]\n          });\n        }\n      });\n    }\n\n    ngOnDestroy() {\n      this.resumeSubscription.unsubscribe();\n    }\n\n  }\n\n  LandingService.ɵfac = function LandingService_Factory(t) {\n    return new (t || LandingService)(i0.ɵɵinject(i1.BaseService), i0.ɵɵinject(i2.SharedUtilityService), i0.ɵɵinject(i3.InAppBroserService), i0.ɵɵinject(i4.AccessService), i0.ɵɵinject(i5.AttestationService), i0.ɵɵinject(i6.AlertWindowService), i0.ɵɵinject(i7.PlatformService));\n  };\n\n  LandingService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LandingService,\n    factory: LandingService.ɵfac,\n    providedIn: 'root'\n  });\n  return LandingService;\n})();","map":null,"metadata":{},"sourceType":"module"}