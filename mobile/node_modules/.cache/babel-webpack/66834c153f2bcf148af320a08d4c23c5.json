{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { endPoints } from './constants/endpoints';\nimport { PushNotifications } from '@capacitor/push-notifications';\nimport * as content from './constants/push-content.json';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@shared-lib/services/base/base-factory-provider\";\nimport * as i2 from \"@shared-lib/services/utility/utility.service\";\nimport * as i3 from \"@ionic/angular\";\nexport const REGISTERED_PARTY_IDS = 'registered_party_ids';\nexport let FirebaseService = /*#__PURE__*/(() => {\n  class FirebaseService {\n    constructor(baseService, utilityService, alertController) {\n      this.baseService = baseService;\n      this.utilityService = utilityService;\n      this.alertController = alertController;\n      this.serviceContent = content;\n      this.endPoints = endPoints;\n    }\n\n    showPushAlert(header, msg) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const alert = yield this.alertController.create({\n          header: header,\n          subHeader: '',\n          message: msg,\n          buttons: [this.serviceContent.ok]\n        });\n        alert.present();\n      });\n    }\n\n    initializePushNotifications() {\n      //Initialize endpoints here because baseUrls are not set when class initializes\n      this.endPoints = this.utilityService.appendBaseUrlToEndpoints(endPoints);\n      PushNotifications.requestPermissions().then(result => {\n        if (result.receive === 'granted') {\n          PushNotifications.register();\n        }\n      });\n      PushNotifications.addListener('registration', this.onRegistration.bind(this));\n      PushNotifications.addListener('registrationError', this.onRegistrationError.bind(this));\n      PushNotifications.addListener('pushNotificationReceived', this.onPushReceived.bind(this));\n      PushNotifications.addListener('pushNotificationActionPerformed', this.onPushActionPerformed.bind(this));\n    }\n\n    onRegistration(token) {\n      //Need to keep this in to test after ci build\n      console.log('PUSH: Registration success, token: ', token.value);\n      this.pushToken = token.value;\n    }\n\n    onRegistrationError(error) {\n      console.log('PUSH: Error: ', error);\n    }\n\n    onPushReceived(notification) {\n      this.showPushAlert(notification.title, notification.body);\n    }\n\n    onPushActionPerformed(notification) {\n      this.showPushAlert(notification.notification.title, notification.notification.body);\n    }\n\n    getRegisteredPartyIds() {\n      const reg = localStorage.getItem(REGISTERED_PARTY_IDS);\n\n      if (reg) {\n        return JSON.parse(reg);\n      }\n\n      return [];\n    }\n\n    setRegisteredPartyIds(ids) {\n      localStorage.setItem(REGISTERED_PARTY_IDS, JSON.stringify(ids));\n    }\n\n    saveToken(partyId) {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (!this.pushToken) {\n          return;\n        }\n\n        const registered = this.getRegisteredPartyIds();\n        let shouldRegister = true;\n        registered.forEach(pid => {\n          if (partyId === pid) {\n            shouldRegister = false;\n          }\n        });\n\n        if (shouldRegister) {\n          this.baseService.post(this.endPoints.registerDevice, {\n            deviceToken: this.pushToken\n          });\n          registered.push(partyId);\n          this.setRegisteredPartyIds(registered);\n        }\n      });\n    }\n\n    ngOnDestroy() {\n      if (this.subscription) {\n        this.subscription.unsubscribe();\n      }\n    }\n\n  }\n\n  FirebaseService.ɵfac = function FirebaseService_Factory(t) {\n    return new (t || FirebaseService)(i0.ɵɵinject(i1.BaseService), i0.ɵɵinject(i2.SharedUtilityService), i0.ɵɵinject(i3.AlertController));\n  };\n\n  FirebaseService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FirebaseService,\n    factory: FirebaseService.ɵfac,\n    providedIn: 'root'\n  });\n  return FirebaseService;\n})();","map":null,"metadata":{},"sourceType":"module"}