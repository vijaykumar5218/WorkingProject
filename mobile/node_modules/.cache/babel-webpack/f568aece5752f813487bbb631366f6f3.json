{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { NavigationStart } from '@angular/router';\nimport * as errorText from './constants/errorText.json';\nimport { Network } from '@capacitor/network';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic/angular\";\nimport * as i2 from \"@angular/router\";\nexport let ErrorService = /*#__PURE__*/(() => {\n  class ErrorService {\n    constructor(toastController, router, ngZone, alertController) {\n      this.toastController = toastController;\n      this.router = router;\n      this.ngZone = ngZone;\n      this.alertController = alertController;\n      this.errorText = errorText;\n      this.hasShownError = false;\n    }\n\n    initialize(network = Network) {\n      return __awaiter(this, void 0, void 0, function* () {\n        network.addListener('networkStatusChange', this.onNetworkError.bind(this));\n        const currentStatus = yield network.getStatus();\n        this.onNetworkError(currentStatus);\n        this.registerErrorListener();\n      });\n    }\n\n    onNetworkError(status) {\n      if (!status.connected) {\n        this.ngZone.run(() => __awaiter(this, void 0, void 0, function* () {\n          const alert = yield this.alertController.create({\n            header: this.errorText.networkErrorTitle,\n            message: this.errorText.networkErrorMessage,\n            buttons: [this.errorText.dismiss]\n          });\n          alert.present();\n        }));\n      }\n    }\n\n    registerErrorListener() {\n      this.router.events.subscribe(event => __awaiter(this, void 0, void 0, function* () {\n        if (event instanceof NavigationStart) {\n          this.hasShownError = false;\n        }\n      }));\n    }\n\n  }\n\n  ErrorService.ɵfac = function ErrorService_Factory(t) {\n    return new (t || ErrorService)(i0.ɵɵinject(i1.ToastController), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i1.AlertController));\n  };\n\n  ErrorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ErrorService,\n    factory: ErrorService.ɵfac,\n    providedIn: 'root'\n  });\n  return ErrorService;\n})();","map":null,"metadata":{},"sourceType":"module"}