{"ast":null,"code":"define(['./IRSConstants', './AccountTypes'], function (IRSConstants, AccountTypes) {\n  //  Constructor\n  var LimitUtilities = {}; //  Static Variable Declaration\n\n  LimitUtilities.limit_labels_grouped = [\"402(g)(1)\", \"457(e)(15)\", \"414(v)\", \"414(v)\", \"415(c)(1)(A)\", \"415(c)(1)(A)\"];\n  LimitUtilities.limit_irstype_grouped = [IRSConstants._402g1, IRSConstants._457e15, IRSConstants._414v, IRSConstants._414v, IRSConstants._415c1A, IRSConstants._415c1A];\n  LimitUtilities.limit_labels = [\"402(g)(1)\", \"457(e)(15)\", \"414(v)\", \"415(c)(1)(A)\"];\n  LimitUtilities._402g1_401k_403b = 0;\n  LimitUtilities._457e15_457b = 1;\n  LimitUtilities._414v_401k_403b = 2;\n  LimitUtilities._414v_457b = 3;\n  LimitUtilities._415c1A_401a_401k = 4;\n  LimitUtilities._415c1A_403b = 5;\n  LimitUtilities._402g1 = 0;\n  LimitUtilities._457e15 = 1;\n  LimitUtilities._414v = 2;\n  LimitUtilities._415c1A = 3;\n  LimitUtilities.MAX_RATE = 0;\n  LimitUtilities.MAX_DOLLAR = 1;\n\n  LimitUtilities.getIndexForGrouped_402g1_457e15_414_vLimits = function (type, irc) {\n    var index = -1;\n\n    switch (irc) {\n      // case IRSConstants.UNSET :\n      case IRSConstants.UNKNOWN:\n      case IRSConstants._401k:\n      case IRSConstants._403b:\n        switch (type) {\n          case AccountTypes.TYPE_PRETAX:\n          case AccountTypes.TYPE_ROTH:\n          case AccountTypes.TYPE_SUPPL_PRETAX:\n          case AccountTypes.TYPE_SUPPL_ROTH:\n            index = LimitUtilities._402g1_401k_403b;\n            break;\n\n          case AccountTypes.TYPE_PRETAX_AGECATCHUP:\n          case AccountTypes.TYPE_ROTH_AGECATCHUP:\n            index = LimitUtilities._414v_401k_403b;\n            break;\n        }\n\n        break;\n\n      case IRSConstants._457b:\n        switch (type) {\n          case AccountTypes.TYPE_PRETAX:\n          case AccountTypes.TYPE_ROTH:\n          case AccountTypes.TYPE_SUPPL_PRETAX:\n          case AccountTypes.TYPE_SUPPL_ROTH:\n            index = LimitUtilities._457e15_457b;\n            break;\n\n          case AccountTypes.TYPE_PRETAX_AGECATCHUP:\n          case AccountTypes.TYPE_ROTH_AGECATCHUP:\n            index = LimitUtilities._414v_457b;\n            break;\n        }\n\n        break;\n\n      default:\n        index = -1;\n        break;\n    }\n\n    return index;\n  };\n\n  LimitUtilities.getIndexFor_402g1_457e15_414v_Limits = function (type, irc) {\n    var index = -1;\n\n    switch (irc) {\n      // case IRSConstants.UNSET :\n      case IRSConstants.UNKNOWN:\n      case IRSConstants._401k:\n      case IRSConstants._403b:\n        switch (type) {\n          case AccountTypes.TYPE_PRETAX:\n          case AccountTypes.TYPE_ROTH:\n          case AccountTypes.TYPE_SUPPL_PRETAX:\n          case AccountTypes.TYPE_SUPPL_ROTH:\n            index = LimitUtilities._402g1;\n            break;\n\n          case AccountTypes.TYPE_PRETAX_AGECATCHUP:\n          case AccountTypes.TYPE_ROTH_AGECATCHUP:\n            index = LimitUtilities._414v;\n            break;\n        }\n\n        break;\n\n      case IRSConstants._457b:\n        switch (type) {\n          case AccountTypes.TYPE_PRETAX:\n          case AccountTypes.TYPE_ROTH:\n          case AccountTypes.TYPE_SUPPL_PRETAX:\n          case AccountTypes.TYPE_SUPPL_ROTH:\n            index = LimitUtilities._457e15;\n            break;\n\n          case AccountTypes.TYPE_PRETAX_AGECATCHUP:\n          case AccountTypes.TYPE_ROTH_AGECATCHUP:\n            index = LimitUtilities._414v;\n            break;\n        }\n\n        break;\n\n      default:\n        index = -1;\n        break;\n    }\n\n    return index;\n  };\n\n  LimitUtilities.getIndexForGrouped_415c1A_Limit = function (type, irc) {\n    var index = -1;\n\n    switch (irc) {\n      //case IRSConstants.UNSET :\n      case IRSConstants.UNKNOWN:\n      case IRSConstants._401k:\n      case IRSConstants._401a:\n        switch (type) {\n          case AccountTypes.TYPE_MANDATORY_EE:\n          case AccountTypes.TYPE_MANDATORY_ER:\n          case AccountTypes.TYPE_RECURRING_ER:\n          case AccountTypes.TYPE_PRETAX:\n          case AccountTypes.TYPE_ROTH:\n          case AccountTypes.TYPE_SUPPL_PRETAX:\n          case AccountTypes.TYPE_SUPPL_ROTH:\n          case AccountTypes.TYPE_AFTERTAX:\n          case AccountTypes.TYPE_SUPPL_AFTERTAX:\n            index = LimitUtilities._415c1A_401a_401k;\n            break;\n        }\n\n        break;\n\n      case IRSConstants._403b:\n        switch (type) {\n          case AccountTypes.TYPE_MANDATORY_EE:\n          case AccountTypes.TYPE_MANDATORY_ER:\n          case AccountTypes.TYPE_RECURRING_ER:\n          case AccountTypes.TYPE_PRETAX:\n          case AccountTypes.TYPE_ROTH:\n          case AccountTypes.TYPE_SUPPL_PRETAX:\n          case AccountTypes.TYPE_SUPPL_ROTH:\n          case AccountTypes.TYPE_AFTERTAX:\n          case AccountTypes.TYPE_SUPPL_AFTERTAX:\n            index = LimitUtilities._415c1A_403b;\n            break;\n        }\n\n        break;\n\n      default:\n        index = -1;\n        break;\n    }\n\n    return index;\n  };\n\n  LimitUtilities.getIndexForMutable = function (type) {\n    var index = -1;\n\n    switch (type) {\n      case AccountTypes.TYPE_PRETAX:\n      case AccountTypes.TYPE_ROTH:\n      case AccountTypes.TYPE_SUPPL_PRETAX:\n      case AccountTypes.TYPE_SUPPL_ROTH:\n      case AccountTypes.TYPE_PRETAX_AGECATCHUP:\n      case AccountTypes.TYPE_ROTH_AGECATCHUP:\n      case AccountTypes.TYPE_AFTERTAX:\n      case AccountTypes.TYPE_SUPPL_AFTERTAX:\n        index = type;\n        break;\n\n      default:\n        index = -1;\n        break;\n    }\n\n    return index;\n  }; // 140513 JSS out\n  //    LimitUtilities.resolveEEandERcontribs = function( ee, er, target ) {\n  //        // vars for iterations\n  //        var r = [ 0.0, 0.0 ] ;\n  //        var iterator = 0 ;\n  //        var high = target ;\n  //        var low = 0.0 ;\n  //        var test = -1.0 ; // seeded to force iteration\n  //        var solve = 0.0 ;\n  //\n  //        if( ee > 0.0 ) {\n  //            while( ( Math.abs( test ) > 0.0049 ) && ( iterator < 15 ) )  // ?? increase precision\n  //            {\n  //                iterator++ ;\n  //\n  //                if( test < 0.0 )\n  //                    low = solve ;\n  //                else\n  //                    high = solve ;\n  //\n  //                //\n  //                solve = ( ( high + low ) / 2.0 ) ;\n  //\n  //                //\n  //                test = ( solve + ( er / ee * solve ) - target ) ;\n  //            }\n  //\n  //            r[0] = solve ;\n  //            r[1] = ( er / ee * solve ) ;\n  //        }\n  //\n  //        return( r ) ;\n  //    };\n\n\n  LimitUtilities.getNonIRSContribMaxes = function (mml, frequency, annualSalary) {\n    var ret = [0.0, 0.0];\n\n    if (mml !== null && mml.getMaxValue() > 0.0) {\n      ret[LimitUtilities.MAX_RATE] = mml.getRateMax(annualSalary);\n      ret[LimitUtilities.MAX_DOLLAR] = mml.getModalMax(frequency, annualSalary);\n    }\n\n    return ret;\n  };\n\n  LimitUtilities.getNonIRSContribMins = function (mml, frequency, annualSalary) {\n    var ret = [0.0, 0.0];\n\n    if (mml !== null && mml.getMinValue() > 0.0) {\n      ret[LimitUtilities.MAX_RATE] = mml.getRateMin(annualSalary);\n      ret[LimitUtilities.MAX_DOLLAR] = mml.getModalMin(frequency, annualSalary);\n    }\n\n    return ret;\n  };\n\n  LimitUtilities.getIRSContribMaxes = function (accountType, irc, frequency, annualSalary) {\n    var ret = [0.0, 0.0];\n    var limits = [IRSConstants.getLimit(IRSConstants._402g1), IRSConstants.getLimit(IRSConstants._457e15), IRSConstants.getLimit(IRSConstants._414v), IRSConstants.getLimit(IRSConstants._415c1A)];\n    var index = LimitUtilities.getIndexFor_402g1_457e15_414v_Limits(accountType, irc);\n    index = index < 0 ? 3 : index;\n\n    if (index > -1) {\n      ret[LimitUtilities.MAX_RATE] = limits[index] / annualSalary;\n      ret[LimitUtilities.MAX_DOLLAR] = limits[index] / frequency;\n      return ret;\n    }\n  };\n\n  LimitUtilities.transMax2ContribType = function (contribType, mml, frequency, annualSalary) {\n    var ret = 0.0;\n\n    if (mml !== null && mml.getMaxValue() > 0.0) {\n      switch (contribType) {\n        case AccountTypes.CONTRIB_RATE:\n          ret = mml.getRateMax(annualSalary);\n          break;\n\n        case AccountTypes.CONTRIB_MODAL:\n          ret = mml.getModalMax(frequency, annualSalary);\n          break;\n\n        case AccountTypes.CONTRIB_ANNUAL:\n          ret = mml.getAnnualMax(annualSalary);\n          break;\n      }\n    }\n\n    return ret;\n  };\n\n  LimitUtilities.transIRSContribMax2ContribType = function (contribType, accountType, irc, frequency, annualSalary) {\n    var ret = 0.0;\n    var limits = [IRSConstants.getLimit(IRSConstants._402g1), IRSConstants.getLimit(IRSConstants._457e15), IRSConstants.getLimit(IRSConstants._414v), IRSConstants.getLimit(IRSConstants._415c1A)];\n    var index = LimitUtilities.getIndexFor_402g1_457e15_414v_Limits(accountType, irc);\n    index = index < 0 ? 3 : index;\n\n    if (index > -1) {\n      switch (contribType) {\n        case AccountTypes.CONTRIB_RATE:\n          ret = limits[index] / annualSalary;\n          break;\n\n        case AccountTypes.CONTRIB_MODAL:\n          ret = limits[index] / frequency;\n          break;\n\n        case AccountTypes.CONTRIB_ANNUAL:\n          ret = limits[index];\n          break;\n      }\n    }\n\n    return ret;\n  };\n\n  LimitUtilities.apply401a17SalaryLimit = function (type, irc, eeOrEr) {\n    var ret = false;\n\n    switch (irc) {\n      case IRSConstants._457b:\n        break;\n\n      case IRSConstants._401a:\n      case IRSConstants._403b:\n        if (eeOrEr) {\n          switch (type) {\n            case AccountTypes.TYPE_MANDATORY_EE:\n            case AccountTypes.TYPE_MANDATORY_ER:\n              ret = true;\n              break;\n          }\n        } else {\n          ret = true;\n        }\n\n        break;\n\n      case IRSConstants.UNKNOWN:\n      case IRSConstants._401k:\n        ret = true;\n        break;\n    }\n\n    return ret;\n  }; // 170530 ///////////////////////////////////////////\n  // return item int if null list, either index or item if in list\n\n\n  LimitUtilities.checkList = function (item, list, indexOrItem) {\n    var ret = -1;\n\n    if (list == null) {\n      ret = item;\n    } else {\n      for (var n = 0; n < list.length; n++) {\n        ret = item == list[n] ? indexOrItem ? n : item : ret;\n        if (ret > -1) break;\n      }\n    }\n\n    return ret;\n  };\n\n  return LimitUtilities;\n});","map":null,"metadata":{},"sourceType":"script"}