{"ast":null,"code":"define([], function () {\n  var CalcUtilities = {};\n\n  CalcUtilities.getStaticPayout = function (dCV, dRate, dPayPeriods, dYearsPO) {\n    if (dRate === 0.0) {\n      return dCV / (dYearsPO * dPayPeriods);\n    }\n\n    return dCV / ((1.0 - Math.pow(1.0 + dRate, -dYearsPO)) / (1.0 - Math.pow(1.0 / (1.0 + dRate), 1.0 / dPayPeriods)));\n  };\n\n  CalcUtilities.getAfterTaxRateOfReturn = function (dRateOfReturn, dTaxRate) {\n    return dRateOfReturn * (1.0 - dTaxRate);\n  };\n\n  CalcUtilities.compoundingRate = function (dYearsOfAccum, dAnnualRate) {\n    return Math.pow(1.0 + dAnnualRate, dYearsOfAccum);\n  };\n\n  CalcUtilities.discountingRate = function (dYears, dAnnualRate) {\n    return Math.pow(1.0 / (1.0 + dAnnualRate), dYears);\n  };\n\n  CalcUtilities.convertMthlyRate = function (dModalPeriods, dRatePerModalPeriod) {\n    // purpose: returns rate of return for period\n    // example: convertMthlyRate( 365.0, 0.00000085 )\n    //          equals the annual effective rate of a daily rate of 0.000085% percent\n    //\n    //\n    return Math.pow(1.0 + dRatePerModalPeriod, dModalPeriods) - 1.0;\n  };\n\n  CalcUtilities.getPeriodicRate = function (dModalPeriods, dRateOfReturn) {\n    // purpose: returns periodic rate of return\n    // example: 100.00 x getPeriodicRate( 12.0, 0.085 )\n    //          equals the monthly return on $100 invested at an annual effective\n    //          rate of 8 1/2 percent % (i.e., $0.68)\n    //\n    //\n    //return( ( dModalPeriods > 0.0 ) ? ( dRateOfReturn / dModalPeriods ) : 0.0 ) ;\n    return dModalPeriods > 0.0 ? Math.pow(1.0 + dRateOfReturn, 1.0 / dModalPeriods) - 1.0 : 0.0;\n  };\n\n  CalcUtilities.roundAndTruncate = function (dNumber, iDecimals) {\n    // round and truncate\n    var dInterim = 0.0;\n    var dDecimalFactor = Math.pow(10.0,\n    /*(double)*/\n    iDecimals); // round\n\n    dNumber += 0.500000001 / dDecimalFactor; // truncate\n\n    dNumber *= dDecimalFactor;\n    dInterim = Math.floor(dNumber);\n    return dInterim / dDecimalFactor;\n  };\n\n  CalcUtilities.round = function (dNumber, iDecimals) {\n    // rounding only\n    if (iDecimals < 0) iDecimals = 0;\n    return dNumber + 0.500000001 / Math.pow(10.0,\n    /*(double)*/\n    iDecimals);\n  };\n\n  CalcUtilities.truncate = function (dNumber, iDecimals) {\n    var dInterim = 0.0;\n    var dDecimalFactor = Math.pow(10.0,\n    /*(double)*/\n    iDecimals); // truncate\n\n    dNumber *= dDecimalFactor;\n    dInterim = Math.floor(dNumber);\n    return dInterim / dDecimalFactor;\n  };\n\n  CalcUtilities.roundToNearest = function (dTargetIncrement, dNumber) {\n    var dCeiling = dNumber - dNumber % dTargetIncrement;\n    var dFloor = 0;\n\n    while (dCeiling < dNumber) {\n      dFloor = dCeiling;\n      dCeiling += dTargetIncrement;\n    }\n\n    return Math.abs(dNumber - dFloor) < Math.abs(dNumber - dCeiling) ? dFloor : dCeiling;\n  }; // index is zero-based\n\n\n  CalcUtilities.isActiveMode = function (aggregateModes, granularModes, index) {\n    return (index + 1) % (aggregateModes / granularModes) === 0;\n  }; // index is zero-based\n  // translate to mode for account\n\n\n  CalcUtilities.translateMode = function (aggregateMode, granularMode, index) {\n    var r = -1; // inactive mode\n    // equivalent of isActiveMode()\n\n    if ((index + 1) % (aggregateMode / granularMode) === 0) {\n      r =\n      /*(int)*/\n      (index + 1) / (aggregateMode / granularMode) - 1;\n    }\n\n    return r;\n  };\n\n  CalcUtilities.getAggregateModes = function (one, other) {\n    var lower = Math.min(one, other);\n    var higher = Math.max(one, other);\n    var n = 1;\n\n    while (lower * n % higher !== 0 && n < higher) n++;\n\n    return Math.max(lower * n, higher); // additional check\n  };\n\n  CalcUtilities.getModesPerFractionalPeriod = function (fraction, modes) {\n    return Math.floor(modes * fraction);\n  };\n\n  CalcUtilities.getSerialIndexFromPeriodAndMode = function (period, mode, modesPer) {\n    return period * modesPer + mode;\n  };\n\n  return CalcUtilities;\n});","map":null,"metadata":{},"sourceType":"script"}