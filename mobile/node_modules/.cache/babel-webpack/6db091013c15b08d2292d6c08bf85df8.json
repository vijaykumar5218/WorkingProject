{"ast":null,"code":"import { endPoints } from './constants/endpoints';\nimport { from, ReplaySubject, Subscription } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@shared-lib/services/utility/utility.service\";\nimport * as i2 from \"@shared-lib/services/base/base-factory-provider\";\nexport let AccountInfoService = /*#__PURE__*/(() => {\n  class AccountInfoService {\n    constructor(utilityService, baseService) {\n      this.utilityService = utilityService;\n      this.baseService = baseService;\n      this.endPoints = endPoints;\n      this.message = null;\n      this.recoveryInfo = null;\n      this.moreContentSubject = null;\n      this.recoveryInfoSubject = null;\n      this.subscription = new Subscription();\n      this.endPoints = this.utilityService.appendBaseUrlToEndpoints(endPoints);\n      this.moreContentSubject = new ReplaySubject(1);\n      this.recoveryInfoSubject = new ReplaySubject(1);\n    }\n\n    getAccountRecovery(refresh = false) {\n      if (!this.recoveryInfo || refresh) {\n        this.recoveryInfo = from(this.baseService.get(this.endPoints.getAccountRecovery));\n        const subscription = this.recoveryInfo.subscribe(result => {\n          this.recoveryInfoSubject.next(result);\n        });\n        this.subscription.add(subscription);\n      }\n\n      return this.recoveryInfoSubject;\n    }\n\n    getScreenMessage(refresh = false) {\n      if (!this.message || refresh) {\n        this.message = from(this.baseService.get(this.endPoints.getMessage));\n        const subscription = this.message.subscribe(result => {\n          this.moreContentSubject.next(result);\n        });\n        this.subscription.add(subscription);\n      }\n\n      return this.moreContentSubject;\n    }\n\n    saveEmail(email, contactId) {\n      let payload;\n\n      if (contactId) {\n        payload = {\n          primaryEmail: {\n            partyContactId: contactId,\n            email: email\n          }\n        };\n      } else {\n        payload = {\n          primaryEmail: {\n            email: email\n          }\n        };\n      }\n\n      return this.baseService.post(this.endPoints.saveContact, payload);\n    }\n\n    savePhone(phone, contactId) {\n      let payload;\n\n      if (contactId) {\n        payload = {\n          mobilePhone: {\n            partyContactId: contactId,\n            phoneNumber: phone\n          }\n        };\n      } else {\n        payload = {\n          mobilePhone: {\n            phoneNumber: phone\n          }\n        };\n      }\n\n      return this.baseService.post(this.endPoints.saveContact, payload);\n    }\n\n    ngOnDestroy() {\n      if (this.subscription) {\n        this.subscription.unsubscribe();\n      }\n    }\n\n    formatPhoneNumber(phoneNum) {\n      let newStr = '';\n\n      if (!phoneNum || phoneNum.length < 1) {\n        return newStr;\n      }\n\n      newStr = newStr + phoneNum.substring(0, 3) + '-';\n      newStr = newStr + phoneNum.substring(3, 6) + '-';\n      newStr = newStr + phoneNum.substring(6, 10);\n      return newStr;\n    }\n\n  }\n\n  AccountInfoService.ɵfac = function AccountInfoService_Factory(t) {\n    return new (t || AccountInfoService)(i0.ɵɵinject(i1.SharedUtilityService), i0.ɵɵinject(i2.BaseService));\n  };\n\n  AccountInfoService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AccountInfoService,\n    factory: AccountInfoService.ɵfac,\n    providedIn: 'root'\n  });\n  return AccountInfoService;\n})();","map":null,"metadata":{},"sourceType":"module"}