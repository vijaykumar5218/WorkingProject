{"ast":null,"code":"import { from, ReplaySubject, Subscription } from 'rxjs';\nimport { endPoints } from './constants/endpoints';\nimport navbarContent from '@web/app/modules/shared/components/header/components/myvoyage-header/constants/content.json';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@shared-lib/services/base/base-factory-provider\";\nimport * as i2 from \"@shared-lib/services/utility/utility.service\";\nexport let ContentService = /*#__PURE__*/(() => {\n  class ContentService {\n    constructor(baseService, utilityService) {\n      this.baseService = baseService;\n      this.utilityService = utilityService;\n      this.endPoints = endPoints;\n      this.navbarContent = navbarContent;\n      this.subscription = new Subscription();\n      this.sectionNavigatioData = null;\n      this.sectionNavigatioSubject = null;\n      this.leftHandSideConentData = null;\n      this.leftHandSideConentSubject = null;\n      this.catchupConentData = null;\n      this.catchupConentSubject = null;\n      this.catchUpMessageHubData = null;\n      this.catchUpMessageHubSubject = null;\n      this.retirementFooterContentData = null;\n      this.retirementFooterContentSubject = null;\n      this.endPoints = this.utilityService.appendBaseUrlToEndpoints(endPoints);\n      this.sectionNavigatioSubject = new ReplaySubject(1);\n      this.leftHandSideConentSubject = new ReplaySubject(1);\n      this.catchupConentSubject = new ReplaySubject(1);\n      this.catchUpMessageHubSubject = new ReplaySubject(1);\n      this.retirementFooterContentSubject = new ReplaySubject(1);\n    }\n\n    getSectionNavigation(refresh = false) {\n      if (!this.sectionNavigatioData || refresh) {\n        this.sectionNavigatioData = from(this.baseService.get(this.endPoints.sectionNavigation));\n        const allAccountSubscription = this.sectionNavigatioData.subscribe(data => {\n          const footerJSON = JSON.parse(data.FooterJSON);\n          footerJSON.FooterJSON.config.iconLinks.forEach((iconLink, index) => {\n            if (iconLink.iconName === 'profile') {\n              this.navbarContent.dropdownItems.forEach(dropdownItem => {\n                if (dropdownItem.id === 'logout_dropdown_navbar_item') {\n                  footerJSON.FooterJSON.config.iconLinks[index].linkURL = dropdownItem.link;\n                }\n              });\n            }\n          });\n          this.sectionNavigatioSubject.next(this.manageNavigationContentData(data, footerJSON));\n        });\n        this.subscription.add(allAccountSubscription);\n      }\n\n      return this.sectionNavigatioSubject;\n    }\n\n    manageNavigationContentData(data, footerJSON) {\n      const workplaceHeader = data.workplaceHeader ? {\n        workplaceHeader: JSON.parse(data.workplaceHeader)\n      } : null;\n      const workplaceHamburger = data.workplaceHamburger ? {\n        workplaceHamburger: JSON.parse(data.workplaceHamburger)\n      } : null;\n      return Object.assign(Object.assign(Object.assign({}, footerJSON), workplaceHeader), workplaceHamburger);\n    }\n\n    getRetirementFooterContent(refresh = false) {\n      if (!this.retirementFooterContentData || refresh) {\n        this.retirementFooterContentData = from(this.baseService.get(this.endPoints.retirementFooter));\n        const contentSubscription = this.retirementFooterContentData.subscribe(retirementFooterContent => {\n          retirementFooterContent.data.iconLinks.forEach((iconLink, iconIndex) => {\n            if (iconLink.iconName === 'profile') {\n              this.navbarContent.dropdownItems.forEach(dropdownItem => {\n                if (dropdownItem.id === 'logout_dropdown_navbar_item') {\n                  retirementFooterContent.data.iconLinks[iconIndex].linkURL = dropdownItem.link;\n                }\n              });\n            }\n          });\n          this.retirementFooterContentSubject.next(retirementFooterContent);\n        });\n        this.subscription.add(contentSubscription);\n      }\n\n      return this.retirementFooterContentSubject;\n    }\n\n    getLeftSideContent(refresh = false) {\n      if (!this.leftHandSideConentData || refresh) {\n        this.leftHandSideConentData = from(this.baseService.get(this.endPoints.leftSideContent));\n        const contentSubscription = this.leftHandSideConentData.subscribe(data => {\n          this.leftHandSideConentSubject.next(this.manageLeftSideContentData(data));\n        });\n        this.subscription.add(contentSubscription);\n      }\n\n      return this.leftHandSideConentSubject;\n    }\n\n    manageLeftSideContentData(data) {\n      const suggestedLifeEventHeader = data.SuggestedLifeEventHeader ? {\n        suggestedLifeEventHeader: JSON.parse(data.SuggestedLifeEventHeader)\n      } : null;\n      return Object.assign({}, suggestedLifeEventHeader);\n    }\n\n    getCatchupContent(refresh = false) {\n      if (!this.catchupConentData || refresh) {\n        this.catchupConentData = from(this.baseService.get(this.endPoints.catchupContent));\n        const contentSubscription = this.catchupConentData.subscribe(data => {\n          this.catchupConentSubject.next(JSON.parse(data.workplacecatchup));\n        });\n        this.subscription.add(contentSubscription);\n      }\n\n      return this.catchupConentSubject;\n    }\n\n    getCatchUpMessageHub(refresh = false) {\n      if (!this.catchUpMessageHubData || refresh) {\n        this.catchUpMessageHubData = from(this.baseService.get(this.endPoints.catchUpMessageHub));\n        const contentSubscription = this.catchUpMessageHubData.subscribe(data => {\n          this.catchUpMessageHubSubject.next(data);\n        });\n        this.subscription.add(contentSubscription);\n      }\n\n      return this.catchUpMessageHubSubject;\n    }\n\n    ngOnDestroy() {\n      this.subscription.unsubscribe();\n    }\n\n  }\n\n  ContentService.ɵfac = function ContentService_Factory(t) {\n    return new (t || ContentService)(i0.ɵɵinject(i1.BaseService), i0.ɵɵinject(i2.SharedUtilityService));\n  };\n\n  ContentService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ContentService,\n    factory: ContentService.ɵfac,\n    providedIn: 'root'\n  });\n  return ContentService;\n})();","map":null,"metadata":{},"sourceType":"module"}