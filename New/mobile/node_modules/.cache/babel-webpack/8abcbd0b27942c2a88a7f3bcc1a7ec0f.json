{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { loginEndPoints, tokenEndPoints } from '@shared-lib/services/benefits/constants/endpoints';\nimport { SavviIABController } from '@mobile/app/modules/shared/service/in-app-browser/controllers/savvi-iab-controller';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@mobile/app/modules/shared/service/authentication/authentication.service\";\nimport * as i2 from \"@shared-lib/services/utility/utility.service\";\nimport * as i3 from \"@shared-lib/services/base/base-factory-provider\";\nimport * as i4 from \"@ionic/angular\";\nimport * as i5 from \"../benefits.service\";\nimport * as i6 from \"@mobile/app/modules/shared/service/in-app-browser/in-app-browser.service\";\nexport let OpenSavviService = /*#__PURE__*/(() => {\n  class OpenSavviService {\n    constructor(authService, utilityService, baseService, loadingController, benefitsService, inAppBrowser) {\n      this.authService = authService;\n      this.utilityService = utilityService;\n      this.baseService = baseService;\n      this.loadingController = loadingController;\n      this.benefitsService = benefitsService;\n      this.inAppBrowser = inAppBrowser;\n      this.tokenEndPoints = tokenEndPoints;\n      this.loginEndPoints = loginEndPoints;\n      this.environment = this.utilityService.getEnvironment();\n      this.tokenEndPoints = this.utilityService.appendBaseUrlToEndpoints(tokenEndPoints, this.environment.tokenBaseUrl);\n      this.loginEndPoints = this.utilityService.appendBaseUrlToEndpoints(loginEndPoints, this.environment.loginBaseUrl);\n    }\n\n    openSavvi() {\n      return __awaiter(this, void 0, void 0, function* () {\n        new SavviIABController(this.inAppBrowser, this).openInAppBrowser(yield this.generateSavviUrl());\n      });\n    }\n\n    generateSavviUrl() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.loginEndPoints.savviSaml = this.loginEndPoints.savviSaml.replace('{savviBaseUrl}', this.environment.savviBaseUrl);\n\n        if (!this.utilityService.getIsWeb()) {\n          const loading = yield this.loadingController.create({\n            translucent: true\n          });\n          yield loading.present();\n          const authToken = yield this.authService.getAccessToken();\n          const request = {\n            client_id: this.environment.authTokenExchangeClient,\n            subject_token: authToken,\n            subject_token_type: 'access_token',\n            audience: this.environment.ssoSamlUrl,\n            grant_type: 'urn:ietf:params:oauth:grant-type:token-exchange',\n            requested_token_type: 'access_token',\n            scope: 'urn:voya:federation'\n          };\n          const queryAuthTokenResponse = yield this.baseService.postUrlEncoded(this.tokenEndPoints.samlAuthToken, request, {});\n          return this.loginEndPoints.savviSaml + queryAuthTokenResponse.access_token;\n        } else {\n          return this.loginEndPoints.savviSaml;\n        }\n      });\n    }\n\n    exitCallback() {\n      this.benefitsService.resetBenefitsEnrollment();\n      this.benefitsService.getBenefitsEnrollment();\n    }\n\n  }\n\n  OpenSavviService.ɵfac = function OpenSavviService_Factory(t) {\n    return new (t || OpenSavviService)(i0.ɵɵinject(i1.AuthenticationService), i0.ɵɵinject(i2.SharedUtilityService), i0.ɵɵinject(i3.BaseService), i0.ɵɵinject(i4.LoadingController), i0.ɵɵinject(i5.BenefitsService), i0.ɵɵinject(i6.InAppBroserService));\n  };\n\n  OpenSavviService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: OpenSavviService,\n    factory: OpenSavviService.ɵfac,\n    providedIn: 'root'\n  });\n  return OpenSavviService;\n})();","map":null,"metadata":{},"sourceType":"module"}