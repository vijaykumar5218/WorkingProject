{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@shared-lib/services/account/account.service\";\nimport * as i2 from \"../qualtrics/qualtrics.service\";\nimport * as i3 from \"../utility/utility.service\";\nexport let TPAStreamService = /*#__PURE__*/(() => {\n  class TPAStreamService {\n    constructor(accountService, qualtricsService, utilityService) {\n      this.accountService = accountService;\n      this.qualtricsService = qualtricsService;\n      this.utilityService = utilityService;\n    }\n\n    displayTPAStreamConnect(elementId, streamConnect = window.StreamConnect) {\n      const prefix = this.utilityService.getEnvironment().tpaPrefix;\n      this.accountService.getParticipant().subscribe(part => __awaiter(this, void 0, void 0, function* () {\n        const userProps = yield this.qualtricsService.getUserProperties();\n        streamConnect({\n          el: elementId,\n          isDemo: false,\n          sdkToken: '1a1d68b8-93c1-41ac-bced-16d1624c527f',\n          user: {\n            firstName: part.firstName,\n            lastName: part.lastName,\n            email: userProps.email,\n            memberSystemKey: part.profileId\n          },\n          employer: {\n            name: userProps.clientName,\n            systemKey: prefix + userProps.clientId,\n            vendor: 'internal'\n          }\n        });\n      }));\n    }\n\n  }\n\n  TPAStreamService.ɵfac = function TPAStreamService_Factory(t) {\n    return new (t || TPAStreamService)(i0.ɵɵinject(i1.AccountService), i0.ɵɵinject(i2.QualtricsService), i0.ɵɵinject(i3.SharedUtilityService));\n  };\n\n  TPAStreamService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TPAStreamService,\n    factory: TPAStreamService.ɵfac,\n    providedIn: 'root'\n  });\n  return TPAStreamService;\n})();","map":null,"metadata":{},"sourceType":"module"}