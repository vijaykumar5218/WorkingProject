{"ast":null,"code":"import _asyncToGenerator from \"/Users/vijay.a/Documents/GitHub/MYVOYAGE/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { CapQualtrics } from 'capacitor-qualtrics';\nimport { QualtricsProperty } from './constants/qualtrics-properties.enum';\nimport { QUALTRICS_BRAND_ID, QUALTRICS_PROJECT_ID, QUALTRICS_EXT_REF_ID } from './constants/qualtrics-config';\nimport { NavigationEnd } from '@angular/router';\nimport { endPoints } from './constants/endpoints';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@shared-lib/services/base/base-factory-provider\";\nimport * as i3 from \"@shared-lib/services/utility/utility.service\";\nimport * as i4 from \"@ionic/angular\";\nexport const QUALTRICS_EVAL_INTERVAL = 10 * 1000; //35 seconds\n\nexport let QualtricsService = /*#__PURE__*/(() => {\n  class QualtricsService {\n    constructor(router, baseService, utilityService, platform) {\n      this.router = router;\n      this.baseService = baseService;\n      this.utilityService = utilityService;\n      this.platform = platform;\n      this.endPoints = endPoints;\n      this.qualtrics = CapQualtrics;\n      this.initializeWeb();\n    }\n\n    initializeWeb() {\n      if (this.utilityService.getIsWeb()) {\n        this.endPoints = this.utilityService.appendBaseUrlToEndpoints(endPoints);\n      }\n    }\n\n    initializeMobile() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        _this.endPoints = _this.utilityService.appendBaseUrlToEndpoints(endPoints);\n        const result = yield _this.qualtrics.initialize({\n          brandID: QUALTRICS_BRAND_ID,\n          projectID: QUALTRICS_PROJECT_ID,\n          extRefID: QUALTRICS_EXT_REF_ID\n        });\n\n        if (result.success) {\n          _this.setUpRouteListener();\n\n          _this.startEvaluationTimer();\n        }\n      })();\n    }\n\n    setUpRouteListener() {\n      this.subscription = this.router.events.subscribe(this.routeChanged.bind(this));\n    }\n\n    routeChanged(event) {\n      if (event instanceof NavigationEnd) {\n        const pageUrl = event.urlAfterRedirects;\n        this.registerViewVisit(pageUrl);\n        this.setProperty(QualtricsProperty.PAGE_NAME, pageUrl);\n      }\n    }\n\n    startEvaluationTimer() {\n      this.clearEvaluationTimer();\n      this.evalTimer = setInterval(this.evaluateProject.bind(this), QUALTRICS_EVAL_INTERVAL);\n    }\n\n    clearEvaluationTimer() {\n      if (this.evalTimer) {\n        clearInterval(this.evalTimer);\n      }\n    }\n\n    getUserProperties() {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        if (!_this2.userProperties) {\n          _this2.userProperties = yield _this2.baseService.get(_this2.endPoints.qualtricsUserProps);\n        }\n\n        return _this2.userProperties;\n      })();\n    }\n\n    setUserProperties(paticipant) {\n      var _this3 = this;\n\n      return _asyncToGenerator(function* () {\n        const result = yield _this3.getUserProperties();\n\n        _this3.setProperty(QualtricsProperty.APP_ID, result.appId);\n\n        _this3.setProperty(QualtricsProperty.CLIENT_ID, result.clientId);\n\n        const planIds = [];\n        result.planIdList.forEach(plan => {\n          planIds.push(plan.planId);\n        });\n\n        _this3.setProperty(QualtricsProperty.PLAN, planIds.join(','));\n\n        _this3.setProperty(QualtricsProperty.PARTY_ID, result.partyId);\n\n        _this3.setProperty(QualtricsProperty.EMAIL, result.email);\n\n        _this3.setProperty(QualtricsProperty.PHONE, result.mobile);\n\n        _this3.setProperty(QualtricsProperty.FIRST_TIME_USER, result.firstTimeLogin ? 'Y' : 'N');\n\n        _this3.setProperty(QualtricsProperty.FIRST_NAME, paticipant.firstName);\n\n        if (_this3.platform.is('ios')) {\n          _this3.setProperty(QualtricsProperty.DEVICE_TYPE, 'ios');\n        } else if (_this3.platform.is('android')) {\n          _this3.setProperty(QualtricsProperty.DEVICE_TYPE, 'android');\n        } else {\n          _this3.setProperty(QualtricsProperty.DEVICE_TYPE, 'web');\n        }\n      })();\n    }\n\n    setProperty(prop, val) {\n      var _this4 = this;\n\n      return _asyncToGenerator(function* () {\n        return _this4.qualtrics.setProperty({\n          propName: prop,\n          propVal: val\n        });\n      })();\n    }\n\n    registerViewVisit(viewName) {\n      var _this5 = this;\n\n      return _asyncToGenerator(function* () {\n        return _this5.qualtrics.registerViewVisit({\n          viewName: viewName\n        });\n      })();\n    }\n\n    evaluateProject(bypass = false) {\n      var _this6 = this;\n\n      return _asyncToGenerator(function* () {\n        return _this6.qualtrics.evaluate({\n          bypass: bypass\n        });\n      })();\n    }\n\n    evaluateInterceptId(interceptId, bypass = false) {\n      var _this7 = this;\n\n      return _asyncToGenerator(function* () {\n        return _this7.qualtrics.evaluateInterceptId({\n          interceptId: interceptId,\n          bypass: bypass\n        });\n      })();\n    }\n\n    ngOnDestroy() {\n      if (this.subscription) {\n        this.subscription.unsubscribe();\n      }\n\n      this.clearEvaluationTimer();\n    }\n\n  }\n\n  QualtricsService.ɵfac = function QualtricsService_Factory(t) {\n    return new (t || QualtricsService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.BaseService), i0.ɵɵinject(i3.SharedUtilityService), i0.ɵɵinject(i4.Platform));\n  };\n\n  QualtricsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: QualtricsService,\n    factory: QualtricsService.ɵfac,\n    providedIn: 'root'\n  });\n  return QualtricsService;\n})();","map":null,"metadata":{},"sourceType":"module"}