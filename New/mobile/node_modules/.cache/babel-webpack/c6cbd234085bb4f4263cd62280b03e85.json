{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { AccessService } from '@shared-lib/services/access/access.service';\nimport { ReplaySubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let VoyaGlobalCacheService = /*#__PURE__*/(() => {\n  class VoyaGlobalCacheService {\n    constructor(http, injector) {\n      this.http = http;\n      this.injector = injector;\n      this.dataCache = {};\n      this.translationPreferenceResponse = new ReplaySubject(1);\n      this.w = window;\n    }\n\n    initVoyaGlobalCache() {\n      if (!window.fetchMethod) {\n        window.fetchMethod = (url, opts) => __awaiter(this, void 0, void 0, function* () {\n          const myWorkplaceDashboardEnabled = localStorage.getItem('myWorkplaceDashboardEnabled') === 'true';\n          url = this.constructURL(url, myWorkplaceDashboardEnabled);\n          const angularOpts = {\n            headers: opts.headers,\n            withCredentials: true\n          };\n\n          if (this.dataCache[url]) {\n            return Promise.resolve(new Response(JSON.stringify(yield this.dataCache[url])));\n          }\n\n          let promise;\n\n          if (opts.method === 'GET') {\n            promise = this.handleGetCall(url, opts);\n          } else if (opts.method === 'POST') {\n            this.setClientBrandPostBody(url, myWorkplaceDashboardEnabled, opts);\n\n            if (url.includes('/setPref')) {\n              promise = this.http.post(url, opts.body, Object.assign(Object.assign({}, angularOpts), {\n                responseType: 'text'\n              })).toPromise();\n              return new Response(yield promise);\n            }\n\n            promise = this.http.post(url, opts.body, angularOpts).toPromise();\n          }\n\n          this.dataCache[url] = promise;\n\n          if (url.includes('/getPref')) {\n            this.translationPreferenceResponse.next(yield promise);\n          }\n\n          return new Response(JSON.stringify(yield promise));\n        });\n\n        this.requireNav();\n      }\n    }\n\n    setClientBrandPostBody(url, myWorkplaceDashboardEnabled, opts) {\n      if (url.includes('/clientbrand') && myWorkplaceDashboardEnabled) {\n        let body = JSON.parse(opts.body);\n        body = Object.assign(Object.assign({}, body), {\n          pageName: 'dashboard'\n        });\n        opts.body = JSON.stringify(body);\n      }\n    }\n\n    requireNav() {\n      require('voya-global-nav');\n    }\n\n    constructURL(url, myWorkplaceDashboardEnabled) {\n      const pageName = 'dashboard';\n\n      if (url.includes('/dashboard/primaryNavLinks') || url.includes('/dashboard/responsivenav')) {\n        const sessionID = localStorage.getItem('sessionId');\n        url = `${url}?sessionID=${sessionID}&pageName=${pageName}`;\n      } else if (url.includes('/clientBrand') && myWorkplaceDashboardEnabled) {\n        url = url.replace('public/rsglobal/clientBrand', 'postlogin/clientbrand');\n      } else if (url.includes('/dashboard/retirement/vds/footer')) {\n        url = `${url}?pageName=${pageName}`;\n      }\n\n      return url;\n    }\n\n    handleGetCall(url, opts) {\n      let promise;\n      const accessService = this.injector.get(AccessService);\n\n      if (url.includes('/myvoyageenabled')) {\n        promise = accessService.checkMyvoyageAccess();\n      } else {\n        promise = this.http.get(url, {\n          headers: opts.headers,\n          withCredentials: true\n        }).toPromise();\n      }\n\n      return promise;\n    }\n\n    getTranslationPreference() {\n      return this.translationPreferenceResponse;\n    }\n\n  }\n\n  VoyaGlobalCacheService.ɵfac = function VoyaGlobalCacheService_Factory(t) {\n    return new (t || VoyaGlobalCacheService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i0.Injector));\n  };\n\n  VoyaGlobalCacheService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: VoyaGlobalCacheService,\n    factory: VoyaGlobalCacheService.ɵfac,\n    providedIn: 'root'\n  });\n  return VoyaGlobalCacheService;\n})();","map":null,"metadata":{},"sourceType":"module"}