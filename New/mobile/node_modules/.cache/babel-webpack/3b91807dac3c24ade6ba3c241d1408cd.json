{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic/angular\";\nimport * as i2 from \"../platform/platform.service\";\nexport let InAppBroserService = /*#__PURE__*/(() => {\n  class InAppBroserService {\n    constructor(loader, platformService) {\n      this.loader = loader;\n      this.platformService = platformService;\n      this.window = window;\n      this.browserOpen = false;\n    }\n\n    getOptionsString(inAppBrowserOpts) {\n      const options = Object.keys(inAppBrowserOpts).map(key => {\n        if (inAppBrowserOpts[key]) {\n          return key + '=' + inAppBrowserOpts[key];\n        } else {\n          return null;\n        }\n      });\n      const filtered = options.filter(function (el) {\n        return el != null;\n      });\n      return filtered.join(',');\n    }\n\n    openSystemBrowser(url) {\n      this.cordovaInApp = this.window.cordova.InAppBrowser;\n      this.cordovaInApp.open(url, '_system');\n    }\n\n    openInAppBrowser(url, controller) {\n      if (!this.browserOpen) {\n        this.browserOpen = true;\n        return this.openBrowser(url, controller);\n      }\n    }\n\n    openBrowser(url, controller) {\n      this.cordovaInApp = this.window.cordova.InAppBrowser;\n      const options = this.getOptionsString(controller.browserOptions);\n      const browser = this.cordovaInApp.open(url, '_blank', options);\n      controller.browser = browser;\n      controller.loadingController = this.loader;\n      controller.cordovaInApp = this.cordovaInApp;\n\n      if (controller.browserOptions.beforeload && controller.beforeLoadCallback) {\n        browser.addEventListener('beforeload', controller.beforeLoadCallback.bind(controller));\n      }\n\n      if (controller.loadStartCallback) {\n        browser.addEventListener('loadstart', controller.loadStartCallback.bind(controller));\n      }\n\n      if (controller.loadStopCallback) {\n        browser.addEventListener('loadstop', controller.loadStopCallback.bind(controller));\n      }\n\n      if (controller.messageCallback) {\n        browser.addEventListener('message', controller.messageCallback.bind(controller));\n      }\n\n      if (controller.exitCallback) {\n        browser.addEventListener('exit', controller.exitCallback.bind(controller));\n      }\n\n      browser.addEventListener('exit', this.handleExit.bind(this));\n      this.unsubscribe();\n      this.subscripton = this.platformService.onResume$.subscribe(() => __awaiter(this, void 0, void 0, function* () {\n        if (controller.resumeCallback) {\n          controller.resumeCallback();\n        } else {\n          this.browserOpen = false;\n          this.openInAppBrowser(url, controller);\n        }\n      }));\n      return browser;\n    }\n\n    handleExit() {\n      this.browserOpen = false;\n      this.unsubscribe();\n    }\n\n    unsubscribe() {\n      if (this.subscripton) {\n        this.subscripton.unsubscribe();\n      }\n    }\n\n    ngOnDestroy() {\n      this.unsubscribe();\n    }\n\n  }\n\n  InAppBroserService.ɵfac = function InAppBroserService_Factory(t) {\n    return new (t || InAppBroserService)(i0.ɵɵinject(i1.LoadingController), i0.ɵɵinject(i2.PlatformService));\n  };\n\n  InAppBroserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: InAppBroserService,\n    factory: InAppBroserService.ɵfac,\n    providedIn: 'root'\n  });\n  return InAppBroserService;\n})();","map":null,"metadata":{},"sourceType":"module"}