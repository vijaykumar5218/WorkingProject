{"ast":null,"code":"import _asyncToGenerator from \"/Users/vijay.a/Documents/GitHub/MYVOYAGE/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { endpoints } from '../constants/collegeEndpoints';\nimport { firstValueFrom, ReplaySubject, Subscription } from 'rxjs';\nimport moment from 'moment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../base/base-factory-provider\";\nimport * as i2 from \"../../utility/utility.service\";\nimport * as i3 from \"../journey.service\";\nimport * as i4 from \"@shared-lib/services/notification-setting/notification-setting.service\";\nimport * as i5 from \"@shared-lib/services/mx-service/mx.service\";\nimport * as i6 from \"shared-lib/services/journey/journeyUtilityService/journey-utility.service\";\nimport * as i7 from \"@angular/common\";\nconst portfolioProjectorMapping = {\n  one_time_contribution: 'oneTimeContribution',\n  existing_savings: 'existingSavings',\n  recurrent_payment: 'monthlyPayment',\n  annual_interest_rate: 'interestRate',\n  years: 'yearsTilStart',\n  rate_of_return: 'rateOfReturn',\n  household_income: 'householdIncome',\n  tax_filing_status_id: 'taxFilingStatus',\n  state_id: 'stateId',\n  college_projected_cost: 'total',\n  goal_percentage: 'goalPercentage'\n};\nexport let CollegeService = /*#__PURE__*/(() => {\n  class CollegeService {\n    constructor(baseService, utilityService, journeyService, notificationSettingsService, mxService, journeyUtility, currencyPipe) {\n      this.baseService = baseService;\n      this.utilityService = utilityService;\n      this.journeyService = journeyService;\n      this.notificationSettingsService = notificationSettingsService;\n      this.mxService = mxService;\n      this.journeyUtility = journeyUtility;\n      this.currencyPipe = currencyPipe;\n      this.valueChange = new ReplaySubject(1);\n      this.firstInitialize = true;\n      this.detailedFeesInputs = {};\n      this.portfolioProjectorInputs = {};\n      this.addedDependents = [];\n      this.subscription = new Subscription();\n      this.mxAccountSubject = new ReplaySubject(1);\n      this.oneTimeContribution = 0;\n      this.existingSavings = 0;\n      this.monthlyPayment = 0;\n      this.goalPercentage = 100;\n      this.validationRulesSubject = new ReplaySubject();\n      this.endpoints = this.utilityService.appendBaseUrlToEndpoints(endpoints);\n    }\n\n    initialize(journey) {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        _this.notificationSettingsService.setPrefsSettings();\n\n        _this.subscription.add(_this.notificationSettingsService.notificationPrefsChanged$.subscribe(settings => {\n          _this.displayNotificationSection = !_this.notificationSettingsService.getCheckedAndActive(settings, 'AAPref').sectionActive;\n        }));\n\n        const collegeData = yield _this.getCollegeData();\n\n        _this.setDefaults(collegeData);\n\n        _this.initializeDependents(collegeData, journey);\n\n        yield _this.setAnswers(journey);\n\n        if (!_this.firstInitialize) {\n          _this.journeyService.updateJourneySteps(journey.steps, journey.journeyID, false);\n        }\n\n        _this.firstInitialize = false;\n      })();\n    }\n\n    setDefaults(collegeData) {\n      this.totalYears = collegeData.yearsOfAttendance.defaultValue;\n      this.collegeStartAge = collegeData.collegeStartAge.defaultValue;\n      this.inflationRateType = 'Fixed';\n      this.interestRate = collegeData.simpleAnnualInterestRate.defaultValue;\n      this.rateOfReturn = collegeData.rateOfReturn.defaultValue;\n    }\n\n    setTrackerAnswers(dependent, allDependentSteps, collegeJourneyDataPromise, oldDependentId) {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        _this2.collegeJourneyDataPromise = collegeJourneyDataPromise;\n        const collegeData = yield _this2.getCollegeData();\n\n        _this2.setDefaults(collegeData);\n\n        _this2.allDependentSteps = allDependentSteps;\n        yield _this2.setAnswers(JSON.parse(JSON.stringify(_this2.journeyService.getCurrentJourney())), dependent, oldDependentId);\n      })();\n    }\n\n    getCollegeData() {\n      if (!this.collegeJourneyDataPromise) {\n        this.collegeJourneyDataPromise = this.baseService.get(this.endpoints.getCollegeData);\n      }\n\n      return this.collegeJourneyDataPromise;\n    }\n\n    initializeDependents(collegeData, journey) {\n      journey.steps.forEach(step => {\n        step.content?.pageElements.forEach(pageElement => {\n          this.updateDependents(collegeData.dependents, pageElement);\n          this.setOptions(pageElement, collegeData.collegeTypes, 'typeCollege');\n          this.setOptions(pageElement, collegeData.filingStatuses, 'filingStatus');\n          this.setOptions(pageElement, collegeData.states, 'stateResidence');\n          this.setModalOptions(pageElement, collegeData);\n          this.setEditAChildModal(pageElement);\n        });\n      });\n    }\n\n    setOptions(pageElement, optionArray, key) {\n      const elementIndex = pageElement.elements.findIndex(el => el.id === key);\n\n      if (elementIndex > -1) {\n        const typeElement = pageElement.elements[elementIndex];\n        const typeOptions = [];\n\n        if (optionArray.length > 0) {\n          optionArray.forEach(opt => {\n            typeOptions.push({\n              id: opt.id,\n              label: opt.label,\n              value: opt.value\n            });\n          });\n          typeElement.id = 'input';\n          typeElement.type = 'select';\n          typeElement.options = typeOptions;\n        } else {\n          pageElement.elements.splice(elementIndex, 1);\n        }\n      }\n    }\n\n    setModalOptions(pageElement, collegeData) {\n      const contentModal = pageElement.elements.find(el => el.answerId === 'editCollegeInfo');\n\n      if (contentModal) {\n        contentModal.elements.forEach(element => {\n          element.elements.forEach(ele => {\n            ele.elements.forEach(assumptionInput => {\n              if (assumptionInput.id === 'input' && assumptionInput.type === 'textField' && assumptionInput.answerId !== 'collegeStartAge') {\n                this.setInputProps(assumptionInput, collegeData);\n              } else if (assumptionInput.id === 'annualInflationRateSelect') {\n                const options = [];\n                collegeData.inflationRate.forEach(inflation => {\n                  options.push({\n                    id: inflation.label,\n                    label: inflation.label,\n                    value: inflation.label\n                  });\n                });\n                assumptionInput.id = 'input';\n                assumptionInput.options = options;\n              }\n            });\n          });\n        });\n      }\n    }\n\n    setInputProps(input, collegeData) {\n      const inputRange = collegeData[input['answerId']];\n\n      if (inputRange.maxValue !== undefined) {\n        input.validationRules.max = inputRange.maxValue;\n      }\n\n      if (inputRange.minValue !== undefined) {\n        input.validationRules.min = inputRange.minValue;\n      }\n\n      input.default = inputRange.defaultValue;\n    }\n\n    initializeDependentFromList(dependents, journey) {\n      journey.steps.forEach(step => {\n        step.content?.pageElements.forEach(pageElement => {\n          this.updateDependents(dependents, pageElement, true);\n        });\n      });\n    }\n\n    checkAddAChildAnswer(parsedAnswer, journey) {\n      if (parsedAnswer['addAChildModal']) {\n        this.initializeDependentFromList(parsedAnswer['addAChildModal'], journey);\n      }\n    }\n\n    setAnswers(journey, dependent, oldDependentId) {\n      var _this3 = this;\n\n      return _asyncToGenerator(function* () {\n        _this3.accountLinkedId = undefined;\n        _this3.accountNotLinked = true;\n        _this3.accountLinked = false;\n\n        if (!_this3.allDependentSteps) {\n          _this3.allDependentSteps = JSON.parse(JSON.stringify(journey.steps));\n        }\n\n        _this3.monthlyPayment = 0;\n        _this3.existingSavings = 0;\n        _this3.oneTimeContribution = 0;\n\n        if (dependent) {\n          _this3.setStaticWhoAreYouSavingFor(dependent, journey, oldDependentId);\n        }\n\n        const answerList = _this3.journeyService.getAnswerList(journey);\n\n        let radioButtonAnswer;\n\n        for (const answer of answerList) {\n          const parsedAnswer = _this3.journeyService.safeParse(answer);\n\n          if (parsedAnswer) {\n            _this3.addChildFromAnswer(dependent, parsedAnswer, journey);\n\n            yield _this3.setCollegeDetails(parsedAnswer);\n\n            if (parsedAnswer['calculateFinancialAid']) {\n              const parseAns = _this3.journeyService.safeParse(parsedAnswer['calculateFinancialAid']);\n\n              _this3.scholarshipsNotIncluded = parseAns['calculateFinancialAid'] === 'yes' ? false : true;\n              _this3.scholarshipsIncluded = !_this3.scholarshipsNotIncluded;\n            }\n\n            yield _this3.setLinkAccountValue(parsedAnswer);\n\n            _this3.setContributionAmts(parsedAnswer);\n\n            _this3.setOtherPortfolioAnswers(parsedAnswer);\n\n            _this3.setEditCollegeInfoAnswers(parsedAnswer);\n\n            radioButtonAnswer = _this3.getRadioButtonAnswer(parsedAnswer['monthlyContribution'], radioButtonAnswer);\n          }\n        }\n\n        yield _this3.setCurrentAge(journey, dependent !== undefined);\n        yield _this3.setInflationRate();\n        yield _this3.updateDetailedFees();\n        yield _this3.updatePortfolioProjector(journey, radioButtonAnswer, !dependent);\n\n        _this3.valueChange.next();\n      })();\n    }\n\n    setCollegeDetails(parsedAnswer) {\n      var _this4 = this;\n\n      return _asyncToGenerator(function* () {\n        let collegeNameAns;\n        let typeCollegeAns;\n\n        if (parsedAnswer['collegeName']) {\n          collegeNameAns = _this4.journeyService.safeParse(parsedAnswer['collegeName']);\n        }\n\n        if (parsedAnswer['typeCollege']) {\n          typeCollegeAns = _this4.journeyService.safeParse(parsedAnswer['typeCollege']);\n        }\n\n        if (collegeNameAns) {\n          _this4.collegeName = collegeNameAns.name;\n          _this4.collegeNameId = collegeNameAns.id;\n          _this4.isCollegeName = true;\n          _this4.isTypeCollege = false;\n          const collegeName = yield _this4.getCollegeList('page=1&name=' + encodeURIComponent(_this4.collegeName));\n\n          if (collegeName && collegeName.schools.length > 0) {\n            _this4.totalYears = Number(collegeName.schools[0].schoolDuration);\n          }\n        } else if (typeCollegeAns) {\n          _this4.typeCollege = typeCollegeAns.label;\n          _this4.typeCollegeId = typeCollegeAns.id;\n          _this4.isTypeCollege = true;\n          _this4.isCollegeName = false;\n          const typeCollege = (yield _this4.getCollegeData()).collegeTypes.find(type => type.id === _this4.typeCollegeId);\n          _this4.historicalInflationRate = typeCollege?.inflationRate;\n        }\n      })();\n    }\n\n    getRadioButtonAnswer(answer, radioButtonAnswer) {\n      if (!radioButtonAnswer) {\n        const parsedAnswer = this.journeyService.safeParse(answer);\n        radioButtonAnswer = parsedAnswer;\n      }\n\n      return radioButtonAnswer;\n    }\n\n    addChildFromAnswer(dependent, parsedAnswer, journey) {\n      if (!dependent) {\n        this.checkAddAChildAnswer(parsedAnswer, journey);\n        this.setWhoAreYouSavingFor(parsedAnswer, journey);\n      }\n    }\n\n    setInflationRate() {\n      var _this5 = this;\n\n      return _asyncToGenerator(function* () {\n        if (_this5.inflationRateType === 'Historical' && _this5.isTypeCollege) {\n          _this5.inflation = _this5.historicalInflationRate;\n        } else {\n          const collegeData = yield _this5.getCollegeData();\n          const inflationOption = collegeData.inflationRate.find(el => el.label === _this5.inflationRateType);\n          _this5.inflation = inflationOption.defaultValue;\n        }\n      })();\n    }\n\n    setLinkAccountValue(parsedAnswer) {\n      var _this6 = this;\n\n      return _asyncToGenerator(function* () {\n        if (parsedAnswer['linkExistingAccount']) {\n          _this6.accountLinkedId = parsedAnswer['linkExistingAccount'];\n          yield firstValueFrom(_this6.getMXAccountData());\n        }\n      })();\n    }\n\n    getMXAccountData() {\n      const mxSubscription = this.mxService.getMxAccountConnect().subscribe(data => {\n        const result = data?.accounts.filter(account => {\n          return account.account_type_name.toLowerCase() === 'checking' || account.account_type_name.toLowerCase() === 'cash' || account.account_type_name.toLowerCase() === 'savings' || account.account_type_name.toLowerCase() === 'any' || account.account_type_name.toLowerCase() === 'investment' && account.account_subtype_name?.toLowerCase() === 'plan_529';\n        });\n        const linkedAccount = this.journeyUtility.addAccountIconName(result, this.accountLinkedId);\n        this.mxAccountSubject.next({\n          accounts: result\n        });\n\n        if (linkedAccount) {\n          this.logoUrl = linkedAccount.medium_logo_url;\n          this.accountBalance = linkedAccount.balance || '0';\n          this.accountName = linkedAccount.name;\n          this.accountLinked = true;\n        } else {\n          this.accountLinked = false;\n        }\n\n        this.accountNotLinked = !this.accountLinked;\n      });\n      this.subscription.add(mxSubscription);\n      return this.mxAccountSubject;\n    }\n\n    setCurrentAge(journey, skipUpdate) {\n      var _this7 = this;\n\n      return _asyncToGenerator(function* () {\n        if (_this7.whoAreYouSavingForId) {\n          const dobVal = _this7.whoAreYouSavingForAge !== undefined ? _this7.whoAreYouSavingForAge : _this7.addedDependents.find(dep => dep.id === _this7.whoAreYouSavingForId)?.age;\n          _this7.currentAge = dobVal;\n\n          if (!skipUpdate) {\n            _this7.updateStartAgeMin(journey);\n          } else {\n            _this7.setCollegeStartAge();\n          }\n\n          _this7.yearsTilStart = _this7.collegeStartAge - _this7.currentAge;\n        }\n      })();\n    }\n\n    calculateAge(dobVal) {\n      const date = dobVal + '-01';\n      return Math.floor(moment().diff(moment(date), 'month', true) / 12);\n    }\n\n    setCollegeStartAge() {\n      if (this.currentAge > 18) {\n        this.collegeStartAge = this.currentAge;\n      }\n    }\n\n    updateStartAgeMin(journey) {\n      var _this8 = this;\n\n      return _asyncToGenerator(function* () {\n        journey.steps.forEach(step => {\n          step.content?.pageElements.forEach( /*#__PURE__*/function () {\n            var _ref = _asyncToGenerator(function* (pageElement) {\n              const contentModal = pageElement.elements.find(el => el.answerId === 'editCollegeInfo');\n\n              if (contentModal) {\n                const collegeData = yield _this8.getCollegeData();\n                contentModal.elements.forEach(element => {\n                  element.elements.forEach(ele => {\n                    ele.elements.forEach(assumptionInput => {\n                      if (assumptionInput.answerId === 'collegeStartAge') {\n                        const assumption = _this8.setassumptionInputs(assumptionInput, collegeData);\n\n                        assumptionInput.default = assumption.default;\n                        assumptionInput.validationRules.min = assumption.validationRules.min;\n\n                        _this8.validationRulesSubject.next({\n                          answerId: assumptionInput.answerId,\n                          validationRules: assumptionInput.validationRules,\n                          collegeStartAge: _this8.collegeStartAge.toString()\n                        });\n                      }\n                    });\n                  });\n                });\n              }\n            });\n\n            return function (_x) {\n              return _ref.apply(this, arguments);\n            };\n          }());\n        });\n      })();\n    }\n\n    setassumptionInputs(assumptionInput, collegeData) {\n      assumptionInput.default = this.currentAge > collegeData.collegeStartAge.defaultValue ? this.currentAge : collegeData.collegeStartAge.defaultValue;\n\n      if (this.currentAge < 18) {\n        this.collegeStartAge = assumptionInput.default;\n      } else {\n        this.collegeStartAge = this.currentAge;\n      }\n\n      assumptionInput.validationRules.min = this.currentAge > assumptionInput.default ? this.currentAge : assumptionInput.default;\n      return assumptionInput;\n    }\n\n    setWhoAreYouSavingFor(parsedAnswer, journey) {\n      const whoAreYouSavingForAns = this.journeyService.safeParse(parsedAnswer['whoAreYouSavingFor']);\n\n      if (whoAreYouSavingForAns) {\n        this.whoAreYouSavingFor = whoAreYouSavingForAns.label;\n        const oldWhoAreYouSavingForId = this.whoAreYouSavingForId;\n        this.whoAreYouSavingForId = whoAreYouSavingForAns.id;\n\n        if (oldWhoAreYouSavingForId !== this.whoAreYouSavingForId) {\n          this.updateStepValues(journey, oldWhoAreYouSavingForId);\n        }\n      }\n    }\n\n    setStaticWhoAreYouSavingFor(dependent, journey, oldDependentId) {\n      this.whoAreYouSavingFor = dependent.firstName;\n      this.whoAreYouSavingForId = dependent.id;\n      this.whoAreYouSavingForAge = dependent.age;\n      this.updateStepValues(journey, oldDependentId, false);\n    }\n\n    setContributionAmts(parsedAnswer) {\n      if (parsedAnswer['haveYouStartedSavingForChild']) {\n        const parseAns = this.journeyService.safeParse(parsedAnswer['haveYouStartedSavingForChild']);\n\n        if (parseAns && parseAns['haveYouStartedSavingForChild'] === 'yes') {\n          const additionalContribution = parseAns['additionalContribution'];\n\n          if (!this.journeyService.isValueEmpty(additionalContribution)) {\n            this.oneTimeContribution = parseFloat(additionalContribution.slice(1));\n          }\n\n          const monthlyPayment = parseAns['howMuchAreYouSavingMonthly'];\n\n          if (!this.journeyService.isValueEmpty(monthlyPayment)) {\n            this.monthlyPayment = parseFloat(monthlyPayment.slice(1));\n          }\n\n          const existingSavings = parseAns['howMuchHaveYouSavedSoFar'];\n\n          if (!this.journeyService.isValueEmpty(existingSavings)) {\n            this.existingSavings = parseFloat(existingSavings.slice(1));\n          }\n        }\n      }\n    }\n\n    setOtherPortfolioAnswers(parsedAnswer) {\n      if (parsedAnswer['householdIncome']) {\n        this.householdIncome = parseFloat(parsedAnswer['householdIncome'].slice(1));\n      }\n\n      if (parsedAnswer['stateResidence']) {\n        const parsedState = this.journeyService.safeParse(parsedAnswer['stateResidence']);\n        this.stateId = parsedState.id;\n      }\n\n      if (parsedAnswer['filingStatus']) {\n        const filingStatus = this.journeyService.safeParse(parsedAnswer['filingStatus']);\n        this.taxFilingStatus = filingStatus.id;\n      }\n    }\n\n    setEditCollegeInfoAnswers(parsedAnswer) {\n      const parsedModal = this.journeyService.safeParse(parsedAnswer['editCollegeInfo']);\n\n      if (parsedModal) {\n        Object.keys(parsedModal).forEach(key => {\n          this.setTabAnswer(parsedModal[key]);\n        });\n      }\n    }\n\n    setTabAnswer(tabAnswer) {\n      const parsedTab = this.journeyService.safeParse(tabAnswer);\n\n      if (parsedTab['collegeStartAge'] !== undefined) {\n        this.collegeStartAge = parsedTab['collegeStartAge'];\n      }\n\n      if (parsedTab['yearsOfAttendance'] !== undefined) {\n        this.totalYears = parsedTab['yearsOfAttendance'];\n      }\n\n      if (parsedTab['annualInflationRate']) {\n        const parsedInflationRate = this.journeyService.safeParse(parsedTab['annualInflationRate']);\n        this.inflationRateType = parsedInflationRate.id;\n      }\n\n      if (parsedTab['rateOfReturn'] !== undefined) {\n        this.rateOfReturn = parsedTab['rateOfReturn'];\n      }\n\n      if (parsedTab['simpleAnnualInterestRate'] !== undefined) {\n        this.interestRate = parsedTab['simpleAnnualInterestRate'];\n      }\n    }\n\n    stepChange(journey) {\n      this.setAnswers(journey);\n    }\n\n    processForSave(stepStatuses) {\n      if (this.whoAreYouSavingForId) {\n        stepStatuses.forEach(step => {\n          if (step.journeyStepName !== 'who_are_you_saving_for') {\n            const index = this.allDependentSteps.findIndex(allDependentStep => {\n              return allDependentStep.journeyStepName === step.journeyStepName;\n            });\n            this.addDependentId(step, index);\n            step.answer = this.allDependentSteps[index].answer;\n          }\n        });\n      }\n    }\n\n    addDependentId(step, i, id = this.whoAreYouSavingForId) {\n      const parsedAnswer = this.journeyService.safeParse(this.allDependentSteps[i].answer);\n      const updatedValue = parsedAnswer ? parsedAnswer : {};\n\n      if (step.value && Object.keys(step.value).length > 0) {\n        updatedValue[id] = step.value;\n      }\n\n      this.allDependentSteps[i].answer = Object.keys(updatedValue).length > 0 ? JSON.stringify(updatedValue) : undefined;\n    }\n\n    updateStepValues(journey, oldDependentId, updateSteps = true) {\n      journey.steps.forEach((step, i) => {\n        if (step.journeyStepName !== 'who_are_you_saving_for') {\n          if (oldDependentId) {\n            this.addDependentId(step, i, oldDependentId);\n          }\n\n          const parsedAnswer = this.journeyService.safeParse(this.allDependentSteps[i].answer);\n          step.value = undefined;\n\n          if (parsedAnswer && Object.keys(parsedAnswer).length > 0) {\n            const value = parsedAnswer[this.whoAreYouSavingForId];\n            step.answer = typeof value === 'string' ? value : JSON.stringify(value);\n          } else {\n            step.answer = undefined;\n          }\n        }\n      });\n\n      if (updateSteps) {\n        this.journeyService.updateJourneySteps(journey.steps, journey.journeyID, false);\n      }\n    }\n\n    addDependent(dependent, journey = this.journeyService.getCurrentJourney()) {\n      this.initializeDependentFromList([dependent], journey);\n      this.journeyService.updateJourneySteps(journey.steps, journey.journeyID, false);\n    }\n\n    updateDependents(dependents, pageElement, manuallyAdded = false) {\n      const dependentIndex = pageElement.elements.findIndex(el => el.answerId === 'whoAreYouSavingFor');\n\n      if (dependentIndex > -1) {\n        const dependentElement = pageElement.elements[dependentIndex];\n        const dependentElements = dependentElement.options ? dependentElement.options : [];\n        dependents.forEach(dep => {\n          if (typeof dep === 'string') {\n            dep = this.journeyService.safeParse(dep);\n          }\n\n          const index = dependentElements.findIndex(addedDep => addedDep.id === dep.id);\n\n          if (index === -1) {\n            this.trackAddedDependents(dep);\n            dependentElements.push(this.getDependentElement(dep, dependentElement, dependentElements.length, manuallyAdded));\n          } else {\n            dependentElements[index].label = 'childFirstName' in dep ? dep.childFirstName : dep.firstName;\n          }\n        });\n        dependentElement.id = 'input';\n        dependentElement.type = 'iconTextButtonSelect';\n        dependentElement.options = dependentElements;\n        this.setHasDependents(dependents);\n      }\n    }\n\n    getDependentElement(dep, dependentElement, i, manuallyAdded) {\n      return {\n        id: dep.id,\n        label: 'childFirstName' in dep ? dep.childFirstName : dep.firstName,\n        imageUrl: dependentElement.imageUrl,\n        value: dep.id,\n        idSuffix: dependentElement.idSuffix + i,\n        elements: manuallyAdded ? [this.editAChildModal] : undefined\n      };\n    }\n\n    setHasDependents(dependents) {\n      if (dependents.length !== 0) {\n        this.hasDependents = true;\n      } else {\n        this.hasDependents = false;\n      }\n\n      this.hasNoDependents = !this.hasDependents;\n    }\n\n    trackAddedDependents(dep) {\n      const age = 'childAge' in dep ? dep.childAge : dep.age;\n      this.addedDependents.push({\n        id: dep.id,\n        dob: 'dob' in dep ? dep.dob : undefined,\n        age: 'dob' in dep ? this.calculateAge(dep.dob) : age,\n        firstName: 'childFirstName' in dep ? dep.childFirstName : dep.firstName\n      });\n    }\n\n    updateApiValues(originalObjString, inputs, url, mapping, overrideKey, overrideValue) {\n      let undefinedInput = false;\n      Object.keys(mapping).forEach(key => {\n        if (overrideKey !== key) {\n          inputs[key] = this[mapping[key]];\n        } else {\n          inputs[key] = overrideValue;\n        }\n\n        if (this.journeyService.isValueEmpty(inputs[key])) {\n          undefinedInput = true;\n        }\n\n        url = url + key + '=' + inputs[key] + '&';\n      });\n      url = url.substring(0, url.length - 1);\n\n      if (originalObjString !== JSON.stringify(inputs) && !undefinedInput) {\n        return url;\n      } else {\n        return null;\n      }\n    }\n\n    updateDetailedFees() {\n      var _this9 = this;\n\n      return _asyncToGenerator(function* () {\n        let detailedFeeMapping;\n        _this9.scholarshipsNotIncludedCollegeName = false;\n        _this9.scholarshipsNotIncludedTypeCollege = false;\n\n        if (_this9.isCollegeName) {\n          detailedFeeMapping = {\n            years_of_attendance: 'totalYears',\n            college_start_age: 'collegeStartAge',\n            current_age: 'currentAge',\n            inflation: 'inflation',\n            school_id: 'collegeNameId'\n          };\n\n          if (_this9.scholarshipsNotIncluded) {\n            _this9.scholarshipsNotIncludedCollegeName = true;\n          }\n        } else {\n          detailedFeeMapping = {\n            years_of_attendance: 'totalYears',\n            college_start_age: 'collegeStartAge',\n            current_age: 'currentAge',\n            inflation: 'inflation',\n            college_type: 'typeCollegeId'\n          };\n\n          if (_this9.scholarshipsNotIncluded) {\n            _this9.scholarshipsNotIncludedTypeCollege = true;\n          }\n        }\n\n        const updateValuesUrl = _this9.updateApiValues(JSON.stringify(_this9.detailedFeesInputs), _this9.detailedFeesInputs, _this9.endpoints.detailedFees, detailedFeeMapping);\n\n        if (updateValuesUrl) {\n          const detailedFees = yield _this9.baseService.get(updateValuesUrl);\n          _this9.tuition = detailedFees.tuition;\n          _this9.roomAndBoard = detailedFees.roomAndBoard;\n          _this9.fees = detailedFees.fees;\n          _this9.books = detailedFees.books;\n          _this9.grantsAndScholarships = detailedFees.grantsAndScholarships;\n          _this9.grantsAndScholarshipsNegative = -1 * _this9.grantsAndScholarships;\n          _this9.totalCostWithoutScholarships = detailedFees.total;\n          _this9.startYear = detailedFees.startYear;\n        }\n\n        if (_this9.scholarshipsIncluded) {\n          _this9.total = _this9.totalCostWithoutScholarships - _this9.grantsAndScholarships;\n        } else {\n          _this9.total = _this9.totalCostWithoutScholarships;\n        }\n\n        _this9.averageAmount = _this9.total / _this9.totalYears;\n      })();\n    }\n\n    updatePortfolioProjector(journey, radioButtonAnswer, updateSteps) {\n      var _this10 = this;\n\n      return _asyncToGenerator(function* () {\n        const updateValuesUrl = _this10.updateApiValues(JSON.stringify(_this10.portfolioProjectorInputs), _this10.portfolioProjectorInputs, _this10.endpoints.portfolioProjector, portfolioProjectorMapping);\n\n        if (updateValuesUrl) {\n          const portfolioProjector = yield _this10.baseService.get(updateValuesUrl);\n          _this10.projectedShortfall = portfolioProjector.projectedShortfall;\n          _this10.projectedSurplus = portfolioProjector.projectedSurplus;\n          _this10.predictedOngoingContributions = portfolioProjector.predictedOngoingContributions;\n          _this10.predictedOneTimeContribution = portfolioProjector.predictedOneTimeContribution;\n          _this10.isShortfall = _this10.projectedShortfall >= 1;\n          _this10.isSurplus = _this10.projectedSurplus >= 1;\n          _this10.isEqual = !_this10.isShortfall && !_this10.isSurplus;\n        }\n\n        if (_this10.predictedOngoingContributions !== undefined) {\n          _this10.updateRadioOptions(journey);\n\n          yield _this10.updateNoteValueFromAnswer(radioButtonAnswer);\n\n          if (updateSteps) {\n            _this10.journeyService.updateJourneySteps(journey.steps, journey.journeyID, false);\n          }\n        }\n      })();\n    }\n\n    getValidationRules$() {\n      return this.validationRulesSubject;\n    }\n\n    setEditAChildModal(pageElement) {\n      const addAChildModal = pageElement.elements.find(ele => ele.answerId === 'addAChildModal');\n\n      if (addAChildModal) {\n        this.editAChildModal = JSON.parse(JSON.stringify(addAChildModal));\n        this.editAChildModal.elements.forEach(ele => {\n          ele.header = ele.header?.replace('Add', 'Edit');\n        });\n        this.editAChildModal.accumulateAnswers = false;\n      }\n    }\n\n    getModalValue(id, answerId) {\n      const dep = this.addedDependents.find(d => d.id === id);\n      const modalValue = {};\n      modalValue[answerId] = JSON.stringify({\n        childFirstName: dep.firstName,\n        dob: dep.dob,\n        id: id\n      });\n      return modalValue;\n    }\n\n    updateDependentValue(value) {\n      const depIndex = this.addedDependents.findIndex(dep => dep.id === value.id);\n      this.addedDependents[depIndex] = {\n        firstName: value.childFirstName,\n        age: this.calculateAge(value.dob),\n        id: value.id,\n        dob: value.dob\n      };\n    }\n\n    handleEditModalValueChange(dependent, index) {\n      const currentJourney = this.journeyService.getCurrentJourney();\n      const parsedDep = this.journeyService.safeParse(dependent);\n      this.updateDependentValue(parsedDep);\n      this.updateStepAnswerWithDependent(currentJourney.steps[index], parsedDep);\n      this.addDependent(parsedDep, currentJourney);\n    }\n\n    updateStepAnswerWithDependent(step, dep) {\n      if (!step.value) {\n        step.value = this.journeyService.safeParse(step.answer);\n      }\n\n      if (step.value['whoAreYouSavingFor']) {\n        const parsedVal = this.journeyService.safeParse(step.value['whoAreYouSavingFor']);\n\n        if (parsedVal?.id === dep.id) {\n          parsedVal.label = dep.childFirstName;\n          step.value['whoAreYouSavingFor'] = JSON.stringify(parsedVal);\n        }\n      }\n\n      if (step.value['addAChildModal']) {\n        const parsedVal = this.journeyService.safeParse(step.value['addAChildModal']);\n\n        if (parsedVal) {\n          const index = parsedVal.findIndex(valDep => valDep.id === dep.id);\n\n          if (index > -1) {\n            step.value['addAChildModal'][index] = JSON.stringify(dep);\n          }\n        }\n      }\n    }\n\n    updateRadioOptions(journey) {\n      let stepIndex;\n      journey.steps.forEach((step, i) => {\n        step.content?.pageElements.forEach(pageElement => {\n          pageElement.elements.forEach(element => {\n            const index = this.updateMonthlyContribution(element, i);\n\n            if (index !== undefined) {\n              stepIndex = index;\n            }\n          });\n        });\n      });\n      this.stripOldAnswers(journey.steps[stepIndex].value);\n      journey.steps[stepIndex].answer = JSON.stringify(this.stripOldAnswers(this.journeyService.safeParse(journey.steps[stepIndex].answer)));\n    }\n\n    updateMonthlyContribution(element, i) {\n      let stepIndex;\n\n      if (element.answerId === 'monthlyContribution') {\n        this.monthlyContribution = element;\n        stepIndex = i;\n        let originalMonthlyContributionOptions = this.getElementOptions();\n\n        if (!originalMonthlyContributionOptions) {\n          originalMonthlyContributionOptions = JSON.parse(JSON.stringify(element.options));\n          this.setElementOptions(originalMonthlyContributionOptions);\n        }\n\n        element.options = [];\n        let percentage = 1;\n        const copy = JSON.parse(JSON.stringify(originalMonthlyContributionOptions));\n        copy.forEach(option => {\n          const optionCopy = JSON.parse(JSON.stringify(option));\n          optionCopy.id = optionCopy.id + this.predictedOngoingContributions;\n\n          if (optionCopy.label.includes('{dollarAmt}')) {\n            const val = this.predictedOngoingContributions * percentage;\n            optionCopy.label = optionCopy.label.replace('{dollarAmt}', this.currencyPipe.transform(val, 'USD', true, '1.0-0'));\n            optionCopy.value = val;\n            percentage -= 0.25;\n          }\n\n          optionCopy.elements?.forEach(ele => {\n            if (ele.answerId) {\n              ele.answerId = ele.answerId + this.predictedOngoingContributions;\n            }\n          });\n          element.options.push(optionCopy);\n        });\n      }\n\n      return stepIndex;\n    }\n\n    stripOldAnswers(value) {\n      if (value && value['monthlyContribution']) {\n        const monthlyContribution = this.journeyService.safeParse(value['monthlyContribution']);\n\n        if (monthlyContribution) {\n          Object.keys(monthlyContribution).forEach(key => {\n            if (key.includes('specificMonthlyAmount') && key !== 'specificMonthlyAmount' + this.predictedOngoingContributions) {\n              delete monthlyContribution[key];\n            }\n\n            if (key.includes('oneTimeContribution') && key !== 'oneTimeContribution' + this.predictedOngoingContributions) {\n              delete monthlyContribution[key];\n            }\n          });\n          value['monthlyContribution'] = JSON.stringify(monthlyContribution);\n        }\n      }\n\n      return value;\n    }\n\n    setElementOptions(options) {\n      this.originalMonthlyContributionOptions = options;\n      localStorage.setItem('collegeOriginalMonthlyContributionOptions', JSON.stringify(options));\n    }\n\n    getElementOptions() {\n      const elementOptions = localStorage.getItem('collegeOriginalMonthlyContributionOptions');\n      return elementOptions && elementOptions !== 'undefined' ? JSON.parse(elementOptions) : this.originalMonthlyContributionOptions;\n    }\n\n    getOverrideKeyAndValue(answerId, answer) {\n      let overrideKey;\n      let overrideValue;\n\n      if (answerId.includes('oneTimeContribution')) {\n        overrideKey = 'one_time_contribution';\n        Object.keys(answer).forEach(key => {\n          if (key.includes('oneTimeContribution')) {\n            overrideValue = parseFloat(answer[key].slice(1));\n          }\n        });\n      } else if (answerId.includes('specificMonthlyAmount')) {\n        overrideKey = 'recurrent_payment';\n        Object.keys(answer).forEach(key => {\n          if (key.includes('specificMonthlyAmount')) {\n            overrideValue = parseFloat(answer[key].slice(1));\n          }\n        });\n      }\n\n      return {\n        key: overrideKey,\n        value: overrideValue\n      };\n    }\n\n    updateNoteValueFromAnswer(answer) {\n      var _this11 = this;\n\n      return _asyncToGenerator(function* () {\n        if (_this11.predictedOngoingContributions !== undefined && answer) {\n          const monthlyContributionAnswer = answer['monthlyContribution'];\n\n          if (monthlyContributionAnswer) {\n            let overrideValue;\n            let overrideKey;\n            let element;\n\n            if (monthlyContributionAnswer.includes('oneTimeContribution') || monthlyContributionAnswer.includes('specificMonthlyAmount')) {\n              const keyAndValue = _this11.getOverrideKeyAndValue(monthlyContributionAnswer, answer);\n\n              overrideKey = keyAndValue.key;\n              overrideValue = keyAndValue.value;\n\n              const opt = _this11.monthlyContribution.options.find(option => option.id === monthlyContributionAnswer);\n\n              element = opt?.elements[0].elements[0];\n            } else if (monthlyContributionAnswer.includes('montlyContribution')) {\n              overrideKey = 'recurrent_payment';\n\n              const opt = _this11.monthlyContribution.options.find(option => option.id === monthlyContributionAnswer);\n\n              element = opt?.elements[0];\n              overrideValue = opt?.value;\n            }\n\n            if (overrideKey && element) {\n              yield _this11.fetchNoteValue(overrideKey, overrideValue, element);\n            }\n          }\n        }\n      })();\n    }\n\n    updateNoteValue(event, element) {\n      var _this12 = this;\n\n      return _asyncToGenerator(function* () {\n        if (element.answerId?.includes('specificMonthlyAmount') || element.answerId?.includes('oneTimeContribution')) {\n          let overrideKey;\n\n          if (element.answerId.includes('specificMonthlyAmount')) {\n            overrideKey = 'recurrent_payment';\n          } else if (element.answerId.includes('oneTimeContribution')) {\n            overrideKey = 'one_time_contribution';\n          }\n\n          yield _this12.fetchNoteValue(overrideKey, parseFloat(event.slice(1)), element.elements[0]);\n        }\n      })();\n    }\n\n    updateNoteValueForRadioOption(element, answer) {\n      var _this13 = this;\n\n      return _asyncToGenerator(function* () {\n        if (element.id.includes('montlyContribution') || element.id.includes('specificMonthlyAmount') || element.id.includes('oneTimeContribution')) {\n          if (element.value !== undefined) {\n            yield _this13.fetchNoteValue('recurrent_payment', element.value, element.elements[0]);\n          } else {\n            const keyAndValue = _this13.getOverrideKeyAndValue(element.id, answer);\n\n            if (keyAndValue.value !== undefined) {\n              yield _this13.fetchNoteValue(keyAndValue.key, keyAndValue.value, element.elements[0].elements[0]);\n            }\n          }\n        }\n      })();\n    }\n\n    fetchNoteValue(overrideKey, value, element) {\n      var _this14 = this;\n\n      return _asyncToGenerator(function* () {\n        let oldDetails;\n\n        if (_this14.updatedEstimateDetails) {\n          oldDetails = JSON.stringify(_this14.updatedEstimateDetails);\n        }\n\n        _this14.updatedEstimateDetails = {\n          ongoingContributions: _this14.predictedOngoingContributions,\n          value: value,\n          overrideKey: overrideKey\n        };\n\n        if (!oldDetails || oldDetails !== JSON.stringify(_this14.updatedEstimateDetails)) {\n          const updateValuesUrl = _this14.updateApiValues(JSON.stringify(_this14.portfolioProjectorInputs), _this14.portfolioProjectorInputs, _this14.endpoints.portfolioProjector, portfolioProjectorMapping, overrideKey, value);\n\n          if (updateValuesUrl) {\n            const portfolioProjector = yield _this14.baseService.get(updateValuesUrl);\n            _this14.updatedShortfall = portfolioProjector.projectedShortfall >= 1;\n            _this14.updatedEstimate = _this14.updatedShortfall ? portfolioProjector.projectedShortfall : portfolioProjector.projectedSurplus;\n          }\n        }\n\n        element.description = _this14.updatedShortfall ? element.label : element.defaultHeader;\n\n        _this14.valueChange.next();\n      })();\n    }\n\n    getCollegeList(searchUrlParams) {\n      return this.baseService.get(this.endpoints.getCollegeList + searchUrlParams);\n    }\n\n    filteredList(searchUrlParams) {\n      var _this15 = this;\n\n      return _asyncToGenerator(function* () {\n        const result = yield _this15.getCollegeList(searchUrlParams);\n        return {\n          page: result.page,\n          totalPages: result.totalPages,\n          totalEntries: result.totalEntries,\n          options: result.schools\n        };\n      })();\n    }\n\n    ngOnDestroy() {\n      this.subscription.unsubscribe();\n    }\n\n  }\n\n  CollegeService.ɵfac = function CollegeService_Factory(t) {\n    return new (t || CollegeService)(i0.ɵɵinject(i1.BaseService), i0.ɵɵinject(i2.SharedUtilityService), i0.ɵɵinject(i3.JourneyService), i0.ɵɵinject(i4.NotificationsSettingService), i0.ɵɵinject(i5.MXService), i0.ɵɵinject(i6.JourneyUtilityService), i0.ɵɵinject(i7.CurrencyPipe));\n  };\n\n  CollegeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CollegeService,\n    factory: CollegeService.ɵfac,\n    providedIn: 'root'\n  });\n  return CollegeService;\n})();","map":null,"metadata":{},"sourceType":"module"}