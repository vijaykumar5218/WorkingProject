{"ast":null,"code":"import _asyncToGenerator from \"/Users/vijay.a/Documents/GitHub/MYVOYAGE/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { IonicAuth } from '@ionic-enterprise/auth';\nimport { Device, SupportedBiometricType } from '@ionic-enterprise/identity-vault';\nimport { DEFAULT_FACEID_DISABLED, VAULT_CONFIG_KEY } from './vault.service';\nimport { auth0NativeConfig, authTimeouts } from './contants/authConstants';\nimport { BehaviorSubject, Subscription } from 'rxjs';\nimport * as text from './contants/accountText.json';\nimport { endPoints } from './contants/endpoint';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"./vault.service\";\nimport * as i3 from \"@ionic/angular\";\nimport * as i4 from \"@ionic-native/http/ngx\";\nimport * as i5 from \"../platform/platform.service\";\nexport let AuthenticationService = /*#__PURE__*/(() => {\n  class AuthenticationService extends IonicAuth {\n    constructor(router, vaultService, platform, ngZone, http, platformService, alertController) {\n      super({ ...auth0NativeConfig,\n        tokenStorageProvider: vaultService.vault\n      });\n      this.router = router;\n      this.vaultService = vaultService;\n      this.platform = platform;\n      this.ngZone = ngZone;\n      this.http = http;\n      this.platformService = platformService;\n      this.alertController = alertController;\n      this.authText = text;\n      this.reloading = false;\n      this.endpoints = endPoints;\n      this.authenticationChange = new BehaviorSubject({\n        auth: false,\n        attested: false\n      });\n      this.biometricsAuthenticationChange$ = new BehaviorSubject(false);\n      this.platformSubscription = new Subscription();\n      this.usePlatformListeners = false;\n      this.pausedTime = Number.MAX_VALUE;\n      this.authenticationChange$ = this.authenticationChange.asObservable();\n      this.registerPlatformListeners();\n      this.peristedLocalStorageItems = [VAULT_CONFIG_KEY, DEFAULT_FACEID_DISABLED];\n\n      if (this.platform.is('capacitor')) {\n        Device.setHideScreenOnBackground(true);\n      }\n    }\n\n    navigateToLoggedInLanding() {\n      this.router.navigateByUrl(this.launchUrl ? this.launchUrl : 'home');\n      this.launchUrl = null;\n    }\n\n    didLaunchWithURL(url) {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        _this.launchUrl = url;\n      })();\n    }\n\n    getBiometricsIconName() {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        const supported = yield Device.getAvailableHardware();\n\n        if (supported.includes(SupportedBiometricType.Fingerprint)) {\n          if (_this2.platform.is('ios')) {\n            return 'assets/icon/touch_ios.svg';\n          } else {\n            return 'assets/icon/touch_android.svg';\n          }\n        } else if (supported.includes(SupportedBiometricType.Face) || supported.includes(SupportedBiometricType.Iris)) {\n          if (_this2.platform.is('ios')) {\n            return 'assets/icon/faceid_ios.svg';\n          } else {\n            return 'assets/icon/faceid_android.svg';\n          }\n        }\n\n        return 'assets/icon/touch_android.svg';\n      })();\n    }\n\n    getBiometricsLabel() {\n      var _this3 = this;\n\n      return _asyncToGenerator(function* () {\n        const supported = yield Device.getAvailableHardware();\n\n        if (supported.includes(SupportedBiometricType.Fingerprint)) {\n          if (_this3.platform.is('ios')) {\n            return _this3.authText.touchIdIos;\n          } else {\n            return _this3.authText.touchIdAndroid;\n          }\n        } else if (supported.includes(SupportedBiometricType.Face) || supported.includes(SupportedBiometricType.Iris)) {\n          if (_this3.platform.is('ios')) {\n            return _this3.authText.faceIdIos;\n          } else {\n            return _this3.authText.faceIdAndroid;\n          }\n        }\n\n        return _this3.authText.biometrics;\n      })();\n    }\n\n    registerPlatformListeners() {\n      var _this4 = this;\n\n      this.platformService.setInitialResume( /*#__PURE__*/_asyncToGenerator(function* () {\n        if (!_this4.usePlatformListeners) {\n          return;\n        }\n\n        const currTime = new Date().getTime();\n\n        if (!_this4.vaultService.isFaceIDEnabled()) {\n          //Non Faceid Timeout\n          if (currTime - _this4.pausedTime > authTimeouts.nonFaceIDTimeout) {\n            yield _this4.logout(true);\n            return false;\n          }\n        } else {\n          //Faceid timeout to fix issues\n          if (currTime - _this4.pausedTime > authTimeouts.faceIDRefreshTimout) {\n            yield _this4.router.navigateByUrl('landing');\n\n            _this4.reloadWindow();\n\n            return false;\n          }\n\n          yield _this4.vaultService.unlockVault();\n          yield _this4.isAuthenticated();\n        }\n\n        if (_this4.launchUrl) {\n          _this4.router.navigateByUrl(_this4.launchUrl);\n\n          _this4.launchUrl = null;\n        }\n\n        return true;\n      }));\n      this.platformSubscription.add(this.platformService.onPause$.subscribe(() => {\n        //Use this because of bug when trying to re-register platform listeners\n        if (!this.usePlatformListeners) {\n          return;\n        }\n\n        this.pausedTime = new Date().getTime();\n      }));\n    }\n\n    attemptFaceIDLogin() {\n      var _this5 = this;\n\n      return _asyncToGenerator(function* () {\n        try {\n          const hasFaceIDSession = yield _this5.hasFaceIDSession();\n\n          if (hasFaceIDSession) {\n            const isAuth = yield _this5.isAuthenticated();\n\n            if (isAuth) {\n              _this5.biometricsAuthenticationChange$.next(true);\n\n              _this5.navigateToLoggedInLanding();\n\n              _this5.usePlatformListeners = true;\n            }\n          }\n        } catch (ex) {\n          //If got biometric not available error, clear biometric session\n          if (ex.code == 13) {\n            _this5.clearStorage();\n\n            _this5.vaultService.disableFaceID();\n          }\n        }\n      })();\n    }\n\n    openRegister() {\n      var _this6 = this;\n\n      return _asyncToGenerator(function* () {\n        _this6.additionalLoginParameters({\n          register: 'allow'\n        });\n\n        yield _this6.login();\n      })();\n    }\n\n    openLogin() {\n      var _this7 = this;\n\n      return _asyncToGenerator(function* () {\n        _this7.additionalLoginParameters({});\n\n        yield _this7.login();\n      })();\n    }\n\n    shouldShowBiometricsScreen() {\n      var _this8 = this;\n\n      return _asyncToGenerator(function* () {\n        const faceIDAvail = yield _this8.vaultService.isFaceIDAvailableOnDevice();\n\n        if (faceIDAvail) {\n          return !_this8.vaultService.defaultFaceIDDisabled();\n        }\n\n        return false;\n      })();\n    }\n\n    showLoginFailureAlert() {\n      var _this9 = this;\n\n      return _asyncToGenerator(function* () {\n        //Got issue logging in\n        const alert = yield _this9.alertController.create({\n          message: _this9.authText.loginError,\n          buttons: [_this9.authText.ok]\n        });\n        alert.present();\n      })();\n    }\n\n    login() {\n      var _superprop_getLogin = () => super.login,\n          _this10 = this;\n\n      return _asyncToGenerator(function* () {\n        //Clear vault of any old sessions\n        try {\n          yield _this10.clearStorage(); //Change vault type to no face id and clear entire vault because we are loggin in with new account\n\n          yield _this10.vaultService.clearVault();\n          yield _this10.vaultService.disableFaceID();\n          yield _superprop_getLogin().call(_this10);\n        } catch (ex) {\n          if (ex == 'Error: browser was closed') {\n            return;\n          } else if (ex.code == 5) {\n            //If there was an issue clearing a prev faceid session, retry login\n            _this10.vaultService.disableFaceID();\n\n            setTimeout(() => {\n              _superprop_getLogin().call(_this10);\n            }, 50);\n          } else {\n            _this10.showLoginFailureAlert();\n          }\n        }\n      })();\n    }\n\n    onAuthChange(isAuthenticated) {\n      var _this11 = this;\n\n      return _asyncToGenerator(function* () {\n        _this11.ngZone.run(() => {\n          _this11.authenticationChange.next(isAuthenticated);\n        });\n      })();\n    }\n\n    onLoginSuccess() {\n      var _this12 = this;\n\n      return _asyncToGenerator(function* () {\n        const isAuth = yield _this12.isAuthenticated();\n\n        if (!isAuth) {\n          _this12.showLoginFailureAlert();\n\n          _this12.clearStorage();\n\n          _this12.router.navigateByUrl('landing');\n        } else {\n          _this12.onAuthChange({\n            auth: true,\n            attested: false\n          });\n\n          _this12.usePlatformListeners = true;\n        }\n      })();\n    }\n\n    hasNonFaceIDSession() {\n      var _this13 = this;\n\n      return _asyncToGenerator(function* () {\n        if (!_this13.vaultService.isFaceIDEnabled()) {\n          return _this13.vaultService.hasStoredSession();\n        }\n\n        return false;\n      })();\n    }\n\n    hasFaceIDSession() {\n      var _this14 = this;\n\n      return _asyncToGenerator(function* () {\n        if (_this14.vaultService.isFaceIDEnabled()) {\n          return _this14.vaultService.hasStoredSession();\n        }\n\n        return false;\n      })();\n    }\n\n    getDiscoveryURLS() {\n      var _this15 = this;\n\n      return _asyncToGenerator(function* () {\n        const result = yield _this15.http.get(auth0NativeConfig.discoveryUrl, {}, {});\n\n        if (result.data) {\n          return JSON.parse(result.data);\n        }\n\n        return null;\n      })();\n    }\n\n    logoutAndRevoke() {\n      var _this16 = this;\n\n      return _asyncToGenerator(function* () {\n        const discovery = yield _this16.getDiscoveryURLS();\n\n        if (!discovery) {\n          _this16.clearStorage();\n\n          return false;\n        }\n\n        const token = yield _this16.getAccessToken();\n        const refToken = yield _this16.getRefreshToken();\n        const httpHeader = {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        };\n\n        _this16.http.setDataSerializer('utf8'); //Revoke access token\n\n\n        const acccessBody = 'client_id=' + auth0NativeConfig.clientID + '&token=' + token + '&token_type_hint=access_token';\n        const accessResp = yield _this16.http.post(discovery.revocation_endpoint, acccessBody, httpHeader); //Revoke refresh token\n\n        const refreshBody = 'client_id=' + auth0NativeConfig.clientID + '&token=' + refToken + '&token_type_hint=refresh_token';\n        const refreshResp = yield _this16.http.post(discovery.revocation_endpoint, refreshBody, httpHeader);\n\n        _this16.http.setDataSerializer('json');\n\n        if (accessResp.status == 200 && refreshResp.status == 200) {\n          return true;\n        }\n\n        return false;\n      })();\n    }\n\n    logout(timeout = false) {\n      var _this17 = this;\n\n      return _asyncToGenerator(function* () {\n        _this17.reloading = true;\n\n        _this17.onAuthChange({\n          auth: false,\n          attested: false\n        });\n\n        if (timeout) {\n          yield _this17.router.navigateByUrl('logout');\n\n          _this17.clearUserSessionLocalStorage();\n\n          _this17.reloadWindow();\n\n          return;\n        }\n\n        _this17.usePlatformListeners = false;\n        yield _this17.router.navigateByUrl('secure-sign-out');\n\n        if (_this17.vaultService.isFaceIDEnabled()) {\n          yield _this17.vaultService.lockVault();\n        } else {\n          yield _this17.logoutAndRevoke();\n          yield _this17.clearStorage();\n        }\n\n        yield _this17.router.navigate(['landing'], {\n          queryParams: {\n            noAutoLogin: true\n          }\n        });\n\n        _this17.clearUserSessionLocalStorage();\n\n        _this17.reloadWindow();\n      })();\n    }\n\n    clearUserSessionLocalStorage() {\n      const keepers = {};\n      this.peristedLocalStorageItems.forEach(keep => {\n        keepers[keep] = localStorage.getItem(keep);\n      });\n      localStorage.clear();\n\n      for (const key in keepers) {\n        localStorage.setItem(key, keepers[key]);\n      }\n    }\n\n    clearStorage() {\n      var _superprop_getClearStorage = () => super.clearStorage,\n          _this18 = this;\n\n      return _asyncToGenerator(function* () {\n        try {\n          _this18.http.get(_this18.endpoints.myvoyaLogout, {}, {});\n\n          _this18.http.clearCookies();\n        } catch (ex) {\n          console.log('Error clearing old myvoya session');\n        }\n\n        _superprop_getClearStorage().call(_this18);\n      })();\n    }\n\n    reloadWindow() {\n      window.location.reload();\n    }\n\n    ngOnDestroy() {\n      this.platformSubscription.unsubscribe();\n    }\n\n  }\n\n  AuthenticationService.ɵfac = function AuthenticationService_Factory(t) {\n    return new (t || AuthenticationService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.VaultService), i0.ɵɵinject(i3.Platform), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i4.HTTP), i0.ɵɵinject(i5.PlatformService), i0.ɵɵinject(i3.AlertController));\n  };\n\n  AuthenticationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthenticationService,\n    factory: AuthenticationService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthenticationService;\n})();","map":null,"metadata":{},"sourceType":"module"}