{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { HttpParams } from '@angular/common/http';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic-native/http/ngx\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../loading-service/loading.service\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"../authentication/authentication.service\";\nexport let MobileBaseService = /*#__PURE__*/(() => {\n  class MobileBaseService {\n    constructor(http, router, loadingService, location, authService) {\n      this.http = http;\n      this.router = router;\n      this.loadingService = loadingService;\n      this.location = location;\n      this.authService = authService;\n      this.webServiceError = new Subject();\n      this.isBusy = false;\n      this.http.setDataSerializer('json');\n    }\n\n    errorEvents() {\n      return this.webServiceError.asObservable();\n    }\n\n    setDataSerializer(serializer) {\n      this.http.setDataSerializer(serializer);\n    }\n\n    awaitIsBusy() {\n      const poll = resolve => __awaiter(this, void 0, void 0, function* () {\n        if (!this.isBusy) {\n          resolve();\n        } else {\n          setTimeout(() => {\n            poll(resolve);\n          }, 50);\n        }\n      });\n\n      return new Promise(poll);\n    }\n\n    buildHeaders() {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (this.isBusy) {\n          yield this.awaitIsBusy();\n        }\n\n        this.isBusy = true;\n        let token = '';\n\n        try {\n          const isAuth = yield this.authService.isAuthenticated();\n\n          if (isAuth) {\n            token = yield this.authService.getAccessToken();\n          } else {\n            this.authService.logout();\n          }\n        } finally {\n          this.isBusy = false;\n        }\n\n        return {\n          Authorization: 'Bearer ' + token,\n          'X-Requested-By': 'myvoyageui'\n        };\n      });\n    }\n\n    post(url, request, httpHeader) {\n      return __awaiter(this, void 0, void 0, function* () {\n        let headers;\n\n        if (httpHeader) {\n          headers = httpHeader;\n        } else {\n          headers = yield this.buildHeaders();\n        }\n\n        try {\n          const result = yield this.http.post(url, request, headers);\n\n          if (result.data) {\n            return JSON.parse(result.data);\n          } else {\n            return null;\n          }\n        } catch (ex) {\n          this.webServiceError.next();\n          console.log(ex);\n          return null;\n        }\n      });\n    }\n\n    postWithoutResponse(url, request) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const headers = yield this.buildHeaders();\n        this.http.post(url, request, headers);\n      });\n    }\n\n    put(url, request) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const headers = yield this.buildHeaders();\n\n        try {\n          const result = yield this.http.put(url, request, headers);\n\n          if (result.data) {\n            return JSON.parse(result.data);\n          } else {\n            return null;\n          }\n        } catch (ex) {\n          console.log(ex);\n          this.webServiceError.next();\n          return null;\n        }\n      });\n    }\n\n    get(url, useAuth = true) {\n      return __awaiter(this, void 0, void 0, function* () {\n        let headers = {};\n\n        if (useAuth) {\n          headers = yield this.buildHeaders();\n        }\n\n        try {\n          const result = yield this.http.get(url, {}, headers);\n\n          if (result.data) {\n            return JSON.parse(result.data);\n          } else {\n            console.log(result);\n            return null;\n          }\n        } catch (ex) {\n          console.log(ex);\n          this.webServiceError.next();\n          return null;\n        }\n      });\n    }\n\n    getWithoutResponse(url) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const headers = yield this.buildHeaders();\n        return this.http.get(url, {}, headers);\n      });\n    }\n\n    clearCookies() {\n      this.http.clearCookies();\n    }\n\n    getCookieString(domain) {\n      return this.http.getCookieString(domain);\n    }\n\n    navigateByUrl(url) {\n      this.router.navigateByUrl(url);\n    }\n\n    navigateBack() {\n      this.location.back();\n    }\n\n    startLoading(startLoading) {\n      if (startLoading) {\n        this.loadingService.startLoading();\n      }\n    }\n\n    stopLoading(stopLoading) {\n      if (stopLoading) {\n        this.loadingService.stopLoading();\n      }\n    }\n\n    postUrlEncoded(url, request, httpHeader) {\n      return __awaiter(this, void 0, void 0, function* () {\n        let headers;\n\n        if (httpHeader) {\n          headers = httpHeader;\n        } else {\n          headers = yield this.buildHeaders();\n        }\n\n        headers['Content-Type'] = 'application/x-www-form-urlencoded';\n        const params = new HttpParams({\n          fromObject: request\n        });\n        this.setDataSerializer('utf8');\n        let returnVal = null;\n\n        try {\n          const result = yield this.http.post(url, params.toString(), headers);\n          returnVal = JSON.parse(result.data);\n        } catch (ex) {\n          console.log(ex);\n        }\n\n        this.setDataSerializer('json');\n        return returnVal;\n      });\n    }\n\n  }\n\n  MobileBaseService.ɵfac = function MobileBaseService_Factory(t) {\n    return new (t || MobileBaseService)(i0.ɵɵinject(i1.HTTP), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.LoadingService), i0.ɵɵinject(i4.Location), i0.ɵɵinject(i5.AuthenticationService));\n  };\n\n  MobileBaseService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MobileBaseService,\n    factory: MobileBaseService.ɵfac,\n    providedIn: 'root'\n  });\n  return MobileBaseService;\n})();","map":null,"metadata":{},"sourceType":"module"}