{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { DefaultIABController } from './default-iab-controller';\nimport content from '@shared-lib/services/benefits/open-savvi/constants/benefits.json';\nimport { IABMessage } from '../constants/message.enum';\nexport class SavviIABController extends DefaultIABController {\n  constructor(authService, baseService, inAppBrowser, samlAuthTokenEndpoint, savviSamlUrl, benefitsService, environment) {\n    super();\n    this.authService = authService;\n    this.baseService = baseService;\n    this.inAppBrowser = inAppBrowser;\n    this.samlAuthTokenEndpoint = samlAuthTokenEndpoint;\n    this.savviSamlUrl = savviSamlUrl;\n    this.showLoader = false;\n    this.benefitsService = benefitsService;\n    this.environment = environment;\n  }\n\n  loadStopCallback() {\n    const _super = Object.create(null, {\n      loadStopCallback: {\n        get: () => super.loadStopCallback\n      }\n    });\n\n    return __awaiter(this, void 0, void 0, function* () {\n      this.browser.insertCSS({\n        code: `\n          #root {\n            margin-top: 64px;\n          }`\n      });\n      this.displayCustomHeader(content.headerText, true, false);\n      this.browser.executeScript({\n        code: `document.addEventListener('signOutComplete', () => {\n            webkit.messageHandlers.cordova_iab.postMessage(JSON.stringify({message: '${IABMessage.close}'}));\n          });`\n      });\n\n      _super.loadStopCallback.call(this);\n\n      this.loadingController.dismiss();\n    });\n  }\n\n  openInAppBrowser(isWeb) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.savviSamlUrl = this.savviSamlUrl.replace('{savviBaseUrl}', this.environment.savviBaseUrl);\n\n      if (!isWeb) {\n        const loading = yield this.loadingController.create({\n          translucent: true\n        });\n        yield loading.present();\n        const authToken = yield this.authService.getAccessToken();\n        const request = {\n          client_id: this.environment.authTokenExchangeClient,\n          subject_token: authToken,\n          subject_token_type: 'access_token',\n          audience: this.environment.ssoSamlUrl,\n          grant_type: 'urn:ietf:params:oauth:grant-type:token-exchange',\n          requested_token_type: 'access_token',\n          scope: 'urn:voya:federation'\n        };\n        const queryAuthTokenResponse = yield this.baseService.postUrlEncoded(this.samlAuthTokenEndpoint, request, {});\n        this.inAppBrowser.openInAppBrowser(this.savviSamlUrl + queryAuthTokenResponse.access_token, this);\n      } else {\n        window.open(this.savviSamlUrl, '_blank');\n      }\n    });\n  }\n\n  exitCallback() {\n    this.benefitsService.resetBenefitsEnrollment();\n    this.benefitsService.getBenefitsEnrollment();\n  }\n\n  resumeCallback() {\n    return;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}