{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { from, ReplaySubject, Subscription } from 'rxjs';\nimport { endPoints } from './constants/endpoints';\nimport { map } from 'rxjs/operators';\nimport myvoyageHeaderContent from '@web/app/modules/shared/components/header/components/myvoyage-header/constants/content.json';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@shared-lib/services/account/account.service\";\nimport * as i2 from \"../web-qualtrics/web-qualtrics.service\";\nimport * as i3 from \"../session-timeout/session-timeout.service\";\nimport * as i4 from \"@shared-lib/services/access/access.service\";\nimport * as i5 from \"../logout/logout.service\";\nimport * as i6 from \"@shared-lib/services/base/base-factory-provider\";\nimport * as i7 from \"@shared-lib/services/utility/utility.service\";\nexport let HeaderTypeService = /*#__PURE__*/(() => {\n  class HeaderTypeService {\n    constructor(accountService, qualtricsSrvice, sessionTimeoutService, accessService, logoutService, baseService, utilityService) {\n      this.accountService = accountService;\n      this.qualtricsSrvice = qualtricsSrvice;\n      this.sessionTimeoutService = sessionTimeoutService;\n      this.accessService = accessService;\n      this.logoutService = logoutService;\n      this.baseService = baseService;\n      this.utilityService = utilityService;\n      this.subscription = new Subscription();\n      this.selectedTab$ = new ReplaySubject(1);\n      this.primaryNavData = null;\n      this.primaryNav$ = new ReplaySubject(1);\n      this.primaryNavLinksData = null;\n      this.primaryNavLinks$ = new ReplaySubject(1);\n      this.endpoints = endPoints;\n      this.myvoyageHeaderContent = myvoyageHeaderContent;\n      this.endpoints = this.utilityService.appendBaseUrlToEndpoints(endPoints);\n    }\n\n    getSelectedTab$() {\n      return this.selectedTab$;\n    }\n\n    publishSelectedTab(selectedTab) {\n      this.selectedTab$.next(selectedTab);\n    }\n\n    checkForWorkplaceHeaderFooter() {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          const {\n            myWorkplaceDashboardEnabled\n          } = yield this.accessService.checkWorkplaceAccess();\n          return Promise.resolve(myWorkplaceDashboardEnabled);\n        } catch (e) {\n          console.log(e);\n          return Promise.resolve(false);\n        }\n      });\n    }\n\n    logoutURLInitialize() {\n      this.logoutService.constructLogoutURL();\n    }\n\n    backToPrevious() {\n      this.utilityService.backToPrevious();\n    }\n\n    qualtricsInitialize(feedbackInterceptId) {\n      this.qualtricsSrvice.initialize(feedbackInterceptId);\n    }\n\n    sessionTimeoutWatcherInitiated() {\n      this.sessionTimeoutService.watcherInitiated();\n    }\n\n    getPrimaryNavData(refresh = false) {\n      if (!this.primaryNavData || refresh) {\n        this.primaryNavData = from(this.baseService.get(this.endpoints.primaryNav));\n        const subscription = this.primaryNavData.subscribe(data => {\n          this.primaryNav$.next(data);\n        }, error => {\n          console.log(error);\n          this.primaryNav$.next({\n            primaryNavLinks: []\n          });\n        });\n        this.subscription.add(subscription);\n      }\n\n      return this.primaryNav$;\n    }\n\n    constructPrimaryNavLinks() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const sessionID = yield this.accountService.getSessionId();\n        return this.baseService.get(`${this.endpoints.primaryNavLinks}?sessionID=${sessionID}`);\n      });\n    }\n\n    getPrimaryNavLinks(refresh = false) {\n      if (!this.primaryNavLinksData || refresh) {\n        this.primaryNavLinksData = from(this.constructPrimaryNavLinks());\n        const subscription = this.primaryNavLinksData.subscribe(data => {\n          if (data) {\n            this.primaryNavLinks$.next(data);\n          } else {\n            this.setPrimaryNavLinksBasedOnMyvoya();\n          }\n        }, error => {\n          console.log(error);\n          this.setPrimaryNavLinksBasedOnMyvoya();\n        });\n        this.subscription.add(subscription);\n      }\n\n      return this.primaryNavLinks$;\n    }\n\n    setPrimaryNavLinksBasedOnMyvoya() {\n      this.subscription.add(this.getPrimaryNavData().subscribe(myvoyaData => {\n        this.primaryNavLinks$.next(myvoyaData);\n      }));\n    }\n\n    getProfileSubLinks() {\n      return this.getPrimaryNavLinks().pipe(map(data => {\n        const profileLinks = data.primaryNavLinks.filter(item => item.id === 'MY_PROFILE_LINKS')[0];\n        const profileSubLinks = profileLinks ? profileLinks.subLinks.filter(item => item.id !== 'RETURN_TO_VOYA') : null;\n        const logoutURL = this.myvoyageHeaderContent.dropdownItems.filter(item => item.id === 'logout_dropdown_navbar_item')[0].link;\n\n        if (profileSubLinks && profileSubLinks.length > 0) {\n          profileSubLinks.forEach((item, index) => {\n            if (item.id === 'LOGOUT') {\n              profileSubLinks[index].link = logoutURL;\n            }\n          });\n        }\n\n        return profileSubLinks;\n      }));\n    }\n\n    getFinancialWellness() {\n      return this.getPrimaryNavLinks().pipe(map(data => {\n        const financialWellness = data.primaryNavLinks.filter(item => item.id === 'FINANCIAL_WELLNESS')[0];\n        return financialWellness ? financialWellness : null;\n      }));\n    }\n\n    getMoreResource() {\n      return this.getPrimaryNavData().pipe(map(data => {\n        return data.resourceLinks && data.resourceLinks.subLinks && data.resourceLinks.subLinks.length > 0 ? data.resourceLinks : null;\n      }));\n    }\n\n    ngOnDestroy() {\n      this.subscription.unsubscribe();\n    }\n\n  }\n\n  HeaderTypeService.ɵfac = function HeaderTypeService_Factory(t) {\n    return new (t || HeaderTypeService)(i0.ɵɵinject(i1.AccountService), i0.ɵɵinject(i2.WebQualtricsService), i0.ɵɵinject(i3.SessionTimeoutService), i0.ɵɵinject(i4.AccessService), i0.ɵɵinject(i5.WebLogoutService), i0.ɵɵinject(i6.BaseService), i0.ɵɵinject(i7.SharedUtilityService));\n  };\n\n  HeaderTypeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HeaderTypeService,\n    factory: HeaderTypeService.ɵfac,\n    providedIn: 'root'\n  });\n  return HeaderTypeService;\n})();","map":null,"metadata":{},"sourceType":"module"}