{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { endpoints } from '../constants/collegeEndpoints';\nimport { ReplaySubject, Subscription } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../base/base-factory-provider\";\nimport * as i2 from \"../../utility/utility.service\";\nimport * as i3 from \"../journey.service\";\nimport * as i4 from \"@shared-lib/services/notification-setting/notification-setting.service\";\nimport * as i5 from \"@shared-lib/services/mx-service/mx.service\";\nimport * as i6 from \"shared-lib/services/journey/journeyUtilityService/journey-utility.service\";\nconst detailedFeeMapping = {\n  college_type: 'typeCollegeId',\n  years_of_attendance: 'totalYears',\n  college_start_age: 'collegeStartAge',\n  current_age: 'currentAge',\n  inflation: 'inflation'\n};\nconst portfolioProjectorMapping = {\n  one_time_contribution: 'oneTimeContribution',\n  existing_savings: 'existingSavings',\n  recurrent_payment: 'monthlyPayment',\n  annual_interest_rate: 'interestRate',\n  years: 'totalYears',\n  rate_of_return: 'rateOfReturn',\n  household_income: 'householdIncome',\n  tax_filing_status_id: 'taxFilingStatus',\n  state_id: 'stateId',\n  college_projected_cost: 'total',\n  goal_percentage: 'goalPercentage'\n};\nexport let CollegeService = /*#__PURE__*/(() => {\n  class CollegeService {\n    constructor(baseService, utilityService, journeyService, notificationSettingsService, mxService, journeyUtility) {\n      this.baseService = baseService;\n      this.utilityService = utilityService;\n      this.journeyService = journeyService;\n      this.notificationSettingsService = notificationSettingsService;\n      this.mxService = mxService;\n      this.journeyUtility = journeyUtility;\n      this.valueChange = new ReplaySubject(1);\n      this.firstInitialize = true;\n      this.detailedFeesInputs = {};\n      this.portfolioProjectorInputs = {};\n      this.addedDependents = [];\n      this.subscription = new Subscription();\n      this.mxAccountSubject = new ReplaySubject(1);\n      this.oneTimeContribution = 0;\n      this.existingSavings = 0;\n      this.monthlyPayment = 0;\n      this.goalPercentage = 100;\n      this.endpoints = this.utilityService.appendBaseUrlToEndpoints(endpoints);\n    }\n\n    initialize(journey) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.notificationSettingsService.setPrefsSettings();\n        this.subscription.add(this.notificationSettingsService.notificationPrefsChanged$.subscribe(settings => {\n          this.displayNotificationSection = !this.notificationSettingsService.getCheckedAndActive(settings, 'AAPref').sectionActive;\n        }));\n        const collegeData = yield this.getCollegeData();\n        this.totalYears = collegeData.yearsOfAttendance.defaultValue;\n        this.collegeStartAge = collegeData.collegeStartAge.defaultValue;\n        this.inflationRateType = 'Fixed';\n        this.interestRate = collegeData.simpleAnnualInterestRate.defaultValue;\n        this.rateOfReturn = collegeData.rateOfReturn.defaultValue;\n        this.initializeDependents(collegeData, journey);\n        yield this.setAnswers(journey);\n\n        if (!this.firstInitialize) {\n          this.journeyService.updateJourneySteps(journey.steps, journey.journeyID, false);\n        }\n\n        this.firstInitialize = false;\n      });\n    }\n\n    getCollegeData() {\n      if (!this.collegeJourneyDataPromise) {\n        this.collegeJourneyDataPromise = this.baseService.get(this.endpoints.getCollegeData);\n      }\n\n      return this.collegeJourneyDataPromise;\n    }\n\n    initializeDependents(collegeData, journey) {\n      journey.steps.forEach(step => {\n        var _a;\n\n        (_a = step.content) === null || _a === void 0 ? void 0 : _a.pageElements.forEach(pageElement => {\n          this.updateDependents(collegeData.dependents, pageElement);\n          this.setOptions(pageElement, collegeData.collegeTypes, 'typeCollege');\n          this.setOptions(pageElement, collegeData.filingStatuses, 'filingStatus');\n          this.setOptions(pageElement, collegeData.states, 'stateResidence');\n          this.setModalOptions(pageElement, collegeData);\n        });\n      });\n    }\n\n    setOptions(pageElement, optionArray, key) {\n      const elementIndex = pageElement.elements.findIndex(el => el.id === key);\n\n      if (elementIndex > -1) {\n        const typeElement = pageElement.elements[elementIndex];\n        const typeOptions = [];\n\n        if (optionArray.length > 0) {\n          optionArray.forEach(opt => {\n            typeOptions.push({\n              id: opt.id,\n              label: opt.label,\n              value: opt.value\n            });\n          });\n          typeElement.id = 'input';\n          typeElement.type = 'select';\n          typeElement.options = typeOptions;\n        } else {\n          pageElement.elements.splice(elementIndex, 1);\n        }\n      }\n    }\n\n    setModalOptions(pageElement, collegeData) {\n      const contentModal = pageElement.elements.find(el => el.answerId === 'editCollegeInfo');\n\n      if (contentModal) {\n        contentModal.elements.forEach(element => {\n          element.elements.forEach(ele => {\n            ele.elements.forEach(assumptionInput => {\n              if (assumptionInput.id === 'input' && assumptionInput.type === 'textField' && assumptionInput.answerId !== 'collegeStartAge') {\n                this.setInputProps(assumptionInput, collegeData);\n              } else if (assumptionInput.id === 'annualInflationRateSelect') {\n                const options = [];\n                collegeData.inflationRate.forEach(inflation => {\n                  options.push({\n                    id: inflation.label,\n                    label: inflation.label,\n                    value: inflation.label\n                  });\n                });\n                assumptionInput.id = 'input';\n                assumptionInput.options = options;\n              }\n            });\n          });\n        });\n      }\n    }\n\n    setInputProps(input, collegeData) {\n      const inputRange = collegeData[input['answerId']];\n\n      if (inputRange.maxValue !== undefined) {\n        input.validationRules.max = inputRange.maxValue;\n      }\n\n      if (inputRange.minValue !== undefined) {\n        input.validationRules.min = inputRange.minValue;\n      }\n\n      input.default = inputRange.defaultValue;\n    }\n\n    initializeDependentFromList(dependents, journey) {\n      journey.steps.forEach(step => {\n        var _a;\n\n        (_a = step.content) === null || _a === void 0 ? void 0 : _a.pageElements.forEach(pageElement => {\n          this.updateDependents(dependents, pageElement);\n        });\n      });\n    }\n\n    checkAddAChildAnswer(parsedAnswer, journey) {\n      if (parsedAnswer['addAChildModal']) {\n        this.initializeDependentFromList(parsedAnswer['addAChildModal'], journey);\n      }\n    }\n\n    setAnswers(journey) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.accountLinkedId = undefined;\n        this.accountNotLinked = true;\n        this.accountLinked = false;\n\n        if (!this.allDependentSteps) {\n          this.allDependentSteps = JSON.parse(JSON.stringify(journey.steps));\n        }\n\n        const answerList = this.journeyService.getAnswerList(journey);\n        this.monthlyPayment = 0;\n        this.existingSavings = 0;\n        this.oneTimeContribution = 0;\n        let historicalInflationRate;\n\n        for (const answer of answerList) {\n          const parsedAnswer = this.journeyService.safeParse(answer);\n\n          if (parsedAnswer) {\n            this.checkAddAChildAnswer(parsedAnswer, journey);\n            this.setWhoAreYouSavingFor(parsedAnswer, journey);\n            const typeCollegeAns = this.journeyService.safeParse(parsedAnswer['typeCollege']);\n\n            if (typeCollegeAns) {\n              this.typeCollege = typeCollegeAns.label;\n              this.typeCollegeId = typeCollegeAns.id;\n              const typeCollege = (yield this.getCollegeData()).collegeTypes.find(type => type.id === this.typeCollegeId);\n              historicalInflationRate = typeCollege === null || typeCollege === void 0 ? void 0 : typeCollege.inflationRate;\n            }\n\n            if (parsedAnswer['calculateFinancialAid']) {\n              const parseAns = this.journeyService.safeParse(parsedAnswer['calculateFinancialAid']);\n              this.scholarshipsNotIncluded = parseAns['calculateFinancialAid'] === 'yes' ? false : true;\n              this.scholarshipsIncluded = !this.scholarshipsNotIncluded;\n            }\n\n            this.setLinkAccountValue(parsedAnswer);\n            this.setContributionAmts(parsedAnswer);\n            this.setOtherPortfolioAnswers(parsedAnswer);\n            this.setEditCollegeInfoAnswers(parsedAnswer);\n          }\n        }\n\n        yield this.updateDetailedFees();\n        yield this.updatePortfolioProjector();\n        yield this.setCurrentAge(journey);\n        yield this.setInflationRate(historicalInflationRate);\n        this.valueChange.next();\n      });\n    }\n\n    setInflationRate(historicalInflationRate) {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (this.inflationRateType === 'Historical') {\n          this.inflation = historicalInflationRate;\n        } else {\n          const collegeData = yield this.getCollegeData();\n          const inflationOption = collegeData.inflationRate.find(el => el.label === this.inflationRateType);\n          this.inflation = inflationOption.defaultValue;\n        }\n      });\n    }\n\n    setLinkAccountValue(parsedAnswer) {\n      if (parsedAnswer['linkExistingAccount']) {\n        this.accountLinkedId = parsedAnswer['linkExistingAccount'];\n        this.setMxAccount();\n      }\n    }\n\n    setMxAccount() {\n      if (this.MXAccountData && this.accountLinkedId) {\n        this.setAccountLinkedStatus();\n      } else {\n        this.subscription.add(this.getMXAccountData().subscribe(res => {\n          this.MXAccountData = res;\n          this.setAccountLinkedStatus();\n        }));\n      }\n    }\n\n    setAccountLinkedStatus() {\n      this.accountNotLinked = false;\n      this.accountLinked = true;\n    }\n\n    getMXAccountData() {\n      let MXAccountData;\n      const mxSubscription = this.mxService.getMxAccountConnect().subscribe(data => {\n        const result = data === null || data === void 0 ? void 0 : data.accounts.filter(account => {\n          return account.account_type_name.toLowerCase() === 'checking' || account.account_type_name.toLowerCase() === 'cash' || account.account_type_name.toLowerCase() === 'savings' || account.account_type_name.toLowerCase() === 'any' || account.account_type_name.toLowerCase() === 'investment' && account.account_subtype_name.toLowerCase() === 'plan_529';\n        });\n        MXAccountData = {\n          accounts: this.journeyUtility.setMxAccountSubjectData(result, this.accountLinkedId)\n        };\n        this.mxAccountSubject.next(MXAccountData);\n      });\n      this.subscription.add(mxSubscription);\n      return this.mxAccountSubject;\n    }\n\n    setCurrentAge(journey) {\n      var _a;\n\n      return __awaiter(this, void 0, void 0, function* () {\n        if (this.whoAreYouSavingForId) {\n          this.currentAge = (_a = this.addedDependents.find(dep => dep.id === this.whoAreYouSavingForId)) === null || _a === void 0 ? void 0 : _a.age;\n          this.updateStartAgeMin(journey);\n        }\n      });\n    }\n\n    updateStartAgeMin(journey) {\n      return __awaiter(this, void 0, void 0, function* () {\n        journey.steps.forEach(step => {\n          var _a;\n\n          (_a = step.content) === null || _a === void 0 ? void 0 : _a.pageElements.forEach(pageElement => __awaiter(this, void 0, void 0, function* () {\n            const contentModal = pageElement.elements.find(el => el.answerId === 'editCollegeInfo');\n\n            if (contentModal) {\n              const collegeData = yield this.getCollegeData();\n              contentModal.elements.forEach(element => {\n                element.elements.forEach(ele => {\n                  ele.elements.forEach(assumptionInput => {\n                    if (assumptionInput.answerId === 'collegeStartAge') {\n                      assumptionInput.validationRules.min = this.currentAge;\n                      assumptionInput.default = this.currentAge > collegeData.collegeStartAge.defaultValue ? this.currentAge : collegeData.collegeStartAge.defaultValue;\n                    }\n                  });\n                });\n              });\n            }\n          }));\n        });\n      });\n    }\n\n    setWhoAreYouSavingFor(parsedAnswer, journey) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const whoAreYouSavingForAns = this.journeyService.safeParse(parsedAnswer['whoAreYouSavingFor']);\n\n        if (whoAreYouSavingForAns) {\n          this.whoAreYouSavingFor = whoAreYouSavingForAns.label;\n          const oldWhoAreYouSavingForId = this.whoAreYouSavingForId;\n          this.whoAreYouSavingForId = whoAreYouSavingForAns.id;\n\n          if (oldWhoAreYouSavingForId !== this.whoAreYouSavingForId) {\n            this.updateStepValues(journey, oldWhoAreYouSavingForId);\n          }\n        }\n      });\n    }\n\n    setContributionAmts(parsedAnswer) {\n      if (parsedAnswer['haveYouStartedSavingForChild']) {\n        const parseAns = this.journeyService.safeParse(parsedAnswer['haveYouStartedSavingForChild']);\n\n        if (parseAns) {\n          const additionalContribution = parseAns['additionalContribution'];\n\n          if (!this.journeyService.isValueEmpty(additionalContribution)) {\n            this.oneTimeContribution = parseFloat(additionalContribution.slice(1));\n          }\n\n          const monthlyPayment = parseAns['howMuchAreYouSavingMonthly'];\n\n          if (!this.journeyService.isValueEmpty(monthlyPayment)) {\n            this.monthlyPayment = parseFloat(monthlyPayment.slice(1));\n          }\n\n          const existingSavings = parseAns['howMuchHaveYouSavedSoFar'];\n\n          if (!this.journeyService.isValueEmpty(existingSavings)) {\n            this.existingSavings = parseFloat(existingSavings.slice(1));\n          }\n        }\n      }\n    }\n\n    setOtherPortfolioAnswers(parsedAnswer) {\n      if (parsedAnswer['householdIncome']) {\n        this.householdIncome = parseFloat(parsedAnswer['householdIncome'].slice(1));\n      }\n\n      if (parsedAnswer['stateResidence']) {\n        const parsedState = this.journeyService.safeParse(parsedAnswer['stateResidence']);\n        this.stateId = parsedState.id;\n      }\n\n      if (parsedAnswer['filingStatus']) {\n        const filingStatus = this.journeyService.safeParse(parsedAnswer['filingStatus']);\n        this.taxFilingStatus = filingStatus.id;\n      }\n    }\n\n    setEditCollegeInfoAnswers(parsedAnswer) {\n      const parsedModal = this.journeyService.safeParse(parsedAnswer['editCollegeInfo']);\n\n      if (parsedModal) {\n        Object.keys(parsedModal).forEach(key => {\n          this.setTabAnswer(parsedModal[key]);\n        });\n      }\n    }\n\n    setTabAnswer(tabAnswer) {\n      const parsedTab = this.journeyService.safeParse(tabAnswer);\n\n      if (parsedTab['collegeStartAge'] !== undefined) {\n        this.collegeStartAge = parsedTab['collegeStartAge'];\n      }\n\n      if (parsedTab['yearsOfAttendance'] !== undefined) {\n        this.totalYears = parsedTab['yearsOfAttendance'];\n      }\n\n      if (parsedTab['annualInflationRate']) {\n        const parsedInflationRate = this.journeyService.safeParse(parsedTab['annualInflationRate']);\n        this.inflationRateType = parsedInflationRate.id;\n      }\n\n      if (parsedTab['rateOfReturn'] !== undefined) {\n        this.rateOfReturn = parsedTab['rateOfReturn'];\n      }\n\n      if (parsedTab['simpleAnnualInterestRate'] !== undefined) {\n        this.interestRate = parsedTab['simpleAnnualInterestRate'];\n      }\n    }\n\n    stepChange(journey) {\n      this.setAnswers(journey);\n    }\n\n    processForSave(stepStatuses) {\n      if (this.whoAreYouSavingForId) {\n        stepStatuses.forEach(step => {\n          if (step.journeyStepName !== 'who_are_you_saving_for') {\n            const index = this.allDependentSteps.findIndex(allDependentStep => {\n              return allDependentStep.journeyStepName === step.journeyStepName;\n            });\n            this.addDependentId(step, index);\n            step.answer = this.allDependentSteps[index].answer;\n          }\n        });\n      }\n    }\n\n    addDependentId(step, i, id = this.whoAreYouSavingForId) {\n      const parsedAnswer = this.journeyService.safeParse(this.allDependentSteps[i].answer);\n      const updatedValue = parsedAnswer ? parsedAnswer : {};\n\n      if (step.value && Object.keys(step.value).length > 0) {\n        updatedValue[id] = step.value;\n      }\n\n      this.allDependentSteps[i].answer = Object.keys(updatedValue).length > 0 ? JSON.stringify(updatedValue) : undefined;\n    }\n\n    updateStepValues(journey, oldDependentId) {\n      journey.steps.forEach((step, i) => {\n        if (step.journeyStepName !== 'who_are_you_saving_for') {\n          if (oldDependentId) {\n            this.addDependentId(step, i, oldDependentId);\n          }\n\n          const parsedAnswer = this.journeyService.safeParse(this.allDependentSteps[i].answer);\n          step.value = undefined;\n\n          if (parsedAnswer && Object.keys(parsedAnswer).length > 0) {\n            const value = parsedAnswer[this.whoAreYouSavingForId];\n            step.answer = typeof value === 'string' ? value : JSON.stringify(value);\n          } else {\n            step.answer = undefined;\n          }\n        }\n      });\n      this.journeyService.updateJourneySteps(journey.steps, journey.journeyID, false);\n    }\n\n    addDependent(dependent) {\n      const journey = this.journeyService.getCurrentJourney();\n      this.initializeDependentFromList([dependent], journey);\n      this.journeyService.updateJourneySteps(journey.steps, journey.journeyID, false);\n    }\n\n    updateDependents(dependents, pageElement) {\n      const dependentIndex = pageElement.elements.findIndex(el => el.answerId === 'whoAreYouSavingFor');\n\n      if (dependentIndex > -1) {\n        const dependentElement = pageElement.elements[dependentIndex];\n        const dependentElements = dependentElement.options ? dependentElement.options : [];\n        dependents.forEach(dep => {\n          if (typeof dep === 'string') {\n            dep = this.journeyService.safeParse(dep);\n          }\n\n          if (dependentElements.findIndex(addedDep => addedDep.id === dep.id) === -1) {\n            this.trackAddedDependents(dep);\n            dependentElements.push({\n              id: dep.id,\n              label: 'childFirstName' in dep ? dep.childFirstName : dep.firstName,\n              imageUrl: dependentElement.imageUrl,\n              value: dep.id,\n              idSuffix: dependentElement.idSuffix + dependentElements.length\n            });\n          }\n        });\n        dependentElement.id = 'input';\n        dependentElement.type = 'iconTextButtonSelect';\n        dependentElement.options = dependentElements;\n\n        if (dependents.length !== 0) {\n          this.hasDependents = true;\n        }\n      }\n    }\n\n    trackAddedDependents(dep) {\n      var _a;\n\n      this.addedDependents.push({\n        id: dep.id,\n        age: 'childAge' in dep ? dep.childAge : (_a = dep.age) === null || _a === void 0 ? void 0 : _a.toString(),\n        firstName: 'childFirstName' in dep ? dep.childFirstName : dep.firstName\n      });\n    }\n\n    updateApiValues(originalObjString, inputs, url, mapping) {\n      let undefinedInput = false;\n      Object.keys(mapping).forEach(key => {\n        inputs[key] = this[mapping[key]];\n\n        if (this.journeyService.isValueEmpty(inputs[key])) {\n          undefinedInput = true;\n        }\n\n        url = url + key + '=' + inputs[key] + '&';\n      });\n      url = url.substring(0, url.length - 1);\n\n      if (originalObjString !== JSON.stringify(inputs) && !undefinedInput) {\n        return url;\n      } else {\n        return null;\n      }\n    }\n\n    updateDetailedFees() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const updateValuesUrl = this.updateApiValues(JSON.stringify(this.detailedFeesInputs), this.detailedFeesInputs, this.endpoints.detailedFees, detailedFeeMapping);\n\n        if (updateValuesUrl) {\n          const detailedFees = yield this.baseService.get(updateValuesUrl);\n          this.tuition = detailedFees.tuition;\n          this.roomAndBoard = detailedFees.roomAndBoard;\n          this.fees = detailedFees.fees;\n          this.books = detailedFees.books;\n          this.grantsAndScholarships = detailedFees.grantsAndScholarships;\n          this.grantsAndScholarshipsNegative = -1 * this.grantsAndScholarships;\n          this.totalCostWithoutScholarships = detailedFees.total;\n          this.endYear = detailedFees.endYear;\n        }\n\n        if (this.scholarshipsIncluded) {\n          this.total = this.totalCostWithoutScholarships - this.grantsAndScholarships;\n        } else {\n          this.total = this.totalCostWithoutScholarships;\n        }\n\n        this.averageAmount = this.total / this.totalYears;\n      });\n    }\n\n    updatePortfolioProjector() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const updateValuesUrl = this.updateApiValues(JSON.stringify(this.portfolioProjectorInputs), this.portfolioProjectorInputs, this.endpoints.portfolioProjector, portfolioProjectorMapping);\n\n        if (updateValuesUrl) {\n          const portfolioProjector = yield this.baseService.get(updateValuesUrl);\n          this.projectedShortfall = portfolioProjector.projectedShortfall;\n          this.projectedSurplus = portfolioProjector.projectedSurplus;\n          this.predictedOngoingContributions = portfolioProjector.predictedOngoingContributions;\n          this.predictedOneTimeContribution = portfolioProjector.predictedOneTimeContribution;\n          this.isShortfall = this.projectedShortfall > 0;\n          this.isSurplus = !this.isShortfall;\n        }\n      });\n    }\n\n    ngOnDestroy() {\n      this.subscription.unsubscribe();\n    }\n\n  }\n\n  CollegeService.ɵfac = function CollegeService_Factory(t) {\n    return new (t || CollegeService)(i0.ɵɵinject(i1.BaseService), i0.ɵɵinject(i2.SharedUtilityService), i0.ɵɵinject(i3.JourneyService), i0.ɵɵinject(i4.NotificationsSettingService), i0.ɵɵinject(i5.MXService), i0.ɵɵinject(i6.JourneyUtilityService));\n  };\n\n  CollegeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CollegeService,\n    factory: CollegeService.ɵfac,\n    providedIn: 'root'\n  });\n  return CollegeService;\n})();","map":null,"metadata":{},"sourceType":"module"}