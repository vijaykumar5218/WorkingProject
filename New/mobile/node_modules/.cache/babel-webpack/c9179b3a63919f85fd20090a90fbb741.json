{"ast":null,"code":"import _asyncToGenerator from \"/Users/vijay.a/Documents/GitHub/MYVOYAGE/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { WebPlugin } from \"@capacitor/core\";\nexport class FirebaseAnalyticsWeb extends WebPlugin {\n  constructor() {\n    super();\n    this.not_supported_mssg = \"This method is not supported\";\n    this.options_missing_mssg = \"Firebase options are missing\";\n    this.duplicate_app_mssg = \"Firebase app already exists\";\n    this.analytics_missing_mssg = \"Firebase analytics is not initialized. Make sure initializeFirebase() is called once\";\n    this.scripts = [{\n      key: \"firebase-app\",\n      src: \"https://www.gstatic.com/firebasejs/8.2.3/firebase-app.js\"\n    }, {\n      key: \"firebase-ac\",\n      src: \"https://www.gstatic.com/firebasejs/8.2.3/firebase-analytics.js\"\n    }];\n    this.ready = new Promise(resolve => this.readyResolver = resolve);\n    this.configure();\n  }\n  /**\n   * Configure and Initialize FirebaseApp if not present\n   * @param options - web app's Firebase configuration\n   * @returns firebase analytics object reference\n   * Platform: Web\n   */\n\n\n  initializeFirebase(options) {\n    var _this = this;\n\n    return new Promise( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (resolve, reject) {\n        yield _this.ready;\n\n        if (_this.hasFirebaseInitialized()) {\n          reject(_this.duplicate_app_mssg);\n          return;\n        }\n\n        if (!options) {\n          reject(_this.options_missing_mssg);\n          return;\n        }\n\n        const app = window.firebase.initializeApp(options);\n        _this.analyticsRef = app.analytics();\n        resolve(_this.analyticsRef);\n      });\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n  }\n  /**\n   * Sets the user ID property.\n   * @param options - userId: unique identifier of the user to log\n   * Platform: Web/Android/iOS\n   */\n\n\n  setUserId(options) {\n    var _this2 = this;\n\n    return new Promise( /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(function* (resolve, reject) {\n        yield _this2.ready;\n\n        if (!_this2.analyticsRef) {\n          reject(_this2.analytics_missing_mssg);\n          return;\n        }\n\n        const {\n          userId\n        } = options || {\n          userId: undefined\n        };\n\n        if (!userId) {\n          reject(\"userId property is missing\");\n          return;\n        }\n\n        _this2.analyticsRef.setUserId(userId);\n\n        resolve();\n      });\n\n      return function (_x3, _x4) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  }\n  /**\n   * Sets a user property to a given value.\n   * @param options - name: The name of the user property to set.\n   *                  value: The value of the user property.\n   * Platform: Web/Android/iOS\n   */\n\n\n  setUserProperty(options) {\n    var _this3 = this;\n\n    return new Promise( /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator(function* (resolve, reject) {\n        yield _this3.ready;\n\n        if (!_this3.analyticsRef) {\n          reject(_this3.analytics_missing_mssg);\n          return;\n        }\n\n        const {\n          name,\n          value\n        } = options || {\n          name: undefined,\n          value: undefined\n        };\n\n        if (!name) {\n          reject(\"name property is missing\");\n          return;\n        }\n\n        if (!value) {\n          reject(\"value property is missing\");\n          return;\n        }\n\n        let property = {};\n        property[name] = value;\n\n        _this3.analyticsRef.setUserProperties(property);\n\n        resolve();\n      });\n\n      return function (_x5, _x6) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n  }\n  /**\n   * Retrieves the app instance id from the service.\n   * @returns - instanceId: current instance if of the app\n   * Platform: Web/Android/iOS\n   */\n\n\n  getAppInstanceId() {\n    return new Promise((resolve, _reject) => resolve);\n  }\n  /**\n   * Sets the current screen name, which specifies the current visual context in your app.\n   * @param options - screenName: the activity to which the screen name and class name apply.\n   *                  nameOverride: the name of the current screen. Set to null to clear the current screen name.\n   * Platform: Android/iOS\n   */\n\n\n  setScreenName(_options) {\n    return new Promise((resolve, _reject) => resolve);\n  }\n  /**\n   * Clears all analytics data for this app from the device and resets the app instance id.\n   * Platform: Android/iOS\n   */\n\n\n  reset() {\n    return new Promise((resolve, _reject) => resolve);\n  }\n  /**\n   * Logs an app event.\n   * @param options - name: unique name of the event\n   *                  params: the map of event parameters.\n   * Platform: Web/Android/iOS\n   */\n\n\n  logEvent(options) {\n    var _this4 = this;\n\n    return new Promise( /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator(function* (resolve, reject) {\n        yield _this4.ready;\n\n        if (!_this4.analyticsRef) {\n          reject(_this4.analytics_missing_mssg);\n          return;\n        }\n\n        const {\n          name,\n          params\n        } = options || {\n          name: undefined,\n          params: undefined\n        };\n\n        if (!name) {\n          reject(\"name property is missing\");\n          return;\n        }\n\n        _this4.analyticsRef.logEvent(name, params);\n\n        resolve();\n      });\n\n      return function (_x7, _x8) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n  }\n  /**\n   * Sets whether analytics collection is enabled for this app on this device.\n   * @param options - enabled: boolean true/false to enable/disable logging\n   * Platform: Web/Android/iOS\n   */\n\n\n  setCollectionEnabled(options) {\n    var _this5 = this;\n\n    return new Promise( /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator(function* (resolve, reject) {\n        yield _this5.ready;\n\n        if (!_this5.analyticsRef) {\n          reject(_this5.analytics_missing_mssg);\n          return;\n        }\n\n        const {\n          enabled\n        } = options || {\n          enabled: false\n        };\n\n        _this5.analyticsRef.setAnalyticsCollectionEnabled(enabled);\n\n        resolve();\n      });\n\n      return function (_x9, _x10) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n  }\n  /**\n   * Sets the duration of inactivity that terminates the current session.\n   * @param options - duration: duration of inactivity\n   * Platform: Android/iOS\n   */\n\n\n  setSessionTimeoutDuration(_options) {\n    return new Promise((_resolve, reject) => {\n      reject(this.not_supported_mssg);\n    });\n  }\n  /**\n   * Returns analytics reference object\n   */\n\n\n  get remoteConfig() {\n    return this.analyticsRef;\n  }\n\n  enable() {\n    var _this6 = this;\n\n    return new Promise( /*#__PURE__*/function () {\n      var _ref6 = _asyncToGenerator(function* (resolve, reject) {\n        yield _this6.ready;\n\n        if (!_this6.analyticsRef) {\n          reject(_this6.analytics_missing_mssg);\n          return;\n        }\n\n        _this6.analyticsRef.setAnalyticsCollectionEnabled(true);\n\n        resolve();\n      });\n\n      return function (_x11, _x12) {\n        return _ref6.apply(this, arguments);\n      };\n    }());\n  }\n\n  disable() {\n    var _this7 = this;\n\n    return new Promise( /*#__PURE__*/function () {\n      var _ref7 = _asyncToGenerator(function* (resolve, reject) {\n        yield _this7.ready;\n\n        if (!_this7.analyticsRef) {\n          reject(_this7.analytics_missing_mssg);\n          return;\n        }\n\n        _this7.analyticsRef.setAnalyticsCollectionEnabled(false);\n\n        resolve();\n      });\n\n      return function (_x13, _x14) {\n        return _ref7.apply(this, arguments);\n      };\n    }());\n  }\n  /**\n   * Ready resolver to check and load firebase analytics\n   */\n\n\n  configure() {\n    var _this8 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        yield _this8.loadScripts();\n\n        if (window.firebase && window.firebase.analytics && _this8.hasFirebaseInitialized()) {\n          _this8.analyticsRef = window.firebase.analytics();\n        }\n      } catch (error) {\n        throw error;\n      }\n\n      const interval = setInterval(() => {\n        if (!window.firebase) {\n          return;\n        }\n\n        clearInterval(interval);\n\n        _this8.readyResolver();\n      }, 50);\n    })();\n  }\n  /**\n   * Check for existing loaded script and load new scripts\n   */\n\n\n  loadScripts() {\n    var _this9 = this;\n\n    const firebaseAppScript = this.scripts[0];\n    const firebaseAnalyticsScript = this.scripts[1];\n    return new Promise( /*#__PURE__*/function () {\n      var _ref8 = _asyncToGenerator(function* (resolve, _reject) {\n        const scripts = _this9.scripts.map(script => script.key);\n\n        if (document.getElementById(scripts[0]) && document.getElementById(scripts[1])) {\n          return resolve(null);\n        }\n\n        yield _this9.loadScript(firebaseAppScript.key, firebaseAppScript.src);\n        yield _this9.loadScript(firebaseAnalyticsScript.key, firebaseAnalyticsScript.src);\n        resolve(null);\n      });\n\n      return function (_x15, _x16) {\n        return _ref8.apply(this, arguments);\n      };\n    }());\n  }\n  /**\n   * Loaded single script with provided id and source\n   * @param id - unique identifier of the script\n   * @param src - source of the script\n   */\n\n\n  loadScript(id, src) {\n    return new Promise((resolve, reject) => {\n      const file = document.createElement(\"script\");\n      file.type = \"text/javascript\";\n      file.src = src;\n      file.id = id;\n      file.onload = resolve;\n      file.onerror = reject;\n      document.querySelector(\"head\").appendChild(file);\n    });\n  }\n  /**\n   * Returns true/false if firebase object reference exists inside window\n   */\n\n\n  hasFirebaseInitialized() {\n    if (!window.firebase) {\n      return false;\n    }\n\n    const firebaseApps = window.firebase.apps;\n\n    if (firebaseApps && firebaseApps.length === 0) {\n      return false;\n    }\n\n    return true;\n  }\n\n} //# sourceMappingURL=web.js.map","map":null,"metadata":{},"sourceType":"module"}