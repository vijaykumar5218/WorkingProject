{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { endPoints } from './constants/endpoints';\nimport { BehaviorSubject, from, ReplaySubject, Subscription } from 'rxjs';\nimport { TPAStreamConnectPage } from '@shared-lib/components/coverages/tpastream-connect/tpastream-connect.page';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../utility/utility.service\";\nimport * as i2 from \"../base/base-factory-provider\";\nimport * as i3 from \"@ionic/angular\";\nimport * as i4 from \"@angular/router\";\nexport let TPAStreamService = /*#__PURE__*/(() => {\n  class TPAStreamService {\n    constructor(utilityService, baseService, modalController, router) {\n      this.utilityService = utilityService;\n      this.baseService = baseService;\n      this.modalController = modalController;\n      this.router = router;\n      this.isWeb = false;\n      this.tpaData = null;\n      this.tpaDataSubject = new ReplaySubject(1);\n      this.subscription = new Subscription();\n      this.tpaDataReload$ = new BehaviorSubject(null);\n      this.endpoints = this.utilityService.appendBaseUrlToEndpoints(endPoints);\n      this.isWeb = this.utilityService.getIsWeb();\n    }\n\n    processTPAData(tpaData) {\n      const carrierNames = {};\n      tpaData.carriers.forEach(carrier => {\n        carrierNames[carrier.carrierId] = carrier.carrierName;\n      });\n      Object.keys(tpaData.groupingCategoryDetails).forEach(key => {\n        for (const element of tpaData.groupingCategoryDetails[key]) {\n          if (element.serviceName === 'rx') {\n            if (element.claimLines && element.claimLines.length > 0) {\n              element.drugName = element.claimLines[0].procedure_name;\n            }\n          }\n\n          element.carrierName = carrierNames[element.carrierId];\n        }\n      });\n    }\n\n    getTPAData(refresh = false) {\n      if (this.tpaData == null || refresh) {\n        this.tpaDataReload$.next();\n        this.tpaData = from(this.baseService.post(this.endpoints.healthUtilization, {}));\n        const subscription = this.tpaData.subscribe(result => {\n          this.processTPAData(result);\n          this.tpaDataSubject.next(result);\n        });\n        this.subscription.add(subscription);\n      }\n\n      return this.tpaDataSubject;\n    }\n\n    openTPAConnect(redirect = false) {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (this.isWeb) {\n          this.router.navigateByUrl('coverages/all-coverages/tpaclaims/connect');\n        } else {\n          const modal = yield this.modalController.create({\n            component: TPAStreamConnectPage,\n            cssClass: 'modal-fullscreen',\n            swipeToClose: false\n          });\n\n          if (redirect) {\n            modal.onWillDismiss().then(() => {\n              this.router.navigateByUrl('coverages/coverage-tabs/insights');\n            });\n          }\n\n          modal.present();\n        }\n      });\n    }\n\n    revokeCarrier(policyHolderId, memberId) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const payload = {\n          memberId: memberId,\n          policyHolderId: policyHolderId,\n          enable: false\n        };\n        const result = yield this.baseService.post(this.endpoints.disablePolicyHolder, payload);\n        return result === true;\n      });\n    }\n\n    ngOnDestroy() {\n      if (this.subscription) {\n        this.subscription.unsubscribe();\n      }\n    }\n\n  }\n\n  TPAStreamService.ɵfac = function TPAStreamService_Factory(t) {\n    return new (t || TPAStreamService)(i0.ɵɵinject(i1.SharedUtilityService), i0.ɵɵinject(i2.BaseService), i0.ɵɵinject(i3.ModalController), i0.ɵɵinject(i4.Router));\n  };\n\n  TPAStreamService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TPAStreamService,\n    factory: TPAStreamService.ɵfac,\n    providedIn: 'root'\n  });\n  return TPAStreamService;\n})();","map":null,"metadata":{},"sourceType":"module"}