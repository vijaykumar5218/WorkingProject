{"ast":null,"code":"import _asyncToGenerator from \"/Users/vijay.a/Documents/GitHub/MYVOYAGE/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { BehaviorSubject, firstValueFrom, from, ReplaySubject, Subscription } from 'rxjs';\nimport { endPoints } from './constants/endpoints';\nimport { map } from 'rxjs/operators';\nimport { AccessService } from '../access/access.service';\nimport { AccountService } from '@shared-lib/services/account/account.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../base/base-factory-provider\";\nimport * as i2 from \"../utility/utility.service\";\nimport * as i3 from \"@ionic/angular\";\nimport * as i4 from \"../../../mobile/src/app/modules/shared/service/in-app-browser/in-app-browser.service\";\nimport * as i5 from \"../../../web/src/app/modules/shared/services/voya-global-cache/voya-global-cache.service\";\nexport let MXService = /*#__PURE__*/(() => {\n  class MXService {\n    constructor(baseService, utilityService, platform, inAppBrowserService, voyaCacheService, injector) {\n      this.baseService = baseService;\n      this.utilityService = utilityService;\n      this.platform = platform;\n      this.inAppBrowserService = inAppBrowserService;\n      this.voyaCacheService = voyaCacheService;\n      this.injector = injector;\n      this.messageHeader = null;\n      this.mxBudgetSubject = new ReplaySubject(1);\n      this.mxMemberData = null;\n      this.mxMemberSubject = new ReplaySubject(1);\n      this.mxAccountData = null;\n      this.mxAccountSubject = new ReplaySubject(1);\n      this.netWorthData = null;\n      this.netWorthSubject = new ReplaySubject(1);\n      this.subscription = new Subscription();\n      this.hasMXUserSubject = new ReplaySubject(1);\n      this.hasMXAccountsSubject = new ReplaySubject(1);\n      this.currentMessageListener = null;\n      this.hasMxUserByMyvoyageAccessData = null;\n      this.hasMxUserByMyvoyageAccessSubject = new ReplaySubject(1);\n      this.isAltAccessUserData = null;\n      this.isAltAccessUserSubject = new ReplaySubject(1);\n      this.mxErrorHiddenSubject = new BehaviorSubject(false);\n      this.displayWidgetBusy = false;\n      this.mxDataLocalStorageSubject = null;\n      this.langCode = '';\n      this.accessService = this.injector.get(AccessService);\n      this.accountService = this.injector.get(AccountService);\n      this.endpoints = this.utilityService.appendBaseUrlToEndpoints(endPoints);\n      this.mxDataLocalStorageSubject = new ReplaySubject(1);\n    }\n\n    setMxErrorHidden(hidden) {\n      this.mxErrorHiddenSubject.next(hidden);\n    }\n\n    isMxErrorHidden() {\n      return this.mxErrorHiddenSubject.asObservable();\n    }\n\n    hasAccounts() {\n      if (!this.hasMXAccountsSubscription) {\n        this.hasMXAccountsSubscription = this.getMxMemberConnect().subscribe(memberData => {\n          let hasAccounts = false;\n\n          if (memberData) {\n            memberData.members.forEach(member => {\n              if (member.connection_status == 'CONNECTED') {\n                hasAccounts = true;\n              }\n            });\n          }\n\n          this.hasMXAccountsSubject.next(hasAccounts);\n        });\n      }\n\n      return this.hasMXAccountsSubject;\n    }\n\n    getTotalNetworth(refresh = false) {\n      if (!this.netWorthData || refresh) {\n        this.netWorthData = from(this.baseService.get(this.endpoints.totalNetworth));\n        const subscription = this.netWorthData.subscribe(result => this.netWorthSubject.next(result));\n        this.subscription.add(subscription);\n      }\n\n      return this.netWorthSubject;\n    }\n\n    hasUser() {\n      if (!this.hasMXUserSubscription) {\n        this.hasMXUserSubscription = this.getMxMemberConnect().subscribe(memberData => {\n          let hasUser = false;\n\n          if (memberData) {\n            memberData.members.forEach(member => {\n              if (member.is_user_created == 'true') {\n                hasUser = true;\n              }\n            });\n          }\n\n          this.hasMXUserSubject.next(hasUser);\n        });\n      }\n\n      return this.hasMXUserSubject;\n    }\n\n    getMxMemberConnect(refresh = false) {\n      if (!this.mxMemberData || refresh) {\n        this.mxMemberData = from(this.baseService.get(this.endpoints.memberConnect));\n        const subscription = this.mxMemberData.subscribe(result => {\n          this.mxMemberSubject.next(result);\n        });\n        this.subscription.add(subscription);\n      }\n\n      return this.mxMemberSubject;\n    }\n\n    getMxAccountConnect(refresh = false) {\n      if (!this.mxAccountData || refresh) {\n        this.mxAccountData = from(this.baseService.get(this.endpoints.accountConnect));\n        const subscription = this.mxAccountData.subscribe(result => {\n          this.mxAccountSubject.next(result);\n        });\n        this.subscription.add(subscription);\n      }\n\n      return this.mxAccountSubject;\n    }\n\n    setMxData(mxaccount) {\n      localStorage.setItem('currentAccountMX', JSON.stringify(mxaccount));\n    }\n\n    getMxData() {\n      return JSON.parse(localStorage.getItem('currentAccountMX'));\n    }\n\n    setMxDataLocalStorage(data) {\n      if (data !== this.previousMxDataInLocalStorage) {\n        this.setMxData(data);\n        this.previousMxDataInLocalStorage = data;\n        this.mxDataLocalStorageSubject.next(data);\n      }\n    }\n\n    getMxDataLocalStorage() {\n      return this.mxDataLocalStorageSubject.asObservable();\n    }\n\n    getHeaderData(refresh = false) {\n      if (!this.messageHeader || refresh) {\n        this.messageHeader = from(this.baseService.get(this.endpoints.getHeader));\n        const subscription = this.messageHeader.subscribe(result => {\n          this.mxBudgetSubject.next(JSON.parse(result.MXJSON));\n        });\n        this.subscription.add(subscription);\n      }\n\n      return this.mxBudgetSubject;\n    }\n\n    getMxWidgetUrl(widgetType) {\n      let plat = 'web';\n\n      if (!this.utilityService.getIsWeb()) {\n        if (this.platform.is('ios')) {\n          plat = 'ios';\n        } else {\n          plat = 'android';\n        }\n      }\n\n      return from(this.baseService.get(this.endpoints.widgetConnect + widgetType + '/' + plat + this.langCode));\n    }\n\n    getMxSubAccountWidgetUrl(widgetType) {\n      return from(this.baseService.get(this.endpoints.widgetConnect + widgetType + '/acct/' + this.getMxData().guid + this.langCode));\n    }\n\n    awaitIsBusy() {\n      var _this = this;\n\n      const poll = /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (resolve) {\n          if (!_this.displayWidgetBusy) {\n            resolve();\n          } else {\n            setTimeout(() => {\n              poll(resolve);\n            }, 50);\n          }\n        });\n\n        return function poll(_x) {\n          return _ref.apply(this, arguments);\n        };\n      }();\n\n      return new Promise(poll);\n    }\n\n    displayWidget(widgetType, options, subAccount = false) {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        if (_this2.displayWidgetBusy) {\n          yield _this2.awaitIsBusy();\n        }\n\n        _this2.displayWidgetBusy = true;\n\n        if (_this2.utilityService.getIsWeb()) {\n          const data = yield firstValueFrom(_this2.voyaCacheService.getTranslationPreference());\n          _this2.langCode = data.translationEnabled ? '/' + data.langPreference.preference : '';\n        }\n\n        if (subAccount) {\n          const res = yield firstValueFrom(_this2.getMxSubAccountWidgetUrl(widgetType));\n          _this2.displayWidgetBusy = false;\n\n          if (!res) {\n            return false;\n          }\n\n          new window.MoneyDesktopWidgetLoader(options).load(res.url.url);\n          return true;\n        } else {\n          const res = yield firstValueFrom(_this2.getMxWidgetUrl(widgetType));\n          _this2.displayWidgetBusy = false;\n\n          if (!res) {\n            return false;\n          }\n\n          new window.MoneyDesktopWidgetLoader(options).load(res.url.url);\n          return true;\n        }\n      })();\n    }\n\n    addMXWindowEventListener(func = this.gotConnectWidgetMessage.bind(this)) {\n      console.log('ADDING MX WINDOW LISTENER');\n      this.currentMessageListener = func;\n      window.addEventListener('message', this.currentMessageListener);\n    }\n\n    removeMXWindowEventListener() {\n      console.log('REMOVING MX WINDOW LISTENER');\n      window.removeEventListener('message', this.currentMessageListener);\n    }\n\n    gotConnectWidgetMessage(message) {\n      var _this3 = this;\n\n      return _asyncToGenerator(function* () {\n        console.log('GOT POST MESSAGE: ', message);\n\n        if (message.origin !== 'https://int-widgets.moneydesktop.com' && message.origin !== 'https://widgets.moneydesktop.com') {\n          return;\n        }\n\n        if (message.data.type == 'mx/connect/oauthRequested') {\n          const url = message.data.metadata.url;\n\n          _this3.openAuthBrowser(url);\n        }\n\n        if (_this3.utilityService.getIsWeb()) {\n          const type = message.data.type || JSON.parse(message?.data)?.type;\n          const isCreatedOrDeleted = type === 'created' || type === 'deleted' || type === 'mx/connect/memberConnected' || type === 'mx/connections/memberDeleted';\n\n          if (isCreatedOrDeleted || type === 'mx/focusTrap' || type === 'mx/connect/stepChange') {\n            _this3.getMxMemberConnect(true);\n\n            _this3.getMxAccountConnect(true);\n          }\n\n          const myWorkplaceDashboardEnabled = (yield _this3.accessService.checkWorkplaceAccess()).myWorkplaceDashboardEnabled;\n\n          if (myWorkplaceDashboardEnabled && isCreatedOrDeleted) {\n            _this3.accountService.getAggregatedAccounts(true);\n          }\n        }\n      })();\n    }\n\n    openAuthBrowser(url) {\n      if (this.utilityService.getIsWeb()) {\n        window.open(url, '_blank');\n      } else {\n        this.inAppBrowserService.openSystemBrowser(url);\n      }\n    }\n\n    getMXAccountData(guid, refresh = false) {\n      return this.getMxAccountConnect(refresh).pipe(map(data => data.accounts.filter(account => account.guid === guid)[0]));\n    }\n\n    getIsMxUserByMyvoyageAccess(refresh = false) {\n      if (!this.hasMxUserByMyvoyageAccessData || refresh) {\n        this.hasMxUserByMyvoyageAccessData = from(this.accessService.checkMyvoyageAccess(refresh));\n        const subscription = this.hasMxUserByMyvoyageAccessData.subscribe(result => {\n          this.hasMxUserByMyvoyageAccessSubject.next(result.enableMX && result.isMxUser);\n        });\n        this.subscription.add(subscription);\n      }\n\n      return this.hasMxUserByMyvoyageAccessSubject;\n    }\n\n    checkIsAltAccessUser(refresh = false) {\n      if (!this.isAltAccessUserData || refresh) {\n        this.isAltAccessUserData = from(this.accessService.checkMyvoyageAccess(refresh));\n        const subscription = this.isAltAccessUserData.subscribe(result => {\n          this.isAltAccessUserSubject.next(result.isAltAccessUser);\n        });\n        this.subscription.add(subscription);\n      }\n\n      return this.isAltAccessUserSubject;\n    }\n\n    ngOnDestroy() {\n      if (this.subscription) {\n        this.subscription.unsubscribe();\n      }\n\n      if (this.hasMXAccountsSubscription) {\n        this.hasMXAccountsSubscription.unsubscribe();\n      }\n\n      if (this.hasMXUserSubscription) {\n        this.hasMXUserSubscription.unsubscribe();\n      }\n    }\n\n  }\n\n  MXService.ɵfac = function MXService_Factory(t) {\n    return new (t || MXService)(i0.ɵɵinject(i1.BaseService), i0.ɵɵinject(i2.SharedUtilityService), i0.ɵɵinject(i3.Platform), i0.ɵɵinject(i4.InAppBroserService), i0.ɵɵinject(i5.VoyaGlobalCacheService), i0.ɵɵinject(i0.Injector));\n  };\n\n  MXService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MXService,\n    factory: MXService.ɵfac,\n    providedIn: 'root'\n  });\n  return MXService;\n})();","map":null,"metadata":{},"sourceType":"module"}