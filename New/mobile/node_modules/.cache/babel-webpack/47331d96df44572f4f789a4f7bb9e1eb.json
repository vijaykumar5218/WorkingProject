{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport * as text from './utility.json';\nimport { ReplaySubject, Subscription } from 'rxjs';\nimport { StatusBar, Style } from '@capacitor/status-bar';\nimport { NavigationEnd } from '@angular/router';\nimport { filter } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@ionic/angular\";\nimport * as i3 from \"../platform/platform.service\";\nexport let SharedUtilityService = /*#__PURE__*/(() => {\n  class SharedUtilityService {\n    constructor(router, platform, platformService) {\n      this.router = router;\n      this.platform = platform;\n      this.platformService = platformService;\n      this.counter = 0;\n      this.previousUserName = '';\n      this.invalidLoginCounter = 0;\n      this.pageText = JSON.parse(JSON.stringify(text)).default;\n      this.subscription = new Subscription();\n      this.isFullScreenModal = new ReplaySubject(1);\n    }\n\n    setEnvironment(environment) {\n      this.environment = environment;\n    }\n\n    getEnvironment() {\n      return this.environment;\n    }\n\n    setIsWeb(isWeb) {\n      this.isWeb = isWeb;\n    }\n\n    getIsWeb() {\n      return this.isWeb;\n    }\n\n    isDesktop() {\n      return this.platformService.isDesktop();\n    }\n\n    appendBaseUrlToEndpoints(endPoints, myvoyageBaseUrl = this.environment.baseUrl, myvoyaBaseUrl = this.environment.myvoyaBaseUrl) {\n      const appendedEndpoints = Object.assign({}, endPoints);\n\n      for (const endPoint in appendedEndpoints) {\n        if (this.isMyVoyaUrl(endPoints[endPoint]) || endPoints[endPoint].includes('iframe_login.html')) {\n          appendedEndpoints[endPoint] = myvoyaBaseUrl + endPoints[endPoint];\n        } else {\n          appendedEndpoints[endPoint] = myvoyageBaseUrl + endPoints[endPoint];\n        }\n      }\n\n      return appendedEndpoints;\n    }\n\n    formatStringDate(str) {\n      const dateString = str;\n      const date = new Date(dateString.replace('IST', ''));\n      const day = date.getDate();\n      const month = date.getMonth() + 1;\n      const year = date.getFullYear();\n      return month + '-' + day + '-' + year;\n    }\n\n    validateEmail(email) {\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      return emailRegex.test(email);\n    }\n\n    validatePhone(phone) {\n      const phoneRegex = /^\\d{3}-\\d{3}-\\d{4}$/;\n      return phoneRegex.test(phone);\n    }\n\n    formatPhone(val) {\n      let phone = val === null || val === void 0 ? void 0 : val.toString();\n      let trimmed = phone === null || phone === void 0 ? void 0 : phone.replace(/\\s+/g, '');\n\n      if ((trimmed === null || trimmed === void 0 ? void 0 : trimmed.length) > 12) {\n        trimmed = trimmed === null || trimmed === void 0 ? void 0 : trimmed.substring(0, 12);\n      }\n\n      trimmed = trimmed === null || trimmed === void 0 ? void 0 : trimmed.replace(/-/g, '');\n      const numbers = [];\n      numbers.push(trimmed === null || trimmed === void 0 ? void 0 : trimmed.substring(0, 3));\n      if ((trimmed === null || trimmed === void 0 ? void 0 : trimmed.substring(3, 5)) !== '') numbers.push(trimmed === null || trimmed === void 0 ? void 0 : trimmed.substring(3, 6));\n      if ((trimmed === null || trimmed === void 0 ? void 0 : trimmed.substring(6, 9)) != '') numbers.push(trimmed === null || trimmed === void 0 ? void 0 : trimmed.substring(6, 10));\n      phone = numbers.join('-');\n      return phone;\n    }\n\n    setStatusBarStyleLight(_statusBar = StatusBar) {\n      return __awaiter(this, void 0, void 0, function* () {\n        yield _statusBar.setBackgroundColor({\n          color: '#ffffff'\n        });\n        yield _statusBar.setStyle({\n          style: Style.Light\n        });\n      });\n    }\n\n    fetchUrlThroughNavigation(paramSegment) {\n      if (!this.routerSubject$) {\n        this.routerSubject$ = new ReplaySubject(1);\n        const routerSubscription = this.router.events.pipe(filter(event => event instanceof NavigationEnd)).subscribe(event => {\n          const arrOfUrl = event['url'].split('/');\n\n          if (typeof arrOfUrl[paramSegment] !== 'undefined' && this.getIsWeb()) {\n            this.setQueryParam(event['url'].split('?')[1]);\n            this.routerSubject$.next({\n              paramId: arrOfUrl[paramSegment],\n              url: event['url']\n            });\n          } else {\n            this.routerSubject$.next(null);\n          }\n        });\n        this.subscription.add(routerSubscription);\n      }\n\n      return this.routerSubject$;\n    }\n\n    setQueryParam(queryParam) {\n      this.queryParam = queryParam;\n    }\n\n    getQueryParam() {\n      return this.queryParam;\n    }\n\n    scrollToTop(topmostElement) {\n      topmostElement === null || topmostElement === void 0 ? void 0 : topmostElement.nativeElement.scrollIntoView({\n        behavior: 'smooth',\n        block: 'end',\n        inline: 'end'\n      });\n    }\n\n    setFullScreenModal(data) {\n      this.isFullScreenModal.next(data);\n    }\n\n    getFullScreenModal() {\n      return this.isFullScreenModal.asObservable();\n    }\n\n    replaceCurrentYear(str) {\n      return str.replace('${currentYear}', new Date().getFullYear().toString());\n    }\n\n    isMyVoyaUrl(url) {\n      return url.includes('myvoya') && !url.includes('myvoyage');\n    }\n\n    getPlatformResume() {\n      return this.platform.resume;\n    }\n\n    getmyvoyaBaseUrl() {\n      return this.environment.myvoyaBaseUrl;\n    }\n\n    navigateByUrl(url) {\n      this.router.navigateByUrl(url);\n    }\n\n    ngOnDestroy() {\n      this.subscription.unsubscribe();\n    }\n\n  }\n\n  SharedUtilityService.ɵfac = function SharedUtilityService_Factory(t) {\n    return new (t || SharedUtilityService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.Platform), i0.ɵɵinject(i3.PlatformService));\n  };\n\n  SharedUtilityService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SharedUtilityService,\n    factory: SharedUtilityService.ɵfac,\n    providedIn: 'root'\n  });\n  return SharedUtilityService;\n})();","map":null,"metadata":{},"sourceType":"module"}