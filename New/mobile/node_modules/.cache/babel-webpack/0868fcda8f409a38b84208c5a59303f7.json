{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { endPoints } from './constants/endpoints';\nimport { ReplaySubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../base/base-factory-provider\";\nimport * as i2 from \"../utility/utility.service\";\nexport let NotificationService = /*#__PURE__*/(() => {\n  class NotificationService {\n    constructor(baseService, utilityService) {\n      this.baseService = baseService;\n      this.utilityService = utilityService;\n      this.endPoints = endPoints;\n      this.notificationCountSubject = new ReplaySubject(1);\n      this.endPoints = this.utilityService.appendBaseUrlToEndpoints(endPoints);\n    }\n\n    getNotification() {\n      return __awaiter(this, void 0, void 0, function* () {\n        return this.baseService.get(this.endPoints.notificationDetails);\n      });\n    }\n\n    savePageVisit() {\n      this.pageVisitPromise = this.baseService.post(this.endPoints.savePageVisit, {\n        pageName: 'BELL',\n        actionPerformed: 'VISITED'\n      });\n      return this.pageVisitPromise;\n    }\n\n    initializeNotificationCount() {\n      this.getCount();\n      this.interval = setInterval(() => __awaiter(this, void 0, void 0, function* () {\n        this.getCount();\n      }), 60000);\n    }\n\n    getCount() {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (this.pageVisitPromise) {\n          yield this.pageVisitPromise;\n        }\n\n        const count = yield this.baseService.get(this.endPoints.notificationCount);\n        this.notificationCountSubject.next(count);\n      });\n    }\n\n    getNotificationCount() {\n      return this.notificationCountSubject;\n    }\n\n    clearCountInterval() {\n      clearInterval(this.interval);\n    }\n\n  }\n\n  NotificationService.ɵfac = function NotificationService_Factory(t) {\n    return new (t || NotificationService)(i0.ɵɵinject(i1.BaseService), i0.ɵɵinject(i2.SharedUtilityService));\n  };\n\n  NotificationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: NotificationService,\n    factory: NotificationService.ɵfac,\n    providedIn: 'root'\n  });\n  return NotificationService;\n})();","map":null,"metadata":{},"sourceType":"module"}