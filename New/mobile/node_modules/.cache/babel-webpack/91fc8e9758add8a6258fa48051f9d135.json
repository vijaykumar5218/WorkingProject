{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@shared-lib/services/journey/journey.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@ionic/angular\";\n\nfunction AccountRadioButtonComponent_div_0_ion_text_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-text\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r1.element.radioLabel);\n  }\n}\n\nfunction AccountRadioButtonComponent_div_0_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"div\", 3);\n    i0.ɵɵelementStart(2, \"ion-icon\", 4);\n    i0.ɵɵlistener(\"click\", function AccountRadioButtonComponent_div_0_div_3_Template_ion_icon_click_2_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r6);\n      const account_r3 = restoredCtx.$implicit;\n      const ctx_r5 = i0.ɵɵnextContext(2);\n      return ctx_r5.emitData(account_r3.guid);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"label\", 5);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const account_r3 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"name\", account_r3.radioButtonIconName)(\"id\", account_r3 == null ? null : account_r3.guid);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(account_r3.name);\n  }\n}\n\nfunction AccountRadioButtonComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"div\", 1);\n    i0.ɵɵtemplate(2, AccountRadioButtonComponent_div_0_ion_text_2_Template, 2, 1, \"ion-text\", 0);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(3, AccountRadioButtonComponent_div_0_div_3_Template, 5, 3, \"div\", 2);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.element == null ? null : ctx_r0.element.radioLabel);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.accountData);\n  }\n}\n\nexport let AccountRadioButtonComponent = /*#__PURE__*/(() => {\n  class AccountRadioButtonComponent {\n    constructor(journeyService) {\n      this.journeyService = journeyService;\n      this.valueChange = new EventEmitter();\n      this.accountData = [];\n      this.subscription = new Subscription();\n      this.service = this.journeyService.journeyServiceMap[this.journeyService.getCurrentJourney().journeyID];\n    }\n\n    ngOnInit() {\n      this.subscription.add(this.service.getMXAccountData().subscribe(res => {\n        this.accountData = res.accounts;\n      }));\n    }\n\n    updateRadioValue(value) {\n      this.valueChange.emit(value);\n    }\n\n    suppressAccountNumber(str) {\n      return 'XXXXXX' + str.slice(6, 10);\n    }\n\n    emitData(id) {\n      this.accountData.forEach(account => {\n        if (account.guid === id && account.radioButtonIconName === 'radio-button-on') {\n          account.radioButtonIconName = 'radio-button-off';\n          this.updateRadioValue('');\n        } else if (account.guid === id && account.radioButtonIconName === 'radio-button-off') {\n          account.radioButtonIconName = 'radio-button-on';\n          this.updateRadioValue(id);\n        } else {\n          account.radioButtonIconName = 'radio-button-off';\n        }\n      });\n    }\n\n    ngOnDestroy() {\n      this.subscription.unsubscribe();\n    }\n\n  }\n\n  AccountRadioButtonComponent.ɵfac = function AccountRadioButtonComponent_Factory(t) {\n    return new (t || AccountRadioButtonComponent)(i0.ɵɵdirectiveInject(i1.JourneyService));\n  };\n\n  AccountRadioButtonComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AccountRadioButtonComponent,\n    selectors: [[\"journeys-steps-step-input-account-radio-button\"]],\n    inputs: {\n      element: \"element\",\n      answer: \"answer\",\n      value: \"value\"\n    },\n    outputs: {\n      valueChange: \"valueChange\"\n    },\n    decls: 1,\n    vars: 1,\n    consts: [[4, \"ngIf\"], [1, \"radioLabel\"], [4, \"ngFor\", \"ngForOf\"], [1, \"mx-account\"], [1, \"radio-icons\", 3, \"name\", \"id\", \"click\"], [\"for\", \"html\"]],\n    template: function AccountRadioButtonComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, AccountRadioButtonComponent_div_0_Template, 4, 2, \"div\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.accountData.length > 0);\n      }\n    },\n    directives: [i2.NgIf, i2.NgForOf, i3.IonText, i3.IonIcon],\n    styles: [\"[_nghost-%COMP%]{display:block}[_nghost-%COMP%]   .radioLabel[_ngcontent-%COMP%]{margin-bottom:25px;font-size:16px;color:#000;font-weight:bold}[_nghost-%COMP%]   .mx-account[_ngcontent-%COMP%]{margin-bottom:15px;display:flex}[_nghost-%COMP%]   .mx-account[_ngcontent-%COMP%]   label[_ngcontent-%COMP%]{font-size:16px;color:#000;margin:auto 10px}[_nghost-%COMP%]   .mx-account[_ngcontent-%COMP%]   ion-icon[_ngcontent-%COMP%]{width:24px;height:24px;color:#000}\"]\n  });\n  return AccountRadioButtonComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}