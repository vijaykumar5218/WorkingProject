{"ast":null,"code":"import { ElementRef } from '@angular/core';\nimport { FooterType } from '@shared-lib/modules/footer/constants/footerType.enum';\nimport { Status } from '@shared-lib/constants/status.enum';\nimport { Keyboard } from '@capacitor/keyboard';\nimport { Subscription } from 'rxjs';\nimport { eventKeys } from '@shared-lib/constants/event-keys';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@shared-lib/modules/footer/services/footer-type/footer-type.service\";\nimport * as i2 from \"@shared-lib/services/journey/journey.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@shared-lib/modules/event-manager/event-manager/event-manager.service\";\nimport * as i5 from \"@shared-lib/services/event-tracker/event-tracking.service\";\nimport * as i6 from \"@shared-lib/services/utility/utility.service\";\nimport * as i7 from \"../../../../components/step-progress-bar/step-progress-bar.component\";\nimport * as i8 from \"swiper/angular\";\nimport * as i9 from \"@angular/common\";\nimport * as i10 from \"./step/step.component\";\nconst _c0 = [\"journeyStep\"];\n\nfunction StepsComponent_2_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 4);\n    i0.ɵɵelementStart(1, \"journeys-steps-step\", 5, 6);\n    i0.ɵɵlistener(\"continueClick\", function StepsComponent_2_ng_template_0_Template_journeys_steps_step_continueClick_1_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext(2);\n      return ctx_r6.handleContinueClick($event);\n    })(\"backClick\", function StepsComponent_2_ng_template_0_Template_journeys_steps_step_backClick_1_listener() {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r8 = i0.ɵɵnextContext(2);\n      return ctx_r8.handleBackClick();\n    })(\"swipeEnabled\", function StepsComponent_2_ng_template_0_Template_journeys_steps_step_swipeEnabled_1_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r9 = i0.ɵɵnextContext(2);\n      return ctx_r9.updateSwipeEnabled($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r10 = i0.ɵɵnextContext();\n    const i_r3 = ctx_r10.index;\n    const step_r2 = ctx_r10.$implicit;\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"index\", i_r3)(\"step\", step_r2)(\"currentStep\", ctx_r4.currentStep)(\"journeyId\", ctx_r4.journey.journeyID);\n  }\n}\n\nfunction StepsComponent_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, StepsComponent_2_ng_template_0_Template, 3, 4, \"ng-template\", 3);\n  }\n}\n\nfunction StepsComponent_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\");\n  }\n}\n\nexport let StepsComponent = /*#__PURE__*/(() => {\n  class StepsComponent {\n    constructor(footerService, journeyService, ngZone, router, eventManager, eventTracking, utilityService) {\n      this.footerService = footerService;\n      this.journeyService = journeyService;\n      this.ngZone = ngZone;\n      this.router = router;\n      this.eventManager = eventManager;\n      this.eventTracking = eventTracking;\n      this.utilityService = utilityService;\n      this.currentStep = 0;\n      this.slideOpts = {};\n      this.keyboard = Keyboard;\n      this.subscription = new Subscription();\n      this.updateStatuses = true;\n      this.saveLastStep = true;\n    }\n\n    ngOnInit() {\n      this.isWeb = this.utilityService.getIsWeb();\n      this.slideOpts = this.isWeb ? {\n        slidesPerView: 1,\n        centeredSlides: true,\n        spaceBetween: 50,\n        noSwipingSelector: 'ion-range'\n      } : {\n        slidesPerView: 1.1,\n        centeredSlides: true,\n        spaceBetween: 10,\n        noSwipingSelector: 'ion-range'\n      };\n      this.subscription.add(this.eventManager.createSubscriber(eventKeys.leaveJourney).subscribe(() => {\n        this.leaveJourney();\n      }));\n      this.refreshJourneyStatusPublisher = this.eventManager.createPublisher(eventKeys.refreshJourneyStatus);\n      this.scrollToTopPublisher = this.eventManager.createPublisher(eventKeys.journeyStepsScrollToTop);\n      this.subscription.add(this.journeyService.fetchJourneys().subscribe(() => {\n        const currentJourney = this.journeyService.getCurrentJourney();\n\n        if (this.journey && this.journey !== currentJourney) {\n          this.journey = this.journeyService.getCurrentJourney();\n          this.steps = this.journey.steps;\n        }\n      }));\n    }\n\n    ionViewWillEnter() {\n      this.footerService.publish({\n        type: FooterType.none\n      });\n      this.journeyService.publishSelectedTab('steps');\n      this.journey = this.journeyService.getCurrentJourney();\n      this.steps = this.journey.steps;\n      this.swipeEnabledList = Array(this.steps.length).fill(true);\n      this.progressBarSteps = JSON.parse(JSON.stringify(Array(this.steps.length).fill({\n        status: Status.notStarted\n      })));\n\n      if (this.steps && this.steps.length > 0) {\n        this.updateStepStatuses(0, undefined, false);\n\n        if (this.isWeb) {\n          this.refreshJourneyStatusPublisher.publish(undefined);\n        }\n      }\n\n      this.journeyService.publishCurrentStep(this.currentStep);\n      this.saveLastStep = true;\n    }\n\n    ionViewDidEnter() {\n      setTimeout(() => {\n        this.slides.slideTo(this.journey.lastModifiedStepIndex, 0);\n\n        for (let i = 0; i < this.journey.lastModifiedStepIndex; i++) {\n          this.progressBarSteps[i] = {\n            status: Status.completed\n          };\n        }\n      }, 100);\n    }\n\n    setSwiperInstance(swiper) {\n      this.slides = swiper;\n\n      if (this.swipeEnabledList) {\n        this.slides.allowTouchMove = this.swipeEnabledList[this.currentStep];\n      }\n    }\n\n    handleSlideChange() {\n      this.ngZone.run(() => {\n        this.keyboard.hide();\n        const currentStepIndex = this.slides ? this.slides.activeIndex : this.slideOpts.initialSlide;\n\n        if (currentStepIndex === this.steps.length) {\n          this.updateStepStatuses(this.currentStep);\n          this.finishJourney();\n          return;\n        }\n\n        this.updateStepStatuses(currentStepIndex);\n        this.currentStep = currentStepIndex;\n\n        if (this.slides) {\n          this.slides.allowTouchMove = this.swipeEnabledList[this.currentStep];\n        }\n\n        this.journeyService.publishCurrentStep(this.currentStep);\n\n        if (this.isWeb) {\n          this.scrollToTopPublisher.publish(undefined);\n        }\n      });\n    }\n\n    updateStepStatuses(newIndex, prevIndex = this.currentStep, isCompleted = true) {\n      if (this.updateStatuses) {\n        const stepsToSave = [];\n\n        if (isCompleted) {\n          const completedStep = this.getUpdatedCompleteStep(prevIndex);\n\n          if (completedStep) {\n            stepsToSave.push(this.journeyService.removeContent(completedStep));\n          }\n        }\n\n        if (!this.steps[newIndex].status) {\n          if (newIndex === 0) {\n            this.eventTracking.eventTracking({\n              eventName: 'Journey Not Completed',\n              journeyID: this.journey.journeyID,\n              journeyName: this.journey.journeyName\n            });\n          }\n\n          this.steps[newIndex].status = Status.inProgress;\n          stepsToSave.push(this.journeyService.removeContent(this.steps[newIndex]));\n        }\n\n        this.saveProgress(stepsToSave);\n        this.journeyService.updateJourneySteps(this.steps, this.journey.journeyID);\n\n        if (newIndex > 0) {\n          this.progressBarSteps[newIndex - 1].status = Status.completed;\n        }\n\n        this.progressBarSteps[newIndex].status = Status.notStarted;\n      }\n\n      this.updateStatuses = true;\n    }\n\n    getUpdatedCompleteStep(index) {\n      let journeyStep;\n\n      if (this.steps[index].status !== Status.completed || this.steps[index].answer !== JSON.stringify(this.steps[index].value)) {\n        if (this.steps[index].status !== Status.completed && index === this.steps.length - 1) {\n          this.eventTracking.eventTracking({\n            eventName: 'Journey Not Completed',\n            journeyID: this.journey.journeyID,\n            updateInd: 'Y',\n            journeyName: this.journey.journeyName\n          });\n        }\n\n        this.steps[index].status = Status.completed;\n        if (this.steps[index].value && this.steps[index].value !== {}) this.steps[index].answer = JSON.stringify(this.steps[index].value);\n        journeyStep = this.steps[index];\n      }\n\n      return journeyStep;\n    }\n\n    saveProgress(steps) {\n      if (steps.length > 0) {\n        this.journeyService.saveProgress(steps);\n      }\n    }\n\n    handleContinueClick(event) {\n      if (this.currentStep < this.steps.length - 1) {\n        this.slides.slideNext();\n      } else {\n        this.updateStepStatuses(this.currentStep);\n\n        if (event.route) {\n          this.finishJourney();\n        } else {\n          this.leaveJourney();\n        }\n      }\n    }\n\n    handleBackClick() {\n      if (this.currentStep !== 0) {\n        this.slides.slideTo(this.currentStep - 1);\n      }\n    }\n\n    finishJourney() {\n      this.stepToSave = 0;\n      this.leaveJourney();\n\n      if (this.journeyService.isSummaryStepCompleted()) {\n        if (!this.isWeb) {\n          this.router.navigateByUrl('/journeys/journey/' + this.journey.journeyID + '/overview');\n        } else {\n          this.refreshJourneyStatusPublisher.publish(undefined);\n          this.router.navigate(['/journeys/journey/' + this.journey.journeyID + '/overview'], {\n            queryParams: {\n              journeyType: 'all'\n            }\n          });\n        }\n      } else {\n        this.router.navigateByUrl('/journeys');\n      }\n    }\n\n    scrollToTop() {\n      if (!this.isWeb) {\n        this.stepEls.get(this.currentStep).nativeElement.scrollIntoView({\n          behavior: 'auto',\n          block: 'center',\n          inline: 'end'\n        });\n      }\n    }\n\n    updateSwipeEnabled(swipeEnabledEvent) {\n      this.swipeEnabledList[swipeEnabledEvent.index] = swipeEnabledEvent.swipeEnabled;\n\n      if (this.slides) {\n        this.slides.allowTouchMove = this.swipeEnabledList[this.currentStep];\n      }\n    }\n\n    leaveJourney() {\n      if (this.journey) {\n        this.journeyService.updateJourneySteps(this.steps, this.journey.journeyID);\n        this.updateStatuses = false;\n\n        if (this.saveLastStep) {\n          this.saveLastStep = false;\n          const stepToSave = this.stepToSave || this.stepToSave === 0 ? this.stepToSave : this.currentStep;\n          this.saveProgress([this.journeyService.removeContent(this.steps[stepToSave])]);\n          this.journey.lastModifiedStepIndex = stepToSave;\n          this.journeyService.setCurrentJourney(this.journey, true);\n          this.stepToSave = undefined;\n        }\n      }\n    }\n\n    ionViewWillLeave() {\n      this.leaveJourney();\n    }\n\n    ngOnDestroy() {\n      this.subscription.unsubscribe();\n\n      if (this.isWeb) {\n        this.leaveJourney();\n      }\n    }\n\n  }\n\n  StepsComponent.ɵfac = function StepsComponent_Factory(t) {\n    return new (t || StepsComponent)(i0.ɵɵdirectiveInject(i1.FooterTypeService), i0.ɵɵdirectiveInject(i2.JourneyService), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i4.EventManagerService), i0.ɵɵdirectiveInject(i5.EventTrackingService), i0.ɵɵdirectiveInject(i6.SharedUtilityService));\n  };\n\n  StepsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: StepsComponent,\n    selectors: [[\"journeys-steps\"]],\n    viewQuery: function StepsComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5, ElementRef);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.stepEls = _t);\n      }\n    },\n    decls: 4,\n    vars: 4,\n    consts: [[3, \"steps\", \"currentStep\"], [3, \"config\", \"swiper\", \"slideChange\", \"slideChangeTransitionEnd\"], [4, \"ngFor\", \"ngForOf\"], [\"swiperSlide\", \"\"], [1, \"steps-content\"], [3, \"index\", \"step\", \"currentStep\", \"journeyId\", \"continueClick\", \"backClick\", \"swipeEnabled\"], [\"journeyStep\", \"\"]],\n    template: function StepsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"app-step-progress-bar\", 0);\n        i0.ɵɵelementStart(1, \"swiper\", 1);\n        i0.ɵɵlistener(\"swiper\", function StepsComponent_Template_swiper_swiper_1_listener($event) {\n          return ctx.setSwiperInstance($event);\n        })(\"slideChange\", function StepsComponent_Template_swiper_slideChange_1_listener() {\n          return ctx.handleSlideChange();\n        })(\"slideChangeTransitionEnd\", function StepsComponent_Template_swiper_slideChangeTransitionEnd_1_listener() {\n          return ctx.scrollToTop();\n        });\n        i0.ɵɵtemplate(2, StepsComponent_2_Template, 1, 0, undefined, 2);\n        i0.ɵɵtemplate(3, StepsComponent_ng_template_3_Template, 1, 0, \"ng-template\", 3);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"steps\", ctx.progressBarSteps)(\"currentStep\", ctx.currentStep);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"config\", ctx.slideOpts);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.steps);\n      }\n    },\n    directives: [i7.StepProgressBarComponent, i8.SwiperComponent, i9.NgForOf, i8.SwiperSlideDirective, i10.StepComponent],\n    styles: [\"[_nghost-%COMP%]{height:100%;display:block}[_nghost-%COMP%]   .steps-content[_ngcontent-%COMP%]{height:100%;width:100%}[_nghost-%COMP%]   app-step-progress-bar[_ngcontent-%COMP%]{margin:20px auto}[_nghost-%COMP%]   swiper[_ngcontent-%COMP%]{height:calc(100% - 48px);overflow-y:scroll}[_nghost-%COMP%]   swiper[_ngcontent-%COMP%]   journeys-steps-step[_ngcontent-%COMP%]{display:block;height:100%;width:100%}[_nghost-%COMP%]   .web-steps[_ngcontent-%COMP%]{margin:0 36px}\"]\n  });\n  return StepsComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}