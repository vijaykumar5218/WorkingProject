{"ast":null,"code":"import _asyncToGenerator from \"/Users/vijay.a/Documents/GitHub/MYVOYAGE/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/*! Ionic Enterprise Identity Vault: https://ionicframework.com/ - Commercially Licensed */\n\n/**\n * The meaning of the error code in the thrown {@link VaultError}.\n */\nvar VaultErrorCodes = /*#__PURE__*/(() => {\n  (function (VaultErrorCodes) {\n    /**\n     * An unknown error happened.\n     * @constant `0`\n     */\n    VaultErrorCodes[VaultErrorCodes[\"Unknown\"] = 0] = \"Unknown\";\n    /**\n     * The operation failed because the vault was locked.\n     * @constant `1`\n     */\n\n    VaultErrorCodes[VaultErrorCodes[\"VaultLocked\"] = 1] = \"VaultLocked\";\n    /**\n     * The operation failed because the vault was unavailable.\n     * The most likely cause of this error is that a vault has not been configured.\n     * @constant `2`\n     */\n\n    VaultErrorCodes[VaultErrorCodes[\"VaultUnavailable\"] = 2] = \"VaultUnavailable\";\n    /**\n     * The operation failed because the some of the vault provided arguments were invalid.\n     * @constant `3`\n     */\n\n    VaultErrorCodes[VaultErrorCodes[\"InvalidArguments\"] = 3] = \"InvalidArguments\";\n    /**\n     * The credentials were invalidated. This can happen when a user changes biometrics or passcode.\n     * @constant `4`\n     */\n\n    VaultErrorCodes[VaultErrorCodes[\"InvalidatedCredential\"] = 4] = \"InvalidatedCredential\";\n    /**\n     * Biometric security is unavailable due to a passcode not being set up at the system level.\n     * In order to use biometric identification on the device a system level passcode must be set up by the user.\n     * @constant `5`\n     */\n\n    VaultErrorCodes[VaultErrorCodes[\"SecurityNotAvailable\"] = 5] = \"SecurityNotAvailable\";\n    /**\n     * User authentication failed.\n     * @constant `6`\n     */\n\n    VaultErrorCodes[VaultErrorCodes[\"AuthFailed\"] = 6] = \"AuthFailed\";\n    /**\n     * Too many failed authentication attempts made against the custom passcode vault, so the vault was cleared and user will need to login again.\n     * @constant `7`\n     */\n\n    VaultErrorCodes[VaultErrorCodes[\"TooManyFailedAttempts\"] = 7] = \"TooManyFailedAttempts\";\n    /**\n     * The user cancelled the native authentication dialog.\n     *\n     * **Note**: On iOS, this error code will also be thrown in the event that the native authentication dialog fails as a result of too many failed attempts.\n     * The user will be forced to cancel the dialog, triggering this error code.\n     *\n     * On Android, this error also will be thrown if using {@link DeviceSecurityType.SystemPasscode} or {@link DeviceSecurityType.Both} in the event of too many failed attempts.\n     * Its currently not possible to get the nature of failures from the native authentication dialog, and similar to iOS, the user will be forced to cancel the dialog, triggering this error code.\n     * @constant `8`\n     */\n\n    VaultErrorCodes[VaultErrorCodes[\"UserCanceledInteraction\"] = 8] = \"UserCanceledInteraction\";\n    /**\n     * The user provided mismatched passcodes.\n     * @constant `9`\n     */\n\n    VaultErrorCodes[VaultErrorCodes[\"MismatchedPasscode\"] = 9] = \"MismatchedPasscode\";\n    /**\n     * The operation requires passcode to be setup but it isn't set yet. Call {@link Vault.setCustomPasscode} to set it.\n     * @constant `10`\n     */\n\n    VaultErrorCodes[VaultErrorCodes[\"MissingPasscode\"] = 10] = \"MissingPasscode\";\n    /**\n     * The operation failed because the application tried to unlock the vault with passcode authentication,\n     * but the vault is not configured to allow passcode authentication.\n     * @constant `11`\n     */\n\n    VaultErrorCodes[VaultErrorCodes[\"PasscodeNotEnabled\"] = 11] = \"PasscodeNotEnabled\";\n    /**\n     * The key was not found. This can happen when a user changes biometrics or passcode.\n     * @constant `12`\n     */\n\n    VaultErrorCodes[VaultErrorCodes[\"KeyNotFound\"] = 12] = \"KeyNotFound\";\n    /**\n     * The operation failed because biometric authentication is not enabled.\n     * This can occur when biometrics is not supported by the device\n     * or when biometrics has not been configured for the device or vault.\n     * @constant `13`\n     */\n\n    VaultErrorCodes[VaultErrorCodes[\"BiometricsNotEnabled\"] = 13] = \"BiometricsNotEnabled\";\n    /**\n     * @ignore\n     */\n\n    VaultErrorCodes[VaultErrorCodes[\"InvalidAuthMode\"] = 14] = \"InvalidAuthMode\";\n    /**\n     * Biometrics have not been authed yet (Android only)\n     * @constant `15`\n     */\n\n    VaultErrorCodes[VaultErrorCodes[\"MissingBiometrics\"] = 15] = \"MissingBiometrics\";\n    /**\n     * {@link DeviceSecurityType.SystemPasscode} for {@link DeviceSecurityType} not available on this Android device.\n     * @constant `16`\n     */\n\n    VaultErrorCodes[VaultErrorCodes[\"AndroidSystemPasscodeUnavailable\"] = 16] = \"AndroidSystemPasscodeUnavailable\";\n    /**\n     * Biometrics have been locked out, usually because of too many failed attempts.\n     *\n     * **Note:** This error will never be thrown if using {@link DeviceSecurityType.SystemPasscode} or {@link DeviceSecurityType.Both}.\n     * Its currently not possible to get the nature of failures from the native authentication dialog, so the only error that would be thrown is {@link VaultErrorCodes.UserCanceledInteraction} as the user\n     * is forced to cancel the prompt.\n     *\n     * @constant `17`\n     */\n\n    VaultErrorCodes[VaultErrorCodes[\"AndroidBiometricsLockedOut\"] = 17] = \"AndroidBiometricsLockedOut\";\n    /**\n     * Biometrics have been locked out, usually because of too many failed attempts.\n     *\n     * @constant `18`\n     */\n\n    VaultErrorCodes[VaultErrorCodes[\"iOSBiometricsLockedOut\"] = 18] = \"iOSBiometricsLockedOut\";\n    /**\n     * An unexpected error has occurred in the Android keystore.\n     * Some android devices (such as the Samsung S10) will return this error code when\n     * a maximum number of failed attempts is reached and the device must be restarted.\n     * See: [Max Uses Per Boot](https://source.android.com/security/keystore/tags#max_uses_per_boot)\n     *\n     * @constant `19`\n     */\n\n    VaultErrorCodes[VaultErrorCodes[\"AndroidUnexpectedKeystoreError\"] = 19] = \"AndroidUnexpectedKeystoreError\";\n  })(VaultErrorCodes || (VaultErrorCodes = {}));\n\n  return VaultErrorCodes;\n})();\n\n/**\n * The meaning of the error code in the thrown {@link DeviceError}.\n */\nvar DeviceErrorCodes = /*#__PURE__*/(() => {\n  (function (DeviceErrorCodes) {\n    /**\n     * An unknown error happened.\n     * @constant `0`\n     */\n    DeviceErrorCodes[DeviceErrorCodes[\"Unknown\"] = 0] = \"Unknown\";\n    /**\n     * The operation failed because the some of the vault provided arguments were invalid.\n     * @constant `1`\n     */\n\n    DeviceErrorCodes[DeviceErrorCodes[\"InvalidArguments\"] = 1] = \"InvalidArguments\";\n    /**\n     * The user cancelled the native authentication dialog.\n     *\n     * **Note**: On iOS, this error code will also be thrown in the event that the native authentication dialog fails as a result of too many failed attempts.\n     * The user will be forced to cancel the dialog, triggering this error code.\n     *\n     * @constant `2`\n     */\n\n    DeviceErrorCodes[DeviceErrorCodes[\"UserCanceledInteraction\"] = 2] = \"UserCanceledInteraction\";\n    /**\n     * Biometric security is unavailable due to a passcode not being set up at the system level.\n     * In order to use biometric identification on the device a system level passcode must be set up by the user.\n     * @constant `3`\n     */\n\n    DeviceErrorCodes[DeviceErrorCodes[\"SecurityNotAvailable\"] = 3] = \"SecurityNotAvailable\";\n    /**\n     * User authentication failed.\n     * @constant `4`\n     */\n\n    DeviceErrorCodes[DeviceErrorCodes[\"AuthFailed\"] = 4] = \"AuthFailed\";\n    /**\n     * Biometrics have been locked out, usually because of too many failed attempts.\n     *\n     * @constant `5`\n     */\n\n    DeviceErrorCodes[DeviceErrorCodes[\"BiometricsLockedOut\"] = 5] = \"BiometricsLockedOut\";\n    /**\n     * The operation failed because biometric authentication is not enabled.\n     * This can occur when biometrics is not supported by the device\n     * or when biometrics has not been configured for the device or vault.\n     * @constant `6`\n     */\n\n    DeviceErrorCodes[DeviceErrorCodes[\"BiometricsNotEnabled\"] = 6] = \"BiometricsNotEnabled\";\n  })(DeviceErrorCodes || (DeviceErrorCodes = {}));\n\n  return DeviceErrorCodes;\n})();\n\n/**\n * The possible values returned by {@link Device.getAvailableHardware}\n */\nvar SupportedBiometricType = /*#__PURE__*/(() => {\n  (function (SupportedBiometricType) {\n    /** The device supports fingerprint scanning. */\n    SupportedBiometricType[\"Fingerprint\"] = \"fingerprint\";\n    /** The device supports facial recognition. */\n\n    SupportedBiometricType[\"Face\"] = \"face\";\n    /** The device supports iris scanning. */\n\n    SupportedBiometricType[\"Iris\"] = \"iris\";\n  })(SupportedBiometricType || (SupportedBiometricType = {}));\n\n  return SupportedBiometricType;\n})();\n\n/**\n * Possible device biometric strength levels on Android (always `strong` on iOS).\n * [More Information](https://source.android.com/security/biometric/measure#tiered-authentication).\n */\nvar BiometricSecurityStrength = /*#__PURE__*/(() => {\n  (function (BiometricSecurityStrength) {\n    /** Refers to Class 2 - Weak biometric security */\n    BiometricSecurityStrength[\"Weak\"] = \"weak\";\n    /** Refers to Class 3 - Strong biometric security */\n\n    BiometricSecurityStrength[\"Strong\"] = \"strong\";\n  })(BiometricSecurityStrength || (BiometricSecurityStrength = {}));\n\n  return BiometricSecurityStrength;\n})();\n\n/**\n * Possible app biometric permissions states on iOS (always `granted` on Android and on iOS with TouchID).\n */\nvar BiometricPermissionState = /*#__PURE__*/(() => {\n  (function (BiometricPermissionState) {\n    /** App has been granted permission to use FaceID */\n    BiometricPermissionState[\"Granted\"] = \"granted\";\n    /** App has been denied permission to use FaceID */\n\n    BiometricPermissionState[\"Denied\"] = \"denied\";\n    /** User has not yet been prompted to allow FaceID */\n\n    BiometricPermissionState[\"Prompt\"] = \"prompt\";\n  })(BiometricPermissionState || (BiometricPermissionState = {}));\n\n  return BiometricPermissionState;\n})();\n\n/**\n * When type is set to 'DeviceSecurity', determines which aspects of the device to use to secure the vault.\n * Note: Android only supports `SystemPasscode` on Android 11 and greater.\n * @default `Both`\n */\nvar DeviceSecurityType = /*#__PURE__*/(() => {\n  (function (DeviceSecurityType) {\n    /** Will allow a system passcode to secure the vault. On Android, only supported on Android 11 and greater. */\n    DeviceSecurityType[\"SystemPasscode\"] = \"SystemPasscode\";\n    /** WIll allow biometric hardware tos secure the vault. */\n\n    DeviceSecurityType[\"Biometrics\"] = \"Biometrics\";\n    /** WIll allow both SystemPasscode or Biometrics as an option to secure the vault. */\n\n    DeviceSecurityType[\"Both\"] = \"Both\";\n    /** No biometric security option will be used. */\n\n    DeviceSecurityType[\"None\"] = \"None\";\n  })(DeviceSecurityType || (DeviceSecurityType = {}));\n\n  return DeviceSecurityType;\n})();\n\n/**\n * The type of vault\n */\nvar VaultType = /*#__PURE__*/(() => {\n  (function (VaultType) {\n    /**\n     * No additional security is required in the app as long as the device was unlocked with a secure method.\n     *\n     * On iOS, this vault is synchronized via iCloud or new device setup.\n     * */\n    VaultType[\"SecureStorage\"] = \"SecureStorage\";\n    /**\n     * Uses additional device features to add an additional layer of security while the user is in the app.\n     *\n     * On iOS, this vault is NOT synchronized via iCloud or new device setup.\n     * */\n\n    VaultType[\"DeviceSecurity\"] = \"DeviceSecurity\";\n    /**\n     * User will set a custom passcode that will be used to access the vault.\n     *\n     * On iOS, this vault is NOT synchronized via iCloud or new device setup.\n     * */\n\n    VaultType[\"CustomPasscode\"] = \"CustomPasscode\";\n    /** Data will persist only while the application is in memory.\n     *\n     *  On iOS, this vault is NOT synchronized via iCloud or new device setup.\n     */\n\n    VaultType[\"InMemory\"] = \"InMemory\";\n  })(VaultType || (VaultType = {}));\n\n  return VaultType;\n})();\n\n/**\n * For Android, when type is {@link VaultType.DeviceSecurity} and deviceSecurityType is {@link DeviceSecurityType.Both}, this options specifies if you want to\n * prefer a Strong Cryptographic Vault or the System Passcode fallback when they both aren't available.\n * @default `StrongVault`\n */\nvar AndroidBiometricCryptoPreference = /*#__PURE__*/(() => {\n  (function (AndroidBiometricCryptoPreference) {\n    /** Prefer to use a strong cryptographic vault. */\n    AndroidBiometricCryptoPreference[\"StrongVault\"] = \"StrongVault\";\n    /** Prefer the system passcode fallback. */\n\n    AndroidBiometricCryptoPreference[\"SystemPasscode\"] = \"SystemPasscode\";\n  })(AndroidBiometricCryptoPreference || (AndroidBiometricCryptoPreference = {}));\n\n  return AndroidBiometricCryptoPreference;\n})();\n// OLD METHODS\n\n/**\n * The type of authentication the vault should be configured to allow.\n * @deprecated For use in legacy Vault Migrator only.\n * @ignore\n */\nvar AuthMode = /*#__PURE__*/(() => {\n  (function (AuthMode) {\n    /**\n     * Biometrics authentication should only be allowed\n     */\n    AuthMode[AuthMode[\"BiometricOnly\"] = 0] = \"BiometricOnly\";\n    /**\n     * Passcode authentication should only be allowed\n     */\n\n    AuthMode[AuthMode[\"PasscodeOnly\"] = 1] = \"PasscodeOnly\";\n    /**\n     * Both biometric and passcode authentication should be allowed\n     */\n\n    AuthMode[AuthMode[\"BiometricAndPasscode\"] = 2] = \"BiometricAndPasscode\";\n    /**\n     * Both biometric and passcode authentication should be disabled.\n     * With this setting all data in the vault will be cleared on lock or\n     * if the app is closed. Stored data is kept only in memory.\n     */\n\n    AuthMode[AuthMode[\"InMemoryOnly\"] = 3] = \"InMemoryOnly\";\n    /**\n     * Use biometrics if it is available, otherwise use passcode\n     */\n\n    AuthMode[AuthMode[\"BiometricOrPasscode\"] = 4] = \"BiometricOrPasscode\";\n    /**\n     * Both biometric and passcode authentication will be disabled but any stored values\n     * will persist and be stored securely at rest using the keychain and will be available\n     * without needing to authenticate via passcode or biometrics when the device is unlocked.\n     */\n\n    AuthMode[AuthMode[\"SecureStorage\"] = 5] = \"SecureStorage\";\n  })(AuthMode || (AuthMode = {}));\n\n  return AuthMode;\n})();\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\nfunction __rest(s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\n\nconst STORAGE_KEYS = {\n  DATA: 'data'\n};\n/**\n * THIS VAULT DOES NOT IMPLEMENT SECURE STORAGE IN THE BROWSER. It only exists\n * as a way to run browser-compatible code in place of Identity Vault. Browsers\n * do not have a secure storage element same as native devices. This class\n * is intended to be used to enable running your application in the browser while\n * simulating the functions of Identity Vault using sessionStorage.\n *\n * Represents a vault implementation for browser compatibility.\n */\n\nclass BrowserVault {\n  /**\n   * @usage\n   * ```typescript\n   * const vault = new Vault({\n   *  key: 'com.company.myvaultapp',\n   *  type: 'CustomPasscode',\n   *  deviceSecurityType: 'Both',\n   *  lockAfterBackgrounded: 2000,\n   * });\n   * ```\n   * @param config\n   */\n  constructor(config) {\n    /** @ignore */\n    this.isVaultLocked = false;\n    /** @ignore */\n\n    this.isVaultEmpty = true;\n    console.warn('THIS VAULT DOES NOT IMPLEMENT SECURE STORAGE IN THE BROWSER AND IS NOT INTENDED FOR PRODUCTION USE. It only exists as a way to run browser-compatible code in place of Identity Vault. Browsers do not have a secure storage element same as native devices. This class is intended to be used to enable running your application in the browser while simulating the functions of Identity Vault using sessionStorage.');\n    this.config = Object.assign({\n      deviceSecurityType: 'Both',\n      androidBiometricsPreferStrongVaultOrSystemPasscode: 'StrongVault',\n      shouldClearVaultAfterTooManyFailedAttempts: false,\n      customPasscodeInvalidUnlockAttempts: 5,\n      unlockVaultOnLoad: false\n    }, config);\n    this.isVaultLocked = config.unlockVaultOnLoad ? false : true;\n  }\n  /** @deprecated Deprecated in favor of using the isEmpty method. */\n\n  /** See {@link Vault.doesVaultExist} */\n\n\n  doesVaultExist() {\n    const data = this.getDataObj();\n    return Promise.resolve(!!data);\n  }\n  /** See {@link Vault.clear} */\n\n\n  clear() {\n    this.unlockIfLocked();\n    sessionStorage.removeItem(this.getKey(STORAGE_KEYS.DATA));\n    this.isVaultEmpty = true;\n    return Promise.resolve();\n  }\n  /** See {@link Vault.exportVault} */\n\n\n  exportVault() {\n    this.unlockIfLocked();\n    const data = this.getDataObj();\n    return Promise.resolve(data !== null && data !== void 0 ? data : {});\n  }\n  /** See {@link Vault.importVault} */\n\n\n  importVault(data) {\n    this.setDataObj(data);\n    return Promise.resolve();\n  }\n  /** See {@link Vault.isLocked} */\n\n\n  isLocked() {\n    return Promise.resolve(this.isVaultLocked);\n  }\n  /** See {@link Vault.isEmpty} */\n\n\n  isEmpty() {\n    return Promise.resolve(this.isVaultEmpty);\n  }\n  /** See {@link Vault.getKeys} */\n\n\n  getKeys() {\n    this.unlockIfLocked();\n    const data = this.getDataObj();\n    if (!data) return Promise.resolve([]);\n    return Promise.resolve(Object.keys(data));\n  }\n  /** See {@link Vault.getValue} */\n\n\n  getValue(key) {\n    var _a;\n\n    this.unlockIfLocked();\n    const data = this.getDataObj();\n    return Promise.resolve((_a = data === null || data === void 0 ? void 0 : data[key]) !== null && _a !== void 0 ? _a : null);\n  }\n  /** See {@link Vault.lock} */\n\n\n  lock() {\n    var _a;\n\n    (_a = this.lockCallback) === null || _a === void 0 ? void 0 : _a.call(this, {\n      timeout: false\n    });\n    return Promise.resolve();\n  }\n  /** See {@link Vault.removeValue} */\n\n\n  removeValue(key) {\n    this.unlockIfLocked();\n    const data = this.getDataObj();\n    if (!data) return Promise.resolve();\n    const _a = data,\n          _b = key;\n    _a[_b];\n\n    const dataAfterRemoval = __rest(_a, [typeof _b === \"symbol\" ? _b : _b + \"\"]);\n\n    this.setDataObj(dataAfterRemoval);\n    return Promise.resolve();\n  }\n  /** See {@link Vault.setCustomPasscode} */\n\n\n  setCustomPasscode(passcode) {\n    return Promise.resolve();\n  }\n  /** See {@link Vault.setValue} */\n\n\n  setValue(key, value) {\n    this.unlockIfLocked();\n    const data = this.getDataObj();\n\n    if (!data) {\n      this.setDataObj({\n        [key]: value\n      });\n    } else {\n      this.setDataObj(Object.assign(Object.assign({}, data), {\n        [key]: value\n      }));\n    }\n\n    return Promise.resolve();\n  }\n  /** See {@link Vault.onConfigChanged} */\n\n\n  onConfigChanged(callback) {\n    this.configCallback = callback;\n  }\n  /** See {@link Vault.onError} */\n\n\n  onError(callback) {\n    this.errorCallback = callback;\n  }\n  /** See {@link Vault.onLock} */\n\n\n  onLock(callback) {\n    this.lockCallback = callback;\n  }\n\n  onPasscodeRequested(callback) {// No passcode support\n  }\n  /** See {@link Vault.onUnlock} */\n\n\n  onUnlock(callback) {\n    this.unlockCallback = callback;\n  }\n  /** See {@link Vault.unlock} */\n\n\n  unlock() {\n    var _a;\n\n    (_a = this.unlockCallback) === null || _a === void 0 ? void 0 : _a.call(this);\n    return Promise.resolve();\n  }\n  /** See {@link Vault.updateConfig} */\n\n\n  updateConfig(config) {\n    var _a;\n\n    this.config = config;\n    (_a = this.configCallback) === null || _a === void 0 ? void 0 : _a.call(this, config);\n    return Promise.resolve();\n  }\n  /** @ignore */\n\n\n  requestBiometricPrompt() {\n    this.unlockIfLocked();\n    return Promise.resolve(true);\n  }\n  /** @ignore */\n\n\n  unlockIfLocked() {\n    if (this.isVaultLocked) {\n      this.unlock();\n    }\n  }\n  /** @ignore */\n\n\n  getDataObj() {\n    var _a;\n\n    const value = sessionStorage.getItem(this.getKey(STORAGE_KEYS.DATA));\n    if (!value) return null;\n\n    try {\n      const dataObj = JSON.parse(value);\n      this.isVaultEmpty = Object.keys(dataObj).length <= 0;\n      return dataObj;\n    } catch (e) {\n      (_a = this.errorCallback) === null || _a === void 0 ? void 0 : _a.call(this, {\n        message: 'Unable to parse data store',\n        code: VaultErrorCodes.Unknown\n      });\n      return null;\n    }\n  }\n  /** @ignore */\n\n\n  setDataObj(data) {\n    var _a;\n\n    try {\n      const dataStr = JSON.stringify(data);\n      sessionStorage.setItem(this.getKey(STORAGE_KEYS.DATA), dataStr);\n      this.isVaultEmpty = Object.keys(data).length <= 0;\n    } catch (e) {\n      (_a = this.errorCallback) === null || _a === void 0 ? void 0 : _a.call(this, {\n        message: 'Unable to serialize data',\n        code: VaultErrorCodes.Unknown\n      });\n    }\n  }\n  /** @ignore */\n\n\n  getKey(key) {\n    return `IV-${this.config.key}-${key}`;\n  }\n\n}\n/**\n * Represents a vault for secure value storage\n */\n\n\nclass Vault {\n  /**\n   * @usage\n   * ```typescript\n   * const vault = new Vault({\n   *  key: 'com.company.myvaultapp',\n   *  type: 'CustomPasscode',\n   *  deviceSecurityType: DeviceSecurityType.None,\n   *  lockAfterBackgrounded: 2000,\n   * });\n   * ```\n   * @param config\n   */\n  constructor(config) {\n    /** @ignore */\n    this.defaultConfig = {\n      deviceSecurityType: DeviceSecurityType.None,\n      androidBiometricsPreferStrongVaultOrSystemPasscode: AndroidBiometricCryptoPreference.StrongVault,\n      shouldClearVaultAfterTooManyFailedAttempts: false,\n      customPasscodeInvalidUnlockAttempts: 5,\n      unlockVaultOnLoad: false\n    }; // set defaults\n\n    this.config = Object.assign(this.defaultConfig, config); // setting sane defaults\n\n    if (config.deviceSecurityType === DeviceSecurityType.None && config.type === VaultType.DeviceSecurity) {\n      config.deviceSecurityType = DeviceSecurityType.Both;\n    }\n\n    this.resume = this.resume.bind(this);\n    this.handleError = this.handleError.bind(this);\n    this.setup().then(() => {\n      this.getPersistedVaultConfig();\n    });\n  }\n  /**\n   * Resolves true if a vault with the same key already exists, and false if not.\n   * The vault does not need to be unlocked to check.\n   *\n   * __Note:__\n   *  - Using {@link Vault.removeValue | removeValue()} to remove all of your vault data will not cause this function to resolve false, however {@link Vault.clear | clear()} will.\n   *  - A vault only exists once it has been interacted with at least once via any of the following instance methods.\n   *    - {@link Vault.setValue | setValue()}\n   *    - {@link Vault.removeValue | removeValue()}\n   *    - {@link Vault.importVault | importVault()}\n   *    - {@link Vault.exportVault | exportVault()}\n   *    - {@link Vault.unlock | unlock()}\n   *    - {@link Vault.updateConfig | updateConfig()}\n   *\n   * @usage\n   * ```typescript\n   * const vault = new Vault(existingVaultConfig);\n   * const vaultExists = await vault.doesVaultExists()\n   * if (!vaultExists) {\n   *  // the vault does not exist...\n   * }\n   * ```\n   *\n   * @deprecated Deprecated in favor of using the {@link Vault.isEmpty | isEmpty()} method.\n   */\n\n\n  doesVaultExist() {\n    return new Promise((resolve, reject) => {\n      cordova.exec(data => {\n        resolve(JSON.parse(data));\n      }, error => {\n        this.handleError(resolve, reject, error, () => this.doesVaultExist());\n      }, 'VaultPlugin', 'doesVaultExist', [this.config]);\n    });\n  }\n  /**\n   * Clears out the current vault and removes it from the system.\n   * Note: The vault does not need to be unlocked in order to clear it. No credentials are checked\n   * when clearing the vault.\n   *\n   * @usage\n   * ```typescript\n   * const vault = new Vault(existingVaultConfig);\n   * await vault.clear();\n   * ```\n   */\n\n\n  clear() {\n    return new Promise((resolve, reject) => {\n      cordova.exec(data => {\n        resolve();\n      }, error => {\n        this.handleError(resolve, reject, error, () => this.clear());\n      }, 'VaultPlugin', 'clear', [this.config]);\n    });\n  }\n  /**\n   * Exports the data of the current vault in its entirety.\n   * The data is a map with keys that are strings and values that are JSON.\n   * Calling `exportVault` will attempt to unlock the vault if it is currently locked.\n   *\n   * @usage\n   * ```typescript\n   * const vault = new Vault(existingVaultConfig);\n   * const data = await vault.exportVault();\n   * ```\n   *\n   * @return The resolved object is a map with string keys and string values.\n   *\n   */\n\n\n  exportVault() {\n    return new Promise((resolve, reject) => {\n      cordova.exec(data => {\n        resolve(JSON.parse(data));\n      }, error => {\n        this.handleError(resolve, reject, error, () => this.exportVault());\n      }, 'VaultPlugin', 'exportVault', [this.config]);\n    });\n  }\n  /**\n   * Imports data into the vault, replacing the current contents of the vault.\n   * The data is a map with keys that are strings and values that are JSON.\n   * Calling `importVault` will attempt to unlock the vault if it is currently locked.\n   *\n   * @usage\n   * ```typescript\n   * const dataFromElsewhere = await getUserData();\n   * const newVault = new Vault(vaultConfig);\n   * await newVault.importVault(dataFromElsewhere);\n   * ```\n   *\n   * @param data The entire data object to be imported. The shape of data must be {[key: string]: string}.\n   *\n   */\n\n\n  importVault(data) {\n    const jsonData = JSON.stringify(data);\n    return new Promise((resolve, reject) => {\n      cordova.exec(resolve, error => {\n        this.handleError(resolve, reject, error, () => this.importVault(data));\n      }, 'VaultPlugin', 'importVault', [this.config, jsonData]);\n    });\n  }\n  /**\n   * Checks if the vault is currently in a locked state, which signifies that the contents\n   * of the secure vault are not currently accessible. `isLocked` can also return true if the\n   * vault does not exist.\n   *\n   * @usage\n   * ```typescript\n   * const vault = new Vault(existingVaultConfig);\n   * const locked = await vault.isLocked();\n   * if (locked) {\n   *  // vault is locked (or does not exist);\n   * }\n   * ```\n   */\n\n\n  isLocked() {\n    return new Promise((resolve, reject) => {\n      cordova.exec(data => {\n        resolve(JSON.parse(data));\n      }, error => {\n        this.handleError(resolve, reject, error);\n      }, 'VaultPlugin', 'isLocked', [this.config]);\n    });\n  }\n  /**\n   * Returns an array of keys that are currently in the vault.\n   * Calling `getKeys` will attempt to unlock the vault if it is currently locked.\n   *\n   * @usage\n   * ```typescript\n   * const vault = new Vault(existingVaultConfig);\n   * const allKeys = await vault.getKeys();\n   * allKeys.forEach((key) => {\n   *  // do something with the key\n   * });\n   * ```\n   */\n\n\n  getKeys() {\n    return new Promise((resolve, reject) => {\n      cordova.exec(data => {\n        resolve(JSON.parse(data));\n      }, error => {\n        this.handleError(resolve, reject, error, () => this.getKeys());\n      }, 'VaultPlugin', 'getKeys', [this.config]);\n    });\n  }\n  /**\n   * Gets the value for a given key. Returns null if the key does not exist.\n   * Calling `getValue` will attempt to unlock the vault if it is currently locked.\n   *\n   * @usage\n   * ```typescript\n   * const vault = new Vault(existingVaultConfig);\n   * const userFirstName = await vault.getValue<string>(\"firstname\");\n   * ```\n   *\n   * @param key The key to look up the value for\n   *\n   */\n\n\n  getValue(key) {\n    return new Promise((resolve, reject) => {\n      cordova.exec(data => {\n        if (!data) {\n          // android returns null as an empty string, so manually convert it here\n          resolve(null);\n        } else {\n          try {\n            resolve(JSON.parse(data));\n          } catch (err) {\n            resolve(data);\n          }\n        }\n      }, error => {\n        this.handleError(resolve, reject, error, () => this.getValue(key));\n      }, 'VaultPlugin', 'getValue', [this.config, key]);\n    });\n  }\n  /**\n   * Locks the vault if it is currently unlocked.\n   * Locking the vault with remove all secure data from memory inside of Identity Vault, but not your application.\n   *\n   * @usage\n   * ```typescript\n   * const vault = new Vault(existingVaultConfig);\n   * await vault.lock();\n   * ```\n   */\n\n\n  lock() {\n    return new Promise((resolve, reject) => {\n      cordova.exec(data => {\n        resolve();\n      }, error => {\n        this.handleError(resolve, reject, error);\n      }, 'VaultPlugin', 'lock', [this.config]);\n    });\n  }\n  /**\n   * Removes a value from the vault.\n   * Calling `removeValue` will attempt to unlock the vault if it is currently locked.\n   *\n   * @usage\n   * ```typescript\n   * const vault = new Vault(existingVaultConfig);\n   * await vault.removeValue(\"address\");\n   * ```\n   *\n   * @param key The key to remove\n   *\n   */\n\n\n  removeValue(key) {\n    return new Promise((resolve, reject) => {\n      cordova.exec(resolve, error => {\n        this.handleError(resolve, reject, error, () => this.removeValue(key));\n      }, 'VaultPlugin', 'removeValue', [this.config, key]);\n    });\n  }\n  /**\n   * When the vault type is set to 'CustomPasscode', this method sets the passcode required to\n   * secure the vault. If the vault is unlocked this method can be used to change the passcode.\n   *\n   * This method is typically called in the `onPasscodeRequested` callback.\n   *\n   * @usage\n   * ```typescript\n   * const vault = new Vault(existingVaultConfig);\n   * const code = window.prompt(\"Enter your passcode.\");\n   * if (code) {\n   *  await vault.setCustomPasscode(code);\n   * }\n   * ```\n   *\n   * @param passcode The user supplied passcode to secure the vault with.\n   *\n   */\n\n\n  setCustomPasscode(passcode) {\n    return new Promise((resolve, reject) => {\n      cordova.exec(resolve, error => {\n        this.handleError(resolve, reject, error);\n      }, 'VaultPlugin', 'setCustomPasscode', [this.config, passcode]);\n    });\n  }\n  /**\n   * Sets the value of an item in the vault.\n   * Calling `setValue` will attempt to unlock the vault if it is currently locked.\n   *\n   * @usage\n   * ```typescript\n   * const vault = new Vault(existingVaultConfig);\n   * await vault.setValue<string>(\"theme\", theme);\n   * ```\n   *\n   * @param key The key for the new value.\n   * @param value The value to store in the vault. Value can be of any type, as it will be parsed to JSON in the vault.\n   *\n   */\n\n\n  setValue(key, value) {\n    const jsonValue = JSON.stringify(value);\n    return new Promise((resolve, reject) => {\n      cordova.exec(resolve, error => {\n        this.handleError(resolve, reject, error, () => this.setValue(key, value));\n      }, 'VaultPlugin', 'setValue', [this.config, key, jsonValue]);\n    });\n  }\n  /**\n   * Triggers when a config change occurs.\n   *\n   * @usage\n   * ```typescript\n   * vault.onConfigChanged((config) => {\n   *  console.log(\"updated config: \", config);\n   * });\n   * ```\n   * @param callback The callback function that will be called when the event triggers. Passes in the current vault config.\n   *\n   */\n\n\n  onConfigChanged(callback) {\n    cordova.exec(data => {\n      callback(JSON.parse(data));\n    }, error => console.error(error), 'VaultPlugin', 'onConfigChanged', []);\n  }\n  /**\n   * Triggers when an error occurs in the application.\n   * Errors that come back as rejected promises also trigger this event.\n   *\n   * @usage\n   * ```typescript\n   * vault.onError((err) => {\n   *  console.log('ERROR from callback', JSON.stringify(err));\n   * });\n   * ```\n   *\n   * @param callback The callback function that will be called when the event triggers. Passes in the error object.\n   *\n   */\n\n\n  onError(callback) {\n    cordova.exec(() => {// Do Nothing\n    }, callback, 'VaultPlugin', 'onError', [this.config]);\n  }\n  /**\n   * Triggers when the vault enters a locked state.\n   *\n   * @usage\n   * ```typescript\n   * vault.onLock((lockEvent) => { displayNotification(`Vault locked. Was from timeout: ${lockEvent.timeout}`); })\n   * ```\n   *\n   * @param callback The callback function that will be called when the event triggers. Passes in an object with a boolean property of `timeout` indicating if the lock was due to a background timeout or not.\n   *\n   */\n\n\n  onLock(callback) {\n    cordova.exec(data => {\n      const d = JSON.parse(data);\n      callback({\n        timeout: d.timeout\n      });\n    }, error => console.error(error), 'VaultPlugin', 'onLock', [this.config]);\n  }\n\n  onPasscodeRequested(callback) {\n    this.passCodeRequestedCallback = callback;\n  }\n  /**\n   * Triggers when the vault enters an unlocked state.\n   *\n   * @usage\n   * ```typescript\n   * vault.onUnlock(() => {\n   *  console.log(\"vault is now unlocked\");\n   * });\n   * ```\n   * @param callback The callback function that will be called when the event triggers.\n   *\n   */\n\n\n  onUnlock(callback) {\n    cordova.exec(callback, error => console.error(error), 'VaultPlugin', 'onUnlock', [this.config]);\n  }\n  /**\n   * Manually unlock the vault. Will trigger any authentication mechanism needed to access the vault (passcode, biometrics, etc..).\n   *\n   * @usage\n   * ```typescript\n   * const vault = new Vault(existingVaultConfig);\n   * await vault.unlock();\n   * ```\n   */\n\n\n  unlock() {\n    return new Promise((resolve, reject) => {\n      cordova.exec(() => {\n        resolve();\n      }, error => {\n        this.handleError(resolve, reject, error, () => this.unlock());\n      }, 'VaultPlugin', 'unlock', [this.config]);\n    });\n  }\n  /**\n   * Updates the configuration of the current vault.\n   *\n   *  @usage\n   * ```typescript\n   * async function changeVaultType(type: VaultType) {\n   *  const vault = new Vault(this.existingVaultConfig);\n   *  const newConfig = { ...this.existingVaultConfig, type };\n   *  await vault.updateConfig(newConfig);\n   *  this.existingVaultConfig = newConfig;\n   * }\n   * ```\n   *\n   * @param config The new config\n   *\n   */\n\n\n  updateConfig(config) {\n    return new Promise((resolve, reject) => {\n      config = Object.assign(this.defaultConfig, config); // setting sane defaults\n\n      if (config.deviceSecurityType === DeviceSecurityType.None && config.type === VaultType.DeviceSecurity) {\n        config.deviceSecurityType = DeviceSecurityType.Both;\n      }\n\n      cordova.exec(() => {\n        this.config = config;\n        resolve();\n      }, error => {\n        this.handleError(resolve, reject, error, () => this.updateConfig(config));\n      }, 'VaultPlugin', 'updateConfig', [config]);\n    });\n  }\n  /**\n   * Resolves true if a vault contains no data, and false if any data exists in the vault.\n   * The vault does not need to be unlocked to check.\n   *\n   * __Note:__ Vaults created prior to version 5.2.0 will return false until the vault is unlocked for the first time after updating, even if the vault contains no data.\n   * After which this method will return the expected value.\n   *\n   * @usage\n   * ```typescript\n   * const vault = new Vault(existingVaultConfig);\n   * const vaultIsEmpty = await vault.isEmpty()\n   * if (vaultIsEmpty) {\n   *  // the vault is empty and contains no data...\n   * }\n   * ```\n   */\n\n\n  isEmpty() {\n    return new Promise((resolve, reject) => {\n      cordova.exec(data => {\n        resolve(JSON.parse(data));\n      }, error => {\n        this.handleError(resolve, reject, error);\n      }, 'VaultPlugin', 'isEmpty', [this.config]);\n    });\n  }\n  /** @ignore */\n\n\n  handleError(resolve, reject, error, retryFunc) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (error.code === VaultErrorCodes.MissingPasscode && _this.passCodeRequestedCallback) {\n        const checkRetry = /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(function* () {\n            if (retryFunc) {\n              try {\n                const data = yield retryFunc();\n                resolve(data);\n              } catch (e) {\n                reject(e);\n              }\n            }\n          });\n\n          return function checkRetry() {\n            return _ref.apply(this, arguments);\n          };\n        }();\n\n        const res = _this.passCodeRequestedCallback(error.extra.isPasscodeSetRequest, code => {\n          _this.setCustomPasscode(code);\n\n          checkRetry();\n        });\n\n        if (res instanceof Promise) {\n          yield res;\n          yield checkRetry();\n        }\n      } else if (error.code === VaultErrorCodes.MissingBiometrics) {\n        cordova.exec( /*#__PURE__*/_asyncToGenerator(function* () {\n          const data = yield retryFunc();\n          resolve(data);\n        }), e => reject(e), 'VaultPlugin', 'requestBiometricPrompt', [_this.config]);\n      } else {\n        reject(error);\n      }\n    })();\n  }\n  /** @ignore */\n\n\n  requestBiometricPrompt() {\n    return new Promise((resolve, reject) => {\n      cordova.exec(data => {\n        resolve(JSON.parse(data));\n      }, error => {\n        this.handleError(resolve, reject, error, () => this.requestBiometricPrompt());\n      }, 'VaultPlugin', 'requestBiometricPrompt', [this.config]);\n    });\n  }\n  /**\n   * @ignore\n   */\n\n\n  resume() {\n    const noop = () => {// Do Nothing\n    };\n\n    cordova.exec(noop, error => {\n      this.handleError(noop, noop, error, () => this.resume());\n    }, 'VaultPlugin', 'appResumed', [this.config]);\n  }\n  /**\n   * @ignore\n   */\n\n\n  setup() {\n    return new Promise((resolve, reject) => {\n      document.addEventListener('resume', this.resume, false);\n      cordova.exec(resolve, error => {\n        this.handleError(resolve, reject, error);\n      }, 'VaultPlugin', 'setup', [this.config]);\n    });\n  }\n  /**\n   * @ignore\n   */\n\n\n  getPersistedVaultConfig() {\n    return new Promise((resolve, reject) => {\n      cordova.exec(data => {\n        if (!data) {\n          resolve();\n        } else {\n          const vaultConfig = JSON.parse(data);\n          this.config = Object.assign(this.config, vaultConfig);\n          resolve();\n        }\n      }, error => {\n        this.handleError(resolve, reject, error);\n      }, 'VaultPlugin', 'getVaultConfig', [this.config]);\n    });\n  }\n\n}\n\nclass Device {\n  /** @ignore */\n  constructor() {// Nothing\n  }\n  /**\n   * Gets the types of biometrics the device supports.\n   *\n   * @usage\n   * ```typescript\n   * const hardware = await Device.getAvailableHardware();\n   * hardware.forEach((biometricType) => console.log(\"Type: \" + biometricType));\n   * ```\n   */\n\n\n  static getAvailableHardware() {\n    return new Promise((resolve, reject) => {\n      if (!('cordova' in window)) {\n        resolve([]);\n        return;\n      }\n\n      cordova.exec(data => {\n        resolve(data);\n      }, error => {\n        Device.handleError(resolve, reject, error);\n      }, 'DevicePlugin', 'getAvailableHardware', []);\n    });\n  }\n  /**\n   * Check whether biometrics are locked out on the device.\n   *\n   * On Android, the locked out state will only known after an attempted biometric unlock.\n   *\n   * @usage\n   * ```typescript\n   * const isLockedOut = await Device.isLockedOutOfBiometrics();\n   * if (isLockedOut) {\n   *  // device is locked out ...\n   * }\n   * ```\n   */\n\n\n  static isLockedOutOfBiometrics() {\n    return new Promise((resolve, reject) => {\n      if (!('cordova' in window)) {\n        resolve(false);\n        return;\n      }\n\n      cordova.exec(data => {\n        resolve(JSON.parse(data));\n      }, error => {\n        Device.handleError(resolve, reject, error);\n      }, 'DevicePlugin', 'isLockedOutOfBiometrics', []);\n    });\n  }\n  /**\n   * Checks the device biometric strength level.\n   *\n   * On iOS this will always return 'strong'.\n   *\n   * @usage\n   * ```typescript\n   * const biometricStrength = await Device.getBiometricStrengthLevel();\n   * ```\n   */\n\n\n  static getBiometricStrengthLevel() {\n    return new Promise((resolve, reject) => {\n      if (!('cordova' in window)) {\n        resolve(BiometricSecurityStrength.Weak);\n        return;\n      }\n\n      cordova.exec(data => {\n        resolve(data);\n      }, error => {\n        Device.handleError(resolve, reject, error);\n      }, 'DevicePlugin', 'getBiometricStrengthLevel', []);\n    });\n  }\n  /**\n   * Check whether or not the screen will be obscured in app switcher mode.\n   *\n   * @usage\n   * ```typescript\n   * const willHideScreen = await Device.isHideScreenOnBackgroundEnabled();\n   * ```\n   */\n\n\n  static isHideScreenOnBackgroundEnabled() {\n    return new Promise((resolve, reject) => {\n      if (!('cordova' in window)) {\n        resolve(false);\n        return;\n      }\n\n      cordova.exec(data => {\n        resolve(JSON.parse(data));\n      }, error => {\n        Device.handleError(resolve, reject, error);\n      }, 'DevicePlugin', 'isHideScreenOnBackgroundEnabled', []);\n    });\n  }\n  /**\n   * Set whether or not the screen will be obscured in app switcher mode.\n   * If enabled, by default the screen behind biometric prompts will be obscured via the splash screen.\n   *\n   * For Android, an optional boolean *dimBiometrics* can be set to obscure\n   * the screen behind biometric prompts via dimming the background instead.\n   *\n   * @usage\n   * ```typescript\n   * await Device.setHideScreenOnBackground(true, true);\n   * ```\n   */\n\n\n  static setHideScreenOnBackground(enabled = false, dimBiometrics = false) {\n    return new Promise((resolve, reject) => {\n      if (!('cordova' in window)) {\n        resolve();\n        return;\n      }\n\n      cordova.exec(() => {\n        resolve();\n      }, error => {\n        Device.handleError(resolve, reject, error);\n      }, 'DevicePlugin', 'setHideScreenOnBackground', [enabled, dimBiometrics]);\n    });\n  }\n  /**\n   * Check whether the device OS-level passcode has been set.\n   *\n   * @usage\n   * ```typescript\n   * const hasSystemPasscode = await Device.isSystemPasscodeSet();\n   * if (hasSystemPasscode) {\n   *  // device has a system passcode\n   * }\n   * ```\n   */\n\n\n  static isSystemPasscodeSet() {\n    return new Promise((resolve, reject) => {\n      if (!('cordova' in window)) {\n        resolve(false);\n        return;\n      }\n\n      cordova.exec(data => {\n        resolve(JSON.parse(data));\n      }, error => {\n        Device.handleError(resolve, reject, error);\n      }, 'DevicePlugin', 'isSystemPasscodeSet', []);\n    });\n  }\n  /**\n   * Check whether or not biometrics is supported by the device and has been configured by the current user of the device.\n   *\n   * @usage\n   * ```typescript\n   * const biometricsEnabled = await Device.isBiometricsEnabled();\n   * if (!biometricsEnabled) {\n   *  // biometrics not enabled on this device...\n   * }\n   * ```\n   */\n\n\n  static isBiometricsEnabled() {\n    return new Promise((resolve, reject) => {\n      if (!('cordova' in window)) {\n        resolve(false);\n        return;\n      }\n\n      cordova.exec(data => {\n        console.log('biometrics is enabled: ', data);\n        resolve(JSON.parse(data));\n      }, error => {\n        Device.handleError(resolve, reject, error);\n      }, 'DevicePlugin', 'isBiometricsEnabled', []);\n    });\n  }\n  /**\n   * Returns the current state of biometric permissions.\n   *\n   * On Android and iOS devices with TouchID, this always returns `granted`.\n   *\n   * @usage\n   * ```typescript\n   * const permissions = await Device.isBiometricsAllowed();\n   * if (permissions === BiometricPermissionState.Denied) {\n   *  // user must enable FaceID for the application...\n   * }\n   * ```\n   */\n\n\n  static isBiometricsAllowed() {\n    return new Promise((resolve, reject) => {\n      if (!('cordova' in window)) {\n        resolve(BiometricPermissionState.Denied);\n        return;\n      }\n\n      cordova.exec(data => {\n        resolve(data);\n      }, error => {\n        Device.handleError(resolve, reject, error);\n      }, 'DevicePlugin', 'isBiometricsAllowed', []);\n    });\n  }\n  /**\n   * Check whether or not biometrics is supported by the device.\n   *\n   * @usage\n   * ```typescript\n   * const biometricsSupported = await Device.isBiometricsSupported();\n   * if (biometricsSupported) {\n   *   // biometrics is supported on this device...\n   * }\n   * ```\n   */\n\n\n  static isBiometricsSupported() {\n    return new Promise((resolve, reject) => {\n      if (!('cordova' in window)) {\n        resolve(false);\n        return;\n      }\n\n      cordova.exec(data => {\n        resolve(JSON.parse(data));\n      }, error => {\n        Device.handleError(resolve, reject, error);\n      }, 'DevicePlugin', 'isBiometricsSupported', []);\n    });\n  }\n  /**\n   * Check if the device has a secure hardware enclave.\n   *\n   * @usage\n   * ```typescript\n   * const hasSecureHardware = await Device.hasSecureHardware();\n   * if (!hasSecureHardware) {\n   *    // this device doesn't have secure hardware\n   * }\n   * ```\n   */\n\n\n  static hasSecureHardware() {\n    return new Promise((resolve, reject) => {\n      if (!('cordova' in window)) {\n        resolve(false);\n        return;\n      }\n\n      cordova.exec(data => {\n        resolve(JSON.parse(data));\n      }, error => {\n        Device.handleError(resolve, reject, error);\n      }, 'DevicePlugin', 'hasSecureHardware', []);\n    });\n  }\n  /**\n   * Show a biometric prompt.\n   *\n   * @usage\n   * ```typescript\n   * try {\n   *  const promptConfig = {...};\n   *  await Device.showBiometricPrompt(promptConfig);\n   *  // biometric prompt succeeded successfully\n   * } catch (err) {\n   *  // handle error\n   * }\n   * ```\n   */\n\n\n  static showBiometricPrompt(config) {\n    return new Promise((resolve, reject) => {\n      if (!('cordova' in window)) {\n        resolve();\n        return;\n      }\n\n      cordova.exec(() => {\n        resolve();\n      }, error => {\n        Device.handleError(resolve, reject, error);\n      }, 'DevicePlugin', 'showBiometricPrompt', [config]);\n    });\n  }\n  /**\n   * @ignore\n   */\n\n\n  static handleError(resolve, reject, error, retryFunc) {\n    return _asyncToGenerator(function* () {\n      reject(error);\n    })();\n  }\n\n}\n/**\n * @hidden\n *\n * @ignore\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\n\n\nclass IonicIdentityVaultUser {\n  constructor(platform, options, descriptor) {\n    this.platform = platform;\n    this.options = options;\n    this._readyCalled = false;\n    this.descriptor = descriptor || {\n      username: '_lastUser',\n      vaultId: 'default'\n    };\n    this._readyPromise = this.initializeVault();\n  }\n\n  get token() {\n    const session = this.session;\n    return session === null || session === void 0 ? void 0 : session.token;\n  }\n\n  get username() {\n    const session = this.session;\n    return session === null || session === void 0 ? void 0 : session.username;\n  }\n\n  get config() {\n    if (!this._config) {\n      return undefined;\n    }\n\n    let authMode;\n    const bioEnabled = this._config.isBiometricsEnabled;\n    const passEnabled = this._config.isPasscodeEnabled;\n    const secureStorageMode = this._config.isSecureStorageModeEnabled;\n\n    if (secureStorageMode) {\n      authMode = AuthMode.SecureStorage;\n    } else if (bioEnabled && passEnabled) {\n      authMode = AuthMode.BiometricAndPasscode;\n    } else if (bioEnabled && !passEnabled) {\n      authMode = AuthMode.BiometricOnly;\n    } else if (!bioEnabled && passEnabled) {\n      authMode = AuthMode.PasscodeOnly;\n    } else if (!bioEnabled && !passEnabled) {\n      authMode = AuthMode.InMemoryOnly;\n    }\n\n    return {\n      authMode: authMode,\n      isPasscodeSetupNeeded: this._config.isPasscodeSetupNeeded,\n      lockAfter: this._config.lockAfter,\n      hideScreenOnBackground: this._config.hideScreenOnBackground\n    };\n  } // overidable event handlers\n\n\n  onVaultLocked(_event) {\n    /* Do Nothing */\n  }\n\n  onSessionRestoreError(_err) {\n    /* Do Nothing */\n  }\n\n  onUnlockOnReadyError(_err) {\n    /* Do Nothing */\n  }\n\n  onVaultUnlocked(_config) {\n    /* Do Nothing */\n  }\n\n  onVaultReady(_config) {\n    /* Do Nothing */\n  }\n\n  onSetupError(_error) {\n    /* Do Nothing */\n  }\n\n  onConfigChange(_config) {\n    /* Do Nothing */\n  }\n\n  onSessionRestored(_session) {\n    /* Do Nothing */\n  }\n\n  onPasscodeRequest(_isPasscodeSetRequest) {\n    return _asyncToGenerator(function* () {\n      return;\n    })();\n  }\n\n  onReady(vault) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this2._readyCalled) {\n        return;\n      }\n\n      _this2._readyCalled = true;\n      _this2.vault = vault;\n      const inUse = yield _this2.vault.isInUse(); // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n      _this2._config = vault.config;\n      const locked = yield _this2.vault.isLocked();\n      let restoreSessionError;\n\n      try {\n        if (_this2.options.restoreSessionOnReady && inUse) {\n          yield _this2._restoreSession();\n        }\n      } catch (e) {\n        restoreSessionError = e;\n      }\n\n      let unlockOnReadyError;\n\n      try {\n        if (locked && _this2.options.unlockOnReady) {\n          yield _this2._unlock();\n        }\n      } catch (e) {\n        unlockOnReadyError = e;\n      } // Note Swallow all errors in init like Vault is Locked Etc.\n\n\n      try {\n        if (!inUse) {\n          yield _this2._trySetAuthMode(_this2.options.authMode);\n        }\n      } catch (e) {// Do Nothing\n      }\n\n      _this2._readyResolve();\n\n      _this2.onVaultReady(_this2.config);\n\n      if (restoreSessionError) {\n        _this2.onSessionRestoreError(restoreSessionError);\n      }\n\n      if (unlockOnReadyError) {\n        _this2.onUnlockOnReadyError(restoreSessionError);\n      }\n    })();\n  }\n\n  onLock(event) {\n    this.session = undefined;\n    this.onVaultLocked(event);\n  }\n\n  onUnlock(config) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this3.ready();\n      _this3._config = config;\n\n      _this3.onVaultUnlocked(_this3.config);\n    })();\n  }\n\n  onError(error) {\n    this._readyReject(error);\n\n    this.onSetupError(error);\n  }\n\n  onConfig(config) {\n    this._config = config;\n    this.onConfigChange(this.config);\n  }\n\n  ready() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this4._readyPromise;\n    })();\n  }\n\n  _unlock(authMode) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      const locked = yield _this5.vault.isLocked();\n\n      if (!locked) {\n        return;\n      }\n\n      authMode = authMode !== undefined && authMode !== AuthMode.BiometricOrPasscode ? authMode : _this5.config.authMode;\n\n      switch (authMode) {\n        case AuthMode.BiometricOnly:\n          return _this5.vault.unlock();\n\n        case AuthMode.PasscodeOnly:\n          return _this5.unlockWithPasscode();\n\n        case AuthMode.BiometricAndPasscode:\n          try {\n            yield _this5.vault.unlock();\n            return;\n          } catch (e) {\n            const handleableErrors = [VaultErrorCodes.AuthFailed, VaultErrorCodes.BiometricsNotEnabled, VaultErrorCodes.UserCanceledInteraction, VaultErrorCodes.InvalidatedCredential];\n\n            if (handleableErrors.indexOf(e.code) > -1) {\n              yield _this5.unlockWithPasscode(); // The user removed fingerprints/faceID and so the bio creds are gone\n              // if they are using passcode auth we can resave the credential to autoreset\n              // the mode to PasscodeOnly if bio is no longer available.\n\n              if (e.code === VaultErrorCodes.InvalidatedCredential) {\n                const session = yield _this5.restoreSession(); // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n                yield _this5.saveSession(session);\n              }\n\n              return;\n            }\n\n            throw e;\n          }\n\n      }\n    })();\n  }\n\n  unlock(authMode) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this6.ready();\n      return _this6._unlock(authMode);\n    })();\n  }\n\n  unlockWithPasscode() {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      const passcode = yield _this7.onPasscodeRequest(false);\n      return _this7.vault.unlock(true, passcode);\n    })();\n  }\n\n  _setPasscode() {\n    var _this8 = this;\n\n    return _asyncToGenerator(function* () {\n      const locked = yield _this8.vault.isLocked();\n\n      if (locked) {\n        // eslint-disable-next-line no-throw-literal\n        throw {\n          code: VaultErrorCodes.VaultLocked,\n          message: 'Operation not allowed while vault locked.'\n        };\n      }\n\n      const passcode = yield _this8.onPasscodeRequest(true);\n      return _this8.vault.setPasscode(passcode);\n    })();\n  }\n\n  setPasscode() {\n    var _this9 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this9.ready();\n      return _this9._setPasscode();\n    })();\n  }\n\n  getSession() {\n    var _this10 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this10.ready();\n\n      if (_this10.options.unlockOnAccess) {\n        yield _this10._unlock();\n      }\n\n      return _this10.session;\n    })();\n  }\n\n  _restoreSession() {\n    var _this11 = this;\n\n    return _asyncToGenerator(function* () {\n      const inUse = yield _this11.vault.isInUse();\n\n      if (!inUse) {\n        return;\n      }\n\n      if (_this11.options.unlockOnAccess) {\n        yield _this11._unlock();\n      }\n\n      _this11.session = yield _this11.vault.getValue('session'); // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n      _this11.onSessionRestored(_this11.session);\n\n      return _this11.session;\n    })();\n  }\n\n  restoreSession() {\n    var _this12 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this12.ready();\n      return _this12._restoreSession();\n    })();\n  }\n\n  saveSession(session) {\n    var _this13 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this13.ready();\n\n      if (_this13.config.isPasscodeSetupNeeded) {\n        yield _this13.setPasscode();\n      }\n\n      try {\n        yield _this13.vault.storeValue('session', session);\n      } catch (e) {\n        // Catch the case where Biometrics with Passcode Fallback\n        // was enabled but the user disabled passcode or removed their\n        // fingerprints/faceid and try to recover by setting to passcode only\n        // mode.\n        if (e.code === VaultErrorCodes.SecurityNotAvailable) {\n          const authMode = yield _this13.getAuthMode();\n\n          if (authMode === AuthMode.BiometricAndPasscode) {\n            yield _this13.setAuthMode(AuthMode.PasscodeOnly);\n            return _this13.saveSession(session);\n          }\n        }\n\n        throw e;\n      }\n\n      _this13.session = session;\n    })();\n  }\n\n  login(session, authMode) {\n    var _this14 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this14.ready();\n      yield _this14.logout();\n      yield _this14._trySetAuthMode(authMode);\n      return _this14.saveSession(session);\n    })();\n  }\n\n  getVault() {\n    var _this15 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this15.ready();\n      return _this15.vault;\n    })();\n  }\n\n  initializeVault() {\n    var _this16 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this16.platform.ready();\n\n      if (_this16.vault != null) {\n        return Promise.resolve();\n      }\n\n      if (_this16.vIonicNativeAuth == null) {\n        _this16.vIonicNativeAuth = _this16.getPlugin();\n      }\n\n      const readyPromise = new Promise((resolve, reject) => {\n        _this16._readyResolve = resolve;\n        _this16._readyReject = reject;\n      });\n      const {\n        lockAfter,\n        hideScreenOnBackground,\n        shouldClearVaultAfterTooManyFailedAttempts,\n        allowSystemPinFallback,\n        androidPromptNegativeButtonText,\n        androidPromptTitle,\n        androidPromptSubtitle,\n        androidPromptDescription,\n        androidPINPromptTitle,\n        androidPINPromptSubtitle,\n        androidPINPromptConfirmTitle,\n        androidPINPromptVerifyTitle,\n        androidPINPromptConfirmButtonText,\n        androidPINPromptNegativeButtonText,\n        iosPromptText\n      } = _this16.options;\n      _this16.vault = _this16.vIonicNativeAuth.getVault(Object.assign(Object.assign({\n        lockAfter,\n        hideScreenOnBackground,\n        shouldClearVaultAfterTooManyFailedAttempts,\n        allowSystemPinFallback,\n        androidPromptNegativeButtonText,\n        androidPromptTitle,\n        androidPromptSubtitle,\n        androidPromptDescription,\n        androidPINPromptTitle,\n        androidPINPromptSubtitle,\n        androidPINPromptConfirmTitle,\n        androidPINPromptVerifyTitle,\n        androidPINPromptConfirmButtonText,\n        androidPINPromptNegativeButtonText,\n        iosPromptText\n      }, _this16.descriptor), {\n        onLock: _this16.onLock.bind(_this16),\n        onConfig: _this16.onConfig.bind(_this16),\n        onError: _this16.onError.bind(_this16),\n        onUnlock: _this16.onUnlock.bind(_this16),\n        onReady: _this16.onReady.bind(_this16)\n      }));\n      return readyPromise;\n    })();\n  }\n\n  getPlugin() {\n    return IonicNativeAuth;\n  }\n\n  getBiometricType() {\n    var _this17 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this17.ready();\n      return _this17.vault.getBiometricType();\n    })();\n  }\n\n  getAvailableHardware() {\n    var _this18 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this18.ready();\n      return _this18.vault.getAvailableHardware();\n    })();\n  }\n\n  lockOut() {\n    var _this19 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this19.ready();\n      yield _this19.vault.lock();\n      _this19.session = undefined;\n    })();\n  }\n\n  logout() {\n    var _this20 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this20.ready();\n      yield _this20.vault.clear();\n      _this20.session = undefined;\n      _this20._config = yield _this20.vault.getConfig();\n    })();\n  }\n\n  hasStoredSession() {\n    var _this21 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this21.ready();\n      return _this21.vault.isInUse();\n    })();\n  }\n\n  setBiometricsEnabled(isBiometricsEnabled) {\n    var _this22 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this22.ready();\n      return _this22._setBiometricsEnabled(isBiometricsEnabled);\n    })();\n  }\n\n  _setBiometricsEnabled(isBiometricsEnabled) {\n    var _this23 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this23.vault.setBiometricsEnabled(isBiometricsEnabled);\n    })();\n  }\n\n  setHideScreenOnBackground(enabled) {\n    var _this24 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this24.ready();\n      return _this24.vault.setHideScreenOnBackground(enabled);\n    })();\n  }\n\n  setPasscodeEnabled(isPasscodeEnabled) {\n    var _this25 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this25.ready();\n      yield _this25._setPasscodeEnabled(isPasscodeEnabled);\n    })();\n  }\n\n  _setPasscodeEnabled(isPasscodeEnabled) {\n    var _this26 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this26.vault.setPasscodeEnabled(isPasscodeEnabled);\n      _this26._config = yield _this26.vault.getConfig();\n\n      if (_this26.config.isPasscodeSetupNeeded) {\n        yield _this26._setPasscode();\n      }\n    })();\n  }\n\n  isBiometricsEnabled() {\n    var _this27 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this27.ready();\n      return _this27.vault.isBiometricsEnabled();\n    })();\n  }\n\n  isBiometricsAvailable() {\n    var _this28 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this28.ready();\n      return _this28.vault.isBiometricsAvailable();\n    })();\n  }\n\n  isBiometricsSupported() {\n    var _this29 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this29.ready();\n      return _this29.vault.isBiometricsSupported();\n    })();\n  }\n\n  isSecureStorageModeEnabled() {\n    var _this30 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this30.ready();\n      return _this30.vault.isSecureStorageModeEnabled();\n    })();\n  }\n\n  isPasscodeEnabled() {\n    var _this31 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this31.ready();\n      return _this31.vault.isPasscodeEnabled();\n    })();\n  }\n\n  _setAuthMode(authMode) {\n    var _this32 = this;\n\n    return _asyncToGenerator(function* () {\n      authMode = authMode !== undefined ? authMode : _this32.config.authMode;\n\n      if (authMode === _this32.config.authMode) {\n        return;\n      }\n\n      switch (authMode) {\n        case AuthMode.BiometricOnly:\n          yield _this32._setBiometricsEnabled(true);\n          yield _this32._setPasscodeEnabled(false);\n          break;\n\n        case AuthMode.PasscodeOnly:\n          yield _this32._setPasscodeEnabled(true);\n          yield _this32._setBiometricsEnabled(false);\n          break;\n\n        case AuthMode.BiometricAndPasscode:\n          yield _this32._setPasscodeEnabled(true);\n          yield _this32._setBiometricsEnabled(true);\n          break;\n\n        case AuthMode.BiometricOrPasscode:\n          try {\n            yield _this32._setBiometricsEnabled(true);\n            yield _this32._setPasscodeEnabled(false);\n          } catch (error) {\n            yield _this32._setPasscodeEnabled(true);\n          }\n\n          break;\n\n        case AuthMode.InMemoryOnly:\n          yield _this32._setPasscodeEnabled(false);\n          yield _this32._setBiometricsEnabled(false);\n          yield _this32.vault.setSecureStorageModeEnabled(false);\n          break;\n\n        case AuthMode.SecureStorage:\n          // Note: Setting this mode automatically disables the other modes in native code.\n          yield _this32.vault.setSecureStorageModeEnabled(true);\n          break;\n\n        default:\n          // eslint-disable-next-line no-throw-literal\n          throw {\n            code: VaultErrorCodes.InvalidAuthMode,\n            message: 'Invalid AuthMode'\n          };\n      }\n    })();\n  }\n\n  _trySetAuthMode(authMode) {\n    var _this33 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        yield _this33._setAuthMode(authMode);\n      } catch (error) {\n        if (error.code !== VaultErrorCodes.BiometricsNotEnabled && error.code !== VaultErrorCodes.SecurityNotAvailable) {\n          throw error;\n        }\n      }\n    })();\n  }\n\n  setAuthMode(authMode) {\n    var _this34 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this34.ready();\n      return _this34._setAuthMode(authMode);\n    })();\n  }\n\n  getAuthMode() {\n    var _this35 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this35.ready();\n      _this35._config = yield _this35.vault.getConfig(); // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n      return _this35.config.authMode;\n    })();\n  }\n\n}\n\nclass MigratorVault extends IonicIdentityVaultUser {\n  /** @ignore */\n  constructor(options, onPasscodeRequest, descriptor) {\n    super({\n      ready: () => Promise.resolve(true)\n    }, options, descriptor);\n\n    if (onPasscodeRequest) {\n      this.onPasscodeRequest = onPasscodeRequest;\n    }\n  }\n\n  static getInstance(options, onPasscodeRequest, descriptor) {\n    if (!MigratorVault.instance) {\n      MigratorVault.instance = new MigratorVault(options, onPasscodeRequest, descriptor);\n    }\n\n    return MigratorVault.instance;\n  }\n\n}\n\nMigratorVault.instance = undefined;\n\nclass VaultMigrator {\n  /**\n   *\n   * @usage\n   * ```typescript\n   * const legacyVaultConfig = {\n   *  unlockOnAccess: true,\n   *  hideScreenOnBackground: true,\n   *  lockAfter: 5000,\n   *  // and more ....\n   * }\n   * const migrator = new VaultMigrator(legacyVaultConfig, customPasscodePrompt);\n   * ```\n   * @param options The legacy vault configuration options\n   * @param onPasscodeRequest An optional callback function that will be called when the vault attempts to request a passcode. The function returns a promise with a boolean that indicates if the passcode is being setup for the first time for the vault or not.\n   * @param descriptor An optional interface that describes the legacy vault.\n   */\n  constructor(options, onPasscodeRequest, descriptor) {\n    this.migratorSession = new MigratorVault(options, onPasscodeRequest, descriptor);\n  }\n  /**\n   * Exports the data of the legacy vault in its entirety.\n   *\n   * @usage\n   * ```typescript\n   * const data = await migrator.exportVault();\n   * console.log(\"@@VAULT DATA: \", JSON.stringify(data));\n   * ```\n   * @returns\n   */\n\n\n  exportVault() {\n    var _this36 = this;\n\n    return _asyncToGenerator(function* () {\n      if (!(yield _this36.migratorSession.hasStoredSession())) {\n        throw Error('no data in legacy vault');\n      }\n\n      yield _this36.migratorSession.unlock();\n      const vault = yield _this36.migratorSession.getVault();\n      const keys = yield vault.getKeys();\n      const vaultData = {};\n\n      for (const key of keys) {\n        vaultData[key] = yield vault.getValue(key);\n      }\n\n      return vaultData;\n    })();\n  }\n  /**\n   * Clears out the legacy vault and removes it from the system.  Be sure to run {@link VaultMigrator.exportVault} before calling this method.\n   *\n   * @usage\n   * ```typescript\n   * const data = await migrator.exportVault();\n   * await importVault(data);\n   * await migrator.clear();\n   * ```\n   */\n\n\n  clear() {\n    var _this37 = this;\n\n    return _asyncToGenerator(function* () {\n      const vault = yield _this37.migratorSession.getVault();\n      return vault.clear();\n    })();\n  }\n\n}\n\nexport { AndroidBiometricCryptoPreference, AuthMode, BiometricPermissionState, BiometricSecurityStrength, BrowserVault, Device, DeviceErrorCodes, DeviceSecurityType, SupportedBiometricType, Vault, VaultErrorCodes, VaultMigrator, VaultType }; //# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"module"}