{"ast":null,"code":"import _asyncToGenerator from \"/Users/vijay.a/Documents/GitHub/MYVOYAGE/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as eventC from '@shared-lib/services/event-tracker/constants/event-tracking.json';\nimport { PreferenceSelectionPage } from '@shared-lib/modules/preferences-selection/preferences-selection.page';\nimport { firstValueFrom } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@shared-lib/services/pushNotifications/pushNotifications.service\";\nimport * as i2 from \"@shared-lib/services/event-tracker/event-tracking.service\";\nimport * as i3 from \"@shared-lib/services/qualtrics/qualtrics.service\";\nimport * as i4 from \"@shared-lib/services/account/account.service\";\nimport * as i5 from \"../google-Analytics/google.analytics.service\";\nimport * as i6 from \"../notification-setting/notification-setting.service\";\nimport * as i7 from \"@ionic/angular\";\nimport * as i8 from \"../access/access.service\";\nimport * as i9 from \"../utility/utility.service\";\nimport * as i10 from \"../modal-presentation/modal-presentation.service\";\nexport let HomeService = /*#__PURE__*/(() => {\n  class HomeService {\n    constructor(pushNotificationsService, eventTrackingService, qualtricsService, accountService, googleAnalyticsService, settingsService, modalController, accessService, utilityService, modalPresentationService) {\n      this.pushNotificationsService = pushNotificationsService;\n      this.eventTrackingService = eventTrackingService;\n      this.qualtricsService = qualtricsService;\n      this.accountService = accountService;\n      this.googleAnalyticsService = googleAnalyticsService;\n      this.settingsService = settingsService;\n      this.modalController = modalController;\n      this.accessService = accessService;\n      this.utilityService = utilityService;\n      this.modalPresentationService = modalPresentationService;\n      this.eventContent = eventC;\n      this.contactKeySet = false;\n      this.stayUpToDateSeen = false;\n    }\n\n    trackHomeEvent() {\n      this.eventTrackingService.eventTracking({\n        eventName: this.eventContent.eventTrackingLogin.eventName\n      });\n    }\n\n    setSFMCContactKey() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        if (!_this.contactKeySet) {\n          _this.contactKeySet = true;\n          const subscriberKeyInfo = yield _this.eventTrackingService.getSubscriberKey();\n\n          _this.pushNotificationsService.setContactKey(subscriberKeyInfo.subscriberKey);\n        }\n      })();\n    }\n\n    setQualtricsProps() {\n      this.accountService.getParticipant().subscribe(data => {\n        this.qualtricsService.setUserProperties(data);\n      });\n    }\n\n    getPartyId() {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        const result = yield _this2.googleAnalyticsService.getQualtricsUser();\n        return result?.partyId;\n      })();\n    }\n\n    getEmail() {\n      var _this3 = this;\n\n      return _asyncToGenerator(function* () {\n        const result = yield firstValueFrom(_this3.settingsService.getNotificationSettings());\n        return result?.primaryEmail?.email;\n      })();\n    }\n\n    initializeAppForUser() {\n      this.setSFMCContactKey();\n      this.setQualtricsProps();\n      this.trackHomeEvent();\n    }\n\n    openPreferenceSettingModal() {\n      var _this4 = this;\n\n      return _asyncToGenerator(function* () {\n        const myvoyageAccessResult = yield _this4.accessService.checkMyvoyageAccess();\n\n        if (myvoyageAccessResult && myvoyageAccessResult.enableMyVoyage === 'Y' && !_this4.getStayUpToDateSeen()) {\n          _this4.setStayUpToDateSeen(true);\n\n          const lastPreferenceValues = yield _this4.accessService.checkLastPreferenceUpdated();\n\n          if (myvoyageAccessResult.firstTimeLogin && myvoyageAccessResult.firstTimeLoginWeb || lastPreferenceValues.lastPreferenceResponse && !('insightsNotificationPrefs' in lastPreferenceValues) && !('highPrioitytNotificationPrefs' in lastPreferenceValues) && !('accountAlertPrefs' in lastPreferenceValues)) {\n            const preferenceClass = _this4.utilityService.getIsWeb() ? 'modal-scroll-fullscreen' : 'modal-fullscreen';\n            const modal = yield _this4.modalController.create({\n              component: PreferenceSelectionPage,\n              componentProps: {\n                preferenceObject: lastPreferenceValues,\n                loginObject: myvoyageAccessResult\n              },\n              cssClass: preferenceClass\n            });\n\n            _this4.modalPresentationService.present(modal);\n          }\n        }\n      })();\n    }\n\n    setStayUpToDateSeen(seen) {\n      this.stayUpToDateSeen = seen;\n      localStorage.setItem('stayUpToDateSeen', JSON.stringify(seen));\n    }\n\n    getStayUpToDateSeen() {\n      if (this.stayUpToDateSeen === undefined) {\n        this.stayUpToDateSeen = JSON.parse(localStorage.getItem('stayUpToDateSeen') || 'false');\n      }\n\n      return this.stayUpToDateSeen;\n    }\n\n  }\n\n  HomeService.ɵfac = function HomeService_Factory(t) {\n    return new (t || HomeService)(i0.ɵɵinject(i1.PushNotificationsService), i0.ɵɵinject(i2.EventTrackingService), i0.ɵɵinject(i3.QualtricsService), i0.ɵɵinject(i4.AccountService), i0.ɵɵinject(i5.GoogleAnalyticsService), i0.ɵɵinject(i6.NotificationsSettingService), i0.ɵɵinject(i7.ModalController), i0.ɵɵinject(i8.AccessService), i0.ɵɵinject(i9.SharedUtilityService), i0.ɵɵinject(i10.ModalPresentationService));\n  };\n\n  HomeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HomeService,\n    factory: HomeService.ɵfac,\n    providedIn: 'root'\n  });\n  return HomeService;\n})();","map":null,"metadata":{},"sourceType":"module"}