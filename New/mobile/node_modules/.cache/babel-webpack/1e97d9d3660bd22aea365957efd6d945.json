{"ast":null,"code":"define(['../OMCalculatorRequest', '../OMCalculatorResponse', '../ObjFactory', '../OMObjFactory', '../OMErMatchData', '../OMStandardErMatchData', '../AccountTypes', '../IncomeTypes', '../IRSConstants', '../IncomeData', './DateUtilities', '../ReplacementIncome'], function (OMCalculatorRequest, OMCalculatorResponse, ObjFactory, OMObjFactory, OMErMatchData, OMStandardErMatchData, AccountTypes, IncomeTypes, IRSConstants, IncomeData, DateUtilities, ReplacementIncome) {\n  var ResponseSerializer = function () {};\n\n  ResponseSerializer.prototype.serialize = function (response) {\n    var request;\n    var plans;\n    var paycheckNum; // var acctInstance;\n    // var incomeInstance;\n\n    var sourceIndex = 0;\n    var appData;\n    appData = response.orangeData;\n    request = OMObjFactory.getOMCalculatorRequestInstance();\n    plans = appData.participantDefinedContributionAccounts; // payFrequency = appData.participantData.payrollFrequency;\n\n    paycheckNum = plans[0].planInfo.payrollFrequency; // stupid IE...\n\n    var ieDob = appData.participantData.dob;\n    var yyyy = ieDob.slice(0, 4);\n    var mm = parseInt(ieDob.slice(5, 7), 10) - 1;\n    var dd = ieDob.slice(8, 10); //  Get a CommonData instance\n\n    var cd = OMObjFactory.getOMCommonDataInstance(); //  Parse user's PersonalData into the CommonData instance...\n\n    cd.setReferenceDate(new Date());\n    cd.setDateOfBirth(new Date(yyyy, mm, dd));\n    cd.setAnnualSalary(appData.participantData.currentAnnualSalary);\n    cd.setRateOfIncrease(appData.participantData.annualSalaryIncrementRate);\n    cd.setRetireAge(appData.participantData.retirementAge);\n    cd.setRateOfReturn(appData.participantData.investmentRateOfReturn);\n    cd.setReplacementRatio(appData.participantData.incomeReplacementRatio);\n    cd.setRateOfInflation(appData.participantData.inflationRate);\n    cd.setSSIndicator(appData.participantData.includeSocialSecurity);\n    cd.setSSBenefitAge(appData.participantData.retirementAge);\n    cd.setRateOfRothBump(appData.participantData.rothBumpRate);\n    cd.setReplacementIncomeType(ReplacementIncome.getReplacementIncomeCalcType(appData.participantData.replacementIncomeCalcType));\n    request.setCommonData(cd); //  Create AccountData object for the participant's Account Balance\n\n    if (appData.participantData.currentDcBalance) {\n      var dcAcctInstance = OMObjFactory.getOMAccountDataInstance();\n      dcAcctInstance.setFrequency(paycheckNum);\n      dcAcctInstance.setType(AccountTypes.TYPE_AGGREGATE_BALANCE); //dcAcctInstance.setIRC(IRSConstants._401k);  // no longer needed; want this to be inspecific for aggregate balance\n\n      dcAcctInstance.setBalance(appData.participantData.currentDcBalance);\n      request.getAccountDataList().push(dcAcctInstance);\n    } //\tParse Pension data into CommonData instance\n\n\n    if (appData.pension && appData.pension.enabled) {\n      if (appData.pension.monthlyPension && appData.pension.monthlyPension > 0) {\n        var pensionInstance = OMObjFactory.getOMIncomeDataInstance();\n        pensionInstance.setType(IncomeTypes.PENSION);\n        pensionInstance.setMonthlyAmount(appData.pension.monthlyPension);\n        request.getIncomeDataList().push(pensionInstance);\n      }\n\n      if (appData.pension.annualPension && appData.pension.annualPension > 0) {\n        var pensionInstance = OMObjFactory.getOMIncomeDataInstance();\n        pensionInstance.setType(IncomeTypes.PENSION);\n        pensionInstance.setAnnualAmount(appData.pension.annualPension);\n        request.getIncomeDataList().push(pensionInstance);\n      }\n\n      if (appData.pension.lumpSumPension && appData.pension.lumpSumPension > 0) {\n        var acctInstance = OMObjFactory.getOMAccountDataInstance();\n        acctInstance.setFrequency(1);\n        acctInstance.setType(AccountTypes.TYPE_PENSION_LUMP_SUM);\n        acctInstance.setBalance(appData.pension.lumpSumPension);\n        request.getAccountDataList().push(acctInstance);\n      } //This is unique and unlike the other account type contributions: TYPE_DB_MANDATORY_EE does not accumulate; use is isolated\n      // to deferral and paycheck aspects.\n\n\n      if (appData.pension.dbMandatoryContrib && appData.pension.dbMandatoryContrib > 0.0) {\n        var acctInstance = OMObjFactory.getOMAccountDataInstance();\n        acctInstance.setType(AccountTypes.TYPE_DB_MANDATORY_EE);\n        acctInstance.setFrequency(paycheckNum);\n        acctInstance.setContrib(AccountTypes.CONTRIB_RATE, appData.pension.dbMandatoryContrib);\n        request.getAccountDataList().push(acctInstance);\n      }\n    } //  Parse OtherAssets into CommonData instances\n\n\n    if (appData.otherAssets.monthlyIncome && appData.otherAssets.monthlyIncome > 0) {\n      var assetsInstance = OMObjFactory.getOMIncomeDataInstance();\n      assetsInstance.setType(IncomeTypes.OTHER);\n      assetsInstance.setMonthlyAmount(appData.otherAssets.monthlyIncome);\n      request.getIncomeDataList().push(assetsInstance);\n    } //  Parse SS Benefits into an Income Data instance\n    // Always adding the Social to our Response, UI determins whether to display it\n\n\n    incomeInstance = OMObjFactory.getOMIncomeDataInstance();\n    incomeInstance.setType(IncomeTypes.SOCIALSECURITY);\n    incomeInstance.setMonthlyAmount(appData.ssBenefits[Math.max(appData.participantData.retirementAge, 62)]);\n    request.getIncomeDataList().push(incomeInstance);\n\n    if (appData.otherAssets.futureBalance && appData.otherAssets.futureBalance > 0) {\n      var futureBalInstance = OMObjFactory.getOMAccountDataInstance();\n      futureBalInstance.setType(AccountTypes.TYPE_NOGROWTH);\n      futureBalInstance.setBalance(appData.otherAssets.futureBalance);\n      request.getAccountDataList().push(futureBalInstance);\n    }\n\n    if (appData.otherAssets.cashBalance) {\n      if (appData.otherAssets.cashBalance.annualAdditions > 0 || appData.otherAssets.cashBalance.currentBalance > 0) {\n        var cashBalInstance = OMObjFactory.getOMAccountDataInstance();\n        cashBalInstance.setFrequency(1);\n        cashBalInstance.setType(AccountTypes.TYPE_NOINCREASE);\n\n        if (appData.otherAssets.cashBalance.currentBalance > 0) {\n          cashBalInstance.setBalance(appData.otherAssets.cashBalance.currentBalance);\n        }\n\n        if (appData.otherAssets.cashBalance.annualAdditions > 0) {\n          cashBalInstance.setContrib(AccountTypes.CONTRIB_MODAL, appData.otherAssets.cashBalance.annualAdditions);\n        }\n\n        request.getAccountDataList().push(cashBalInstance);\n      }\n    }\n\n    if (appData.voyaOtherAccounts !== null && appData.voyaOtherAccounts !== undefined && appData.voyaOtherAccounts.length > 0) {\n      var balTotal = 0.0;\n      var mthTotal = 0.0;\n\n      for (var k = 0; k < appData.voyaOtherAccounts.length; k++) {\n        var voa = appData.voyaOtherAccounts[k];\n\n        if (voa.accountType === 'BAL' && voa.displayFlag === 'Y' && voa.accountBalance > 0.0) {\n          balTotal += voa.accountBalance;\n        } else if (voa.accountType === 'MTH' && voa.displayFlag === 'Y' && voa.accountBalance > 0.0) {\n          mthTotal += voa.accountBalance;\n        }\n      }\n\n      if (balTotal > 0.0) {\n        var cashBalInstance2 = OMObjFactory.getOMAccountDataInstance();\n        cashBalInstance2.setFrequency(1);\n        cashBalInstance2.setType(AccountTypes.TYPE_NOINCREASE);\n        cashBalInstance2.setBalance(balTotal);\n        request.getAccountDataList().push(cashBalInstance2);\n      }\n\n      if (mthTotal > 0.0) {\n        var assetsInstance2 = OMObjFactory.getOMIncomeDataInstance();\n        assetsInstance2.setType(IncomeTypes.OTHER);\n        assetsInstance2.setMonthlyAmount(mthTotal);\n        request.getIncomeDataList().push(assetsInstance2);\n      }\n    } //\tLoop through pptDCAccount object\n\n\n    for (var i = 0; i < plans.length; i++) {\n      //\t7.1) Setup vars\n      var plan = plans[i];\n      var sources = plans[i].planInfo.sources;\n      var planIndex = i;\n      var ermd = null;\n      var rContribType = plan.contributionData.regularContributionUnit;\n      var cContribType = plan.contributionData.catchupContributionUnit;\n      var crcAllowed = plan.planInfo.crcAllowed;\n      var ermdType = plan.matchData.erMatch.matchType.toUpperCase();\n      var payFrequency = plan.planInfo.payrollFrequency; //  7.2) Create ERMatchData if it exists\n\n      /*if(ermdType !== \"NONE\"){\n        ermd = OMObjFactory.getErMatchDataInstance( OMErMatchData[plan.matchData.erMatch.matchType.toUpperCase()], \"\" ) ;      //  OMErMatchData\n        ermd.setID( planIndex );\n        ermd.setTier1Range( plan.matchData.erMatch.range1) ;\n        ermd.setTier2Range( plan.matchData.erMatch.range2) ;\n        ermd.setTier1Match( plan.matchData.erMatch.percent1 ) ;\n        ermd.setTier2Match( plan.matchData.erMatch.percent2 ) ;\n        ermd.includeInCalculation(plan.matchData.includeErMatch);\n        ermd.setAnnualMax(plan.matchData.erMatch.maxErAnnualMatch);\n      }*/\n      //  Awaiting discussion with Walt/Manish/Sundet\n\n      if (ermdType !== \"NONE\") {\n        ermd = OMObjFactory.getErMatchDataInstance(OMErMatchData[plan.matchData.erMatch.matchType.toUpperCase()], \"\"); //  OMErMatchData\n\n        ermd.includeInCalculation(plan.matchData.includeErMatch);\n        ermd.setID(planIndex);\n        ermd.setTier1Range(plan.matchData.erMatch.range1);\n        ermd.setTier2Range(plan.matchData.erMatch.range2);\n        ermd.setTier1Match(plan.matchData.erMatch.percent1);\n        ermd.setTier2Match(plan.matchData.erMatch.percent2);\n\n        if (ermdType === \"DATETIER\") {\n          ermd.setTier1Date(plan.matchData.erMatch.tierDate1); // Should come from JSON in YYYYMMDD format\n\n          ermd.setTier2Date(plan.matchData.erMatch.tierDate2); // Should come from JSON in YYYYMMDD format\n        } else {\n          ermd.setAnnualMax(plan.matchData.erMatch.maxErAnnualMatch);\n          ermd.setTierAnnualMax(plan.matchData.erMatch.tierForAnnualMax - 1); // note decrement of JSON originating index, in order to have zero as first tier counter\n        }\n      } //  Need to handle DateTier scenario\n      //  7.3) Create one Account Data object for each Source\n\n\n      for (var j = 0; j < sources.length; j++) {\n        var source = sources[j];\n        var sourceType = source.type;\n        var isCatchup = sourceType.indexOf(\"CATCHUP\") > -1 ? true : false;\n        var contributionType = isCatchup ? cContribType : rContribType;\n        var accountContributionType = contributionType == \"PERCENT\" ? \"RATE\" : \"MODAL\";\n        var acctInstance = OMObjFactory.getOMAccountDataInstance();\n        if (source.name) acctInstance.setName(source.name);\n        if (source.id) acctInstance.setId(source.id);\n        acctInstance.setIndex(sourceIndex++);\n        acctInstance.setType(AccountTypes.matchType(sourceType));\n        acctInstance.setIRC(IRSConstants.getIRCconst(source.ircCode));\n        if (plan.planInfo.planName) acctInstance.setPlanName(plan.planInfo.planName);\n        if (plan.planInfo.planId) acctInstance.setPlanId(plan.planInfo.planId);\n        acctInstance.setPlanIndex(planIndex);\n        acctInstance.setContrib(AccountTypes[\"CONTRIB_\" + accountContributionType], source.contribution);\n        if (payFrequency) acctInstance.setFrequency(payFrequency); //  Set ER Match Data to the AccountData object...\n\n        if (ermd) {\n          if (sourceType == \"PRETAX\" || sourceType == \"ROTH\") {\n            acctInstance.setOmErMatchData(ermd);\n          }\n\n          if ((sourceType == \"AFTER_TAX\" || sourceType == \"AFTERTAX\") && plan.matchData.erMatch.matchTotalContrib) {\n            acctInstance.setOmErMatchData(ermd);\n          }\n        } //  Set the MinMax Rate Limits\n        //  create this object every time to grab the correct min and max limits for modal just in case.\n\n\n        if (source.percentLimits && source.percentLimits.max && source.percentLimits.max > 0) {\n          limit = ObjFactory.getMinMaxLimitInstance();\n          limit.setRate(source.percentLimits.min, source.percentLimits.max);\n          limit.setPlanIndex(planIndex);\n          acctInstance.setMinMaxLimit(limit);\n        } //  Set the MinMax Modal Limits\n\n\n        if (accountContributionType == \"MODAL\" && source.limits && source.limits.max && source.limits.max > 0) {\n          limit = ObjFactory.getMinMaxLimitInstance(); //Grab the correct min and max values from the percent based minmaxlimit object if non-crc\n\n          if (!crcAllowed) {\n            var maxLim = limit.getModalMax(payFrequency, appData.participantData.currentAnnualSalary);\n            var minLim = limit.getModalMin(payFrequency, appData.participantData.currentAnnualSalary);\n            limit.setModal(minLim, maxLim, payFrequency);\n          } else {\n            limit.setModal(source.limits.min, source.limits.max, payFrequency);\n          }\n\n          limit.setPlanIndex(planIndex);\n          acctInstance.setMinMaxLimit(limit);\n        } //  Add AccountData instance to the request\n\n\n        request.getAccountDataList().push(acctInstance);\n      } //  7.4) Create AccountData object if participant has an Annual ER Contribution set\n\n\n      if (plan.matchData.annualErContribution) {\n        var erContribInstance = OMObjFactory.getOMAccountDataInstance();\n        erContribInstance.setContrib(AccountTypes.CONTRIB_ANNUAL, plan.matchData.annualErContribution);\n        erContribInstance.setPlanIndex(planIndex);\n        erContribInstance.setIndex(sourceIndex++);\n        request.getAccountDataList().push(erContribInstance);\n      } //  7.5) Create AccountData object if participant's EE ContributionRate is mandatory\n\n\n      if (plan.matchData.mandatoryEeContribution) {\n        var eeContribType = plan.matchData.mandatoryEeContribution.unit.toUpperCase() == \"PERCENT\" ? AccountTypes.CONTRIB_RATE : AccountTypes.CONTRIB_MODAL;\n        var eeContribInstance = OMObjFactory.getOMAccountDataInstance();\n        eeContribInstance.setFrequency(payFrequency);\n        eeContribInstance.setContrib(eeContribType, plan.matchData.mandatoryEeContribution.value);\n        eeContribInstance.setPlanIndex(planIndex);\n        eeContribInstance.setIndex(sourceIndex++);\n        eeContribInstance.setType(AccountTypes.TYPE_MANDATORY_EE);\n\n        if (plan.planInfo.sources.length > 0) {\n          eeContribInstance.setIRC(IRSConstants.getIRCconst(plan.planInfo.sources[0].ircCode));\n        }\n\n        request.getAccountDataList().push(eeContribInstance);\n      } //  7.6) Create AccountData object if participant's ER ContributionRate is mandatory\n\n\n      if (plan.matchData.mandatoryErContribution) {\n        var erContribType = plan.matchData.mandatoryErContribution.unit.toUpperCase() == \"PERCENT\" ? AccountTypes.CONTRIB_RATE : AccountTypes.CONTRIB_MODAL;\n        var mandatoryContribInstance = OMObjFactory.getOMAccountDataInstance();\n        mandatoryContribInstance.setFrequency(payFrequency);\n        mandatoryContribInstance.setContrib(erContribType, plan.matchData.mandatoryErContribution.value);\n        mandatoryContribInstance.setPlanIndex(planIndex);\n        mandatoryContribInstance.setIndex(sourceIndex++);\n        mandatoryContribInstance.setType(AccountTypes.TYPE_MANDATORY_ER);\n\n        if (plan.planInfo.sources.length > 0) {\n          mandatoryContribInstance.setIRC(IRSConstants.getIRCconst(plan.planInfo.sources[0].ircCode));\n        }\n\n        request.getAccountDataList().push(mandatoryContribInstance);\n      } //  7.7) Create Min/Max Rate Limit object for\n      // if(plan.planInfo.totalContributionAmount){\n      //  var rateLimit = OMObjFactory.getMinMaxLimitInstance();\n      //    rateLimit.setPlanIndex(planIndex);\n      //    rateLimit.setModal( plan.planInfo.totalContributionAmount.min,\n      //              plan.planInfo.totalContributionAmount.max,\n      //              payFrequency);\n      //  cd.getMinMaxLimitList().push( rateLimit ) ;\n      // }\n      // // 7.8) Create Min/Max Dollar Limit object for\n      // if(plan.planInfo.totalContributionPercent){\n      //  var dollarLimit = OMObjFactory.getMinMaxLimitInstance();\n      //    dollarLimit.setPlanIndex(planIndex);\n      //    dollarLimit.setRate(  plan.planInfo.totalContributionPercent.min,\n      //                plan.planInfo.totalContributionPercent.max );\n      //  cd.getMinMaxLimitList().push( dollarLimit );\n      // }\n      //  7.9) Create AccountData object for Employer ProfitSharing (As a Dollar amount)\n\n\n      if (plan.matchData.profitSharingContributionAmount) {\n        var profitSharingDollarInstance = OMObjFactory.getOMAccountDataInstance();\n        profitSharingDollarInstance.setFrequency(1);\n        profitSharingDollarInstance.setContrib(AccountTypes.CONTRIB_MODAL, plan.matchData.profitSharingContributionAmount.value);\n        profitSharingDollarInstance.setPlanIndex(planIndex);\n        profitSharingDollarInstance.setIndex(sourceIndex++);\n        profitSharingDollarInstance.setType(AccountTypes.TYPE_RECURRING_ER);\n\n        if (plan.planInfo.sources.length > 0) {\n          profitSharingDollarInstance.setIRC(IRSConstants.getIRCconst(plan.planInfo.sources[0].ircCode));\n        }\n\n        request.getAccountDataList().push(profitSharingDollarInstance);\n      } //  7.10) Create AccountData object for Employer ProfitSharing (As a Rate amount)\n\n\n      if (plan.matchData.profitSharingContributionRate) {\n        var profitSharingRateInstance = OMObjFactory.getOMAccountDataInstance();\n        profitSharingRateInstance.setFrequency(1);\n        profitSharingRateInstance.setContrib(AccountTypes.CONTRIB_RATE, plan.matchData.profitSharingContributionRate.value);\n        profitSharingRateInstance.setPlanIndex(planIndex);\n        profitSharingRateInstance.setIndex(sourceIndex++);\n        profitSharingRateInstance.setType(AccountTypes.TYPE_RECURRING_ER);\n\n        if (plan.planInfo.sources.length > 0) {\n          profitSharingRateInstance.setIRC(IRSConstants.getIRCconst(plan.planInfo.sources[0].ircCode));\n        }\n\n        request.getAccountDataList().push(profitSharingRateInstance);\n      } // Begin - New Loan modeling\n      // This below logic is moved to OMCalcWrapper.setNewLoanModelData()\n\n      /*if (plan.loanData && plan.loanData.newLoanModelData) {\n        var lmd = plan.loanData.newLoanModelData;\n        if (lmd.loanPayment > 0.0 || lmd.loanAmount > 0.0) {\n          var loan = OMObjFactory.getLoanInstance() ;\n          if (lmd.loanAmount > 0.0) {\n            loan.initPaymentInstance(lmd.loanOrientation, lmd.loanInterestRate, lmd.loanPayFrequency, lmd.loanTerm, lmd.loanAmount);\n          } else {\n            loan.initLoanAmountInstance(lmd.loanOrientation, lmd.loanInterestRate, lmd.loanPayFrequency, lmd.loanTerm, lmd.loanPayment);\n          }\n          lmd.loanInitialFee > 0.0 ? loan.setInitialFee(lmd.loanInitialFee) : loan.setInitialFee(0.0);\n          lmd.loanAnnualFee > 0.0 ? loan.setAnnualFee(lmd.loanAnnualFee) : loan.setAnnualFee(0.0);\n          lmd.loanAer ? loan.setInterestTypeToAER() : loan.setInterestTypeToSimple();\n          (lmd.loanUpfrontInterest && lmd.loanDaysUpfrontInterest > 0) ? loan.setDaysOfUpFrontInterest(lmd.loanDaysUpfrontInterest) : loan.setDaysOfUpFrontInterest(0);\n           var loanInstance = OMObjFactory.getOMAccountDataInstance();\n          loanInstance.setType(AccountTypes.TYPE_NEWLOAN);\n          loanInstance.setBalance(-loan.getLoanAmount());\n          loanInstance.setFrequency(loan.getFrequency());\n          loanInstance.setLoan(loan);\n           request.getAccountDataList().push( loanInstance ) ;\n        }\n      }*/\n      // End - New Loan modeling\n      // Begin - Outstanding (Existing) Loan \n\n\n      if (plan.loanData && plan.loanData.outstandingLoan) {\n        var oLData = plan.loanData.outstandingLoan;\n\n        if (oLData.data.outstandingLoanDtls) {\n          setExistingActiveLoansToRequest(request, oLData);\n        }\n      } // End - Outstanding (Existing) Loan\n\n    }\n\n    return request;\n  };\n\n  ResponseSerializer.prototype.serializeFE = function (response) {\n    var appData = response.feData;\n    var request = OMObjFactory.getOMCalculatorRequestInstance();\n    var cd = OMObjFactory.getOMCommonDataInstance(); //var acctInstance = null ;\n    // this is much the same as non-FE\n\n    cd.setReferenceDate(new Date());\n    var ieDob = appData.participantData.birthDates.CLIENT;\n    var yyyy = ieDob.slice(0, 4);\n    var mm = parseInt(ieDob.slice(5, 7), 10) - 1;\n    var dd = ieDob.slice(8, 10);\n    cd.setDateOfBirth(new Date(yyyy, mm, dd)); // cd.setAnnualSalary( params.salary ) ;\n    //cd.setRateOfIncrease( 10 /*params.roi*/ ) ; // salary increase\n\n    cd.setRetireAge(appData.participantData.selectedRetirementAge);\n\n    if (appData.investmentRateOfReturn !== undefined) {\n      cd.setRateOfReturn(appData.investmentRateOfReturn);\n    } else {\n      cd.setRateOfReturn(0.06);\n    } // cd.setReplacementRatio( params.replace ) ;\n\n\n    if (appData.inflationRate !== undefined) {\n      cd.setRateOfInflation(appData.inflationRate);\n    } else {\n      cd.setRateOfInflation(0.03);\n    }\n\n    request.setCommonData(cd); //  Loop through all plans object\n\n    for (var i = 0; i < appData.dcPlanData.length; i++) {\n      var plan = appData.dcPlanData[i]; // Begin - Outstanding (Existing) Loan \n\n      if (plan.loanData && plan.loanData.outstandingLoan) {\n        var oLData = plan.loanData.outstandingLoan;\n\n        if (oLData.data.outstandingLoanDtls) {\n          setExistingActiveLoansToRequest(request, oLData);\n        }\n      } // End - Outstanding (Existing) Loan\n\n    }\n\n    return request;\n  };\n  /* Use this common function to read the existing loans from both FE & NonFE.  And set to REQUEST. */\n\n\n  setExistingActiveLoansToRequest = function (request, oLData) {\n    for (var k = 0; k < oLData.data.outstandingLoanDtls.length; k++) {\n      var oLDtlData = oLData.data.outstandingLoanDtls[k];\n\n      if (oLDtlData.loanStatus == 'A' && oLDtlData.balance > 0.0) {\n        // Active Loan & remaining loan balance > 0.0\n        var loan = OMObjFactory.getLoanInstance();\n        var daysDiff = DateUtilities.getDateDiffInDays(new Date(), DateUtilities.getDateFromString(oLDtlData.payoffDate));\n        loan.initPaymentInstanceForExistingLoan(ResponseSerializer.Loan.ORIENTATION_MONTHLY, oLDtlData.interestRate / 100, oLDtlData.loanPaymentFrequency, oLDtlData.balance, daysDiff); // oLDtlData.existing_loan_aer ? loan.setInterestTypeToAER() : loan.setInterestTypeToSimple(); // Not required\n\n        var oustandLoanInstance = OMObjFactory.getOMAccountDataInstance();\n        oustandLoanInstance.setType(AccountTypes.TYPE_EXISTINGLOAN);\n        oustandLoanInstance.setFrequency(loan.getFrequency());\n        oustandLoanInstance.setLoan(loan);\n        request.getAccountDataList().push(oustandLoanInstance);\n      }\n    }\n  };\n\n  ResponseSerializer.Loan = {};\n  ResponseSerializer.Loan.ORIENTATION_MONTHLY = 12; // Always Monthly for OrangeMoney Loan Module.\n\n  return ResponseSerializer;\n});","map":null,"metadata":{},"sourceType":"script"}