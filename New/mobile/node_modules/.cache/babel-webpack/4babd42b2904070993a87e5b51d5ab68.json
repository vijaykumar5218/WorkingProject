{"ast":null,"code":"import { ReplaySubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic/angular\";\nimport * as i2 from \"@angular/router\";\nexport let PlatformService = /*#__PURE__*/(() => {\n  class PlatformService {\n    constructor(platform, router) {\n      this.platform = platform;\n      this.router = router;\n      this.setCurrentPlatform();\n      this.isDesktopSubject = new ReplaySubject(1);\n      this.platformWidth();\n      this.platform.resize.subscribe(() => {\n        this.platformWidth();\n      });\n    }\n\n    platformWidth() {\n      this._deviceWidth = this.platform.width();\n\n      if (parseInt(this._deviceWidth) <= 920) {\n        this.isDesktopSubject.next(false);\n      } else {\n        this.isDesktopSubject.next(true);\n      }\n    }\n\n    isDesktop() {\n      return this.isDesktopSubject.asObservable();\n    }\n\n    get currentPlatform() {\n      return this._currentPlatform;\n    }\n\n    isNative() {\n      return this._currentPlatform === 'native';\n    }\n\n    isBrowser() {\n      return this._currentPlatform === 'browser';\n    }\n\n    navigateByUrl(path) {\n      this.router.navigateByUrl(path);\n    }\n\n    setCurrentPlatform() {\n      if ((this.platform.is('ios') || this.platform.is('android')) && !(this.platform.is('desktop') || this.platform.is('mobileweb'))) {\n        this._currentPlatform = 'native';\n      } else {\n        this._currentPlatform = 'browser';\n      }\n    }\n\n  }\n\n  PlatformService.ɵfac = function PlatformService_Factory(t) {\n    return new (t || PlatformService)(i0.ɵɵinject(i1.Platform), i0.ɵɵinject(i2.Router));\n  };\n\n  PlatformService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PlatformService,\n    factory: PlatformService.ɵfac,\n    providedIn: 'root'\n  });\n  return PlatformService;\n})();","map":null,"metadata":{},"sourceType":"module"}