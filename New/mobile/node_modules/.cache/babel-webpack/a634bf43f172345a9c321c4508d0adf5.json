{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { endPoints, tokenEndPoints } from './constants/endpoints';\nimport { BenefitsSelectionModalComponent } from '@shared-lib/components/benefits-selection/modal/modal.component';\nimport { from, ReplaySubject, Subject, BehaviorSubject } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport { CoveragesSortOrder } from './constants/sorting';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../base/base-factory-provider\";\nimport * as i2 from \"../utility/utility.service\";\nimport * as i3 from \"@ionic/angular\";\nexport let BenefitsService = /*#__PURE__*/(() => {\n  class BenefitsService {\n    constructor(baseService, utilityService, modalController) {\n      this.baseService = baseService;\n      this.utilityService = utilityService;\n      this.modalController = modalController;\n      this.endPoints = endPoints;\n      this.tokenEndPoints = tokenEndPoints;\n      this.benefitsModalSeen = false;\n      this.benefitEnrollmentSubject = new ReplaySubject(1);\n      this.selectedTab$ = new Subject();\n      this.requestPayload = {\n        pageName: 'BELL',\n        actionPerformed: 'VISITED'\n      };\n      this.notificationStatus = new Subject();\n      this.filt = new BehaviorSubject([]);\n      this.sort = new BehaviorSubject('');\n      this.dateOption = new BehaviorSubject('thisYear');\n      this.storedFilterKey = [];\n      this.endPoints = this.utilityService.appendBaseUrlToEndpoints(endPoints);\n      this.tokenEndPoints = this.utilityService.appendBaseUrlToEndpoints(tokenEndPoints, this.utilityService.getEnvironment().tokenBaseUrl);\n    }\n\n    changeFilt(data) {\n      this.filt.next(data);\n    }\n\n    changeSort(data) {\n      this.sort.next(data);\n    }\n\n    changeDateOptions(data) {\n      this.dateOption.next(data);\n    }\n\n    getSelectedTab$() {\n      return this.selectedTab$;\n    }\n\n    currentFilter() {\n      return this.filt.asObservable();\n    }\n\n    currentSort() {\n      return this.sort.asObservable();\n    }\n\n    currentDateOpt() {\n      return this.dateOption.asObservable();\n    }\n\n    getSectionValues() {\n      return this.baseService.get(this.endPoints.getSelectionValues);\n    }\n\n    publishSelectedTab(selectedTab) {\n      this.selectedTab$.next(selectedTab);\n    }\n\n    getBenefits() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const bens = yield this.baseService.get(this.endPoints.benefits);\n        return this.sortBenefits(bens);\n      });\n    }\n\n    sortBenefits(bens) {\n      if (bens.enrolled) {\n        bens.enrolled = this.sortCoverages(bens.enrolled);\n      }\n\n      if (bens.declined) {\n        bens.declined = this.sortCoverages(bens.declined);\n      }\n\n      if (bens.provided) {\n        bens.provided = this.sortCoverages(bens.provided);\n      }\n\n      return bens;\n    }\n\n    sortCoverages(coverages) {\n      return coverages.sort((a, b) => {\n        let aVal = CoveragesSortOrder[a.type];\n\n        if (aVal == undefined) {\n          aVal = Number.MAX_SAFE_INTEGER;\n        }\n\n        let bVal = CoveragesSortOrder[b.type];\n\n        if (bVal == undefined) {\n          bVal = Number.MAX_SAFE_INTEGER;\n        }\n\n        return aVal - bVal;\n      });\n    }\n\n    getNextYearBenefits() {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (!this.nextYearBenefits) {\n          const bens = yield this.baseService.get(this.endPoints.benefits + '?nextYearIfAvailable=true&getTotalDeduction=true');\n          this.nextYearBenefits = this.sortBenefits(bens);\n        }\n\n        return this.nextYearBenefits;\n      });\n    }\n\n    setBenefit(benefit) {\n      localStorage.setItem('selectedBenefit', JSON.stringify(benefit));\n      this.benefit = benefit;\n    }\n\n    setFiltSlcted(keyName) {\n      this.storedFilterKey = keyName;\n      localStorage.setItem('storedFilterKey', JSON.stringify(keyName));\n    }\n\n    getFiltSlcted() {\n      if (!this.storedFilterKey) {\n        this.storedFilterKey = JSON.parse(localStorage.getItem('storedFilterKey'));\n      }\n\n      return this.storedFilterKey;\n    }\n\n    getSelectedBenefit() {\n      if (!this.benefit) {\n        this.benefit = JSON.parse(localStorage.getItem('selectedBenefit'));\n      }\n\n      return this.benefit;\n    }\n\n    getBenefitContent() {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (!this.benefitsSummaryContent) {\n          const response = yield this.baseService.get(this.endPoints.benefitIcons);\n          this.benefitsSummaryContent = JSON.parse(response.BenefitsSummaryJSON);\n        }\n\n        return this.benefitsSummaryContent;\n      });\n    }\n\n    getNoBenefitContents() {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (!this.noBenefitContent) {\n          this.noBenefitContent = yield this.baseService.get(this.endPoints.noBenefitContent);\n        }\n\n        return this.noBenefitContent;\n      });\n    }\n\n    getNoHealthDataContent() {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (!this.nohealthUtilization) {\n          this.nohealthUtilization = yield this.baseService.get(this.endPoints.noHealthData);\n        }\n\n        return this.nohealthUtilization;\n      });\n    }\n\n    getBenefitsSelectionModalContent() {\n      return __awaiter(this, void 0, void 0, function* () {\n        yield this.setBenefitsSelectionContent();\n        return JSON.parse(this.benefitSelectionContent.BenefitsSelectionModalJSON);\n      });\n    }\n\n    getBenefitsSelectionHomeContent() {\n      return __awaiter(this, void 0, void 0, function* () {\n        yield this.setBenefitsSelectionContent();\n        return JSON.parse(this.benefitSelectionContent.BenefitsSelectionHomeJSON);\n      });\n    }\n\n    setBenefitsSelectionContent() {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (!this.benefitSelectionContent) {\n          this.benefitSelectionContent = yield this.baseService.get(this.endPoints.benefitModals);\n        }\n      });\n    }\n\n    openBenefitsSelectionModalIfEnabled() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const guidanceEnabled = yield this.getGuidanceEnabled();\n\n        if (guidanceEnabled.guidanceEnabled && !this.benefitsModalSeen) {\n          this.benefitsModalSeen = true;\n          const benefitsEnrollment$ = yield this.getBenefitsEnrollment();\n          benefitsEnrollment$.pipe(take(1)).subscribe(benefitsEnrollment => __awaiter(this, void 0, void 0, function* () {\n            if ((benefitsEnrollment === null || benefitsEnrollment === void 0 ? void 0 : benefitsEnrollment.enrollmentWindowEnabled) && (benefitsEnrollment === null || benefitsEnrollment === void 0 ? void 0 : benefitsEnrollment.status) != 'COMPLETED') {\n              this.utilityService.setDisplayBenefitsModal(true);\n              const modal = yield this.modalController.create({\n                component: BenefitsSelectionModalComponent,\n                cssClass: 'modal-fullscreen',\n                componentProps: {},\n                swipeToClose: false\n              });\n              return modal.present();\n            }\n          }));\n        }\n      });\n    }\n\n    resetBenefitsEnrollment() {\n      this.benefitEnrollment = undefined;\n    }\n\n    getBenefitsEnrollment() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const guidanceEnabled = yield this.getGuidanceEnabled();\n\n        if (guidanceEnabled.guidanceEnabled && !this.benefitEnrollment) {\n          this.benefitEnrollment = this.baseService.get(this.endPoints.benefitsEnrollment);\n        }\n\n        const benefitEnrollment = yield this.benefitEnrollment;\n        this.benefitEnrollmentSubject.next(benefitEnrollment);\n        return this.benefitEnrollmentSubject;\n      });\n    }\n\n    getDependentsData() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.benefit = JSON.parse(localStorage.getItem('selectedBenefit'));\n        return this.baseService.get(this.endPoints.benefits + '/' + this.benefit.id);\n      });\n    }\n\n    getCovExp() {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (!this.covexplanation) {\n          const response = yield this.baseService.get(this.endPoints.messages);\n          this.covexplanation = JSON.parse(response.CoverageExplanationsOOPDeductible);\n        }\n\n        return this.covexplanation;\n      });\n    }\n\n    setBenefitSummaryBackButton(link) {\n      this.benefitSummaryBackButton = link;\n      localStorage.setItem('benefitSummaryBackButton', link);\n    }\n\n    getBenefitSummaryBackButton() {\n      const localStorageLink = localStorage.getItem('benefitSummaryBackButton');\n      return localStorageLink && localStorageLink !== 'undefined' ? localStorageLink : this.benefitSummaryBackButton;\n    }\n\n    fetchSpending(healthDates) {\n      const payload = {\n        startDate: healthDates.startDate,\n        endDate: healthDates.endDate\n      };\n      return this.baseService.post(this.endPoints.spendingDetails, payload);\n    }\n\n    fetchHealthCheckContent(healthDates) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const payload = {\n          startDate: healthDates.startDate,\n          endDate: healthDates.endDate\n        };\n        const result = yield this.baseService.post(this.endPoints.annualHealthCheckup, payload);\n        return result[0];\n      });\n    }\n\n    getNotification() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.notificationContent = yield this.baseService.get(this.endPoints.notificationDetails);\n        return this.notificationContent;\n      });\n    }\n\n    getGuidanceEnabled() {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (!this.guidanceEnabled) {\n          this.guidanceEnabled = yield this.baseService.get(this.endPoints.guidanceEnabled);\n        }\n\n        return this.guidanceEnabled;\n      });\n    }\n\n    savePageVisit() {\n      return this.baseService.post(this.endPoints.savePageVisit, this.requestPayload);\n    }\n\n    getPageVisit() {\n      return this.baseService.post(this.endPoints.getPageVisit, this.requestPayload);\n    }\n\n    getBenefitEnrolledData(id) {\n      return from(this.getNextYearBenefits()).pipe(map(data => data.enrolled.filter(account => account.id === id)[0]));\n    }\n\n    openGuidelines() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.utilityService.setDisplayBenefitsModal(true);\n        const modal = yield this.modalController.create({\n          component: BenefitsSelectionModalComponent,\n          cssClass: 'modal-fullscreen',\n          componentProps: {\n            showBeforeStarting: true,\n            exitIconPath: 'assets/icon/exit.svg'\n          },\n          swipeToClose: false\n        });\n        return modal.present();\n      });\n    }\n\n  }\n\n  BenefitsService.ɵfac = function BenefitsService_Factory(t) {\n    return new (t || BenefitsService)(i0.ɵɵinject(i1.BaseService), i0.ɵɵinject(i2.SharedUtilityService), i0.ɵɵinject(i3.ModalController));\n  };\n\n  BenefitsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BenefitsService,\n    factory: BenefitsService.ɵfac,\n    providedIn: 'root'\n  });\n  return BenefitsService;\n})();","map":null,"metadata":{},"sourceType":"module"}