{"ast":null,"code":"import { Directive, Attribute, NgModule } from '@angular/core';\nimport { NgModel } from '@angular/forms';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/forms';\nlet CurrencyMaskDirective = /*#__PURE__*/(() => {\n  class CurrencyMaskDirective {\n    /**\n     * Construtor\n     * @param {NgModel} model\n     */\n    constructor(model, decimal, thousand) {\n      this.model = model;\n      /**\n       * Decimal separator (defaults to \",\")\n       */\n\n      this.decimal = ',';\n      /**\n       * Thousand separator (defaults to \".\")\n       */\n\n      this.thousand = '.';\n\n      if (decimal) {\n        this.decimal = decimal;\n      }\n\n      if (thousand) {\n        this.thousand = thousand;\n      }\n    }\n    /**\n     * Listener changeValue\n     * @param event\n     */\n\n\n    changeValue(event) {\n      let value = event.target.value;\n\n      if (value == '') {\n        return;\n      }\n\n      value = value + '';\n      value = parseInt(value.replace(/[\\D]+/g, ''));\n      value = value + '';\n      value = value.replace(/([0-9]{2})$/g, this.decimal + '$1');\n      var parts = value.toString().split(this.decimal);\n      parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, this.thousand);\n      value = parts.join(this.decimal);\n      console.log(value);\n      event.target.value = value;\n      this.model.update.emit(value);\n      return true;\n    }\n\n  }\n\n  CurrencyMaskDirective.ɵfac = function CurrencyMaskDirective_Factory(t) {\n    return new (t || CurrencyMaskDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgModel), ɵngcc0.ɵɵinjectAttribute('decimal'), ɵngcc0.ɵɵinjectAttribute('thousand'));\n  };\n\n  CurrencyMaskDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CurrencyMaskDirective,\n    selectors: [[\"\", \"currencyMask\", \"\"]],\n    hostBindings: function CurrencyMaskDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"keyup\", function CurrencyMaskDirective_keyup_HostBindingHandler($event) {\n          return ctx.changeValue($event);\n        })(\"ionChange\", function CurrencyMaskDirective_ionChange_HostBindingHandler($event) {\n          return ctx.changeValue($event);\n        });\n      }\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([NgModel])]\n  });\n  return CurrencyMaskDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet IonicCurrencyMaskModule = /*#__PURE__*/(() => {\n  class IonicCurrencyMaskModule {}\n\n  IonicCurrencyMaskModule.ɵfac = function IonicCurrencyMaskModule_Factory(t) {\n    return new (t || IonicCurrencyMaskModule)();\n  };\n\n  IonicCurrencyMaskModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: IonicCurrencyMaskModule\n  });\n  IonicCurrencyMaskModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[]]\n  });\n  return IonicCurrencyMaskModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(IonicCurrencyMaskModule, {\n    declarations: [CurrencyMaskDirective],\n    exports: [CurrencyMaskDirective]\n  });\n})();\n/*\n * Public API Surface of ionic-currency-mask\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CurrencyMaskDirective, IonicCurrencyMaskModule }; //# sourceMappingURL=thiagoprz-ionic-currency-mask.js.map","map":null,"metadata":{},"sourceType":"module"}