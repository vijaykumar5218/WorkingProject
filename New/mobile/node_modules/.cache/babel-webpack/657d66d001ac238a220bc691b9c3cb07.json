{"ast":null,"code":"import _asyncToGenerator from \"/Users/vijay.a/Documents/GitHub/MYVOYAGE/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { NavigationEnd } from '@angular/router';\nimport { FirebaseAnalytics } from '@capacitor-community/firebase-analytics';\nimport { endPoints } from '@shared-lib/services/qualtrics/constants/endpoints';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@shared-lib/services/base/base-factory-provider\";\nimport * as i3 from \"@shared-lib/services/utility/utility.service\";\nexport let GoogleAnalyticsService = /*#__PURE__*/(() => {\n  class GoogleAnalyticsService {\n    constructor(router, baseService, utilityService) {\n      this.router = router;\n      this.baseService = baseService;\n      this.utilityService = utilityService;\n      this.endPoints = endPoints;\n    }\n\n    getEventCategory(path) {\n      const nodes = [];\n      let innerText = '';\n      let isIONICElement = '';\n      path.forEach(el => {\n        const elementMatchArr = ['BUTTON', 'ION-BUTTON', 'ION-TOGGLE', 'IMG', 'A', 'NAV'];\n        const isElementMatch = elementMatchArr.find(element => element === el.nodeName);\n\n        if (isElementMatch) {\n          nodes.push(el.cloneNode(true));\n\n          if (!innerText && el.innerText) {\n            innerText = el.innerText;\n          }\n        }\n\n        if (!isIONICElement) {\n          isIONICElement = isElementMatch;\n        }\n      });\n\n      if (innerText && !nodes[0].innerText) {\n        nodes[0].text = innerText;\n      }\n\n      if (isIONICElement) {\n        return nodes;\n      } else {\n        return [];\n      }\n    }\n\n    getURL(url) {\n      const hostName = url.substring(0, url.indexOf('?'));\n      const hash = url.substring(url.indexOf('#'), url.length);\n      return hostName + hash;\n    }\n\n    getEventLabel(nodes) {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        let eventLabel = '';\n        let gaAction = '';\n        let gaCategory = '';\n        let gaLabel = '';\n        const node = nodes[0];\n        const props = ['gaAction', 'gaCategory', 'gaLabel', 'href', 'link', 'id', 'linkText', 'tabtext', 'innerText', 'text', 'name', 'altLabel', 'value', 'tileTitle', 'tileHref', 'currentTopic', 'data-index', 'aria-label'];\n\n        for (const prop of props) {\n          if (node[prop]) {\n            if (['linkText', 'innerText', 'text', 'tileTitle', 'tabtext'].includes(prop) && typeof node[prop] === 'string') {\n              eventLabel += yield _this.getEventLabelFromNode(nodes, node, prop);\n            } else if (['href', 'tileHref'].includes(prop) && node[prop].indexOf('?') !== -1) {\n              eventLabel += `<${prop}: ${_this.getURL(node[prop])}>`;\n            } else {\n              const gaOptions = yield _this.getGAOptions(prop, node);\n              gaAction = gaOptions[0];\n              gaCategory = gaOptions[1];\n              gaLabel = gaOptions[2];\n              eventLabel += gaOptions[3];\n            }\n          } else if (node.getAttribute(prop)) {\n            const attributes = yield _this.nodeGetAttribute(prop, node);\n            eventLabel = attributes[0];\n            gaAction = attributes[1];\n            gaCategory = attributes[2];\n            gaLabel = attributes[3];\n          } else if (['id'].includes(prop) && nodes[1] && nodes[1][prop]) {\n            eventLabel += `<${prop}: ${nodes[1][prop]}>`;\n          }\n        }\n\n        return [eventLabel, gaAction, gaCategory, gaLabel];\n      })();\n    }\n\n    listenForEvents() {\n      this.endPoints = this.utilityService.appendBaseUrlToEndpoints(this.endPoints);\n      window.addEventListener('click', function (e) {\n        this.listenFunctionality(e);\n      }.bind(this), false);\n    }\n\n    getGAOptions(prop, node) {\n      return _asyncToGenerator(function* () {\n        return new Promise(resolve => {\n          let gaAction = '';\n          let gaCategory = '';\n          let gaLabel = '';\n\n          if (prop === 'gaAction') {\n            gaAction = `${node.getAttribute(prop)}`;\n          } else if (prop === 'gaCategory') {\n            gaCategory = `${node.getAttribute(prop)}`;\n          } else if (prop === 'gaLabel') {\n            gaLabel = `${node.getAttribute(prop)}`;\n          }\n\n          resolve([gaAction, gaCategory, gaLabel, `<${prop}: ${node[prop]}>`]);\n        });\n      })();\n    }\n\n    getEventLabelFromNode(nodes, node, prop) {\n      return _asyncToGenerator(function* () {\n        return new Promise(resolve => {\n          if (node[prop].trim() === '' && nodes[1] && nodes[1][prop] && nodes[1][prop].trim() !== '') {\n            const txt = nodes[1][prop].trim();\n            resolve(`<${prop}: ${txt.substring(0, 20)}>`);\n          } else if (node[prop].trim() !== '') {\n            const txt = node[prop].trim();\n            resolve(`<${prop}: ${txt.substring(0, 20)}>`);\n          }\n        });\n      })();\n    }\n\n    nodeGetAttribute(prop, node) {\n      return _asyncToGenerator(function* () {\n        return new Promise(resolve => {\n          let eventLabel = '';\n          let gaAction = '';\n          let gaCategory = '';\n          let gaLabel = '';\n          eventLabel += `<${prop}: ${node.getAttribute(prop)}>`;\n\n          if (prop === 'gaAction') {\n            gaAction = `${node.getAttribute(prop)}`;\n          } else if (prop === 'gaCategory') {\n            gaCategory = `${node.getAttribute(prop)}`;\n          } else if (prop === 'gaLabel') {\n            gaLabel = `${node.getAttribute(prop)}`;\n          }\n\n          resolve([eventLabel, gaAction, gaCategory, gaLabel]);\n        });\n      })();\n    }\n\n    listenFunctionality(e, analytics = FirebaseAnalytics) {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        const nodes = _this2.getEventCategory(e.composedPath());\n\n        if (nodes.length > 0) {\n          let eventDetail = nodes.map(el => {\n            return el.nodeName + ' ';\n          }).join('');\n\n          if (nodes[0]['href']) {\n            eventDetail += nodes[0]['href'];\n          }\n\n          const eventLabelWithCustom = yield _this2.getEventLabel(nodes);\n\n          _this2.elementCategory(e, nodes, eventLabelWithCustom, eventDetail, analytics);\n        }\n      })();\n    }\n\n    elementCategory(e, nodes, eventLabelWithCustom, eventDetail, analytics) {\n      var _this3 = this;\n\n      return _asyncToGenerator(function* () {\n        const gaObject = _this3.getGAObjectForClickEvent(e, nodes, eventLabelWithCustom, eventDetail);\n\n        if (gaObject.eventCategory && (gaObject.eventLabel || gaObject.eventLabelCustom || gaObject.eventDetail)) {\n          yield analytics.logEvent({\n            name: 'action',\n            params: gaObject\n          });\n        }\n      })();\n    }\n\n    getGAObjectForClickEvent(e, nodes, eventLabelWithCustom, eventDetail, w = window) {\n      let eventCategory = nodes[0].nodeName;\n      let eventLabel = eventLabelWithCustom[0];\n      const gaAction = eventLabelWithCustom[1];\n      const gaCategory = eventLabelWithCustom[2];\n      const gaLabel = eventLabelWithCustom[3]; //sending ion-alert message text\n\n      if (eventLabel.includes('elementBtn')) {\n        const alrtMessageContainer = e.target?.parentElement?.parentElement?.parentElement?.getElementsByClassName('alert-message')[0]?.innerHTML?.substring(0, 20);\n        eventLabel = eventLabel?.replace('elementBtn0', alrtMessageContainer)?.replace('elementBtn1', alrtMessageContainer);\n      }\n\n      if (e.target?.tagName === 'IMG') {\n        const parentElement = e.target?.parentElement;\n        eventLabel = parentElement?.innerText;\n        eventCategory = parentElement?.tagName;\n        eventDetail = parentElement?.tagName;\n      }\n\n      return {\n        eventCategory: eventCategory,\n        eventAction: 'click',\n        eventLabel: eventLabel,\n        eventActionCustom: gaAction,\n        eventCategoryCustom: gaCategory,\n        eventLabelCustom: gaLabel || '',\n        eventDetail: '<place: ' + eventDetail + '>',\n        sessionId: '',\n        page_location: '/myVoyage' + w.location.pathname || ''\n      };\n    }\n\n    firebaseAnalyticsTracking(analytics = FirebaseAnalytics) {\n      var _this4 = this;\n\n      analytics.setCollectionEnabled({\n        enabled: true\n      });\n      this.router.events.subscribe( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (event) {\n          if (event instanceof NavigationEnd) {\n            if (!event.urlAfterRedirects.includes('secure-sign-out') && !event.urlAfterRedirects.includes('landing')) {\n              yield _this4.trackingFunctionality(event, analytics);\n            }\n          }\n        });\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    }\n\n    trackingFunctionality(event, analytics) {\n      var _this5 = this;\n\n      return _asyncToGenerator(function* () {\n        const result = yield _this5.getQualtricsUser();\n\n        if (result.partyId) {\n          yield analytics.setUserProperty({\n            name: 'userId',\n            value: result.partyId\n          });\n        }\n\n        yield analytics.setUserProperty({\n          name: 'appId',\n          value: localStorage.getItem('appId')\n        });\n        yield analytics.setUserProperty({\n          name: 'clientId',\n          value: result.clientId\n        });\n\n        if (result.currentPlan?.planId) {\n          yield analytics.setUserProperty({\n            name: 'planId',\n            value: result.currentPlan.planId\n          });\n        }\n\n        const gaScrubbedURL = event?.urlAfterRedirects?.replace('#', '');\n\n        if (event.url) {\n          const gaObject = {\n            page_location: '/myVoyage' + event.url,\n            userId: result?.partyId\n          };\n          yield analytics.logEvent({\n            name: 'virtualPageView',\n            params: gaObject\n          });\n        }\n\n        gaScrubbedURL && (yield analytics.setScreenName({\n          screenName: gaScrubbedURL\n        }));\n      })();\n    }\n\n    getQualtricsUser(endpointURL) {\n      var _this6 = this;\n\n      return _asyncToGenerator(function* () {\n        if (!_this6.QualtricsUserContent) {\n          yield _this6.baseService.get(endpointURL ? endpointURL : _this6.endPoints.qualtricsUserProps).then(response => {\n            _this6.QualtricsUserContent = response;\n          }).catch(() => {\n            _this6.QualtricsUserContent = null;\n          });\n        }\n\n        return _this6.QualtricsUserContent;\n      })();\n    }\n\n  }\n\n  GoogleAnalyticsService.ɵfac = function GoogleAnalyticsService_Factory(t) {\n    return new (t || GoogleAnalyticsService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.BaseService), i0.ɵɵinject(i3.SharedUtilityService));\n  };\n\n  GoogleAnalyticsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: GoogleAnalyticsService,\n    factory: GoogleAnalyticsService.ɵfac,\n    providedIn: 'root'\n  });\n  return GoogleAnalyticsService;\n})();","map":null,"metadata":{},"sourceType":"module"}