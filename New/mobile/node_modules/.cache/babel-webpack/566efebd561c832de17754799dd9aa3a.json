{"ast":null,"code":"define([], function () {\n  var DateUtilities = {};\n\n  DateUtilities.getAgePrecise = function (dob, ref) {\n    var today = ref === null || ref === undefined ? new Date() : ref;\n    var age = this.getDateDiffInYears(today, Date.parse(dob));\n    return age;\n  };\n\n  DateUtilities.getDateDiffInYears = function (f, s) {\n    var first = new Date(f);\n    /*\n    We are struggling here with IE8. The date can't be converted from a string and the\n    'getDateFromStirng' method does not work in IE8. Custom solution is in 'parse' polyfill.\n     */\n\n    var second = new Date(s);\n    var earlier = new Date();\n    var later = new Date(); // assure positive difference\n\n    if (first.getTime() < second.getTime()) {\n      earlier.setTime(first);\n      later.setTime(second);\n    } else {\n      // reverse\n      earlier.setTime(second);\n      later.setTime(first);\n    }\n\n    var dif = later.getFullYear() - earlier.getFullYear();\n    dif += (later.getMonth() - earlier.getMonth()) / 12;\n    dif += (later.getDate() - earlier.getDate()) / 361;\n    dif += 0.001; // from George Mazaitis\n\n    return Math.floor(dif);\n  }; //  Return Today's date in YYYYMMDD format\n\n\n  DateUtilities.today = function () {\n    var today = new Date();\n    var yyyy = today.getFullYear().toString();\n    var mm = today.getMonth() + 1;\n    mm = mm < 10 ? \"0\" + mm : mm;\n    var dd = today.getDate() < 10 ? \"0\" + today.getDate().toString() : today.getDate().toString();\n    return yyyy + mm + dd;\n  }; // current year string YYYY\n\n\n  DateUtilities.getCurrentYearString = function () {\n    var d = new Date().getFullYear().toString();\n    return d;\n  };\n\n  DateUtilities.getCurrentYearInteger = function () {\n    var d = new Date().getFullYear();\n    return d;\n  };\n\n  DateUtilities.getYearString = function (d) {\n    var dd = typeof d === \"string\" ? new Date(d) : d;\n    return dd.getFullYear().toString();\n  };\n\n  DateUtilities.getYearInteger = function (d) {\n    var dd = typeof d === \"string\" ? new Date(d) : d;\n    return dd.getFullYear();\n  }; // return Date object from string formated as \"YYYY-MM-DDT00:00:00\"\n\n\n  DateUtilities.getDateFromString = function (dateString, includeTime) {\n    var date;\n\n    var _dateString;\n\n    var _datePieces;\n\n    var _tIndex = dateString.indexOf(\"T\");\n\n    if (_tIndex > -1) {\n      _dateString = dateString.substr(0, _tIndex);\n      _datePieces = _dateString.split(\"-\");\n\n      if (!includeTime) {\n        date = new Date(_datePieces[0], _datePieces[1] - 1, _datePieces[2]);\n      } else {\n        var _timeString = dateString.substr(_tIndex + 1);\n\n        var _timePieces = _timeString.split(\":\");\n\n        date = new Date(_datePieces[0], _datePieces[1] - 1, _datePieces[2], _timePieces[0], _timePieces[1], _timePieces[2]);\n      }\n    } else {\n      date = new Date(dateString);\n    }\n\n    return date;\n  }; // return The time (as a string) from string formated as \"YYYY-MM-DDT00:00:00\"\n\n\n  DateUtilities.getTimeFromString = function (dateString) {\n    var _timeString = undefined;\n\n    var _timePieces;\n\n    var _period = \"AM\";\n\n    var _tIndex = dateString.indexOf(\"T\");\n\n    if (_tIndex > -1) {\n      // First, get the Time part of the string\n      _timeString = dateString.substr(_tIndex + 1);\n      _timePieces = _timeString.split(\":\"); // If HH is greater than 12, subtract 12 and flip to PM\n\n      if (_timePieces[0] >= 12) {\n        _period = \"PM\";\n        _timePieces[0] = _timePieces[0] - 12;\n      } //Make sure that the hour is shown as 12 not 0\n\n\n      if (_timePieces[0] === 0) {\n        _timePieces[0] = 12;\n      } // truncate the 0 off the beginning if necessary\n\n\n      _timePieces[0] = parseInt(_timePieces[0], 10); //    put them back together\n\n      _timeString = _timePieces.join(\":\") + \" \" + _period;\n    }\n\n    return _timeString;\n  }; // Return string in the format \"YYYY-MM-DDT00:00:00\" from valid Date Object\n\n\n  DateUtilities.getStringFromDate = function (dateObj) {\n    return DateUtilities.getShortStringFromDate(dateObj) + \"T00:00:00\";\n  };\n\n  DateUtilities.formatDateTimeString = function (dateString) {\n    var _tIndex = dateString.indexOf(\"T\");\n\n    _dateString = dateString.substr(0, _tIndex);\n    _datePieces = _dateString.split(\"-\");\n    var returnString = parseInt(_datePieces[1], 10) + \"/\" + parseInt(_datePieces[2], 10) + \"/\" + _datePieces[0].substr(2) + \" \";\n    return returnString + DateUtilities.getTimeFromString(dateString);\n  }; // Return string in the format \"YYYY-MM-DD\" from valid Date Object\n  // Also allows you to optionally define a separator character\n\n\n  DateUtilities.getShortStringFromDate = function (dateObj, separator) {\n    var _separator = separator || \"-\";\n\n    var _mm = dateObj.getMonth() + 1;\n\n    var _dd = dateObj.getDate();\n\n    var _yy = dateObj.getFullYear();\n\n    if (_mm < 10) {\n      _mm = \"0\" + _mm;\n    }\n\n    if (_dd < 10) {\n      _dd = \"0\" + _dd;\n    }\n\n    return _yy + _separator + _mm + _separator + _dd;\n  };\n  /**\n   * Returns the difference between date2 & date1 in number of days\n   * Ex: date2 - date1 = x Days\n   */\n\n\n  DateUtilities.getDateDiffInDays = function (date1, date2) {\n    //Get 1 day in milliseconds\n    var one_day = 1000 * 60 * 60 * 24; // convert both dates to milliseconds\n\n    var date1_ms = date1.getTime();\n    var date2_ms = date2.getTime(); // calculate the difference in milliseconds\n\n    var difference_ms = date2_ms - date1_ms; // convert back to days and return\n\n    return Math.round(difference_ms / one_day);\n  };\n  /**\n   * Date.parse with progressive enhancement for ISO 8601 <https://github.com/csnover/js-iso8601>\n   * © 2011 Colin Snover <http://zetafleet.com>\n   * Released under MIT license.\n   */\n\n\n  (function (Date, undefined) {\n    var origParse = Date.parse,\n        numericKeys = [1, 4, 5, 6, 7, 10, 11];\n\n    Date.parse = function (date) {\n      var timestamp,\n          struct,\n          minutesOffset = 0; // ES5 §15.9.4.2 states that the string should attempt to be parsed as a Date Time String Format string\n      // before falling back to any implementation-specific date parsing, so that’s what we do, even if native\n      // implementations could be faster\n      //              1 YYYY                2 MM       3 DD           4 HH    5 mm       6 ss        7 msec        8 Z 9 ±    10 tzHH    11 tzmm\n\n      if (struct = /^(\\d{4}|[+\\-]\\d{6})(?:-(\\d{2})(?:-(\\d{2}))?)?(?:T(\\d{2}):(\\d{2})(?::(\\d{2})(?:\\.(\\d{3}))?)?(?:(Z)|([+\\-])(\\d{2})(?::(\\d{2}))?)?)?$/.exec(date)) {\n        // avoid NaN timestamps caused by “undefined” values being passed to Date.UTC\n        for (var i = 0, k; k = numericKeys[i]; ++i) {\n          struct[k] = +struct[k] || 0;\n        } // allow undefined days and months\n\n\n        struct[2] = (+struct[2] || 1) - 1;\n        struct[3] = +struct[3] || 1;\n\n        if (struct[8] !== 'Z' && struct[9] !== undefined) {\n          minutesOffset = struct[10] * 60 + struct[11];\n\n          if (struct[9] === '+') {\n            minutesOffset = 0 - minutesOffset;\n          }\n        }\n\n        timestamp = Date.UTC(struct[1], struct[2], struct[3], struct[4], struct[5] + minutesOffset, struct[6], struct[7]);\n      } else {\n        timestamp = origParse ? origParse(date) : NaN;\n      }\n\n      return timestamp;\n    };\n  })(Date);\n\n  return DateUtilities;\n});","map":null,"metadata":{},"sourceType":"script"}