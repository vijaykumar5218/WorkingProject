{"ast":null,"code":"import { PieChartJourneyStepColors } from '@shared-lib/services/journey/models/journey.model';\nimport * as HighCharts from 'highcharts';\nimport { Subscription } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@shared-lib/services/journey/journey.service\";\nimport * as i2 from \"@angular/common\";\nexport let PieChartComponent = /*#__PURE__*/(() => {\n  class PieChartComponent {\n    constructor(journeyService, currencyPipe) {\n      this.journeyService = journeyService;\n      this.currencyPipe = currencyPipe;\n      this.subscription = new Subscription();\n      this.pieChartDataColor = new PieChartJourneyStepColors();\n      this.highCharts = HighCharts;\n    }\n\n    ngOnInit() {\n      const currentJourney = this.journeyService.getCurrentJourney();\n\n      if (this.journeyService.journeyServiceMap[currentJourney.journeyID]) {\n        this.subscription.add(this.journeyService.journeyServiceMap[currentJourney.journeyID].valueChange.subscribe(() => {\n          this.doPieCalculations(this.journeyService.journeyServiceMap[currentJourney.journeyID]);\n        }));\n      }\n    }\n\n    doPieCalculations(service) {\n      this.pieChartDataColor.pieChartJourneyStep = [];\n      this.pieChartDataColor.colors = [];\n      this.element.elements.forEach(item => {\n        this.pieChartDataColor.pieChartJourneyStep.push({\n          id: item.id,\n          label: item.label,\n          color: item.color,\n          value: parseFloat(service[item.id])\n        });\n        this.pieChartDataColor.colors.push(item.color);\n      });\n      this.pieChartDataColor.total = service.totalCost;\n      const chartData = [];\n      this.pieChartDataColor.pieChartJourneyStep.forEach(element => {\n        chartData.push({\n          label: this.percentage(element.value) === 0 ? '' : Math.round(this.percentage(element.value)) + '%',\n          name: element.label,\n          dataLabels: {\n            distance: -40\n          },\n          y: Math.round(element.value),\n          value: Math.round(element.value)\n        });\n      });\n      this.pushDataToPieChart(chartData);\n    }\n\n    pushDataToPieChart(chartData) {\n      this.highCharts.chart('container', {\n        chart: {\n          width: window.innerWidth - 77,\n          height: 300\n        },\n        title: {\n          text: undefined\n        },\n        plotOptions: {\n          pie: {\n            size: '80%',\n            events: {\n              click: function (e) {\n                e.preventDefault();\n              }\n            },\n            allowPointSelect: true,\n            tooltip: {\n              headerFormat: undefined,\n              pointFormat: '<b>{point.name} : ${point.value}</b>'\n            },\n            dataLabels: {\n              format: '<b>{point.label}</b>',\n              useHTML: true,\n              style: {\n                fontWeight: 'bold',\n                color: 'white',\n                textDecoration: 'none',\n                fontSize: '14px'\n              }\n            },\n            startAngle: 0,\n            endAngle: 0,\n            center: ['50%', '50%'],\n            colors: this.pieChartDataColor.colors\n          }\n        },\n        series: [{\n          type: 'pie',\n          data: chartData\n        }]\n      });\n    }\n\n    percentage(item) {\n      const total = this.pieChartDataColor.total;\n      const percent = item / parseFloat(total) * 100;\n      return percent <= 5 ? 0 : percent;\n    }\n\n    ngOnDestroy() {\n      this.subscription.unsubscribe();\n    }\n\n  }\n\n  PieChartComponent.ɵfac = function PieChartComponent_Factory(t) {\n    return new (t || PieChartComponent)(i0.ɵɵdirectiveInject(i1.JourneyService), i0.ɵɵdirectiveInject(i2.CurrencyPipe));\n  };\n\n  PieChartComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: PieChartComponent,\n    selectors: [[\"journey-step-charts-pie-chart\"]],\n    inputs: {\n      element: \"element\"\n    },\n    decls: 1,\n    vars: 0,\n    consts: [[\"id\", \"container\"]],\n    template: function PieChartComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"div\", 0);\n      }\n    },\n    encapsulation: 2\n  });\n  return PieChartComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}