{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@shared-lib/services/journey/journey.service\";\nimport * as i2 from \"../service/input.service\";\nimport * as i3 from \"../textField/textField.component\";\nimport * as i4 from \"../../../../../../../components/table/table.component\";\nimport * as i5 from \"@ionic/angular\";\nimport * as i6 from \"@angular/forms\";\nexport let SliderComponent = /*#__PURE__*/(() => {\n  class SliderComponent {\n    constructor(journeyService, inputService, changeDetectorRef) {\n      this.journeyService = journeyService;\n      this.inputService = inputService;\n      this.changeDetectorRef = changeDetectorRef;\n      this.subscription = new Subscription();\n      this.answer = {};\n      this.valueChange = new EventEmitter();\n      this.service = this.journeyService.journeyServiceMap[this.journeyService.getCurrentJourney().journeyID];\n    }\n\n    ngOnInit() {\n      this.subscription.add(this.service.valueChange.subscribe(() => {\n        var _a;\n\n        if (this.element.validationRules.maxId) {\n          const newMax = this.service[this.element.validationRules.maxId];\n\n          if (newMax !== this.max) {\n            this.max = newMax;\n            this.sliderValue = newMax;\n            const rules = Object.assign({}, this.element.validationRules);\n            rules.max = newMax;\n            this.inputService.publishValidationRules(rules);\n          }\n        } else {\n          this.max = this.element.validationRules.max;\n        }\n\n        const parsedDefault = this.journeyService.safeParse(this.defaultValue);\n        let defaultValue = parsedDefault && parsedDefault[this.max];\n\n        if (!defaultValue && !this.answer[this.max]) {\n          defaultValue = this.journeyService.addDollar((_a = this.service[this.element.defaultId]) === null || _a === void 0 ? void 0 : _a.toString(), this.element);\n        } else if (!defaultValue) {\n          defaultValue = this.answer[this.max];\n        }\n\n        this.updateValueAndAnswer(defaultValue);\n        this.sliderValue = parseFloat(this.journeyService.removeDollar(this.value, this.element));\n      }));\n    }\n\n    onInputBlur(value) {\n      this.updateValueAndAnswer(value, false);\n      this.sliderValue = parseFloat(this.journeyService.removeDollar(this.value, this.element));\n    }\n\n    onSliderChange(value) {\n      if (value && typeof value === 'number') {\n        this.updateValueAndAnswer(this.journeyService.addDollar(this.sliderValue.toString(), this.element));\n        this.callChangeFunction();\n      }\n    }\n\n    callChangeFunction() {\n      var _a;\n\n      (_a = this.service) === null || _a === void 0 ? void 0 : _a.onChange(this.sliderValue);\n    }\n\n    updateValueAndAnswer(value, detectChanges = true) {\n      if (value !== this.value) {\n        this.value = value;\n\n        if (detectChanges) {\n          this.changeDetectorRef.detectChanges();\n        }\n      }\n\n      if (this.answer[this.max]) {\n        this.answer[this.max] = this.value;\n      } else {\n        this.answer = {};\n        this.answer[this.max] = this.value;\n      }\n\n      this.valueChange.emit(JSON.stringify(this.answer));\n    }\n\n    reset() {\n      const resetValue = typeof this.service.reset === 'function' ? this.service.reset() : this.max;\n      this.updateValueAndAnswer(this.journeyService.addDollar(resetValue.toString(), this.element), false);\n      this.sliderValue = resetValue;\n    }\n\n    ngOnDestroy() {\n      this.subscription.unsubscribe();\n    }\n\n  }\n\n  SliderComponent.ɵfac = function SliderComponent_Factory(t) {\n    return new (t || SliderComponent)(i0.ɵɵdirectiveInject(i1.JourneyService), i0.ɵɵdirectiveInject(i2.InputService, 4), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n\n  SliderComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: SliderComponent,\n    selectors: [[\"journeys-steps-step-input-slider\"]],\n    inputs: {\n      element: \"element\",\n      defaultValue: \"defaultValue\"\n    },\n    outputs: {\n      valueChange: \"valueChange\"\n    },\n    decls: 9,\n    vars: 11,\n    consts: [[3, \"value\", \"input\", \"ariaLabel\", \"blur\"], [\"textField\", \"\"], [3, \"element\"], [\"debounce\", \"150\", 3, \"max\", \"min\", \"ngModel\", \"ionChange\", \"id\", \"ngModelChange\"], [\"slider\", \"\"], [\"shape\", \"round\", 1, \"secondary\", 3, \"id\", \"click\"]],\n    template: function SliderComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r2 = i0.ɵɵgetCurrentView();\n\n        i0.ɵɵelementStart(0, \"div\");\n        i0.ɵɵelementStart(1, \"journeys-steps-step-input-text-field\", 0, 1);\n        i0.ɵɵlistener(\"blur\", function SliderComponent_Template_journeys_steps_step_input_text_field_blur_1_listener() {\n          i0.ɵɵrestoreView(_r2);\n\n          const _r0 = i0.ɵɵreference(2);\n\n          return ctx.onInputBlur(_r0.value);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(3, \"app-table\", 2);\n        i0.ɵɵelementStart(4, \"div\");\n        i0.ɵɵelementStart(5, \"ion-range\", 3, 4);\n        i0.ɵɵlistener(\"ngModelChange\", function SliderComponent_Template_ion_range_ngModelChange_5_listener($event) {\n          return ctx.sliderValue = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"ion-button\", 5);\n        i0.ɵɵlistener(\"click\", function SliderComponent_Template_ion_button_click_7_listener() {\n          return ctx.reset();\n        });\n        i0.ɵɵtext(8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        const _r1 = i0.ɵɵreference(6);\n\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"value\", ctx.value)(\"input\", ctx.element)(\"ariaLabel\", ctx.element.label);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"element\", ctx.element);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"max\", ctx.max)(\"min\", ctx.element.validationRules.min)(\"ngModel\", ctx.sliderValue)(\"ionChange\", ctx.onSliderChange(_r1.value))(\"id\", \"journeySliderInput\" + ctx.element.idSuffix);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"id\", \"journeySliderReset\" + ctx.element.idSuffix);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(ctx.element.buttonLabel);\n      }\n    },\n    directives: [i3.TextFieldComponent, i4.StepTableComponent, i5.IonRange, i5.SelectValueAccessor, i6.NgControlStatus, i6.NgModel, i5.IonButton],\n    styles: [\"div[_ngcontent-%COMP%]{display:flex;justify-content:center;margin-bottom:20px}ion-range[_ngcontent-%COMP%]{--knob-size: 30px;--bar-background-active: var(--primary-colors-voya-dark-blue);--bar-height: 6px;--bar-border-radius: 5px;--knob-background: var(--primary-colors-voya-white);--bar-background: var(--secondary-colors-medium-gray-3);--knob-box-shadow: 0 4px 4px 0 rgba(0, 0, 0, .3);--height: 24px;padding:0 12px 0 0}ion-range[_ngcontent-%COMP%]::part(knob){border:solid 1px var(--secondary-colors-medium-gray-3)}ion-button[_ngcontent-%COMP%]{width:18%;margin:0 0 0 3.5%;height:28px;font-size:12px}\", \"ion-button.secondary[_ngcontent-%COMP%]{--background: var(--primary-colors-voya-white);--color: var(--primary-colors-voya-dark-blue);--border-color: var(--primary-colors-voya-dark-blue);--border-style: solid;--border-width: 2px;font-weight:600}\"]\n  });\n  return SliderComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}