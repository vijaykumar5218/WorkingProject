{"ast":null,"code":"import _asyncToGenerator from \"/Users/vijay.a/Documents/GitHub/MYVOYAGE/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { ReplaySubject, Subscription } from 'rxjs';\nimport { endpoints } from '../constants/hsaEndpoints';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../base/base-factory-provider\";\nimport * as i2 from \"../../utility/utility.service\";\nimport * as i3 from \"../journey.service\";\nimport * as i4 from \"../../notification-setting/notification-setting.service\";\nexport let HSAService = /*#__PURE__*/(() => {\n  class HSAService {\n    constructor(baseService, utilityService, journeyService, notificationSettingsService) {\n      this.baseService = baseService;\n      this.utilityService = utilityService;\n      this.journeyService = journeyService;\n      this.notificationSettingsService = notificationSettingsService;\n      this.valueChange = new ReplaySubject(1);\n      this.subscription = new Subscription();\n      this.endpoints = this.utilityService.appendBaseUrlToEndpoints(endpoints);\n    }\n\n    initialize(journey) {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        _this.notificationSettingsService.setPrefsSettings();\n\n        _this.subscription.add(_this.notificationSettingsService.notificationPrefsChanged$.subscribe(settings => {\n          _this.displayNotificationSection = !_this.notificationSettingsService.getCheckedAndActive(settings, 'AAPref').sectionActive;\n        }));\n\n        if (!_this.goalDataPromise || _this.journeyService.getRefreshMxAccount() === 'true') {\n          yield _this.setAccountLinkFlag(journey.journeyID);\n\n          if (_this.goalData.onFile) {\n            _this.isIndividual = _this.goalData.individual;\n          }\n\n          _this.setAnswers(_this.goalData.hsaJourneyAnswers);\n\n          _this.overCatchupAge = _this.goalData.overCatchupAge;\n\n          _this.calculateRecommendations();\n\n          _this.onChange(undefined, true);\n        }\n      })();\n    }\n\n    setAnswers(answerList) {\n      let adjustedMax;\n      answerList?.forEach(answer => {\n        const parsedAnswer = this.journeyService.safeParse(answer);\n\n        if (parsedAnswer) {\n          if (!this.accountLinked && parsedAnswer['currentHSABalance']) {\n            this.currentBalance = parseFloat(parsedAnswer['currentHSABalance'].slice(1));\n          }\n\n          if (parsedAnswer['payFrequency']) {\n            const parsedPayFrequency = this.journeyService.safeParse(parsedAnswer['payFrequency']);\n            this.payPeriods = parsedPayFrequency['value'];\n          }\n\n          if (this.notOnFile && parsedAnswer['whoAreYouUsingHSAFor']) {\n            const parsedWhoAreYouUsingHSAFor = this.journeyService.safeParse(parsedAnswer['whoAreYouUsingHSAFor']);\n\n            if (parsedWhoAreYouUsingHSAFor && parsedWhoAreYouUsingHSAFor['whoAreYouUsingHSAFor']) {\n              this.isIndividual = parsedWhoAreYouUsingHSAFor['whoAreYouUsingHSAFor'] === 'individual';\n            }\n          }\n\n          const answerAdjustedMax = this.getAdjustedMaxContribution(parsedAnswer);\n\n          if (answerAdjustedMax !== undefined) {\n            adjustedMax = answerAdjustedMax;\n          }\n        }\n      });\n      this.adjustedMaxContribution = adjustedMax;\n    }\n\n    getAdjustedMaxContribution(parsedAnswer) {\n      let adjustedMaxContribution;\n\n      if (parsedAnswer['adjustGoal']) {\n        const parsedHSAGoalAnswer = this.journeyService.safeParse(parsedAnswer['adjustGoal']);\n\n        if (parsedHSAGoalAnswer && parsedHSAGoalAnswer['adjustGoal'] === 'adjustGoalYes') {\n          const parsedAdjustAnswer = this.journeyService.safeParse(parsedHSAGoalAnswer['adjustedHSAGoal']);\n\n          if (parsedAdjustAnswer) {\n            adjustedMaxContribution = parseFloat(Object.values(parsedAdjustAnswer)[0].slice(1));\n          }\n        }\n      }\n\n      return adjustedMaxContribution;\n    }\n\n    stepChange(journey) {\n      this.setAnswers(this.journeyService.getAnswerList(journey));\n      this.calculateRecommendations();\n      this.onChange(undefined, true);\n    }\n\n    calculateRecommendations() {\n      let yearlyGoal = this.isIndividual ? this.goalData.singleMaxAmt : this.goalData.familyMaxAmt;\n\n      if (this.overCatchupAge) {\n        yearlyGoal += this.goalData.catchUpAmt;\n      }\n\n      this.maxContribution = yearlyGoal;\n      this.contributionPerPayPeriod = this.calculatePerPayPeriod(yearlyGoal);\n      this.yearlyTaxSavings = this.calculateSavings(yearlyGoal);\n      this.valueChange.next();\n    }\n\n    calculateSavings(yearlyGoal) {\n      return yearlyGoal * 0.22;\n    }\n\n    calculatePerPayPeriod(yearlyGoal) {\n      return yearlyGoal / this.payPeriods;\n    }\n\n    onChange(newValue = this.adjustedMaxContribution || this.maxContribution, refresh = false) {\n      if (refresh || this.adjustedMaxContribution !== newValue) {\n        this.adjustedMaxContribution = newValue;\n        this.adjustedContributionPerPayPeriod = this.calculatePerPayPeriod(newValue);\n        this.adjustedyearlyTaxSavings = this.calculateSavings(newValue);\n        this.valueChange.next();\n      }\n    }\n\n    fetchGoalJSON() {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        if (!_this2.hsaContentPromise) {\n          _this2.hsaContentPromise = _this2.baseService.get(_this2.endpoints.getHSAContent);\n        }\n\n        const content = yield _this2.hsaContentPromise;\n        return JSON.parse(content.HSAGoalJSON);\n      })();\n    }\n\n    ngOnDestroy() {\n      this.subscription.unsubscribe();\n    }\n\n    setAccountLinkFlag(journeyId) {\n      var _this3 = this;\n\n      return _asyncToGenerator(function* () {\n        _this3.journeyService.setRefreshMxAccount('false');\n\n        _this3.goalDataPromise = _this3.baseService.get(_this3.endpoints.getGoal + '/' + journeyId);\n        _this3.goalData = yield _this3.goalDataPromise;\n        _this3.onFile = _this3.goalData.onFile;\n        _this3.notOnFile = _this3.goalData.notOnFile;\n        _this3.accountLinked = _this3.goalData.accountLinked;\n        _this3.accountNotLinked = _this3.goalData.accountNotLinked;\n        _this3.logoUrl = _this3.goalData.logoUrl;\n        _this3.accountName = _this3.goalData.accountName;\n\n        if (_this3.accountLinked) {\n          _this3.currentBalance = _this3.goalData.currentBalance;\n        }\n\n        _this3.ytdContribution = _this3.goalData.ytdContribution;\n\n        _this3.valueChange.next();\n      })();\n    }\n\n  }\n\n  HSAService.ɵfac = function HSAService_Factory(t) {\n    return new (t || HSAService)(i0.ɵɵinject(i1.BaseService), i0.ɵɵinject(i2.SharedUtilityService), i0.ɵɵinject(i3.JourneyService), i0.ɵɵinject(i4.NotificationsSettingService));\n  };\n\n  HSAService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HSAService,\n    factory: HSAService.ɵfac,\n    providedIn: 'root'\n  });\n  return HSAService;\n})();","map":null,"metadata":{},"sourceType":"module"}