{"ast":null,"code":"import _asyncToGenerator from \"/Users/vijay.a/Documents/GitHub/MYVOYAGE/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { endPoints } from '@shared-lib/services/account/constants/endpoints';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@shared-lib/services/base/base-factory-provider\";\nimport * as i2 from \"@shared-lib/services/utility/utility.service\";\nimport * as i3 from \"@mobile/app/modules/shared/service/authentication/authentication.service\";\nexport let EventTrackingService = /*#__PURE__*/(() => {\n  class EventTrackingService {\n    constructor(baseService, utilityService, authService) {\n      this.baseService = baseService;\n      this.utilityService = utilityService;\n      this.authService = authService;\n      this.endPoints = endPoints;\n      this.endPoints = this.utilityService.appendBaseUrlToEndpoints(endPoints);\n    }\n\n    eventTracking(postData) {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        postData.createdBy = 'myvoyage';\n        postData.subscriberKey = (yield _this.getSubscriberKey()).subscriberKey;\n        postData.passThruAttributes = [...(postData.passThruAttributes || []), {\n          attributeName: 'platform',\n          attributeValue: _this.utilityService.getIsWeb() ? 'web' : 'mobile'\n        }];\n        yield _this.baseService.post(_this.endPoints.eventTracking, postData);\n      })();\n    }\n\n    eventTrackingAfterAuthorized(eventTrackingEvent) {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        if (_this2.authChangeSubscription) {\n          _this2.authChangeSubscription.unsubscribe();\n        }\n\n        if (_this2.biometricChangeSubscription) {\n          _this2.biometricChangeSubscription.unsubscribe();\n        }\n\n        const isAuthenticated = yield _this2.authService.isAuthenticated();\n\n        if (isAuthenticated) {\n          _this2.eventTracking(eventTrackingEvent);\n        } else {\n          _this2.authChangeSubscription = _this2.authService.authenticationChange$.subscribe(isAuthenticated => {\n            if (isAuthenticated.auth && isAuthenticated.attested) {\n              _this2.sendEventAndUnsubscribe(eventTrackingEvent);\n            }\n          });\n          _this2.biometricChangeSubscription = _this2.authService.biometricsAuthenticationChange$.subscribe(isAuth => {\n            if (isAuth) {\n              _this2.sendEventAndUnsubscribe(eventTrackingEvent);\n            }\n          });\n        }\n      })();\n    }\n\n    sendEventAndUnsubscribe(eventTrackingEvent) {\n      this.eventTracking(eventTrackingEvent);\n      this.authChangeSubscription.unsubscribe();\n      this.authChangeSubscription = undefined;\n      this.biometricChangeSubscription.unsubscribe();\n      this.biometricChangeSubscription = undefined;\n    }\n\n    getSubscriberKey() {\n      if (!this.subscriberKeyPromise) {\n        this.subscriberKeyPromise = this.baseService.get(this.endPoints.subscriberKey);\n      }\n\n      return this.subscriberKeyPromise;\n    }\n\n  }\n\n  EventTrackingService.ɵfac = function EventTrackingService_Factory(t) {\n    return new (t || EventTrackingService)(i0.ɵɵinject(i1.BaseService), i0.ɵɵinject(i2.SharedUtilityService), i0.ɵɵinject(i3.AuthenticationService));\n  };\n\n  EventTrackingService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: EventTrackingService,\n    factory: EventTrackingService.ɵfac,\n    providedIn: 'root'\n  });\n  return EventTrackingService;\n})();","map":null,"metadata":{},"sourceType":"module"}