{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { endPoints } from '@shared-lib/services/qualtrics/constants/endpoints';\nimport { QualtricsIntercept } from '@shared-lib/services/qualtrics/constants/qualtrics-intercepts.enum';\nimport { QualtricsProperty } from '@shared-lib/services/qualtrics/constants/qualtrics-properties.enum';\nimport { Subscription } from 'rxjs';\nimport storageKey from './constants/storage-key.json';\nimport { NavigationEnd } from '@angular/router';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@shared-lib/services/utility/utility.service\";\nimport * as i2 from \"@shared-lib/services/google-Analytics/google.analytics.service\";\nimport * as i3 from \"@shared-lib/services/account/account.service\";\nimport * as i4 from \"@ionic/angular\";\nimport * as i5 from \"@angular/router\";\nexport let WebQualtricsService = /*#__PURE__*/(() => {\n  class WebQualtricsService {\n    constructor(utilityService, googleAnalyticsService, accountService, platform, router) {\n      this.utilityService = utilityService;\n      this.googleAnalyticsService = googleAnalyticsService;\n      this.accountService = accountService;\n      this.platform = platform;\n      this.router = router;\n      this.endPoints = endPoints;\n      this.subscription = new Subscription();\n      this.storageKey = storageKey;\n      this.endPoints = this.utilityService.appendBaseUrlToEndpoints(this.endPoints);\n      this.qualtricsStartupUrl = this.utilityService.getEnvironment().qualtricsStartupUrl;\n    }\n\n    initialize(feedbackInterceptId) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.feedbackInterceptId = feedbackInterceptId ? feedbackInterceptId : QualtricsIntercept.FEEDBACK_INTERCEPT_WEB;\n        this.qualtricsUserProps = yield this.googleAnalyticsService.getQualtricsUser(this.endPoints.qualtricsUserProps);\n        this.subscription.add(this.accountService.getParticipant().subscribe(data => {\n          this.participant = data;\n          this.setUserProperties();\n          this.setUpRouteListener();\n        }));\n      });\n    }\n\n    setUserProperties() {\n      const url = new URL(this.qualtricsStartupUrl);\n      url.searchParams.set('Q_ZID', this.feedbackInterceptId);\n      url.searchParams.set(QualtricsProperty.APP_ID, 'myVoyage');\n      url.searchParams.set(QualtricsProperty.CLIENT_ID, this.qualtricsUserProps.clientId);\n      localStorage.setItem(this.storageKey.CLIENT_ID, this.qualtricsUserProps.clientId);\n      const planIds = [];\n      this.qualtricsUserProps.planIdList.forEach(plan => {\n        planIds.push(plan.planId);\n      });\n      url.searchParams.set(QualtricsProperty.PLAN, planIds.join(','));\n      localStorage.setItem(this.storageKey.PLAN_ID, planIds.join(','));\n      url.searchParams.set(QualtricsProperty.PARTY_ID, this.qualtricsUserProps.partyId);\n      localStorage.setItem(this.storageKey.PARTY_ID, this.qualtricsUserProps.partyId);\n      url.searchParams.set(QualtricsProperty.EMAIL, this.qualtricsUserProps.email);\n      localStorage.setItem(this.storageKey.Email, this.qualtricsUserProps.email);\n      url.searchParams.set(QualtricsProperty.PHONE, this.qualtricsUserProps.mobile);\n      localStorage.setItem(this.storageKey.PHONE, this.qualtricsUserProps.mobile);\n      url.searchParams.set(QualtricsProperty.FIRST_TIME_USER, this.qualtricsUserProps.firstTimeLogin ? 'Y' : 'N');\n      url.searchParams.set(QualtricsProperty.FIRST_NAME, this.participant.firstName);\n      localStorage.setItem(this.storageKey.FIRST_NAME, this.participant.firstName);\n\n      if (this.platform.is('ios')) {\n        url.searchParams.set(QualtricsProperty.DEVICE_TYPE, 'ios');\n      } else if (this.platform.is('android')) {\n        url.searchParams.set(QualtricsProperty.DEVICE_TYPE, 'android');\n      } else {\n        url.searchParams.set(QualtricsProperty.DEVICE_TYPE, 'web');\n      }\n\n      this.startUpCall(url.href);\n    }\n\n    setUpRouteListener() {\n      this.subscription.add(this.router.events.subscribe(this.routeChanged.bind(this)));\n    }\n\n    startUpCall(href) {\n      const elem = document.createElement('div');\n      elem.setAttribute('id', this.feedbackInterceptId);\n      document.body.appendChild(elem);\n      new window.WebQualtrics(100, 'r', `QSI_S_${this.feedbackInterceptId}`, href).start();\n    }\n\n    routeChanged(event) {\n      if (event instanceof NavigationEnd) {\n        const pageUrl = event.urlAfterRedirects;\n        localStorage.setItem(this.storageKey.PAGE_NAME, pageUrl);\n      }\n    }\n\n    ngOnDestroy() {\n      this.subscription.unsubscribe();\n    }\n\n  }\n\n  WebQualtricsService.ɵfac = function WebQualtricsService_Factory(t) {\n    return new (t || WebQualtricsService)(i0.ɵɵinject(i1.SharedUtilityService), i0.ɵɵinject(i2.GoogleAnalyticsService), i0.ɵɵinject(i3.AccountService), i0.ɵɵinject(i4.Platform), i0.ɵɵinject(i5.Router));\n  };\n\n  WebQualtricsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: WebQualtricsService,\n    factory: WebQualtricsService.ɵfac,\n    providedIn: 'root'\n  });\n  return WebQualtricsService;\n})();","map":null,"metadata":{},"sourceType":"module"}