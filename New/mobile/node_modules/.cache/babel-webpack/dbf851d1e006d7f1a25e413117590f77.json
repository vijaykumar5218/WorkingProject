{"ast":null,"code":"import _asyncToGenerator from \"/Users/vijay.a/Documents/GitHub/MYVOYAGE/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { endPoints, loginEndpoints } from './constants/endpoints';\nimport { BehaviorSubject, from, of, ReplaySubject, Subject, Subscription } from 'rxjs';\nimport * as moment from 'moment';\nimport { concatMap, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../utility/utility.service\";\nimport * as i2 from \"../base/base-factory-provider\";\nimport * as i3 from \"../access/access.service\";\nimport * as i4 from \"@mobile/app/modules/shared/service/in-app-browser/in-app-browser.service\";\nimport * as i5 from \"@ionic/angular\";\nimport * as i6 from \"@mobile/app/modules/shared/service/authentication/authentication.service\";\nexport const SESSION_TIMEOUT_DURATION = 14 * 60 * 1000;\nexport let AccountService = /*#__PURE__*/(() => {\n  class AccountService {\n    constructor(utilityService, baseService, accessService, inAppBrowserService, loadingController, authService) {\n      this.utilityService = utilityService;\n      this.baseService = baseService;\n      this.accessService = accessService;\n      this.inAppBrowserService = inAppBrowserService;\n      this.loadingController = loadingController;\n      this.authService = authService;\n      this.endPoints = endPoints;\n      this.predictiveMessage = null;\n      this.predictiveMessage$ = null;\n      this.participantData = null;\n      this.participantSubject = null;\n      this.accountLocalStorageSubject = null;\n      this.subscription = new Subscription();\n      this.externalLinksData = null;\n      this.externalLinksDataSubscriptionList = {};\n      this.externalLinksSubject = null;\n      this.selectedTab$ = new Subject();\n      this.allAccountData = null;\n      this.allAccountsWithoutHSAData = null;\n      this.allAccountsWithHSAData = null;\n      this.allAccountSubject = null;\n      this.aggregatedAccountDataSubject = null;\n      this.accountsContent$ = null;\n      this.sort = new BehaviorSubject('');\n      this.filt = new BehaviorSubject([]);\n      this.balanceHistoryGraphData = null;\n      this.balanceHistoryGraphSubject = null;\n      this.moneyOutDataSubject = null;\n      this.storedFilterKey = [];\n      this.storedSortKey = '';\n      this.today = new Date();\n      this.priorDate = moment(new Date().setDate(this.today.getDate() - 90)).format('YYYY/MM/DD');\n      this.currentDate = moment(Date.now()).format('YYYY/MM/DD');\n      this.endPoints = this.utilityService.appendBaseUrlToEndpoints(endPoints);\n      this.environment = this.utilityService.getEnvironment();\n      this.loginEndpoints = this.utilityService.appendBaseUrlToEndpoints(loginEndpoints, this.environment.loginBaseUrl);\n      this.participantSubject = new ReplaySubject(1);\n      this.balanceHistoryGraphSubject = new ReplaySubject(1);\n      this.externalLinksSubject = new ReplaySubject(1);\n      this.allAccountSubject = new ReplaySubject(1);\n      this.aggregatedAccountDataSubject = new ReplaySubject(1);\n      this.moneyOutDataSubject = new ReplaySubject(1);\n      this.account = JSON.parse(localStorage.getItem('currentAccount'));\n      this.isWeb = this.utilityService.getIsWeb();\n      this.predictiveMessage$ = new ReplaySubject(1);\n      this.accountsContent$ = new ReplaySubject(1);\n      this.accountLocalStorageSubject = new ReplaySubject(1);\n      this.allAccountsWithoutHSASubject = new ReplaySubject(1);\n      this.allAccountsWithHSASubject = new ReplaySubject(1);\n    }\n\n    getJSON(refresh = false) {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        if (!_this.accountInfo || refresh) {\n          const sessionID = yield _this.accessService.getSessionId();\n          const accountsData = yield _this.baseService.get(_this.endPoints.allAccounts + sessionID);\n          accountsData.hsaAccounts = yield _this.getHSAAccounts();\n          _this.accountInfo = accountsData;\n        }\n\n        return _this.accountInfo;\n      })();\n    }\n\n    getAllAccountsWithOutHSA(refresh = false) {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        try {\n          if (!_this2.allAccountsWithOutHSAInfo || refresh) {\n            const sessionID = yield _this2.accessService.getSessionId();\n            _this2.allAccountsWithOutHSAInfo = yield _this2.baseService.get(_this2.endPoints.allAccounts + sessionID);\n          }\n        } catch (e) {\n          console.log(e);\n          _this2.allAccountsWithOutHSAInfo = undefined;\n        }\n\n        return _this2.allAccountsWithOutHSAInfo;\n      })();\n    }\n\n    getOnlyWithHSAAccount(refresh = false) {\n      var _this3 = this;\n\n      return _asyncToGenerator(function* () {\n        try {\n          if (!_this3.allAccountsWithHSAInfo || refresh) {\n            const accountData = yield _this3.getHSAAccounts();\n            _this3.allAccountsWithHSAInfo = {\n              hsaAccounts: accountData\n            };\n          }\n        } catch (e) {\n          console.log(e);\n          _this3.allAccountsWithHSAInfo = undefined;\n        }\n\n        return _this3.allAccountsWithHSAInfo;\n      })();\n    }\n\n    getHSAorFSA() {\n      var _this4 = this;\n\n      return _asyncToGenerator(function* () {\n        if (!_this4.hasHSAorFSA) {\n          const accounts = {\n            hsa: false,\n            fsa: false\n          };\n          const accData = yield _this4.getJSON();\n          accData.hsaAccounts.accounts.forEach(acc => {\n            if (acc.hsaAccountData.Plan_Type == 'HSA') {\n              accounts.hsa = true;\n            } else if (acc.hsaAccountData.Plan_Type == 'MedicalFlex') {\n              accounts.fsa = true;\n            }\n          });\n          const mxAccs = yield _this4.baseService.get(_this4.endPoints.accountConnect);\n          mxAccs.accounts.forEach(acc => {\n            if (acc.account_type_name === 'Savings' && acc.account_subtype_name === 'HEALTH') {\n              accounts.hsa = true;\n            }\n          });\n          _this4.hasHSAorFSA = accounts;\n        }\n\n        return _this4.hasHSAorFSA;\n      })();\n    }\n\n    constructAggregatedAccounts() {\n      var _this5 = this;\n\n      return _asyncToGenerator(function* () {\n        const sessionID = yield _this5.accessService.getSessionId();\n        return _this5.baseService.get(`${_this5.endPoints.aggregatedAccounts + sessionID}`);\n      })();\n    }\n\n    getAggregatedAccounts(refresh = false) {\n      if (!this.aggregatedAcctData || refresh) {\n        this.aggregatedAcctData = from(this.constructAggregatedAccounts());\n        const subscription = this.aggregatedAcctData.subscribe(result => {\n          this.aggregatedAccountDataSubject.next(result);\n        });\n        this.subscription.add(subscription);\n      }\n\n      return this.aggregatedAccountDataSubject;\n    } //#region\n\n\n    getExternalLinks(refresh = false) {\n      var _this6 = this;\n\n      const existingExternalLinksDataSubscription = this.externalLinksDataSubscriptionList[this.account.planId];\n\n      if ((!existingExternalLinksDataSubscription || refresh) && this.account.isSavingsPlan) {\n        this.accessService.checkMyvoyageAccess().then( /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(function* (res) {\n            const [domain, clientId, sessionID] = yield _this6.getExternalLinkParameterInfo(res);\n\n            const url = _this6.endPoints.externalLinks.replace('{planID}', _this6.account.planId).replace('{client}', clientId).replace('{sessionID}', sessionID).replace('{domain}', domain);\n\n            _this6.externalLinksData = from(_this6.baseService.get(url));\n\n            const subscription = _this6.externalLinksData.subscribe(result => {\n              _this6.externalLinksSubject.next(result);\n\n              _this6.externalLinksDataSubscriptionList[_this6.account.planId] = result;\n            });\n\n            _this6.subscription.add(subscription);\n          });\n\n          return function (_x) {\n            return _ref.apply(this, arguments);\n          };\n        }());\n      } else if (this.externalLinksDataSubscriptionList[this.account.planId]) {\n        this.externalLinksSubject.next(existingExternalLinksDataSubscription);\n      }\n\n      return this.externalLinksSubject;\n    }\n\n    getExternalLinkParameterInfo(res) {\n      var _this7 = this;\n\n      return _asyncToGenerator(function* () {\n        const domain = _this7.account.clientDomain != res.clientDomain ? _this7.account.clientDomain : res.clientDomain;\n        const clientId = _this7.account.clientId != res.clientId ? _this7.account.clientId : res.clientId;\n        const sessionID = _this7.account.csSessionId ? _this7.account.csSessionId : yield _this7.accessService.getSessionId();\n        return [domain, clientId, sessionID];\n      })();\n    }\n\n    getVestedBalance() {\n      var _this8 = this;\n\n      return _asyncToGenerator(function* () {\n        return _this8.baseService.get(_this8.endPoints.vestedBalance + _this8.account.clientId + '/' + _this8.account.planId);\n      })();\n    }\n\n    getGainLoss() {\n      var _this9 = this;\n\n      return _asyncToGenerator(function* () {\n        return _this9.baseService.get(_this9.endPoints.gainLoss + _this9.account.clientId + '/' + _this9.account.planId);\n      })();\n    }\n\n    getLoan() {\n      var _this10 = this;\n\n      return _asyncToGenerator(function* () {\n        return _this10.baseService.get(_this10.endPoints.loan + _this10.account.clientId + '/' + _this10.account.planId);\n      })();\n    }\n\n    getRateOfReturn() {\n      var _this11 = this;\n\n      return _asyncToGenerator(function* () {\n        return _this11.baseService.get(_this11.endPoints.rateOfReturn + _this11.account.clientId + '/' + _this11.account.planId);\n      })();\n    }\n\n    getPlanAdviceStatuses() {\n      var _this12 = this;\n\n      return _asyncToGenerator(function* () {\n        return _this12.baseService.get(_this12.endPoints.planAdviceStatus);\n      })();\n    }\n\n    getDividends() {\n      return this.baseService.get(this.endPoints.dividend + this.account.clientId + '/' + this.account.planId);\n    }\n\n    getContribution() {\n      var _this13 = this;\n\n      return _asyncToGenerator(function* () {\n        return _this13.baseService.get(_this13.endPoints.contribution + _this13.account.clientId + '/' + _this13.account.planId);\n      })();\n    }\n\n    getYTDContribution() {\n      var _this14 = this;\n\n      return _asyncToGenerator(function* () {\n        return _this14.baseService.get(_this14.endPoints.ytdcontribution + _this14.account.clientId + '/' + _this14.account.planId);\n      })();\n    }\n\n    getEmployersMatch() {\n      var _this15 = this;\n\n      return _asyncToGenerator(function* () {\n        return _this15.baseService.get(_this15.endPoints.employersmatch + _this15.account.clientId + '/' + _this15.account.planId);\n      })();\n    }\n\n    getTransaction() {\n      var _this16 = this;\n\n      return _asyncToGenerator(function* () {\n        if (_this16.account.isHSAAccount) {\n          return _this16.getHSATransactions();\n        } else {\n          return _this16.baseService.get(_this16.endPoints.transaction + _this16.account.clientId + '/' + _this16.account.planId + '?tranType=ALL&startDate=' + _this16.priorDate + '&endDate=' + _this16.currentDate);\n        }\n      })();\n    }\n\n    getAccount() {\n      if (!this.account) {\n        this.account = JSON.parse(localStorage.getItem('currentAccount'));\n      }\n\n      return this.account;\n    }\n\n    setAccount(account) {\n      localStorage.setItem('currentAccount', JSON.stringify(account));\n      this.account = account;\n    }\n\n    setAccountLocalStorage(data) {\n      if (data !== this.previousAcctInLocalStorage) {\n        this.setAccount(data);\n        this.previousAcctInLocalStorage = data;\n        this.accountLocalStorageSubject.next(data);\n      }\n    }\n\n    getAccountLocalStorage() {\n      return this.accountLocalStorageSubject.asObservable();\n    }\n\n    getParticipant(refresh = false) {\n      if (!this.participantData || refresh) {\n        this.participantData = from(this.baseService.get(this.endPoints.participantData));\n        const subscription = this.participantData.subscribe(result => {\n          this.participantSubject.next(result);\n        });\n        this.subscription.add(subscription);\n      }\n\n      return this.participantSubject;\n    }\n\n    setParticipant(participant) {\n      this.participantSubject.next(participant);\n    }\n\n    getOffercode() {\n      var _this17 = this;\n\n      return _asyncToGenerator(function* () {\n        if (!_this17.offercodes) {\n          const sessionID = yield _this17.accessService.getSessionId();\n          _this17.offercodes = yield _this17.baseService.get(_this17.endPoints.getOfferCode + sessionID);\n        }\n\n        return _this17.offercodes;\n      })();\n    }\n\n    getPredict() {\n      var _this18 = this;\n\n      return _asyncToGenerator(function* () {\n        return new Promise(resolve => {\n          _this18.subscription.add(_this18.fetchPredictiveMessage().subscribe(response => {\n            resolve(response.OfferCodeAdviceJSON ? JSON.parse(response.OfferCodeAdviceJSON) : null);\n          }));\n        });\n      })();\n    }\n\n    getCarouselData() {\n      var _this19 = this;\n\n      return _asyncToGenerator(function* () {\n        return new Promise(resolve => {\n          _this19.subscription.add(_this19.fetchPredictiveMessage().subscribe(response => {\n            resolve(response.OfferCodeJSON ? JSON.parse(response.OfferCodeJSON) : null);\n          }));\n        });\n      })();\n    }\n\n    fetchBalanceHistoryGraph() {\n      if (!this.balanceHistoryGraphData) {\n        this.balanceHistoryGraphData = from(this.baseService.get(this.endPoints.balancehistory));\n        const subscription = this.balanceHistoryGraphData.subscribe(result => {\n          this.balanceHistoryGraphSubject.next(result);\n        });\n        this.subscription.add(subscription);\n      }\n\n      return this.balanceHistoryGraphSubject;\n    }\n\n    fetchPredictiveMessage(refresh = false) {\n      if (!this.predictiveMessage || refresh) {\n        this.predictiveMessage = from(this.baseService.get(this.endPoints.predictiveMessage));\n        const subscription = this.predictiveMessage.subscribe(data => {\n          this.predictiveMessage$.next(data);\n        });\n        this.subscription.add(subscription);\n      }\n\n      return this.predictiveMessage$;\n    }\n\n    posNegSymbol(val) {\n      if (val && +val) {\n        return val < 0 ? '' : '+';\n      }\n\n      return '';\n    }\n\n    getSelectedTab$() {\n      return this.selectedTab$;\n    }\n\n    publishSelectedTab(selectedTab) {\n      this.selectedTab$.next(selectedTab);\n    }\n\n    getAllAccounts(refresh = false) {\n      if (!this.allAccountData || refresh) {\n        this.allAccountData = from(this.getJSON());\n        const allAccountSubscription = this.allAccountData.subscribe(data => {\n          this.allAccountSubject.next(data);\n        });\n        this.subscription.add(allAccountSubscription);\n      }\n\n      return this.allAccountSubject;\n    }\n\n    allAccountsWithoutHSA(refresh = false) {\n      if (!this.allAccountsWithoutHSAData || refresh) {\n        this.allAccountsWithoutHSAData = from(this.getAllAccountsWithOutHSA());\n        const subscription = this.allAccountsWithoutHSAData.subscribe(data => {\n          this.allAccountsWithoutHSASubject.next(data);\n        });\n        this.subscription.add(subscription);\n      }\n\n      return this.allAccountsWithoutHSASubject;\n    }\n\n    allAccountsWithHSA(refresh = false) {\n      if (!this.allAccountsWithHSAData || refresh) {\n        this.allAccountsWithHSAData = from(this.getOnlyWithHSAAccount());\n        const subscription = this.allAccountsWithHSAData.subscribe(data => {\n          this.allAccountsWithHSASubject.next(data);\n        });\n        this.subscription.add(subscription);\n      }\n\n      return this.allAccountsWithHSASubject;\n    }\n\n    getAccountDataBasedOnType(planId, type, refresh = false) {\n      return this.allAccountsWithoutHSA(refresh).pipe(map(data => data[type] && data[type].accounts.filter(account => account.planId === planId && !account.isVoyaAccessPlan)[0]));\n    }\n\n    getNonHSAAccountDataWithoutType(planId, refresh = false) {\n      return this.allAccountsWithoutHSA(refresh).pipe(map(data => data['retirementAccounts'] && data['retirementAccounts'].accounts.filter(account => account.planId === planId && !account.isVoyaAccessPlan)[0] || data['stockAccounts'] && data['stockAccounts'].accounts.filter(account => account.planId === planId && !account.isVoyaAccessPlan)[0] || data['vendorAccounts'] && data['vendorAccounts'].accounts.filter(account => account.planId === planId && !account.isVoyaAccessPlan)[0] || data['brokerageAccounts'] && data['brokerageAccounts'].accounts.filter(account => account.planId === planId && !account.isVoyaAccessPlan)[0]));\n    }\n\n    getAccountDataWithoutType(planId, refresh = false) {\n      return this.getNonHSAAccountDataWithoutType(planId, refresh).pipe(concatMap(data => {\n        if (data) {\n          return of(data);\n        } else {\n          return this.allAccountsWithHSA(refresh).pipe(map(data => {\n            return data['hsaAccounts'] && data['hsaAccounts'].accounts.filter(account => account.planId === planId && !account.isVoyaAccessPlan)[0];\n          }));\n        }\n      }));\n    }\n\n    filterIsVoyaAccessPlanAccountData(data, type, planId, agreementId) {\n      return data[type] && data[type].accounts.filter(account => account.planId === planId && account.agreementId === agreementId && account.isVoyaAccessPlan)[0];\n    }\n\n    getIsVoyaAccessPlanAccountData(planId, agreementId, refresh = false) {\n      return this.allAccountsWithoutHSA(refresh).pipe(map(data => this.filterIsVoyaAccessPlanAccountData(data, 'retirementAccounts', planId, agreementId) || this.filterIsVoyaAccessPlanAccountData(data, 'stockAccounts', planId, agreementId) || this.filterIsVoyaAccessPlanAccountData(data, 'vendorAccounts', planId, agreementId)));\n    }\n\n    openPwebAccountLink(link, target) {\n      var _this20 = this;\n\n      return _asyncToGenerator(function* () {\n        if (_this20.utilityService.getIsWeb()) {\n          window.open(link, target || '_blank');\n        } else {\n          const loading = yield _this20.loadingController.create({\n            translucent: true\n          });\n          yield loading.present();\n          const authToken = yield _this20.authService.getAccessToken();\n          const request = {\n            client_id: _this20.environment.authTokenExchangeClient,\n            subject_token: authToken,\n            subject_token_type: 'access_token',\n            audience: _this20.environment.loginBaseUrl + _this20.environment.samlAudience,\n            grant_type: 'urn:ietf:params:oauth:grant-type:token-exchange',\n            requested_token_type: 'access_token',\n            scope: 'urn:voya:federation'\n          };\n          const queryAuthTokenResponse = yield _this20.baseService.postUrlEncoded(_this20.environment.tokenBaseUrl + 'oidcop/sps/oauth/oauth20/token', request, {});\n          loading.dismiss();\n\n          const url = _this20.encodePwebAccountLink(link, queryAuthTokenResponse.access_token);\n\n          _this20.inAppBrowserService.openSystemBrowser(url);\n        }\n      })();\n    }\n\n    encodePwebAccountLink(link, access_token) {\n      return this.loginEndpoints.authService.replace('[exchanged_access_token]', access_token) + encodeURIComponent(link);\n    }\n\n    openInAppBrowser(link) {\n      this.inAppBrowserService.openSystemBrowser(link);\n    }\n\n    transformHSAAccount(hsa) {\n      let totalBal = hsa.CashBalance;\n\n      if (hsa.Plan_Type === 'HSA') {\n        totalBal = hsa.TotalBalance;\n      }\n\n      const acc = {\n        accountTitle: hsa.Plan_Name,\n        accountBalance: totalBal.toString(),\n        accountBalanceAsOf: hsa.AsOfDate,\n        sourceSystem: '',\n        suppressTab: false,\n        voyaSavings: '',\n        includedInOrangeMoney: false,\n        accountAllowedForMyVoya: false,\n        clientId: '',\n        planId: hsa.Plan_ID.toString(),\n        planType: hsa.Plan_Type,\n        accountNumber: '',\n        needOMAutomaticUpdate: false,\n        planName: hsa.Plan_Name,\n        mpStatus: '',\n        clientAllowed4myVoyaOrSSO: false,\n        useMyvoyaHomepage: false,\n        advisorNonMoneyTxnAllowed: false,\n        advisorMoneyTxnAllowed: false,\n        nqPenCalPlan: false,\n        enrollmentAllowed: false,\n        autoEnrollmentAllowed: false,\n        vruPhoneNumber: '',\n        rmdRecurringPaymentInd: '',\n        navigateToRSPortfolio: false,\n        planLink: '',\n        openDetailInNewWindow: false,\n        nqPlan: false,\n        new: false,\n        eligibleForOrangeMoney: false,\n        iraplan: false,\n        xsellRestricted: false,\n        isVoyaAccessPlan: false,\n        isRestrictedRetirementPlan: false,\n        isVDAApplication: false,\n        isVendorPlan: false,\n        isHSAAccount: true,\n        hsaAccountData: hsa\n      };\n      return acc;\n    }\n\n    getHSAAccounts() {\n      var _this21 = this;\n\n      return _asyncToGenerator(function* () {\n        const sessionID = yield _this21.accessService.getSessionId();\n        const result = yield _this21.baseService.get(_this21.endPoints.allHSAAccounts + sessionID);\n\n        if (!result) {\n          return {\n            dataStatus: 'failed',\n            errorCode: '',\n            accounts: []\n          };\n        }\n\n        const resultArr = [];\n        result?.AllAccountsBalance?.forEach(element => {\n          resultArr.push(_this21.transformHSAAccount(element));\n        });\n        return {\n          dataStatus: result.Status,\n          errorCode: '',\n          accounts: resultArr\n        };\n      })();\n    }\n\n    transformHSATransaction(hsaTransaction) {\n      return {\n        tradeDate: hsaTransaction.Transaction_Date,\n        type: '',\n        tranCode: hsaTransaction.Transaction_Code,\n        cash: hsaTransaction.Transaction_Amt,\n        clientId: '',\n        planId: hsaTransaction.Plan_ID.toString(),\n        participantId: '',\n        unit_or_unshrs: '',\n        br140_new_val_cash: '',\n        br161_shr_price: '',\n        br009_run_date: '',\n        br011_seq_num: '',\n        br980_ACT_NAME: hsaTransaction.Transaction_Description,\n        br172_vouch_num: '',\n        isHSATransaction: true,\n        hsaTransactionData: hsaTransaction\n      };\n    }\n\n    getHSATransactions() {\n      var _this22 = this;\n\n      return _asyncToGenerator(function* () {\n        const hasPartyID = _this22.account.hsaAccountData?.HAS_PARTY_ID;\n        const planId = _this22.account.hsaAccountData?.Plan_ID;\n        const url = _this22.endPoints.hsaTransactions + hasPartyID + '/' + planId;\n        const result = yield _this22.baseService.get(url);\n        const resultArr = [];\n        result.AllAccountsTransactions.forEach(element => {\n          resultArr.push(_this22.transformHSATransaction(element));\n        });\n        return {\n          transactionHistories: resultArr\n        };\n      })();\n    }\n\n    getDisplayNameOrFirst(participant) {\n      if (participant.displayName && participant.displayName.length > 0 && participant.displayName.toLocaleLowerCase() != participant.lastName.toLocaleLowerCase() + ', ' + participant.firstName.toLocaleLowerCase()) {\n        return participant.displayName;\n      }\n\n      return participant.firstName;\n    }\n\n    getDisplayNameOrFirstOrLast(participant) {\n      const displayName = participant.displayName ? participant.displayName : '';\n      const firstName = participant.firstName ? participant.firstName : '';\n      const lastName = participant.lastName ? participant.lastName : '';\n\n      if (displayName.length > 0 && (displayName.includes(',') && displayName.toLocaleLowerCase() != firstName.toLocaleLowerCase() + ', ' + lastName.toLocaleLowerCase() || !displayName.includes(',') && displayName.toLocaleLowerCase() != firstName.toLocaleLowerCase() + ' ' + lastName.toLocaleLowerCase())) {\n        return displayName;\n      } else if (firstName.length > 0) {\n        return firstName;\n      } else {\n        return lastName;\n      }\n    }\n\n    getDisplayNameOrFirstLast(participant) {\n      const displayName = participant.displayName ? participant.displayName : '';\n      const firstName = participant.firstName ? participant.firstName : '';\n      const lastName = participant.lastName ? participant.lastName : '';\n\n      if (displayName.length > 0 && displayName.toLocaleLowerCase() != firstName.toLocaleLowerCase() + ', ' + lastName.toLocaleLowerCase()) {\n        return displayName;\n      } else {\n        return firstName + ' ' + lastName;\n      }\n    }\n\n    changeSort(data) {\n      this.sort.next(data);\n    }\n\n    currentSort() {\n      return this.sort.asObservable();\n    }\n\n    getAddAcctModalContent() {\n      var _this23 = this;\n\n      return _asyncToGenerator(function* () {\n        return new Promise(resolve => {\n          _this23.subscription.add(_this23.fetchAccountsContent().subscribe(response => {\n            resolve(response.WorkplaceAddAccountsModalJSON ? JSON.parse(response.WorkplaceAddAccountsModalJSON) : null);\n          }));\n        });\n      })();\n    }\n\n    getSectionValues() {\n      var _this24 = this;\n\n      return _asyncToGenerator(function* () {\n        return new Promise(resolve => {\n          _this24.subscription.add(_this24.fetchAccountsContent().subscribe(response => {\n            resolve(response.HSA_Transaction_FilterSort_SelectionList ? JSON.parse(response.HSA_Transaction_FilterSort_SelectionList) : null);\n          }));\n        });\n      })();\n    }\n\n    fetchAccountsContent(refresh = false) {\n      if (!this.accountsContent || refresh) {\n        this.accountsContent = from(this.baseService.get(this.endPoints.accountsContent));\n        const subscription = this.accountsContent.subscribe(data => {\n          this.accountsContent$.next(data);\n        });\n        this.subscription.add(subscription);\n      }\n\n      return this.accountsContent$;\n    }\n\n    changeFilt(data) {\n      this.filt.next(data);\n    }\n\n    setFiltSlcted(keyName) {\n      this.storedFilterKey = keyName;\n      localStorage.setItem('storedFilterKey', JSON.stringify(keyName));\n    }\n\n    getFiltSlcted() {\n      if (!this.storedFilterKey) {\n        this.storedFilterKey = JSON.parse(localStorage.getItem('storedFilterKey'));\n      }\n\n      return this.storedFilterKey;\n    }\n\n    currentFilter() {\n      return this.filt.asObservable();\n    }\n\n    setSortSlcted(keyName) {\n      this.storedSortKey = keyName;\n      localStorage.setItem('storedSortKey', JSON.stringify(keyName));\n    }\n\n    getSortSlcted() {\n      if (!this.storedSortKey) {\n        this.storedSortKey = JSON.parse(localStorage.getItem('storedSortKey'));\n      }\n\n      return this.storedSortKey;\n    } //#endregion\n\n\n    getMoneyOutStatusDetails() {\n      var _this25 = this;\n\n      return _asyncToGenerator(function* () {\n        const sessionID = yield _this25.accessService.getSessionId();\n        const moneyoutInfo = yield _this25.baseService.get(_this25.endPoints.moneyOut + sessionID);\n        return moneyoutInfo;\n      })();\n    }\n\n    getMoneyOutStatus(refresh = false) {\n      if (!this.moneyOutData || refresh) {\n        this.moneyOutData = from(this.getMoneyOutStatusDetails());\n        const subscription = this.moneyOutData.subscribe(result => {\n          this.moneyOutDataSubject.next(result);\n        });\n        this.subscription.add(subscription);\n      }\n\n      return this.moneyOutDataSubject;\n    }\n\n    ngOnDestroy() {\n      this.subscription.unsubscribe();\n    }\n\n  }\n\n  AccountService.ɵfac = function AccountService_Factory(t) {\n    return new (t || AccountService)(i0.ɵɵinject(i1.SharedUtilityService), i0.ɵɵinject(i2.BaseService), i0.ɵɵinject(i3.AccessService), i0.ɵɵinject(i4.InAppBroserService), i0.ɵɵinject(i5.LoadingController), i0.ɵɵinject(i6.AuthenticationService));\n  };\n\n  AccountService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AccountService,\n    factory: AccountService.ɵfac,\n    providedIn: 'root'\n  });\n  return AccountService;\n})();","map":null,"metadata":{},"sourceType":"module"}