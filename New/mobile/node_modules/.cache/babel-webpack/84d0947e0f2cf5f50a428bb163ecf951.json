{"ast":null,"code":"define(['./AccountTypes', './loan/Loan', './util/CalcUtilities'], function (AccountTypes, Loan, CalcUtilities) {\n  var OMCalculatorResponse = function () {\n    //  Private Variable Declarations ------------------------------------\n    var _accountData = null;\n    var _incomeData = null;\n    var _commonData = null;\n    var _benefitEvalResponse = null; //  Privileged method Declarations ------------------------------------\n\n    this.getAccountDataList = function () {\n      return _accountData;\n    };\n\n    this.setAccountDataList = function (lad) {\n      _accountData = lad;\n    };\n\n    this.getIncomeDataList = function () {\n      return _incomeData;\n    };\n\n    this.setIncomeDataList = function (lid) {\n      _incomeData = lid;\n    };\n\n    this.getCommonData = function () {\n      return _commonData;\n    };\n\n    this.setCommonData = function (cd) {\n      _commonData = cd;\n    };\n\n    this.getRetireBenefitEvalResponse = function () {\n      return _benefitEvalResponse;\n    };\n\n    this.setRetireBenefitEvalResponse = function (ber) {\n      _benefitEvalResponse = ber;\n    };\n\n    this.getLoans = function (type) {\n      var _loans = new Array();\n\n      var _loan = null;\n\n      for (var i = 0; i < _accountData.length; i++) {\n        var ad = _accountData[i];\n        _loan = null;\n\n        if (type == ad.getType()) {\n          _loan = ad.getLoan();\n\n          if (_loan != null) {\n            _loans.push(_loan);\n          }\n        }\n      }\n\n      return _loans;\n    };\n\n    this.getLoanBalanceAtRetirement = function (type) {\n      var balance = 0.0;\n      var loan = null;\n\n      for (var i = 0; i < _accountData.length; i++) {\n        var ad = _accountData[i];\n        loan = null;\n\n        if (type == ad.getType()) {\n          loan = ad.getLoan();\n\n          if (loan != null) {\n            balance += loan.getBalance(CalcUtilities.getSerialIndexFromPeriodAndMode(Math.max(_benefitEvalResponse.getYearsToRetire() - 1, 0), Math.max(ad.getFrequency() - 1, 0), ad.getFrequency()));\n          }\n        }\n      }\n\n      return CalcUtilities.roundAndTruncate(balance, 2);\n    };\n\n    this.getTotalStartingBalance = function (excludedType) {\n      var retValue = 0.0;\n\n      for (var i = 0; i < _accountData.length; i++) {\n        var ad = _accountData[i];\n\n        if (excludedType != ad.getType()) {\n          retValue += ad.getBalance();\n        }\n      }\n\n      return retValue;\n    };\n  };\n\n  return OMCalculatorResponse;\n});","map":null,"metadata":{},"sourceType":"script"}