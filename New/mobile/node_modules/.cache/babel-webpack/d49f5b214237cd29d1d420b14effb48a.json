{"ast":null,"code":"import _asyncToGenerator from \"/Users/vijay.a/Documents/GitHub/MYVOYAGE/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { BehaviorSubject, from, ReplaySubject } from 'rxjs';\nimport { endpoints } from './constants/endpoints/endpoints';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@shared-lib/services/base/base-factory-provider\";\nimport * as i2 from \"@shared-lib/services/utility/utility.service\";\nexport let NotificationsSettingService = /*#__PURE__*/(() => {\n  class NotificationsSettingService {\n    constructor(baseService, utilityService) {\n      this.baseService = baseService;\n      this.utilityService = utilityService;\n      this.notificationPrefsChanged = new BehaviorSubject({});\n      this.notificationSettingsData = null;\n      this.notificationSettingsSubject = new ReplaySubject(1);\n      this.endpoints = this.utilityService.appendBaseUrlToEndpoints(endpoints);\n      this.notificationPrefsChanged$ = this.notificationPrefsChanged.asObservable();\n      this.prefSettings = {\n        emailContactId: '',\n        mobileContactId: '',\n        HPPrefPushContactId: '',\n        HPPrefMobileContactId: '',\n        HPPrefEmailContactId: '',\n        AAPrefPushContactId: '',\n        AAPrefMobileContactId: '',\n        AAPrefEmailContactId: '',\n        INPrefPushContactId: '',\n        INPrefMobileContactId: '',\n        INPrefEmailContactId: ''\n      };\n      this.notificationPrefsChanged.next(this.prefSettings);\n    }\n\n    getSettingsContent() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        if (_this.settingsContent == null) {\n          _this.settingsContent = yield _this.baseService.get(_this.endpoints.getFooterContent);\n        }\n\n        return _this.settingsContent;\n      })();\n    }\n\n    setNotificationSettings(noteSettings) {\n      this.notificationSettingsSubject.next(noteSettings);\n    }\n\n    getNotificationSettings(refresh = false) {\n      if (!this.notificationSettingsData || refresh) {\n        this.notificationSettingsData = from(this.baseService.get(this.endpoints.getNotificationSettings));\n        this.notificationSettingsData.subscribe(result => {\n          //If mobilePhone is undefined, it causes issues with the notificaton settings\n          if (!result.mobilePhone) {\n            result.mobilePhone = {\n              partyContactId: '',\n              phoneNumber: '',\n              lastUpdatedDate: new Date()\n            };\n          }\n\n          this.notificationSettingsSubject.next(result);\n        });\n      }\n\n      return this.notificationSettingsSubject;\n    }\n\n    updateSettings(checked, fieldName) {\n      const tmpVals = fieldName.split('-');\n      const splitField = tmpVals[0];\n      const splitVal = tmpVals[1];\n\n      if (checked) {\n        if (fieldName.includes('Email')) {\n          this.prefSettings[splitField] = this.prefSettings.emailContactId;\n        } else if (fieldName.includes('Mobile')) {\n          this.prefSettings[splitField] = this.prefSettings.mobileContactId;\n        } else {\n          this.prefSettings[splitField] = this.prefSettings.emailContactId;\n        }\n      } else {\n        this.prefSettings[splitField] = splitVal;\n      }\n\n      this.notificationPrefsChanged.next(this.prefSettings);\n    }\n\n    setPrefsSettings() {\n      if (!this.prefSettingsInitialized) {\n        this.prefSettingsInitialized = true;\n        this.getNotificationSettings().subscribe(nsPrefSettingsData => {\n          const partyIds = {\n            mobileContactId: nsPrefSettingsData?.mobilePhone?.partyContactId,\n            emailContactId: nsPrefSettingsData?.primaryEmail?.partyContactId,\n            HPPrefPushContactId: nsPrefSettingsData?.highPrioitytNotificationPrefs?.prefPushNotificationContactId,\n            HPPrefMobileContactId: nsPrefSettingsData?.highPrioitytNotificationPrefs?.prefMobileContactId,\n            HPPrefEmailContactId: nsPrefSettingsData?.highPrioitytNotificationPrefs?.prefEmailContactId,\n            AAPrefPushContactId: nsPrefSettingsData?.accountAlertPrefs?.prefPushNotificationContactId,\n            AAPrefMobileContactId: nsPrefSettingsData?.accountAlertPrefs?.prefMobileContactId,\n            AAPrefEmailContactId: nsPrefSettingsData?.accountAlertPrefs?.prefEmailContactId,\n            INPrefPushContactId: nsPrefSettingsData?.insightsNotificationPrefs?.prefPushNotificationContactId,\n            INPrefMobileContactId: nsPrefSettingsData?.insightsNotificationPrefs?.prefMobileContactId,\n            INPrefEmailContactId: nsPrefSettingsData?.insightsNotificationPrefs?.prefEmailContactId\n          };\n          this.prefSettings = partyIds;\n          this.notificationPrefsChanged.next(this.prefSettings);\n        });\n      }\n    }\n\n    saveNotificationPrefs(values) {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        if (values) {\n          _this2.updatedValues = values;\n        } else {\n          _this2.updatedValues = {\n            insightsNotificationPrefs: {\n              prefPushNotificationContactId: _this2.prefSettings.INPrefPushContactId,\n              prefMobileContactId: _this2.prefSettings.INPrefMobileContactId,\n              prefEmailContactId: _this2.prefSettings.INPrefEmailContactId\n            },\n            accountAlertPrefs: {\n              prefPushNotificationContactId: _this2.prefSettings.AAPrefPushContactId,\n              prefMobileContactId: _this2.prefSettings.AAPrefMobileContactId,\n              prefEmailContactId: _this2.prefSettings.AAPrefEmailContactId\n            },\n            highPrioitytNotificationPrefs: {\n              prefPushNotificationContactId: _this2.prefSettings.HPPrefPushContactId,\n              prefMobileContactId: _this2.prefSettings.HPPrefMobileContactId,\n              prefEmailContactId: _this2.prefSettings.HPPrefEmailContactId\n            }\n          };\n        }\n\n        return _this2.baseService.post(_this2.endpoints.saveNotificationPreferences, _this2.updatedValues);\n      })();\n    }\n\n    getCheckedAndActive(partyIds, basePropName) {\n      const text = partyIds[basePropName + 'MobileContactId'];\n      const email = partyIds[basePropName + 'EmailContactId'];\n      const push = partyIds[basePropName + 'PushContactId'];\n      const pushChecked = this.isChecked(push);\n      const textChecked = this.isChecked(text);\n      const emailChecked = this.isChecked(email);\n      const isDisabled = this.prefSettings.mobileContactId === '' ? true : false;\n      return {\n        pushChecked: pushChecked,\n        emailChecked: emailChecked,\n        textChecked: textChecked,\n        sectionActive: pushChecked || emailChecked || textChecked,\n        textDisabled: isDisabled\n      };\n    }\n\n    isChecked(str) {\n      return str !== undefined && str.length > 0 && !str.includes('DONT');\n    }\n\n  }\n\n  NotificationsSettingService.ɵfac = function NotificationsSettingService_Factory(t) {\n    return new (t || NotificationsSettingService)(i0.ɵɵinject(i1.BaseService), i0.ɵɵinject(i2.SharedUtilityService));\n  };\n\n  NotificationsSettingService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: NotificationsSettingService,\n    factory: NotificationsSettingService.ɵfac,\n    providedIn: 'root'\n  });\n  return NotificationsSettingService;\n})();","map":null,"metadata":{},"sourceType":"module"}