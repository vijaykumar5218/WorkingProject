{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { ReplaySubject, Subscription } from 'rxjs';\nimport { endpoints } from '../constants/unExpectedEndpoints';\nimport * as moment from 'moment';\nimport { Status } from '@shared-lib/constants/status.enum';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../journey.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@shared-lib/services/mx-service/mx.service\";\nimport * as i4 from \"@shared-lib/services/notification-setting/notification-setting.service\";\nimport * as i5 from \"@shared-lib/services/base/base-factory-provider\";\nimport * as i6 from \"@shared-lib/services/utility/utility.service\";\nimport * as i7 from \"../journeyUtilityService/journey-utility.service\";\nexport let UnExpectedService = /*#__PURE__*/(() => {\n  class UnExpectedService {\n    constructor(journeyService, currencyPipe, mxService, notificationSettingsService, baseService, utilityService, journeyUtilityService) {\n      this.journeyService = journeyService;\n      this.currencyPipe = currencyPipe;\n      this.mxService = mxService;\n      this.notificationSettingsService = notificationSettingsService;\n      this.baseService = baseService;\n      this.utilityService = utilityService;\n      this.journeyUtilityService = journeyUtilityService;\n      this.valueChange = new ReplaySubject(1);\n      this.subscription = new Subscription();\n      this.mxAccountSubject = new ReplaySubject(1);\n      this.weeksInYear = 52;\n      this.monthsOfThreeYears = 36;\n      this.endpoints = this.utilityService.appendBaseUrlToEndpoints(endpoints);\n    }\n\n    initialize(journey) {\n      this.notificationSettingsService.setPrefsSettings();\n      this.subscription.add(this.notificationSettingsService.notificationPrefsChanged$.subscribe(settings => {\n        this.displayNotificationSection = !this.notificationSettingsService.getCheckedAndActive(settings, 'AAPref').sectionActive;\n      }));\n      this.setAnswers(this.journeyService.getAnswerList(journey));\n      this.setMaxJobLossWeeks(journey);\n      this.setOverviewSummary(journey);\n      this.valueChange.next();\n    }\n\n    setAnswers(answerList) {\n      this.accountLinkedId = undefined;\n      this.accountNotLinked = true;\n      this.accountLinked = false;\n      answerList === null || answerList === void 0 ? void 0 : answerList.forEach(answer => {\n        const parsedAnswer = this.journeyService.safeParse(answer);\n\n        if (parsedAnswer) {\n          if (parsedAnswer['grossYearIncome'] && parsedAnswer['jobLossWeeks']) {\n            this.setGrossYearIncome(parsedAnswer['grossYearIncome']);\n            this.grossWeeklyIncome = parseInt(this.grossYearIncome) / this.weeksInYear;\n            this.setSavedMoney(parsedAnswer);\n            this.jobLossWeeks = parsedAnswer['jobLossWeeks'];\n            this.emergencyGoalCalculation(parsedAnswer['jobLossWeeks'], 'defaultEmergencySavingGoal', 'defaultTargetMonthlyContribution');\n          } else if (parsedAnswer['linkExistingAccount']) {\n            this.accountLinkedId = parsedAnswer['linkExistingAccount'];\n            this.checkMXAccountsExists(this.MXAccountData);\n          }\n        }\n      });\n      this.currentSavings = this.accountLinked ? this.accountBalance : this.savedMoney;\n      this.targetAchieved();\n      this.adjustedTargetAchieved();\n    }\n\n    targetAchieved() {\n      var _a;\n\n      this.isTargetAchieved = this.currentSavings >= parseFloat((_a = this.defaultEmergencySavingGoal) === null || _a === void 0 ? void 0 : _a.slice(1).replace(/,/g, ''));\n      this.isTargetNotAchieved = !this.isTargetAchieved;\n    }\n\n    adjustedTargetAchieved() {\n      var _a;\n\n      this.isAdjustedTargetAchieved = this.currentSavings >= parseFloat((_a = this.adjustedEmergencySavingGoal) === null || _a === void 0 ? void 0 : _a.slice(1).replace(/,/g, ''));\n      this.isAdjustedTargetNotAchieved = !this.isAdjustedTargetAchieved;\n    }\n\n    checkMXAccountsExists(mxAccount) {\n      if (mxAccount) {\n        this.setAccountStatus(mxAccount);\n      } else {\n        this.subscription.add(this.getMXAccountData().subscribe(res => {\n          this.MXAccountData = res;\n          this.setAccountStatus(this.MXAccountData);\n        }));\n      }\n    }\n\n    setAccountStatus(mxAccountsData) {\n      if (mxAccountsData.accounts.length > 0) {\n        if (this.accountLinkedId) {\n          mxAccountsData.accounts.forEach(account => {\n            if (account.guid === this.accountLinkedId) {\n              this.accountLinked = true;\n              this.accountNotLinked = false;\n              this.accountBalance = account.balance ? parseFloat(account.balance) : 0;\n            }\n          });\n        }\n      }\n    }\n\n    stepChange(journey) {\n      this.setAnswers(this.journeyService.getAnswerList(journey));\n      this.setMaxJobLossWeeks(journey);\n      this.setOverviewSummary(journey);\n      this.valueChange.next();\n    }\n\n    setGrossYearIncome(grossYearIncome) {\n      this.grossYearIncome = grossYearIncome.slice(1).replace(/,/g, '');\n    }\n\n    setSavedMoney(parsedAnswer) {\n      this.savedMoney = 0;\n\n      if (parsedAnswer['adjustGoal']) {\n        const adjustGoal = this.journeyService.safeParse(parsedAnswer['adjustGoal']);\n\n        if (adjustGoal['adjustGoal'] === 'adjustGoalYes') {\n          this.savedMoney = adjustGoal['SavedMoney'].slice(1);\n          this.savedMoney = this.savedMoney ? this.savedMoney : 0;\n        }\n      }\n    }\n\n    onChange(newValue) {\n      if (newValue !== this.adjustedJobLossWeeks) {\n        this.adjustedJobLossWeeks = newValue;\n        this.emergencyGoalCalculation(newValue.toString(), 'adjustedEmergencySavingGoal', 'adjustedTargetMonthlyContribution');\n        this.adjustedTargetAchieved();\n        this.valueChange.next();\n      }\n    }\n\n    reset() {\n      return this.resetJobLossWeeks;\n    }\n\n    setMaxJobLossWeeks(journey) {\n      this.adjustedJobLossWeeks = parseInt(this.jobLossWeeks);\n      this.isAdjustGoalYes = false;\n\n      for (const step of journey.steps) {\n        const answer = this.journeyService.safeParse(step.answer);\n\n        if (answer && answer['adjustGoal']) {\n          const adjustGoal = this.journeyService.safeParse(answer['adjustGoal']);\n\n          if (adjustGoal && adjustGoal['adjustedUnexpectedGoal']) {\n            const adjustedUnexpectedGoal = this.journeyService.safeParse(adjustGoal['adjustedUnexpectedGoal']);\n            this.adjustedJobLossWeeks = parseInt(Object.values(adjustedUnexpectedGoal)[0]);\n            this.isAdjustGoalYes = adjustGoal['adjustGoal'] === 'adjustGoalYes' ? true : false;\n          }\n        }\n      }\n\n      this.emergencyGoalCalculation(this.adjustedJobLossWeeks.toString(), 'adjustedEmergencySavingGoal', 'adjustedTargetMonthlyContribution');\n      this.resetJobLossWeeks = this.adjustedJobLossWeeks;\n    }\n\n    emergencyGoalCalculation(jobLossWeeks, emergencySavingGoalKey, targetMonthlyContributionKey) {\n      const emergencySavingGoal = this.grossWeeklyIncome * parseInt(jobLossWeeks);\n      const targetMonthlyContribution = emergencySavingGoal / this.monthsOfThreeYears;\n      this.setValuesOfGoalCalculation(emergencySavingGoalKey, emergencySavingGoal);\n      this.setValuesOfGoalCalculation(targetMonthlyContributionKey, targetMonthlyContribution);\n    }\n\n    setValuesOfGoalCalculation(key, value) {\n      this[key] = this.currencyPipe.transform(value, 'USD', true, '1.2-2');\n    }\n\n    fetchDynamicCardContent(element) {\n      element.elements.forEach((ele, index) => {\n        element.elements[index].header = element.elements[index].defaultHeader;\n        element.elements[index].description = element.elements[index].defaultDescription;\n\n        for (const item of ['grossYearIncome', 'grossWeeklyIncome', 'weeksInYear', 'defaultEmergencySavingGoal', 'defaultTargetMonthlyContribution', 'jobLossWeeks', 'monthsOfThreeYears']) {\n          let replaceValue = this[item];\n\n          if (item === 'grossWeeklyIncome') {\n            replaceValue = this.currencyPipe.transform(replaceValue, 'USD', true, '1.2-2');\n          }\n\n          element.elements[index].header = ele.header.replace(new RegExp(item, 'g'), replaceValue);\n\n          if (element.elements[index].description) {\n            if (element.textColor) {\n              replaceValue = this.setTextColor(item, replaceValue, element.textColor);\n            }\n\n            element.elements[index].description = ele.description.replace(new RegExp(item, 'g'), replaceValue);\n          }\n        }\n      });\n      return element;\n    }\n\n    setTextColor(item, replaceValue, textColor) {\n      if (item === 'grossYearIncome' || item === 'grossWeeklyIncome' || item === 'defaultEmergencySavingGoal') {\n        replaceValue = `<span style='color:${textColor} !important;'><strong>($` + replaceValue + `)</strong></span>`;\n      } else if (item === 'jobLossWeeks') {\n        replaceValue = `<span style='color:${textColor} !important;'><strong>(` + replaceValue + `)</strong></span>`;\n      } else if (item === 'monthsOfThreeYears' || item === 'weeksInYear') {\n        replaceValue = `<span style='color:${textColor} !important;'><strong>` + replaceValue + `</strong></span>`;\n      }\n\n      return replaceValue;\n    }\n\n    setOverviewSummary(journey) {\n      this.emergencySavingGoal = this.isAdjustGoalYes ? this.adjustedEmergencySavingGoal : this.defaultEmergencySavingGoal;\n      this.targetMonthlyContribution = this.isAdjustGoalYes ? this.adjustedTargetMonthlyContribution : this.defaultTargetMonthlyContribution;\n      const journeyStatus = this.journeyService.getJourneyStatus(journey.steps);\n\n      if (journeyStatus === Status.completed) {\n        this.targetCompletionDate = this.getTargetCompletionDate(journey);\n      }\n    }\n\n    fetchUnexpectedGoalContent() {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (!this.unexpectedGoalContentPromise) {\n          this.unexpectedGoalContentPromise = this.baseService.get(this.endpoints.getUnexpectedContent);\n        }\n\n        const content = yield this.unexpectedGoalContentPromise;\n        return JSON.parse(content.UnexpectedGoalJSON);\n      });\n    }\n\n    getTargetCompletionDate(journey) {\n      return moment(journey.steps[0].createdDt ? new Date(journey.steps[0].createdDt) : new Date()).add(this.monthsOfThreeYears, 'M').format('MMM YYYY');\n    }\n\n    getMXAccountData() {\n      const mxSubscription = this.mxService.getMxAccountConnect().subscribe(data => {\n        const result = data === null || data === void 0 ? void 0 : data.accounts.filter(account => {\n          return account.account_type_name.toLowerCase() === 'checking' || account.account_type_name.toLowerCase() === 'savings' || account.account_type_name.toLowerCase() === 'cash';\n        });\n        this.journeyUtilityService.addAccountIconName(result, this.accountLinkedId);\n        this.mxAccountSubject.next({\n          accounts: result\n        });\n      });\n      this.subscription.add(mxSubscription);\n      return this.mxAccountSubject;\n    }\n\n    ngOnDestroy() {\n      this.subscription.unsubscribe();\n    }\n\n  }\n\n  UnExpectedService.ɵfac = function UnExpectedService_Factory(t) {\n    return new (t || UnExpectedService)(i0.ɵɵinject(i1.JourneyService), i0.ɵɵinject(i2.CurrencyPipe), i0.ɵɵinject(i3.MXService), i0.ɵɵinject(i4.NotificationsSettingService), i0.ɵɵinject(i5.BaseService), i0.ɵɵinject(i6.SharedUtilityService), i0.ɵɵinject(i7.JourneyUtilityService));\n  };\n\n  UnExpectedService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UnExpectedService,\n    factory: UnExpectedService.ɵfac,\n    providedIn: 'root'\n  });\n  return UnExpectedService;\n})();","map":null,"metadata":{},"sourceType":"module"}