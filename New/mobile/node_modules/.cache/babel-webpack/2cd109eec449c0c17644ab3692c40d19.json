{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { BehaviorSubject, from, ReplaySubject } from 'rxjs';\nimport { endpoints } from './constants/endpoints/endpoints';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@shared-lib/services/base/base-factory-provider\";\nimport * as i2 from \"@shared-lib/services/utility/utility.service\";\nexport let NotificationsSettingService = /*#__PURE__*/(() => {\n  class NotificationsSettingService {\n    constructor(baseService, utilityService) {\n      this.baseService = baseService;\n      this.utilityService = utilityService;\n      this.notificationPrefsChanged = new BehaviorSubject({});\n      this.notificationSettingsData = null;\n      this.notificationSettingsSubject = new ReplaySubject(1);\n      this.endpoints = this.utilityService.appendBaseUrlToEndpoints(endpoints);\n      this.notificationPrefsChanged$ = this.notificationPrefsChanged.asObservable();\n      this.prefSettings = {\n        emailContactId: '',\n        mobileContactId: '',\n        HPPrefPushContactId: '',\n        HPPrefMobileContactId: '',\n        HPPrefEmailContactId: '',\n        AAPrefPushContactId: '',\n        AAPrefMobileContactId: '',\n        AAPrefEmailContactId: '',\n        INPrefPushContactId: '',\n        INPrefMobileContactId: '',\n        INPrefEmailContactId: ''\n      };\n      this.notificationPrefsChanged.next(this.prefSettings);\n    }\n\n    getSettingsContent() {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (this.settingsContent == null) {\n          this.settingsContent = yield this.baseService.get(this.endpoints.getFooterContent);\n        }\n\n        return this.settingsContent;\n      });\n    }\n\n    setNotificationSettings(noteSettings) {\n      this.notificationSettingsSubject.next(noteSettings);\n    }\n\n    getNotificationSettings(refresh = false) {\n      if (!this.notificationSettingsData || refresh) {\n        this.notificationSettingsData = from(this.baseService.get(this.endpoints.getNotificationSettings));\n        this.notificationSettingsData.subscribe(result => {\n          //If mobilePhone is undefined, it causes issues with the notificaton settings\n          if (!result.mobilePhone) {\n            result.mobilePhone = {\n              partyContactId: '',\n              phoneNumber: '',\n              lastUpdatedDate: new Date()\n            };\n          }\n\n          this.notificationSettingsSubject.next(result);\n        });\n      }\n\n      return this.notificationSettingsSubject;\n    }\n\n    updateSettings(checked, fieldName) {\n      const tmpVals = fieldName.split('-');\n      const splitField = tmpVals[0];\n      const splitVal = tmpVals[1];\n\n      if (checked) {\n        if (fieldName.includes('Email')) {\n          this.prefSettings[splitField] = this.prefSettings.emailContactId;\n        } else if (fieldName.includes('Mobile')) {\n          this.prefSettings[splitField] = this.prefSettings.mobileContactId;\n        } else {\n          this.prefSettings[splitField] = this.prefSettings.emailContactId;\n        }\n      } else {\n        this.prefSettings[splitField] = splitVal;\n      }\n\n      this.notificationPrefsChanged.next(this.prefSettings);\n    }\n\n    setPrefsSettings() {\n      if (!this.prefSettingsInitialized) {\n        this.prefSettingsInitialized = true;\n        this.getNotificationSettings().subscribe(nsPrefSettingsData => {\n          var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;\n\n          const partyIds = {\n            mobileContactId: (_a = nsPrefSettingsData === null || nsPrefSettingsData === void 0 ? void 0 : nsPrefSettingsData.mobilePhone) === null || _a === void 0 ? void 0 : _a.partyContactId,\n            emailContactId: (_b = nsPrefSettingsData === null || nsPrefSettingsData === void 0 ? void 0 : nsPrefSettingsData.primaryEmail) === null || _b === void 0 ? void 0 : _b.partyContactId,\n            HPPrefPushContactId: (_c = nsPrefSettingsData === null || nsPrefSettingsData === void 0 ? void 0 : nsPrefSettingsData.highPrioitytNotificationPrefs) === null || _c === void 0 ? void 0 : _c.prefPushNotificationContactId,\n            HPPrefMobileContactId: (_d = nsPrefSettingsData === null || nsPrefSettingsData === void 0 ? void 0 : nsPrefSettingsData.highPrioitytNotificationPrefs) === null || _d === void 0 ? void 0 : _d.prefMobileContactId,\n            HPPrefEmailContactId: (_e = nsPrefSettingsData === null || nsPrefSettingsData === void 0 ? void 0 : nsPrefSettingsData.highPrioitytNotificationPrefs) === null || _e === void 0 ? void 0 : _e.prefEmailContactId,\n            AAPrefPushContactId: (_f = nsPrefSettingsData === null || nsPrefSettingsData === void 0 ? void 0 : nsPrefSettingsData.accountAlertPrefs) === null || _f === void 0 ? void 0 : _f.prefPushNotificationContactId,\n            AAPrefMobileContactId: (_g = nsPrefSettingsData === null || nsPrefSettingsData === void 0 ? void 0 : nsPrefSettingsData.accountAlertPrefs) === null || _g === void 0 ? void 0 : _g.prefMobileContactId,\n            AAPrefEmailContactId: (_h = nsPrefSettingsData === null || nsPrefSettingsData === void 0 ? void 0 : nsPrefSettingsData.accountAlertPrefs) === null || _h === void 0 ? void 0 : _h.prefEmailContactId,\n            INPrefPushContactId: (_j = nsPrefSettingsData === null || nsPrefSettingsData === void 0 ? void 0 : nsPrefSettingsData.insightsNotificationPrefs) === null || _j === void 0 ? void 0 : _j.prefPushNotificationContactId,\n            INPrefMobileContactId: (_k = nsPrefSettingsData === null || nsPrefSettingsData === void 0 ? void 0 : nsPrefSettingsData.insightsNotificationPrefs) === null || _k === void 0 ? void 0 : _k.prefMobileContactId,\n            INPrefEmailContactId: (_l = nsPrefSettingsData === null || nsPrefSettingsData === void 0 ? void 0 : nsPrefSettingsData.insightsNotificationPrefs) === null || _l === void 0 ? void 0 : _l.prefEmailContactId\n          };\n          this.prefSettings = partyIds;\n          this.notificationPrefsChanged.next(this.prefSettings);\n        });\n      }\n    }\n\n    saveNotificationPrefs() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.updatedValues = {\n          insightsNotificationPrefs: {\n            prefPushNotificationContactId: this.prefSettings.INPrefPushContactId,\n            prefMobileContactId: this.prefSettings.INPrefMobileContactId,\n            prefEmailContactId: this.prefSettings.INPrefEmailContactId\n          },\n          accountAlertPrefs: {\n            prefPushNotificationContactId: this.prefSettings.AAPrefPushContactId,\n            prefMobileContactId: this.prefSettings.AAPrefMobileContactId,\n            prefEmailContactId: this.prefSettings.AAPrefEmailContactId\n          },\n          highPrioitytNotificationPrefs: {\n            prefPushNotificationContactId: this.prefSettings.HPPrefPushContactId,\n            prefMobileContactId: this.prefSettings.HPPrefMobileContactId,\n            prefEmailContactId: this.prefSettings.HPPrefEmailContactId\n          }\n        };\n        return this.baseService.post(this.endpoints.saveNotificationPreferences, this.updatedValues);\n      });\n    }\n\n    getCheckedAndActive(partyIds, basePropName) {\n      const text = partyIds[basePropName + 'MobileContactId'];\n      const email = partyIds[basePropName + 'EmailContactId'];\n      const push = partyIds[basePropName + 'PushContactId'];\n      const pushChecked = this.isChecked(push);\n      const textChecked = this.isChecked(text);\n      const emailChecked = this.isChecked(email);\n      return {\n        pushChecked: pushChecked,\n        emailChecked: emailChecked,\n        textChecked: textChecked,\n        sectionActive: pushChecked || emailChecked || textChecked\n      };\n    }\n\n    isChecked(str) {\n      return str !== undefined && str.length > 0 && !str.includes('DONT');\n    }\n\n  }\n\n  NotificationsSettingService.ɵfac = function NotificationsSettingService_Factory(t) {\n    return new (t || NotificationsSettingService)(i0.ɵɵinject(i1.BaseService), i0.ɵɵinject(i2.SharedUtilityService));\n  };\n\n  NotificationsSettingService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: NotificationsSettingService,\n    factory: NotificationsSettingService.ɵfac,\n    providedIn: 'root'\n  });\n  return NotificationsSettingService;\n})();","map":null,"metadata":{},"sourceType":"module"}