{"ast":null,"code":"import _asyncToGenerator from \"/Users/vijay.a/Documents/GitHub/MYVOYAGE/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { endPoints, tokenEndPoints } from './constants/endpoints';\nimport { BenefitsSelectionModalComponent } from '@shared-lib/components/benefits-selection/modal/modal.component';\nimport { from, ReplaySubject, Subject, BehaviorSubject } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport { CoveragesSortOrder } from './constants/sorting';\nimport moment from 'moment';\nimport { card } from '../../components/coverages/plan-tabs/plan-details/my-id-card/constants/camera.enum';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../base/base-factory-provider\";\nimport * as i2 from \"../utility/utility.service\";\nimport * as i3 from \"@ionic/angular\";\nimport * as i4 from \"@shared-lib/services/event-tracker/event-tracking.service\";\nimport * as i5 from \"../modal-presentation/modal-presentation.service\";\nexport let BenefitsService = /*#__PURE__*/(() => {\n  class BenefitsService {\n    constructor(baseService, utilityService, modalController, eventTrackingService, modalPresentationService) {\n      this.baseService = baseService;\n      this.utilityService = utilityService;\n      this.modalController = modalController;\n      this.eventTrackingService = eventTrackingService;\n      this.modalPresentationService = modalPresentationService;\n      this.endPoints = endPoints;\n      this.tokenEndPoints = tokenEndPoints;\n      this.benefitSubject = new BehaviorSubject(null);\n      this.benefitsModalSeen = false;\n      this.benefitEnrollmentSubject = new ReplaySubject(1);\n      this.selectedTab$ = new Subject();\n      this.requestPayload = {\n        pageName: 'BELL',\n        actionPerformed: 'VISITED'\n      };\n      this.notificationStatus = new Subject();\n      this.filt = new BehaviorSubject([]);\n      this.sort = new BehaviorSubject('');\n      this.dateOption = new BehaviorSubject('thisYear');\n      this.storedFilterKey = [];\n      this.storedSortKey = '';\n      this.isDeepLink = false;\n      this.cardImagesSubject = new BehaviorSubject({});\n      this.benefitCards = {};\n      this.flipCardSubject = new BehaviorSubject('front');\n      this.smartBannerEnableConditions = new Subject();\n      this.currentSmartBannerEnableConditions = {\n        isSmartBannerHidden: false,\n        isSmartBannerDismissed: false\n      };\n      this.endPoints = this.utilityService.appendBaseUrlToEndpoints(endPoints);\n      this.tokenEndPoints = this.utilityService.appendBaseUrlToEndpoints(tokenEndPoints, this.utilityService.getEnvironment().tokenBaseUrl);\n    }\n\n    changeFilt(data) {\n      this.filt.next(data);\n    }\n\n    changeSort(data) {\n      this.sort.next(data);\n    }\n\n    changeDateOptions(data) {\n      this.dateOption.next(data);\n    }\n\n    getSelectedTab$() {\n      return this.selectedTab$;\n    }\n\n    currentFilter() {\n      return this.filt.asObservable();\n    }\n\n    currentSort() {\n      return this.sort.asObservable();\n    }\n\n    currentDateOpt() {\n      return this.dateOption.asObservable();\n    }\n\n    getSectionValues() {\n      return this.baseService.get(this.endPoints.getSelectionValues);\n    }\n\n    publishSelectedTab(selectedTab) {\n      this.selectedTab$.next(selectedTab);\n    }\n\n    setSmartBannerEnableConditions(smartBannerEnableConditions) {\n      if (smartBannerEnableConditions.isSmartBannerDismissed != undefined) {\n        this.currentSmartBannerEnableConditions.isSmartBannerDismissed = smartBannerEnableConditions.isSmartBannerDismissed;\n      }\n\n      if (smartBannerEnableConditions.isSmartBannerHidden != undefined) {\n        this.currentSmartBannerEnableConditions.isSmartBannerHidden = smartBannerEnableConditions.isSmartBannerHidden;\n      }\n\n      this.smartBannerEnableConditions.next(this.currentSmartBannerEnableConditions);\n    }\n\n    getSmartBannerEnableConditions() {\n      return this.smartBannerEnableConditions;\n    }\n\n    getBenefitsInternal() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        const bens = yield _this.baseService.get(_this.endPoints.benefits);\n        return _this.sortBenefits(bens);\n      })();\n    }\n\n    getBenefits() {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        if (!_this2.benefitsPromise) {\n          _this2.benefitsPromise = _this2.getBenefitsInternal();\n        }\n\n        return _this2.benefitsPromise;\n      })();\n    }\n\n    sortBenefits(bens) {\n      if (bens.enrolled) {\n        bens.enrolled = this.sortCoverages(bens.enrolled);\n      }\n\n      if (bens.declined) {\n        bens.declined = this.sortCoverages(bens.declined);\n      }\n\n      if (bens.provided) {\n        bens.provided = this.sortCoverages(bens.provided);\n      }\n\n      return bens;\n    }\n\n    sortCoverages(coverages) {\n      return coverages.sort((a, b) => {\n        let aVal = CoveragesSortOrder[a.type];\n\n        if (aVal == undefined) {\n          aVal = Number.MAX_SAFE_INTEGER;\n        }\n\n        let bVal = CoveragesSortOrder[b.type];\n\n        if (bVal == undefined) {\n          bVal = Number.MAX_SAFE_INTEGER;\n        }\n\n        return aVal - bVal;\n      });\n    }\n\n    getNextYearBenefits() {\n      var _this3 = this;\n\n      return _asyncToGenerator(function* () {\n        if (!_this3.nextYearBenefitsPromise) {\n          _this3.nextYearBenefitsPromise = new Promise(res => {\n            _this3.baseService.get(_this3.endPoints.benefits + '?nextYearIfAvailable=true&getTotalDeduction=true').then(bens => {\n              res(_this3.sortBenefits(bens));\n            });\n          });\n        }\n\n        return _this3.nextYearBenefitsPromise;\n      })();\n    }\n\n    setBenefit(benefit) {\n      localStorage.setItem('selectedBenefit', JSON.stringify(benefit));\n      this.benefit = benefit;\n      this.benefitSubject.next(benefit);\n    }\n\n    setFiltSlcted(keyName) {\n      this.storedFilterKey = keyName;\n      localStorage.setItem('storedFilterKey', JSON.stringify(keyName));\n    }\n\n    getFiltSlcted() {\n      if (!this.storedFilterKey) {\n        this.storedFilterKey = JSON.parse(localStorage.getItem('storedFilterKey'));\n      }\n\n      return this.storedFilterKey;\n    }\n\n    getSelectedBenefitObservable() {\n      if (this.benefitSubject.getValue() == null) {\n        this.getSelectedBenefit();\n      }\n\n      return this.benefitSubject;\n    }\n\n    getSelectedBenefit() {\n      if (!this.benefit) {\n        this.benefit = JSON.parse(localStorage.getItem('selectedBenefit'));\n        this.benefitSubject.next(this.benefit);\n      }\n\n      return this.benefit;\n    }\n\n    getBenefitContent() {\n      var _this4 = this;\n\n      return _asyncToGenerator(function* () {\n        if (!_this4.benefitsSummaryContent) {\n          const response = yield _this4.baseService.get(_this4.endPoints.benefitIcons);\n          _this4.benefitsSummaryContent = JSON.parse(response.BenefitsSummaryJSON);\n        }\n\n        return _this4.benefitsSummaryContent;\n      })();\n    }\n\n    getNoBenefitContents() {\n      var _this5 = this;\n\n      return _asyncToGenerator(function* () {\n        if (!_this5.noBenefitContentsPromise) {\n          _this5.noBenefitContentsPromise = _this5.baseService.get(_this5.endPoints.noBenefitContent);\n        }\n\n        return _this5.noBenefitContentsPromise;\n      })();\n    }\n\n    getNoHealthDataContent() {\n      var _this6 = this;\n\n      return _asyncToGenerator(function* () {\n        if (!_this6.nohealthUtilization) {\n          _this6.nohealthUtilization = yield _this6.baseService.get(_this6.endPoints.noHealthData);\n        }\n\n        return _this6.nohealthUtilization;\n      })();\n    }\n\n    getBenefitsSelectionModalContent() {\n      var _this7 = this;\n\n      return _asyncToGenerator(function* () {\n        yield _this7.setBenefitsSelectionContent();\n        return JSON.parse(_this7.benefitSelectionContent.BenefitsSelectionModalJSON);\n      })();\n    }\n\n    getBenefitsSelectionHomeContent() {\n      var _this8 = this;\n\n      return _asyncToGenerator(function* () {\n        yield _this8.setBenefitsSelectionContent();\n        return JSON.parse(_this8.benefitSelectionContent.BenefitsSelectionHomeJSON);\n      })();\n    }\n\n    setBenefitsSelectionContent() {\n      var _this9 = this;\n\n      return _asyncToGenerator(function* () {\n        if (!_this9.benefitSelectionContent) {\n          _this9.benefitSelectionContent = yield _this9.baseService.get(_this9.endPoints.benefitModals);\n        }\n      })();\n    }\n\n    openBenefitsSelectionModalIfEnabled() {\n      var _this10 = this;\n\n      return _asyncToGenerator(function* () {\n        if (!_this10.isDeepLink) {\n          const guidanceEnabled = yield _this10.getGuidanceEnabled();\n\n          if (guidanceEnabled.guidanceEnabled && !_this10.benefitsModalSeen) {\n            _this10.benefitsModalSeen = true;\n            const benefitsEnrollment$ = yield _this10.getBenefitsEnrollment();\n            benefitsEnrollment$.pipe(take(1)).subscribe( /*#__PURE__*/function () {\n              var _ref = _asyncToGenerator(function* (benefitsEnrollment) {\n                if (benefitsEnrollment?.enrollmentWindowEnabled && benefitsEnrollment.status != 'COMPLETED' && benefitsEnrollment.status != 'ACTION_PLAN_CREATED') {\n                  _this10.setSmartBannerEnableConditions({\n                    isSmartBannerHidden: true\n                  });\n\n                  const modal = yield _this10.modalController.create({\n                    component: BenefitsSelectionModalComponent,\n                    cssClass: 'modal-fullscreen',\n                    componentProps: {}\n                  });\n\n                  _this10.modalPresentationService.present(modal);\n                }\n              });\n\n              return function (_x) {\n                return _ref.apply(this, arguments);\n              };\n            }());\n          }\n        }\n      })();\n    }\n\n    resetBenefitsEnrollment() {\n      this.benefitEnrollment = undefined;\n    }\n\n    getBenefitsEnrollment() {\n      var _this11 = this;\n\n      return _asyncToGenerator(function* () {\n        try {\n          const guidanceEnabled = yield _this11.getGuidanceEnabled();\n\n          if (guidanceEnabled.guidanceEnabled && !_this11.benefitEnrollment) {\n            _this11.benefitEnrollment = _this11.baseService.get(_this11.endPoints.benefitsEnrollment);\n          }\n\n          const benefitEnrollment = yield _this11.benefitEnrollment;\n\n          _this11.benefitEnrollmentSubject.next(benefitEnrollment);\n\n          return _this11.benefitEnrollmentSubject;\n        } catch (e) {\n          console.log(e);\n          const benefitEnrollment = undefined;\n\n          _this11.benefitEnrollmentSubject.next(benefitEnrollment);\n\n          return _this11.benefitEnrollmentSubject;\n        }\n      })();\n    }\n\n    getCovExp() {\n      var _this12 = this;\n\n      return _asyncToGenerator(function* () {\n        if (!_this12.covexplanation) {\n          const response = yield _this12.baseService.get(_this12.endPoints.messages);\n          _this12.covexplanation = JSON.parse(response.CoverageExplanationsOOPDeductible);\n        }\n\n        return _this12.covexplanation;\n      })();\n    }\n\n    setBenefitSummaryBackButton(link) {\n      this.benefitSummaryBackButton = link;\n      localStorage.setItem('benefitSummaryBackButton', link);\n    }\n\n    getBenefitSummaryBackButton() {\n      const localStorageLink = localStorage.getItem('benefitSummaryBackButton');\n      return localStorageLink && localStorageLink !== 'undefined' ? localStorageLink : this.benefitSummaryBackButton;\n    }\n\n    fetchSpending(healthDates, refresh = false) {\n      var _this13 = this;\n\n      return _asyncToGenerator(function* () {\n        if (!_this13.healthUtlization || refresh) {\n          const payload = {\n            startDate: healthDates.startDate,\n            endDate: healthDates.endDate\n          };\n          _this13.healthUtlization = yield _this13.baseService.post(_this13.endPoints.spendingDetails, payload);\n        }\n\n        return _this13.healthUtlization;\n      })();\n    }\n\n    fetchHealthCheckContent(healthDates) {\n      var _this14 = this;\n\n      return _asyncToGenerator(function* () {\n        const payload = {\n          fromYear: moment(healthDates.startDate, 'MM/DD/YYYY').year(),\n          toYear: moment(healthDates.endDate, 'MM/DD/YYYY').year()\n        };\n        const result = yield _this14.baseService.post(_this14.endPoints.annualHealthCheckup, payload);\n        return result[0];\n      })();\n    }\n\n    getGuidanceEnabled(refresh = false) {\n      var _this15 = this;\n\n      return _asyncToGenerator(function* () {\n        if (!_this15.guidanceEnabled || refresh) {\n          _this15.guidanceEnabled = yield _this15.baseService.get(_this15.endPoints.guidanceEnabled);\n        }\n\n        return _this15.guidanceEnabled;\n      })();\n    }\n\n    getBenefitEnrolledData(id) {\n      return from(this.getNextYearBenefits()).pipe(map(data => data.enrolled.filter(account => account.id === id)[0]));\n    }\n\n    openGuidelines(trackEvent = false, status) {\n      var _this16 = this;\n\n      return _asyncToGenerator(function* () {\n        if (trackEvent) {\n          _this16.eventTrackingService.eventTracking({\n            eventName: 'CTAClick',\n            passThruAttributes: [{\n              attributeName: 'subType',\n              attributeValue: 'open_enrollment_banner'\n            }, {\n              attributeName: 'Enrollment_user_status',\n              attributeValue: status\n            }]\n          });\n        }\n\n        _this16.setSmartBannerEnableConditions({\n          isSmartBannerHidden: true\n        });\n\n        const modal = yield _this16.modalController.create({\n          component: BenefitsSelectionModalComponent,\n          cssClass: 'modal-fullscreen',\n          componentProps: {\n            showBeforeStarting: true,\n            exitIconPath: 'assets/icon/exit.svg'\n          }\n        });\n        return _this16.modalPresentationService.present(modal);\n      })();\n    }\n\n    setSortSlcted(keyName) {\n      this.storedSortKey = keyName;\n      localStorage.setItem('storedSortKey', JSON.stringify(keyName));\n    }\n\n    getSortSlcted() {\n      if (!this.storedSortKey) {\n        this.storedSortKey = JSON.parse(localStorage.getItem('storedSortKey') || '{}');\n      }\n\n      return this.storedSortKey;\n    }\n\n    getTotalCostBST(data) {\n      return data?.outNetworkCost?.outOfPocketCost + data?.inNetworkCost?.outOfPocketCost ? data?.outNetworkCost?.outOfPocketCost + data?.inNetworkCost?.outOfPocketCost : 0;\n    }\n\n    getTotalPremium(data) {\n      let totalPremiumSavvi = 0;\n\n      if (data && data.enrolled) {\n        if (data.enrolled.filter(val => val.type === 'medical_plan').length > 0) {\n          totalPremiumSavvi = data.enrolled.filter(val => val.type === 'medical_plan')[0].totalPremium ? data.enrolled.filter(val => val.type === 'medical_plan')[0].totalPremium : 0;\n        }\n      }\n\n      return totalPremiumSavvi;\n    }\n\n    getIdCard() {\n      const cardFrontBack = {\n        cardFront: '',\n        cardBack: ''\n      };\n      const selectedBenefit = this.getSelectedBenefit();\n      const cardFrontUrl = this.endPoints.getMyIdCard.replace('$cardSide', card.FRONT).replace('$planId', selectedBenefit.id);\n      const cardBackUrl = this.endPoints.getMyIdCard.replace('$cardSide', card.BACK).replace('$planId', selectedBenefit.id);\n      this.baseService.get(cardFrontUrl).then(res => {\n        cardFrontBack.cardFront = res === null ? '' : this.appendBase64MetaData(res.content);\n        this.benefitCards[selectedBenefit.id] = cardFrontBack;\n        this.cardImagesSubject.next(this.benefitCards);\n      });\n      this.baseService.get(cardBackUrl).then(res => {\n        cardFrontBack.cardBack = res === null ? '' : this.appendBase64MetaData(res.content);\n        this.benefitCards[selectedBenefit.id] = cardFrontBack;\n        this.cardImagesSubject.next(this.benefitCards);\n      });\n      return cardFrontBack;\n    }\n\n    trimBase64MetaData(content) {\n      if (content.search(',') > -1) {\n        const base64EncodedData = content.split(',')[1];\n        return base64EncodedData.replace(/['=\"]+/g, '');\n      }\n\n      return content;\n    }\n\n    appendBase64MetaData(content) {\n      const metaData = 'data:image/png;base64,';\n\n      if (!content.includes(metaData)) {\n        return metaData + content;\n      }\n\n      return content;\n    }\n\n    resetImages() {\n      const selectedBenefit = this.getSelectedBenefit();\n      this.benefitCards[selectedBenefit.id] = {\n        cardFront: '',\n        cardBack: ''\n      };\n      this.cardImagesSubject.next(this.benefitCards);\n    }\n\n    uploadMyIdCard(cardImage) {\n      const selectedBenefit = this.getSelectedBenefit();\n      const cardPayLoad = [{\n        srcDocId: selectedBenefit.id,\n        srcPlanType: selectedBenefit.type,\n        docSide: card.FRONT,\n        content: cardImage.cardFront\n      }, {\n        srcDocId: selectedBenefit.id,\n        srcPlanType: selectedBenefit.type,\n        docSide: card.BACK,\n        content: cardImage.cardBack\n      }];\n      const url = this.benefitCards[selectedBenefit.id] && (this.benefitCards[selectedBenefit.id].cardFront || this.benefitCards[selectedBenefit.id].cardBack) ? this.endPoints.updateMedicalCard : this.endPoints.addMedicalCard;\n      this.benefitCards[selectedBenefit.id] = {\n        cardFront: this.appendBase64MetaData(cardImage.cardFront),\n        cardBack: this.appendBase64MetaData(cardImage.cardBack)\n      };\n      this.cardImagesSubject.next(this.benefitCards);\n      return this.baseService.post(url, cardPayLoad);\n    }\n\n    deleteMedicalCard() {\n      this.resetImages();\n      this.baseService.get(this.endPoints.deleteMedicalCard + '/' + this.benefit.id);\n    }\n\n    getCardImages() {\n      return this.cardImagesSubject;\n    }\n\n    getFlipCardSubject() {\n      return this.flipCardSubject;\n    }\n\n    flipCard(state) {\n      const newState = state == 'front' ? 'back' : 'front';\n      this.flipCardSubject.next(newState);\n    }\n\n    getBannerContentObj(benefitsEnrollment, enrollmentBannerContent) {\n      return benefitsEnrollment.enrollmentWindowEnabled ? enrollmentBannerContent.openEnrollment[benefitsEnrollment.status] : enrollmentBannerContent.outsideEnrollment[benefitsEnrollment.status];\n    }\n\n    fetchBstSmartCards() {\n      return this.baseService.get(this.endPoints.bstSmartCards);\n    }\n\n    setSelectedSmartCard(smartCard) {\n      this.selectedSmartCard = smartCard;\n      localStorage.setItem('selected_smart_card', JSON.stringify(this.selectedSmartCard));\n    }\n\n    getSelectedSmartCard() {\n      if (!this.selectedSmartCard) {\n        this.selectedSmartCard = JSON.parse(localStorage.getItem('selected_smart_card'));\n      }\n\n      return this.selectedSmartCard;\n    }\n\n  }\n\n  BenefitsService.ɵfac = function BenefitsService_Factory(t) {\n    return new (t || BenefitsService)(i0.ɵɵinject(i1.BaseService), i0.ɵɵinject(i2.SharedUtilityService), i0.ɵɵinject(i3.ModalController), i0.ɵɵinject(i4.EventTrackingService), i0.ɵɵinject(i5.ModalPresentationService));\n  };\n\n  BenefitsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BenefitsService,\n    factory: BenefitsService.ɵfac,\n    providedIn: 'root'\n  });\n  return BenefitsService;\n})();","map":null,"metadata":{},"sourceType":"module"}