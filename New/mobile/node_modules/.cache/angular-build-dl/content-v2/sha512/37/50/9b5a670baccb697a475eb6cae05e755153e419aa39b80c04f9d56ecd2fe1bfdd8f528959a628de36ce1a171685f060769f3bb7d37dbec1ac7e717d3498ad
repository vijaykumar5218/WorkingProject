{"version":3,"mappings":"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","names":["PopupInputType","PopupInputDialogComponent","modalController","currencyPipe","utilityService","_constants_popup_input_type_enum__WEBPACK_IMPORTED_MODULE_4__","JSON","parse","stringify","inputType","tempVal","transform","value","substring","length","event","pattern","data","test","preventDefault","val","toString","allInputTypes","phone","formatPhone","invalid","validator","errorText","getCleanedValue","saved","dismiss","String","replace","save","saving","saveFunction","result","closeDialog","pageText","failedToSave","_ionic_angular__WEBPACK_IMPORTED_MODULE_6__","_angular_common__WEBPACK_IMPORTED_MODULE_7__","_shared_lib_services_utility_utility_service__WEBPACK_IMPORTED_MODULE_2__","_angular_core__WEBPACK_IMPORTED_MODULE_8__","selector","template","__webpack_exports__"],"sources":["webpack:///shared-lib/components/popup-input-dialog/constants/popup-input-type.enum.ts","webpack:///shared-lib/components/popup-input-dialog/popup-input-dialog.component.ts","webpack:///shared-lib/components/popup-input-dialog/popup-input-dialog.component.html"],"sourcesContent":["export enum PopupInputType {\n  number = 'POPUP_INPUT_NUMBER',\n  currency = 'POPUP_INPUT_CURRENCY',\n  phone = 'POPUP_INPUT_PHONE',\n  email = 'POPUP_INPUT_EMAIL',\n  text = 'POPUP_INPUT_TEXT',\n}\n","import {CurrencyPipe} from '@angular/common';\nimport {Component, Input, OnInit} from '@angular/core';\nimport {ModalController} from '@ionic/angular';\nimport {SharedUtilityService} from '@shared-lib/services/utility/utility.service';\nimport * as pageText from './constants/popup-input-text.json';\nimport {PopupInputType} from './constants/popup-input-type.enum';\n\ninterface InputValidator {\n  (input?: number | string): string;\n}\ninterface SaveFunction {\n  (value: number | string): Promise<any>;\n}\n\n@Component({\n  selector: 'app-popup-input-dialog',\n  templateUrl: './popup-input-dialog.component.html',\n  styleUrls: ['./popup-input-dialog.component.scss'],\n})\nexport class PopupInputDialogComponent implements OnInit {\n  @Input() public title: string;\n  @Input() public inputTitle: string;\n  @Input() public value: number | string;\n  @Input() public inputType: PopupInputType;\n  allInputTypes = PopupInputType;\n  public validator: InputValidator;\n  public saveFunction: SaveFunction;\n  saving = false;\n  invalid = false;\n  errorText: string;\n\n  pageText = JSON.parse(JSON.stringify(pageText)).default;\n\n  constructor(\n    public modalController: ModalController,\n    private currencyPipe: CurrencyPipe,\n    private utilityService: SharedUtilityService\n  ) {}\n\n  ngOnInit() {\n    if (this.inputType == PopupInputType.currency) {\n      const tempVal = this.currencyPipe.transform(\n        this.value,\n        'USD',\n        true,\n        '1.2-2'\n      );\n      this.value = tempVal.substring(1, tempVal.length);\n    }\n  }\n\n  beforeInput(event: InputEvent): boolean {\n    const pattern = /[0-9]/;\n    if (event.data !== null && !pattern.test(event.data)) {\n      event.preventDefault();\n      return false;\n    }\n    return true;\n  }\n\n  valueChanged(val: string | number, inputType?: string) {\n    this.value = val?.toString();\n    if (inputType === this.allInputTypes.phone) {\n      this.value = this.utilityService.formatPhone(val);\n    }\n    this.invalid = false;\n    if (this.validator) {\n      this.errorText = this.validator(this.getCleanedValue(val));\n      if (this.errorText) {\n        this.invalid = true;\n      }\n    }\n  }\n\n  closeDialog(saved = false) {\n    this.modalController.dismiss({\n      saved: saved,\n    });\n  }\n\n  getCleanedValue(val: any) {\n    if (typeof val === 'string' || val instanceof String) {\n      return val.replace(/,/g, '');\n    }\n    return val;\n  }\n\n  async closeDialogClicked(save: boolean) {\n    if (save) {\n      //Validate  again. To make sure an unaltered value should be saved.\n      if (this.validator) {\n        this.errorText = this.validator(this.getCleanedValue(this.value));\n        if (this.errorText) {\n          this.invalid = true;\n          return;\n        }\n      }\n\n      this.saving = true;\n      if (this.saveFunction) {\n        const result = await this.saveFunction(\n          this.getCleanedValue(this.value)\n        );\n        if (result) {\n          this.closeDialog(true);\n        } else {\n          this.errorText = this.pageText.failedToSave;\n          this.saving = false;\n        }\n      } else {\n        this.closeDialog();\n      }\n    } else {\n      this.closeDialog();\n    }\n  }\n}\n","export default \"<ion-card class=\\\"popup-input-dialog\\\">\\n  <ion-card-header>\\n    <ion-card-title\\n      >{{ title\\n      }}<span\\n        [hidden]=\\\"saving\\\"\\n        class=\\\"float-right\\\"\\n        (click)=\\\"closeDialogClicked(false)\\\"\\n        (keyup.enter)=\\\"closeDialogClicked(false)\\\"\\n        tabindex=\\\"0\\\"\\n        ><img\\n          id=\\\"close-dialog\\\"\\n          src=\\\"assets/icon/exit.svg\\\"\\n          alt=\\\"Close dialog\\\"/></span\\n    ></ion-card-title>\\n  </ion-card-header>\\n\\n  <ion-card-content>\\n    <div class=\\\"input-title\\\" [ngClass]=\\\"invalid ? 'error-title' : ''\\\">\\n      {{ inputTitle }}\\n    </div>\\n    <ion-input\\n      *ngIf=\\\"inputType == allInputTypes.number\\\"\\n      type=\\\"tel\\\"\\n      appIntegerInput\\n      value=\\\"{{ value }}\\\"\\n      class=\\\"dialog-input\\\"\\n      id=\\\"editInput\\\"\\n      [ngClass]=\\\"invalid ? 'error-input' : ''\\\"\\n      #numberInput\\n      (ionChange)=\\\"valueChanged(numberInput.value)\\\"\\n    ></ion-input>\\n    <ion-input\\n      *ngIf=\\\"inputType == allInputTypes.text\\\"\\n      type=\\\"tel\\\"\\n      value=\\\"{{ value }}\\\"\\n      class=\\\"dialog-input\\\"\\n      id=\\\"editInput\\\"\\n      [ngClass]=\\\"invalid ? 'error-input' : ''\\\"\\n      #numberInput\\n      (ionChange)=\\\"valueChanged(numberInput.value)\\\"\\n    ></ion-input>\\n    <ion-input\\n      *ngIf=\\\"inputType == allInputTypes.email\\\"\\n      type=\\\"email\\\"\\n      id=\\\"editPhoneEmail\\\"\\n      value=\\\"{{ value }}\\\"\\n      [ngClass]=\\\"invalid ? 'error-input' : ''\\\"\\n      class=\\\"edit-email\\\"\\n      name=\\\"editEmail\\\"\\n      inputmode=\\\"email\\\"\\n      pattern=\\\"email\\\"\\n      autocomplete=\\\"email\\\"\\n      #editEmailInput\\n      (ionChange)=\\\"valueChanged(editEmailInput.value)\\\"\\n      clearInput\\n    ></ion-input>\\n    <ion-input\\n      *ngIf=\\\"inputType == allInputTypes.phone\\\"\\n      class=\\\"dialog-input\\\"\\n      id=\\\"editPhoneInput\\\"\\n      name=\\\"editPhone\\\"\\n      type=\\\"text\\\"\\n      value=\\\"{{ value }}\\\"\\n      #editPhoneInput\\n      (ionChange)=\\\"valueChanged(editPhoneInput.value, inputType)\\\"\\n      pattern=\\\"[0-9]{3} [0-9]{3} [0-9]{4}\\\"\\n      maxlength=\\\"12\\\"\\n      inputmode=\\\"numeric\\\"\\n      clearInput\\n      [ngClass]=\\\"invalid ? 'error-input' : ''\\\"\\n    ></ion-input>\\n    <ion-input\\n      *ngIf=\\\"inputType == allInputTypes.currency\\\"\\n      value=\\\"{{ value }}\\\"\\n      id=\\\"editCurrencyInput\\\"\\n      class=\\\"currency-input\\\"\\n      [ngClass]=\\\"invalid ? 'error-input' : ''\\\"\\n      maxlength=\\\"11\\\"\\n      type=\\\"tel\\\"\\n      (beforeinput)=\\\"beforeInput($event)\\\"\\n      placeholder=\\\"0.00\\\"\\n      currencyMask\\n      decimal=\\\".\\\"\\n      thousand=\\\",\\\"\\n      #currencyInput\\n      (ionChange)=\\\"valueChanged(currencyInput.value)\\\"\\n      ><span class=\\\"dollar-symbol\\\">$</span></ion-input\\n    >\\n    <ion-icon\\n      *ngIf=\\\"invalid\\\"\\n      class=\\\"error-icon\\\"\\n      src=\\\"assets/icon/warning.svg\\\"\\n      alt=\\\"warning\\\"\\n      id=\\\"warning-img\\\"\\n    ></ion-icon\\n    ><ion-text class=\\\"error\\\">{{ errorText }}</ion-text>\\n  </ion-card-content>\\n  <div>\\n    <ion-button\\n      (click)=\\\"closeDialogClicked(true)\\\"\\n      class=\\\"font-18 save-button\\\"\\n      name=\\\"submit\\\"\\n      shape=\\\"round\\\"\\n      expand=\\\"block\\\"\\n      type=\\\"submit\\\"\\n      color=\\\"btncolor\\\"\\n      [attr.disabled]=\\\"invalid || saving\\\"\\n      id=\\\"save-btn\\\"\\n    >\\n      <ion-spinner [hidden]=\\\"!saving\\\" class=\\\"save-spinner\\\"></ion-spinner>\\n      {{ pageText.save }}\\n    </ion-button>\\n    <ion-button\\n      (click)=\\\"closeDialogClicked(false)\\\"\\n      (keyup.enter)=\\\"closeDialogClicked(false)\\\"\\n      class=\\\"cancel-button\\\"\\n      disabled\\n      [attr.disabled]=\\\"saving\\\"\\n      id=\\\"cancel-btn\\\"\\n    >\\n      {{ pageText.cancel }}\\n    </ion-button>\\n  </div>\\n\\n  <app-legal\\n    *ngIf=\\\"inputType == allInputTypes.email || inputType == allInputTypes.phone\\\"\\n  ></app-legal>\\n</ion-card>\\n\";"]}