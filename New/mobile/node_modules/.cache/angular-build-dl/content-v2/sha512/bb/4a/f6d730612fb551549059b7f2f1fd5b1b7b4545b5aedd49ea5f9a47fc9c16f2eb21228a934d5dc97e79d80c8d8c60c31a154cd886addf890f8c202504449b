{"version":3,"file":"default-shared-lib_components_popup-input-dialog_popup-input-dialog_component_ts-es2015.js","mappings":"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","sources":["./shared-lib/components/popup-input-dialog/constants/popup-input-type.enum.ts","./shared-lib/components/popup-input-dialog/popup-input-dialog.component.ts","./shared-lib/components/popup-input-dialog/popup-input-dialog.component.html"],"sourcesContent":["export enum PopupInputType {\n  number = 'POPUP_INPUT_NUMBER',\n  currency = 'POPUP_INPUT_CURRENCY',\n  phone = 'POPUP_INPUT_PHONE',\n  email = 'POPUP_INPUT_EMAIL',\n  text = 'POPUP_INPUT_TEXT',\n}\n","import {CurrencyPipe} from '@angular/common';\nimport {Component, Input, OnInit} from '@angular/core';\nimport {ModalController} from '@ionic/angular';\nimport {SharedUtilityService} from '@shared-lib/services/utility/utility.service';\nimport * as pageText from './constants/popup-input-text.json';\nimport {PopupInputType} from './constants/popup-input-type.enum';\n\ninterface InputValidator {\n  (input?: number | string): string;\n}\ninterface SaveFunction {\n  (value: number | string): Promise<any>;\n}\n\n@Component({\n  selector: 'app-popup-input-dialog',\n  templateUrl: './popup-input-dialog.component.html',\n  styleUrls: ['./popup-input-dialog.component.scss'],\n})\nexport class PopupInputDialogComponent implements OnInit {\n  @Input() public title: string;\n  @Input() public inputTitle: string;\n  @Input() public value: number | string;\n  @Input() public inputType: PopupInputType;\n  allInputTypes = PopupInputType;\n  public validator: InputValidator;\n  public saveFunction: SaveFunction;\n  saving = false;\n  invalid = false;\n  errorText: string;\n\n  pageText = JSON.parse(JSON.stringify(pageText)).default;\n\n  constructor(\n    public modalController: ModalController,\n    private currencyPipe: CurrencyPipe,\n    private utilityService: SharedUtilityService\n  ) {}\n\n  ngOnInit() {\n    if (this.inputType == PopupInputType.currency) {\n      const tempVal = this.currencyPipe.transform(\n        this.value,\n        'USD',\n        true,\n        '1.2-2'\n      );\n      this.value = tempVal.substring(1, tempVal.length);\n    }\n  }\n\n  beforeInput(event: InputEvent): boolean {\n    const pattern = /[0-9]/;\n    if (event.data !== null && !pattern.test(event.data)) {\n      event.preventDefault();\n      return false;\n    }\n    return true;\n  }\n\n  valueChanged(val: string | number, inputType?: string) {\n    this.value = val?.toString();\n    if (inputType === this.allInputTypes.phone) {\n      this.value = this.utilityService.formatPhone(val);\n    }\n    this.invalid = false;\n    if (this.validator) {\n      this.errorText = this.validator(this.getCleanedValue(val));\n      if (this.errorText) {\n        this.invalid = true;\n      }\n    }\n  }\n\n  closeDialog(saved = false) {\n    this.modalController.dismiss({\n      saved: saved,\n    });\n  }\n\n  getCleanedValue(val: any) {\n    if (typeof val === 'string' || val instanceof String) {\n      return val.replace(/,/g, '');\n    }\n    return val;\n  }\n\n  async closeDialogClicked(save: boolean) {\n    if (save) {\n      //Validate  again. To make sure an unaltered value should be saved.\n      if (this.validator) {\n        this.errorText = this.validator(this.getCleanedValue(this.value));\n        if (this.errorText) {\n          this.invalid = true;\n          return;\n        }\n      }\n\n      this.saving = true;\n      if (this.saveFunction) {\n        const result = await this.saveFunction(\n          this.getCleanedValue(this.value)\n        );\n        if (result) {\n          this.closeDialog(true);\n        } else {\n          this.errorText = this.pageText.failedToSave;\n          this.saving = false;\n        }\n      } else {\n        this.closeDialog();\n      }\n    } else {\n      this.closeDialog();\n    }\n  }\n}\n","export default \"<ion-card class=\\\"popup-input-dialog\\\">\\n  <ion-card-header>\\n    <ion-card-title\\n      >{{ title\\n      }}<span\\n        [hidden]=\\\"saving\\\"\\n        class=\\\"float-right\\\"\\n        (click)=\\\"closeDialogClicked(false)\\\"\\n        (keyup.enter)=\\\"closeDialogClicked(false)\\\"\\n        tabindex=\\\"0\\\"\\n        ><img\\n          id=\\\"close-dialog\\\"\\n          src=\\\"assets/icon/exit.svg\\\"\\n          alt=\\\"Close dialog\\\"/></span\\n    ></ion-card-title>\\n  </ion-card-header>\\n\\n  <ion-card-content>\\n    <div class=\\\"input-title\\\" [ngClass]=\\\"invalid ? 'error-title' : ''\\\">\\n      {{ inputTitle }}\\n    </div>\\n    <ion-input\\n      *ngIf=\\\"inputType == allInputTypes.number\\\"\\n      type=\\\"tel\\\"\\n      appIntegerInput\\n      value=\\\"{{ value }}\\\"\\n      class=\\\"dialog-input\\\"\\n      id=\\\"editInput\\\"\\n      [ngClass]=\\\"invalid ? 'error-input' : ''\\\"\\n      #numberInput\\n      (ionChange)=\\\"valueChanged(numberInput.value)\\\"\\n    ></ion-input>\\n    <ion-input\\n      *ngIf=\\\"inputType == allInputTypes.text\\\"\\n      type=\\\"tel\\\"\\n      value=\\\"{{ value }}\\\"\\n      class=\\\"dialog-input\\\"\\n      id=\\\"editInput\\\"\\n      [ngClass]=\\\"invalid ? 'error-input' : ''\\\"\\n      #numberInput\\n      (ionChange)=\\\"valueChanged(numberInput.value)\\\"\\n    ></ion-input>\\n    <ion-input\\n      *ngIf=\\\"inputType == allInputTypes.email\\\"\\n      type=\\\"email\\\"\\n      id=\\\"editPhoneEmail\\\"\\n      value=\\\"{{ value }}\\\"\\n      [ngClass]=\\\"invalid ? 'error-input' : ''\\\"\\n      class=\\\"edit-email\\\"\\n      name=\\\"editEmail\\\"\\n      inputmode=\\\"email\\\"\\n      pattern=\\\"email\\\"\\n      autocomplete=\\\"email\\\"\\n      #editEmailInput\\n      (ionChange)=\\\"valueChanged(editEmailInput.value)\\\"\\n      clearInput\\n    ></ion-input>\\n    <ion-input\\n      *ngIf=\\\"inputType == allInputTypes.phone\\\"\\n      class=\\\"dialog-input\\\"\\n      id=\\\"editPhoneInput\\\"\\n      name=\\\"editPhone\\\"\\n      type=\\\"text\\\"\\n      value=\\\"{{ value }}\\\"\\n      #editPhoneInput\\n      (ionChange)=\\\"valueChanged(editPhoneInput.value, inputType)\\\"\\n      pattern=\\\"[0-9]{3} [0-9]{3} [0-9]{4}\\\"\\n      maxlength=\\\"12\\\"\\n      inputmode=\\\"numeric\\\"\\n      clearInput\\n      [ngClass]=\\\"invalid ? 'error-input' : ''\\\"\\n    ></ion-input>\\n    <ion-input\\n      *ngIf=\\\"inputType == allInputTypes.currency\\\"\\n      value=\\\"{{ value }}\\\"\\n      id=\\\"editCurrencyInput\\\"\\n      class=\\\"currency-input\\\"\\n      [ngClass]=\\\"invalid ? 'error-input' : ''\\\"\\n      maxlength=\\\"11\\\"\\n      type=\\\"tel\\\"\\n      (beforeinput)=\\\"beforeInput($event)\\\"\\n      placeholder=\\\"0.00\\\"\\n      currencyMask\\n      decimal=\\\".\\\"\\n      thousand=\\\",\\\"\\n      #currencyInput\\n      (ionChange)=\\\"valueChanged(currencyInput.value)\\\"\\n      ><span class=\\\"dollar-symbol\\\">$</span></ion-input\\n    >\\n    <ion-icon\\n      *ngIf=\\\"invalid\\\"\\n      class=\\\"error-icon\\\"\\n      src=\\\"assets/icon/warning.svg\\\"\\n      alt=\\\"warning\\\"\\n      id=\\\"warning-img\\\"\\n    ></ion-icon\\n    ><ion-text class=\\\"error\\\">{{ errorText }}</ion-text>\\n  </ion-card-content>\\n  <div>\\n    <ion-button\\n      (click)=\\\"closeDialogClicked(true)\\\"\\n      class=\\\"font-18 save-button\\\"\\n      name=\\\"submit\\\"\\n      shape=\\\"round\\\"\\n      expand=\\\"block\\\"\\n      type=\\\"submit\\\"\\n      color=\\\"btncolor\\\"\\n      [attr.disabled]=\\\"invalid || saving\\\"\\n      id=\\\"save-btn\\\"\\n    >\\n      <ion-spinner [hidden]=\\\"!saving\\\" class=\\\"save-spinner\\\"></ion-spinner>\\n      {{ pageText.save }}\\n    </ion-button>\\n    <ion-button\\n      (click)=\\\"closeDialogClicked(false)\\\"\\n      (keyup.enter)=\\\"closeDialogClicked(false)\\\"\\n      class=\\\"cancel-button\\\"\\n      disabled\\n      [attr.disabled]=\\\"saving\\\"\\n      id=\\\"cancel-btn\\\"\\n    >\\n      {{ pageText.cancel }}\\n    </ion-button>\\n  </div>\\n\\n  <app-legal\\n    *ngIf=\\\"inputType == allInputTypes.email || inputType == allInputTypes.phone\\\"\\n  ></app-legal>\\n</ion-card>\\n\";"],"names":[],"sourceRoot":"webpack:///"}