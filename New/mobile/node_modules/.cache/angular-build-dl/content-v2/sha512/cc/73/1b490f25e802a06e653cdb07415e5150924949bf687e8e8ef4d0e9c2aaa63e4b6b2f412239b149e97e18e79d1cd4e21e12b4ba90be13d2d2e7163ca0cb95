{"version":3,"mappings":"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","names":["FilterPopoverComponent","popoverCtrl","_shared_lib_constants_filter_sort_json__WEBPACK_IMPORTED_MODULE_2__","resetCheckbox","slctdFiltrCopy","filterList","forEach","arry","el","values","filter","storedKeyArr","includes","val","key","push","label","element","isChecked","e","item","selectedFilter","arr","selctedCheckBox","splice","indexOf","service","getFiltSlcted","save","changeFilt","setFiltSlcted","dismiss","_ionic_angular__WEBPACK_IMPORTED_MODULE_3__","_angular_core__WEBPACK_IMPORTED_MODULE_4__","selector","template","SortPopoverComponent","selectedValue","getSortSlcted","data","changeSort","setSortSlcted","__webpack_exports__"],"sources":["webpack:///shared-lib/components/filter-popover/filter-popover.component.ts","webpack:///shared-lib/components/sort-popover/sort-popover.component.ts","webpack:///shared-lib/components/filter-popover/filter-popover.component.html","webpack:///shared-lib/components/sort-popover/sort-popover.component.html"],"sourcesContent":["import {Component, Input, OnInit} from '@angular/core';\nimport * as jsonTxt from '@shared-lib/constants/filter-sort.json';\nimport {AccountService} from '@shared-lib/services/account/account.service';\nimport {PopoverController} from '@ionic/angular';\nimport {\n  FilterSortContent,\n  FilterList,\n} from '@shared-lib/models/filter-sort.model';\nimport {BenefitsService} from '@shared-lib/services/benefits/benefits.service';\n\n@Component({\n  selector: 'app-filter-popover',\n  templateUrl: './filter-popover.component.html',\n  styleUrls: ['./filter-popover.component.scss'],\n})\nexport class FilterPopoverComponent implements OnInit {\n  constructor(public popoverCtrl: PopoverController) {}\n\n  filterContent: FilterSortContent = (jsonTxt as any).default;\n\n  @Input() filterList: FilterList[];\n\n  @Input() service: AccountService | BenefitsService;\n\n  selectedFilter: FilterList[];\n  slctdFiltrCopy: FilterList[];\n\n  selctedCheckBox: string[] = [];\n  storedKeyArr: string[] = [];\n\n  ionViewDidEnter() {\n    this.resetCheckbox();\n\n    this.slctdFiltrCopy = [];\n\n    this.filterList.forEach(el => {\n      const arry = el.values.filter(val => {\n        return this.storedKeyArr.includes(val.key);\n      });\n\n      this.slctdFiltrCopy.push({\n        label: el.label,\n        values: arry,\n      });\n    });\n  }\n\n  resetCheckbox() {\n    this.filterList.forEach(el => {\n      for (const element of el.values) {\n        element.isChecked = false;\n      }\n\n      el.values\n        .filter(val => {\n          return this.storedKeyArr.includes(val.key);\n        })\n        .forEach(e => {\n          e.isChecked = true;\n        });\n    });\n  }\n\n  onChange(item: string) {\n    this.selectedFilter = [];\n    this.filterList.forEach(el => {\n      const arr = el.values.filter(val => {\n        return val.isChecked;\n      });\n      this.selectedFilter.push({\n        label: el.label,\n        values: arr,\n      });\n    });\n\n    if (!this.selctedCheckBox.includes(item)) {\n      this.selctedCheckBox.push(item);\n    } else {\n      this.selctedCheckBox.splice(this.selctedCheckBox.indexOf(item), 1);\n    }\n  }\n\n  ngOnInit(): void {\n    this.storedKeyArr = this.service.getFiltSlcted();\n  }\n\n  closeDialog(save: boolean) {\n    if (save) {\n      this.service.changeFilt(this.selectedFilter);\n      this.service.setFiltSlcted(this.selctedCheckBox);\n    } else {\n      this.service.changeFilt(this.slctdFiltrCopy);\n    }\n    this.popoverCtrl.dismiss();\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core';\nimport {PopoverController} from '@ionic/angular';\nimport {AccountService} from '@shared-lib/services/account/account.service';\nimport * as jsonTxt from '@shared-lib/constants/filter-sort.json';\nimport {\n  FilterSortContent,\n  SortListing,\n} from '@shared-lib/models/filter-sort.model';\nimport {BenefitsService} from '@shared-lib/services/benefits/benefits.service';\n\n@Component({\n  selector: 'app-sort-popover',\n  templateUrl: './sort-popover.component.html',\n  styleUrls: ['./sort-popover.component.scss'],\n})\nexport class SortPopoverComponent implements OnInit {\n  filterContent: FilterSortContent = (jsonTxt as any).default;\n\n  @Input() public sortList: SortListing[];\n\n  @Input() service: AccountService | BenefitsService;\n\n  constructor(public popoverCtrl: PopoverController) {}\n\n  public selectedValue = '';\n  public selectedSort = 'asc';\n\n  ngOnInit() {\n    this.selectedValue = this.service.getSortSlcted();\n  }\n\n  closeDialog(data: boolean) {\n    if (data) {\n      this.service.changeSort(this.selectedValue);\n      this.service.setSortSlcted(this.selectedValue);\n    } else {\n      this.service.changeSort('');\n    }\n    this.popoverCtrl.dismiss();\n  }\n}\n","export default \"<ion-content>\\n  <div class=\\\"list-wrap\\\">\\n    <ion-list *ngFor=\\\"let data of filterList\\\" class=\\\"list\\\" lines=\\\"none\\\">\\n      <h5>{{ data.label }}</h5>\\n      <ion-item\\n        *ngFor=\\\"let el of data.values\\\"\\n        lines=\\\"none\\\"\\n        class=\\\"ion-no-padding\\\"\\n      >\\n        <ion-checkbox\\n          [disabled]=\\\"!el.enabled\\\"\\n          (ionChange)=\\\"onChange(el.key)\\\"\\n          [(ngModel)]=\\\"el.isChecked\\\"\\n          color=\\\"btndarkblue\\\"\\n          mode=\\\"ios\\\"\\n        ></ion-checkbox>\\n        <img\\n          src=\\\"assets/icon/check.svg\\\"\\n          alt=\\\"check mark\\\"\\n          srcset=\\\"\\\"\\n          class=\\\"checkmark\\\"\\n          [class.active]=\\\"el.isChecked\\\"\\n        />\\n        <ion-label [color]=\\\"el.isChecked ? 'btndarkblue' : 'none'\\\">{{\\n          el.name\\n        }}</ion-label>\\n      </ion-item>\\n    </ion-list>\\n  </div>\\n\\n  <div class=\\\"btn-wrap\\\">\\n    <ion-button\\n      (click)=\\\"closeDialog(false)\\\"\\n      class=\\\"font-18 save-button\\\"\\n      expand=\\\"block\\\"\\n      fill=\\\"clear\\\"\\n      color=\\\"btndarkblue\\\"\\n    >\\n      {{ filterContent.cancelLabel }}\\n    </ion-button>\\n    <ion-button\\n      (click)=\\\"closeDialog(true)\\\"\\n      class=\\\"font-18 save-button\\\"\\n      expand=\\\"block\\\"\\n      fill=\\\"clear\\\"\\n      color=\\\"btndarkblue\\\"\\n    >\\n      {{ filterContent.okLable }}\\n    </ion-button>\\n  </div>\\n</ion-content>\\n\";","export default \"<div class=\\\"list-wrap sort-wrap\\\">\\n  <ion-list *ngFor=\\\"let data of sortList\\\" class=\\\"list\\\" lines=\\\"none\\\">\\n    <h5>{{ data.label }}</h5>\\n    <ion-radio-group [(ngModel)]=\\\"selectedValue\\\">\\n      <ion-item class=\\\"ion-no-padding\\\" *ngFor=\\\"let el of data.values\\\">\\n        <ion-radio\\n          mode=\\\"ios\\\"\\n          value=\\\"{{ el.value }}\\\"\\n          color=\\\"btndarkblue\\\"\\n        ></ion-radio>\\n        <img\\n          src=\\\"assets/icon/check.svg\\\"\\n          alt=\\\"check mark\\\"\\n          srcset=\\\"\\\"\\n          class=\\\"checkmark\\\"\\n          [class.active]=\\\"selectedValue == el.value\\\"\\n        />\\n        <ion-label>{{ el.name }}</ion-label>\\n      </ion-item>\\n    </ion-radio-group>\\n  </ion-list>\\n</div>\\n\\n<div class=\\\"btn-wrap\\\">\\n  <ion-button\\n    (click)=\\\"closeDialog(false)\\\"\\n    class=\\\"font-18 save-button\\\"\\n    expand=\\\"block\\\"\\n    fill=\\\"clear\\\"\\n    color=\\\"btndarkblue\\\"\\n  >\\n    {{ filterContent.cancelLabel }}\\n  </ion-button>\\n  <ion-button\\n    (click)=\\\"closeDialog(true)\\\"\\n    class=\\\"font-18 save-button\\\"\\n    expand=\\\"block\\\"\\n    fill=\\\"clear\\\"\\n    color=\\\"btndarkblue\\\"\\n  >\\n    {{ filterContent.okLable }}\\n  </ion-button>\\n</div>\\n\";"]}