{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,eAASA,oBAAT,GAAgC;AAC5B,YAAMC,UAAU,GAAGC,MAAM,CAACC,SAAPD,CAAiBD,UAAjBC,IACfA,MAAM,CAACC,SAAPD,CAAiBE,aADFF,IAEfA,MAAM,CAACC,SAAPD,CAAiBG,gBAFrB;AAGA,YAAIC,MAAM,GAAG,SAAb;AACA,YAAMC,IAAI,GAAGN,UAAU,GAAGA,UAAU,CAACM,IAAXN,IAAmBA,UAAU,CAACO,aAAjC,GAAiD,IAAxE;;AACA,YAAID,IAAI,IAAI,OAAOA,IAAP,KAAgB,QAA5B,EAAsC;AAClC,kBAAQA,IAAR;AACI;AACA,iBAAK,WAAL;AACA,iBAAK,UAAL;AACID,oBAAM,GAAG,UAATA;AACA;;AACJ,iBAAK,MAAL;AACIA,oBAAM,GAAG,MAATA;AACA;;AACJ,iBAAK,UAAL;AACA,iBAAK,MAAL;AACA,iBAAK,OAAL;AACIA,oBAAM,GAAG,MAATA;AACA;;AACJ,iBAAK,OAAL;AACA,iBAAK,SAAL;AACIA,oBAAM,GAAG,SAATA;AACA;AACJ;;AACA,iBAAK,SAAL;AACA,iBAAK,IAAL;AACA,iBAAK,IAAL;AACIA,oBAAM,GAAG,UAATA;AACA;;AACJ,iBAAK,IAAL;AACIA,oBAAM,GAAG,MAATA;AACA;;AACJ;AACI;AA5BR;AA8BH;;AACD,eAAOA,MAAP;AACH;;UACYG;;;;;AACTC,+BAAc;AAAA;;AAAA;;AACV;;AACA,iBAAKC,YAAL,GAAoB,YAAM;AACtB,gBAAMC,cAAc,GAAGZ,oBAAoB,EAA3C;AACA,gBAAMa,MAAM,GAAG;AACXC,uBAAS,EAAE,IADA;AAEXF,4BAAc,EAAEA;AAFL,aAAf;;AAIA,mBAAKG,eAAL,CAAqB,qBAArB,EAA4CF,MAA5C;AANJ;;AAQA,iBAAKG,aAAL,GAAqB,YAAM;AACvB,gBAAMH,MAAM,GAAG;AACXC,uBAAS,EAAE,KADA;AAEXF,4BAAc,EAAE;AAFL,aAAf;;AAIA,mBAAKG,eAAL,CAAqB,qBAArB,EAA4CF,MAA5C;AALJ;;AAOA,cAAI,OAAOX,MAAP,KAAkB,WAAtB,EAAmC;AAC/BA,kBAAM,CAACe,gBAAPf,CAAwB,QAAxBA,EAAkC,OAAKS,YAAvCT;AACAA,kBAAM,CAACe,gBAAPf,CAAwB,SAAxBA,EAAmC,OAAKc,aAAxCd;AACH;;AApBS;AAqBb;;;;iBACKgB,qBAAY;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACThB,MAAM,CAACC,SADE;AAAA;AAAA;AAAA;;AAAA,0BAEJgB,KAAI,CAACC,WAAL,CAAiB,sDAAjB,CAFI;;AAAA;AAIRN,6BAJQ,GAIIZ,MAAM,CAACC,SAAPD,CAAiBmB,MAJrB;AAKRT,kCALQ,GAKSZ,oBAAoB,EAL7B;AAMRa,0BANQ,GAMC;AACXC,+BADW,EACXA,SADW;AAEXF,oCAAc,EAAEE,SAAS,GAAGF,cAAH,GAAoB;AAFlC,qBAND;AAAA,qDAUPC,MAVO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWjB;;;;QAlC2BS;;AAoChC,UAAMC,QAAO,GAAG,IAAId,WAAJ,EAAhB;;;;","names":["translatedConnection","connection","window","navigator","mozConnection","webkitConnection","result","type","effectiveType","NetworkWeb","constructor","handleOnline","connectionType","status","connected","notifyListeners","handleOffline","addEventListener","getStatus","_this","unavailable","onLine","WebPlugin","Network"],"sources":["webpack:///node_modules/@capacitor/network/dist/esm/web.js"],"sourcesContent":["import { WebPlugin } from '@capacitor/core';\nfunction translatedConnection() {\n    const connection = window.navigator.connection ||\n        window.navigator.mozConnection ||\n        window.navigator.webkitConnection;\n    let result = 'unknown';\n    const type = connection ? connection.type || connection.effectiveType : null;\n    if (type && typeof type === 'string') {\n        switch (type) {\n            // possible type values\n            case 'bluetooth':\n            case 'cellular':\n                result = 'cellular';\n                break;\n            case 'none':\n                result = 'none';\n                break;\n            case 'ethernet':\n            case 'wifi':\n            case 'wimax':\n                result = 'wifi';\n                break;\n            case 'other':\n            case 'unknown':\n                result = 'unknown';\n                break;\n            // possible effectiveType values\n            case 'slow-2g':\n            case '2g':\n            case '3g':\n                result = 'cellular';\n                break;\n            case '4g':\n                result = 'wifi';\n                break;\n            default:\n                break;\n        }\n    }\n    return result;\n}\nexport class NetworkWeb extends WebPlugin {\n    constructor() {\n        super();\n        this.handleOnline = () => {\n            const connectionType = translatedConnection();\n            const status = {\n                connected: true,\n                connectionType: connectionType,\n            };\n            this.notifyListeners('networkStatusChange', status);\n        };\n        this.handleOffline = () => {\n            const status = {\n                connected: false,\n                connectionType: 'none',\n            };\n            this.notifyListeners('networkStatusChange', status);\n        };\n        if (typeof window !== 'undefined') {\n            window.addEventListener('online', this.handleOnline);\n            window.addEventListener('offline', this.handleOffline);\n        }\n    }\n    async getStatus() {\n        if (!window.navigator) {\n            throw this.unavailable('Browser does not support the Network Information API');\n        }\n        const connected = window.navigator.onLine;\n        const connectionType = translatedConnection();\n        const status = {\n            connected,\n            connectionType: connected ? connectionType : 'none',\n        };\n        return status;\n    }\n}\nconst Network = new NetworkWeb();\nexport { Network };\n"]}