{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA,UAAMA,MAAM,GAAW,CACrB;AACEC,YAAI,EAAE,EADR;AAEEC,iBAAS,EAAEC;AAFb,OADqB,CAAvB;;UAWaC,uBAAsB;AAAA;AAAA;;AAAtBA,6BAAsB,uDAJlC,yDAAS;AACRC,eAAO,EAAE,CAACC,mEAAsBN,MAAtB,CAAD,CADD;AAERO,eAAO,EAAE,CAACD,yDAAD;AAFD,OAAT,CAIkC,GAAtBF,uBAAsB,CAAtB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCcAI,gBAAe;AAAA;AAAA;;AAAfA,sBAAe,uDAhB3B,yDAAS;AACRH,eAAO,EAAE,CACPI,0DADO,EAEPC,wDAFO,EAGPC,wDAHO,EAIPC,yEAJO,EAKPC,wIALO,EAMPC,sFANO,EAOPC,iGAPO,EAQPC,qHARO,EASPC,iGATO,EAUPC,iGAVO,CADD;AAaRC,oBAAY,EAAE,CAACC,kDAAD,CAbN;AAcRb,eAAO,EAAE,CAACa,kDAAD;AAdD,OAAT,CAgB2B,GAAfZ,gBAAe,CAAf;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCTAa,UAAS;AAiBpB,2BACUC,eADV,EAEUC,MAFV,EAGUC,cAHV,EAIUC,eAJV,EAI0C;AAAA;;AAHhC;AACA;AACA;AACA;AAnBV,yBAAqBC,qDAArB;AAIA,8BAA6B,IAAIC,8CAAJ,EAA7B;AAIS,sCAAuB,IAAvB;AACA,gCAAiB,KAAjB;AAET,6BAAc,CAAd;AASI;;AAtBgB;AAAA;AAAA,iBAwBd,oBAAQ;;;;;;;;AACZ,yBAAKF,eAAL,CAAqBG,SAArB,GAAiCC,SAAjC,CAA2C,cAAI,EAAG;AAChD,2BAAI,CAACD,SAAL,GAAiBE,IAAjB;AACA,2BAAI,CAACC,YAAL,GAAoB,KAAI,CAACH,SAAL,GAAiB,CAAjB,GAAqB,CAAzC;;AACA,2BAAI,CAACI,SAAL,CACE,KAAI,CAACC,oBAAL,GAA4B,qBAA5B,GAAoD,aADtD;AAGD,qBAND;AAOA,yBAAKC,iBAAL;AACA,yBAAKC,WAAL;AACA,yBAAKC,KAAL,GAAa,KAAKZ,cAAL,CAAoBa,QAApB,EAAb;;AACuB,2BAAM,KAAKf,eAAL,CAAqBgB,oBAArB,EAAN;;;AAAjBC;AACN,yBAAKC,cAAL,GAAsBC,IAAI,CAACC,KAAL,CACpBH,cAAc,CAACI,gCADK,CAAtB;AAGA,yBAAKC,iBAAL;;;;;;;;AACD;AAxCmB;AAAA;AAAA,iBA0Cd,6BAAiB;;;;;;AAEnB,2BAAM,KAAKtB,eAAL,CAAqBuB,kBAArB,EAAN;;;AADF,yBAAKC,iCAEHA;;;;;;;;AACH;AA9CmB;AAAA;AAAA,iBAgDpB,uBAAW;AAAA;;AACT,gBAAMC,kBAAkB,GAAG,KAAKvB,cAAL,CACxBwB,yBADwB,CACE,CADF,EAExBnB,SAFwB,CAEd,cAAI,EAAG;AAChB,oBAAI,CAACoB,MAAL,GAAcnB,IAAI,SAAJ,QAAI,WAAJ,GAAI,MAAJ,OAAI,CAAEoB,OAApB;AACD,aAJwB,CAA3B;AAKA,iBAAKC,YAAL,CAAkBC,GAAlB,CAAsBL,kBAAtB;AACD;AAvDmB;AAAA;AAAA,iBAyDpB,mBAAUM,WAAV,EAA6B;AAAA;;AAC3B,mBAAO,KAAK/B,eAAL,CAAqB+B,WAArB,IACJC,IADI,CACC,UAACxB,IAAD,EAAmB;AACvB,oBAAI,CAACyB,SAAL,GAAiBzB,IAAI,IAAIA,IAAI,CAAC0B,QAA9B;;AACA,kBACE,MAAI,CAACC,cAAL,KACE,MAAI,CAAC7B,SAAL,IAAkB,MAAI,CAAC2B,SAAL,CAAeG,MAAf,GAAwB,CAA3C,IACE,CAAC,MAAI,CAAC9B,SAAN,IAAmB,MAAI,CAAC2B,SAAL,CAAeG,MAAf,GAAwB,CAF9C,CADF,EAIE;AACA,sBAAI,CAACC,sBAAL,CAA4B,MAAI,CAACC,WAAjC;AACD,eAND,MAMO;AACL,sBAAI,CAACA,WAAL,GAAmB,CAAnB;AACA,sBAAI,CAACC,UAAL,GAAkB,MAAI,CAACN,SAAL,CAAeG,MAAjC;AACA,sBAAI,CAAC3B,YAAL,GAAoB,MAAI,CAAC8B,UAAzB;AACD;AACF,aAdI,WAeE,YAAK;AACV,oBAAI,CAACN,SAAL,GAAiB,EAAjB;AACD,aAjBI,CAAP;AAkBD;AA5EmB;AAAA;AAAA,iBA8EpB,gCAAuBO,IAAvB,EAAmC;AACjC,iBAAKF,WAAL,GAAmBE,IAAnB;AACA,iBAAKD,UAAL,GAAkB,KAAKN,SAAL,CAAeG,MAAjC;AACA,iBAAKK,gBAAL,GAAwBtB,IAAI,CAACuB,SAAL,CAAe;AACrCC,yBAAW,EAAE,EADwB;AAErCL,yBAAW,EAAE,KAAKA,WAFmB;AAGrC7B,0BAAY,EAAE,KAAKA,YAHkB;AAIrCmC,sBAAQ,EAAE,KAAKL;AAJsB,aAAf,CAAxB;AAMD;AAvFmB;AAAA;AAAA,iBAyFpB,0BAAiBD,WAAjB,EAAoC;AAClC,iBAAKD,sBAAL,CAA4BC,WAA5B;AACD;AA3FmB;AAAA;AAAA,iBA6FpB,qBAAYO,OAAZ,EAA4B;AAC1B,gBACEA,OAAO,CAACC,IAAR,IAAgB,cAAhB,IACAD,OAAO,CAACC,IAAR,IAAgB,aADhB,IAEAD,OAAO,CAACC,IAAR,IAAgB,aAHlB,EAIE;AACA,kBAAI,CAAC,KAAKhC,KAAV,EAAiB;AACf,qBAAKd,eAAL,CAAqB+C,UAArB,CAAgCF,OAAhC;AACA,qBAAK5C,MAAL,CAAY+C,aAAZ,CAA0B,8BAA1B;AACD,eAHD,MAGO;AACL,qBAAK/C,MAAL,CAAY+C,aAAZ,gCAAkDH,OAAO,CAACI,EAA1D;AACD;AACF,aAXD,MAWO;AACL,mBAAKjD,eAAL,CAAqB+C,UAArB,CAAgCF,OAAhC;AACA,qBAAO,KAAP;AACD;AACF;AA7GmB;AAAA;AAAA,iBA+Gd,6BAAiB;;;;;;;sDACd,KAAK7C,eAAL,CACJY,iBADI,GAEJoB,IAFI,CAEC,UAACkB,GAAD,EAAgC;AACpC,4BAAI,CAACjC,cAAL,GAAsBiC,GAAtB;AACD,qBAJI;;;;;;;;AAKR;AArHmB;AAAA;AAAA,iBAuHpB,2BAAkBL,OAAlB,EAAkC;AAChC,gBAAI,KAAK/B,KAAT,EAAgB;AACd,kBAAI,KAAKa,MAAL,KAAgBkB,OAAO,CAACI,EAA5B,EAAgC;AAC9B,qBAAKjD,eAAL,CAAqB+C,UAArB,CAAgCF,OAAhC;AACA,uBAAO;AAACM,uBAAK,EAAE;AAAR,iBAAP;AACD,eAHD,MAGO;AACL,uBAAO;AAACA,uBAAK,EAAE;AAAR,iBAAP;AACD;AACF;;AACD,mBAAO,IAAP;AACD;AAjImB;AAAA;AAAA,iBAmIpB,0BAAc;AACZ,iBAAKnD,eAAL,CAAqBoD,cAArB;AACD;AArImB;AAAA;AAAA,iBAuIpB,uBAAW;AACT,iBAAKvB,YAAL,CAAkBwB,WAAlB;AACD;AAzImB;;AAAA;AAAA;;;;gBAVdC;;gBATAC;;gBAUAC;;gBAEAC;;;;;;gBAiBLC;;;gBACAA;;;AAXU3D,gBAAS,uDALrB,0DAAU;AACT4D,gBAAQ,EAAE,WADD;AAETC,8KAFS;;AAAA,OAAV,CAKqB,GAAT7D,UAAS,CAAT;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCbA8D,oBAAmB;;;;AAEpB,kCAAmB,IAAIC,uDAAJ,EAAnB;AAQX;;AAV+B;AAAA;AAAA,iBAK9B,uBAAcC,KAAd,EAAmB;AACjB,gBAAMtD,YAAY,GAAGU,IAAI,CAACC,KAAL,CAAW,KAAKqB,gBAAhB,EAAkChC,YAAvD;AACA,gBAAM6B,WAAW,GAAGyB,KAAK,CAACC,MAAN,CAAaC,SAAb,CAAuB,CAAvB,IAA4BxD,YAA5B,GAA2C,CAA/D;AACA,iBAAKyD,gBAAL,CAAsBC,IAAtB,CAA2B7B,WAA3B;AACD;AAT6B;;AAAA;AAAA;;;;gBAC7BwB;;;gBACAA;;;gBACAA;;;AAHUD,0BAAmB,uDAL/B,0DAAU;AACTF,gBAAQ,EAAE,gBADD;AAETC,wLAFS;;AAAA,OAAV,CAK+B,GAAnBC,oBAAmB,CAAnB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCKAO,iBAAgB;AAAA;AAAA;;AAAhBA,uBAAgB,uDAN5B,yDAAS;AACRrF,eAAO,EAAE,CAACsF,yDAAD,EAAeC,uDAAf,CADD;AAERzE,oBAAY,EAAE,CAAC0E,sEAAD,CAFN;AAGRC,eAAO,EAAE,CAACV,iEAAD,CAHD;AAIR7E,eAAO,EAAE,CAACsF,sEAAD,EAAsBE,+DAAtB;AAJD,OAAT,CAM4B,GAAhBL,iBAAgB,CAAhB;;;;;;;;;;;;;ACZb;;;AAAAM,uCAAe,utOAAf;;;;;;;;;;;;;ACAA;;;AAAAA,uCAAe,2NAAf;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBCqN+FC;;AAAAA,uEA8XioC,CA9XjoCA,EA8XioC,GA9XjoCA,EA8XioC,EA9XjoCA;;AAAAA,mEA8XgrC,aA9XhrCA,EA8XgrC;AA9XhrCA,wEA8XgrCC,GA9XhrCD;;AAAAA,wEA8XgrC,CA9XhrCA;;AA8XgrC,sBA9XhrCA,0DA8XgrC,CA9XhrCA,CA8XgrC;;AAAA,mBAAgBE,cAAhB;AAAA,WA9XhrCF,EA8XgrC,OA9XhrCA,EA8XgrC;AA9XhrCA,wEA8XgrCC,GA9XhrCD;;AAAAA,wEA8XgrC,CA9XhrCA;;AA8XgrC,sBA9XhrCA,0DA8XgrC,CA9XhrCA,CA8XgrC;;AAAA,mBAAyCE,cAAzC;AAAA,WA9XhrCF;;AAAAA,+DA8X0vC,CA9X1vCA;;AAAAA,uEA8X8wC,CA9X9wCA,EA8X8wC,MA9X9wCA,EA8X8wC,EA9X9wCA;;AAAAA,+DA8X0yC,CA9X1yCA;;AAAAA;;AAAAA;;;;uBAAAA;;AAAAA,kEA8X0vC,CA9X1vCA;;AAAAA,2EA8X0vC,GA9X1vCA,EA8X0vCG,oBA9X1vCH,EA8X0vC,GA9X1vCA;;AAAAA,kEA8X0yC,CA9X1yCA;;AAAAA,0EA8X0yCG,4BA9X1yCH;;;;;;AAAAA,uEA8X42C,CA9X52CA,EA8X42C,MA9X52CA,EA8X42C,EA9X52CA;;AAAAA,+DA8Xq7C,CA9Xr7CA;;AAAAA,uEA8Xy8C,CA9Xz8CA,EA8Xy8C,MA9Xz8CA,EA8Xy8C,EA9Xz8CA;;AAAAA,+DA8Xq+C,CA9Xr+CA;;AAAAA;;AAAAA;;;;uBAAAA;;AAAAA,kEA8Xq7C,CA9Xr7CA;;AAAAA,2EA8Xq7C,GA9Xr7CA,EA8Xq7CI,oBA9Xr7CJ,EA8Xq7C,GA9Xr7CA;;AAAAA,kEA8Xq+C,CA9Xr+CA;;AAAAA,0EA8Xq+CI,4BA9Xr+CJ;;;;;;AAAAA,uEA8XkhC,CA9XlhCA,EA8XkhC,IA9XlhCA,EA8XkhC,CA9XlhCA;;AAAAA,mEA8XioC,CA9XjoCA,EA8XioCK,kDA9XjoCL,EA8XioC,CA9XjoCA,EA8XioC,CA9XjoCA,EA8XioC,GA9XjoCA,EA8XioC,EA9XjoCA;;AAAAA,mEA8X42C,CA9X52CA,EA8X42CM,qDA9X52CN,EA8X42C,CA9X52CA,EA8X42C,CA9X52CA,EA8X42C,MA9X52CA,EA8X42C,EA9X52CA;;AAAAA;;;;AAAAA;;oBAAAA;;AAAAA,oEA8XojC,UA9XpjCA,EA8XojCE,iBA9XpjCF;;AAAAA,kEA8XopC,CA9XppCA;;AAAAA,mEA8XopC,MA9XppCA,EA8XopC,oBA9XppCA;;AAAAA,kEA8Xm3C,CA9Xn3CA;;AAAAA,mEA8Xm3C,MA9Xn3CA,EA8Xm3CE,iBA9Xn3CF;;;;;;qBAAAA;;AAAAA,uEA8Xu2D,CA9Xv2DA,EA8Xu2D,GA9Xv2DA,EA8Xu2D,EA9Xv2DA;;AAAAA,mEA8Xy3D,aA9Xz3DA,EA8Xy3D;AA9Xz3DA,wEA8Xy3DO,IA9Xz3DP;;AA8Xy3D,2BA9Xz3DA,8DA8Xy3DQ;;AA9Xz3DR,wEA8Xy3D,CA9Xz3DA;;AA8Xy3D,sBA9Xz3DA,0DA8Xy3D,CA9Xz3DA,CA8Xy3D;;AAAA,mBAAgBE,8BAAhB;AAAA,WA9Xz3DF,EA8Xy3D,OA9Xz3DA,EA8Xy3D;AA9Xz3DA,wEA8Xy3DO,IA9Xz3DP;;AA8Xy3D,2BA9Xz3DA,8DA8Xy3DQ;;AA9Xz3DR,wEA8Xy3D,CA9Xz3DA;;AA8Xy3D,sBA9Xz3DA,0DA8Xy3D,CA9Xz3DA,CA8Xy3D;;AAAA,mBAAqDE,8BAArD;AAAA,WA9Xz3DF;;AAAAA,uEA8XmgE,CA9XngEA,EA8XmgE,MA9XngEA,EA8XmgE,EA9XngEA;;AAAAA,+DA8X+hE,CA9X/hEA;;AAAAA;;AAAAA,uEA8XolE,CA9XplEA,EA8XolE,MA9XplEA;;AAAAA,+DA8X0lE,CA9X1lEA;;AAAAA;;AAAAA;;AAAAA;;;;yBAAAA;;wBAAAA;;AAAAA,kEA8X+hE,CA9X/hEA;;AAAAA,2EA8X+hE,EA9X/hEA,EA8X+hES,6BA9X/hET,EA8X+hE,GA9X/hEA;;AAAAA,kEA8X0lE,CA9X1lEA;;AAAAA,0EA8X0lEU,4CA9X1lEV,0DA8X0lE,CA9X1lEA,EA8X0lE,CA9X1lEA,EA8X0lEU,cA9X1lEV,EA8X0lE,EA9X1lEA;;;;;;AAAAA,gFA8XqsE,CA9XrsEA;;AAAAA,uEA8X2wE,CA9X3wEA,EA8X2wE,MA9X3wEA,EA8X2wE,EA9X3wEA;;AAAAA,uEA8XwzE,CA9XxzEA,EA8XwzE,MA9XxzEA,EA8XwzE,EA9XxzEA;;AAAAA,+DA8Xo1E,CA9Xp1EA;;AAAAA;;AAAAA,uEA8X44E,CA9X54EA,EA8X44E,MA9X54EA;;AAAAA,+DA8Xk5E,CA9Xl5EA;;AAAAA;;AAAAA;;AAAAA;;AAAAA;;;;yBAAAA;;wBAAAA;;AAAAA,kEA8Xo1E,CA9Xp1EA;;AAAAA,2EA8Xo1E,EA9Xp1EA,EA8Xo1EW,gCA9Xp1EX,EA8Xo1E,GA9Xp1EA;;AAAAA,kEA8Xk5E,CA9Xl5EA;;AAAAA,0EA8Xk5EU,4CA9Xl5EV,0DA8Xk5E,CA9Xl5EA,EA8Xk5E,CA9Xl5EA,EA8Xk5EU,cA9Xl5EV,EA8Xk5E,EA9Xl5EA;;;;;;AAAAA,uEA8XwqD,CA9XxqDA,EA8XwqD,IA9XxqDA;;AAAAA,mEA8Xu2D,CA9Xv2DA,EA8Xu2DY,kDA9Xv2DZ,EA8Xu2D,CA9Xv2DA,EA8Xu2D,CA9Xv2DA,EA8Xu2D,GA9Xv2DA,EA8Xu2D,EA9Xv2DA;;AAAAA,mEA8XqsE,CA9XrsEA,EA8XqsEa,6DA9XrsEb,EA8XqsE,CA9XrsEA,EA8XqsE,CA9XrsEA,EA8XqsE,cA9XrsEA,EA8XqsE,EA9XrsEA;;AAAAA;;;;;;AAAAA;;oBAAAA;;AAAAA,oEA8X4qD,SA9X5qDA,EA8X4qDE,mCA9X5qDF,EA8X4qD,UA9X5qDA,EA8X4qDU,wBA9X5qDV;;AAAAA,kEA8X08D,CA9X18DA;;AAAAA,mEA8X08D,MA9X18DA,EA8X08DE,mCA9X18DF;;AAAAA,kEA8XotE,CA9XptEA;;AAAAA,mEA8XotE,MA9XptEA,EA8XotEE,mCA9XptEF;;;;;;qBAAAA;;AAAAA,uEA8XspF,CA9XtpFA,EA8XspF,GA9XtpFA,EA8XspF,EA9XtpFA;;AAAAA,mEA8XksF,aA9XlsFA,EA8XksF;AA9XlsFA,wEA8XksFc,IA9XlsFd;;AAAAA,wEA8XksF,CA9XlsFA;;AA8XksF,sBA9XlsFA,0DA8XksF,CA9XlsFA,CA8XksF;;AAAA,mBAAgBE,UAAhB;AAAA,WA9XlsFF,EA8XksF,OA9XlsFA,EA8XksF;AA9XlsFA,wEA8XksFc,IA9XlsFd;;AAAAA,wEA8XksF,CA9XlsFA;;AA8XksF,sBA9XlsFA,0DA8XksF,CA9XlsFA,CA8XksF;;AAAA,mBAAqCE,UAArC;AAAA,WA9XlsFF;;AAAAA,+DA8XqwF,CA9XrwFA;;AAAAA,uEA8XqxF,CA9XrxFA,EA8XqxF,MA9XrxFA,EA8XqxF,EA9XrxFA;;AAAAA,+DA8XizF,CA9XjzFA;;AAAAA;;AAAAA;;;;wBAAAA;;AAAAA,kEA8XqwF,CA9XrwFA;;AAAAA,2EA8XqwF,GA9XrwFA,EA8XqwFe,iBA9XrwFf,EA8XqwF,GA9XrwFA;;AAAAA,kEA8XizF,CA9XjzFA;;AAAAA,0EA8XizFe,6BA9XjzFf;;;;;;AAAAA,uEA8Xm3F,CA9Xn3FA,EA8Xm3F,MA9Xn3FA,EA8Xm3F,EA9Xn3FA;;AAAAA,+DA8X47F,CA9X57FA;;AAAAA,uEA8X48F,CA9X58FA,EA8X48F,MA9X58FA,EA8X48F,EA9X58FA;;AAAAA,+DA8Xw+F,CA9Xx+FA;;AAAAA;;AAAAA;;;;wBAAAA;;AAAAA,kEA8X47F,CA9X57FA;;AAAAA,2EA8X47F,GA9X57FA,EA8X47FgB,iBA9X57FhB,EA8X47F,GA9X57FA;;AAAAA,kEA8Xw+F,CA9Xx+FA;;AAAAA,0EA8Xw+FgB,6BA9Xx+FhB;;;;;;AAAAA,uEA8X6iF,CA9X7iFA,EA8X6iF,IA9X7iFA,EA8X6iF,EA9X7iFA;;AAAAA,mEA8XspF,CA9XtpFA,EA8XspFiB,kDA9XtpFjB,EA8XspF,CA9XtpFA,EA8XspF,CA9XtpFA,EA8XspF,GA9XtpFA,EA8XspF,EA9XtpFA;;AAAAA,mEA8Xm3F,CA9Xn3FA,EA8Xm3FkB,qDA9Xn3FlB,EA8Xm3F,CA9Xn3FA,EA8Xm3F,CA9Xn3FA,EA8Xm3F,MA9Xn3FA,EA8Xm3F,EA9Xn3FA;;AAAAA;;;;AAAAA;;oBAAAA;;AAAAA,oEA8X2kF,UA9X3kFA,EA8X2kFE,gBA9X3kFF;;AAAAA,kEA8XyqF,CA9XzqFA;;AAAAA,mEA8XyqF,MA9XzqFA,EA8XyqF,iBA9XzqFA;;AAAAA,kEA8X03F,CA9X13FA;;AAAAA,mEA8X03F,MA9X13FA,EA8X03FE,gBA9X13FF;;;;;;AAAAA,uEA8Xu4B,CA9Xv4BA,EA8Xu4B,IA9Xv4BA,EA8Xu4B,CA9Xv4BA;;AAAAA,mEA8XkhC,CA9XlhCA,EA8XkhCmB,8CA9XlhCnB,EA8XkhC,CA9XlhCA,EA8XkhC,CA9XlhCA,EA8XkhC,IA9XlhCA,EA8XkhC,CA9XlhCA;;AAAAA,uEA8XwjD,CA9XxjDA,EA8XwjD,IA9XxjDA,EA8XwjD,CA9XxjDA;;AAAAA,+DA8XimD,CA9XjmDA;;AAAAA;;AAAAA,mEA8XwqD,CA9XxqDA,EA8XwqDoB,8CA9XxqDpB,EA8XwqD,CA9XxqDA,EA8XwqD,CA9XxqDA,EA8XwqD,IA9XxqDA,EA8XwqD,CA9XxqDA;;AAAAA,mEA8X6iF,CA9X7iFA,EA8X6iFqB,8CA9X7iFrB,EA8X6iF,CA9X7iFA,EA8X6iF,CA9X7iFA,EA8X6iF,IA9X7iFA,EA8X6iF,CA9X7iFA;;AAAAA;;;;uBAAAA;;oBAAAA;;AAAAA,oEA8X86B,YA9X96BA,EA8X86BsB,iBA9X96BtB;;AAAAA,kEA8X0lC,CA9X1lCA;;AAAAA,mEA8X0lC,MA9X1lCA,EA8X0lCsB,qBA9X1lCtB;;AAAAA,kEA8XimD,CA9XjmDA;;AAAAA,2EA8XimD,GA9XjmDA,EA8XimDE,gBA9XjmDF,EA8XimD,KA9XjmDA,EA8XimDE,iBA9XjmDF,EA8XimD,GA9XjmDA;;AAAAA,kEA8XqzD,CA9XrzDA;;AAAAA,mEA8XqzD,SA9XrzDA,EA8XqzDE,SA9XrzDF,EA8XqzD,cA9XrzDA,EA8XqzDsB,mBA9XrzDtB;;AAAAA,kEA8XgnF,CA9XhnFA;;AAAAA,mEA8XgnF,MA9XhnFA,EA8XgnFsB,qBA9XhnFtB;;;;UAhNzFuB;AACFC,sCAAc;AAAA;;AACV,eAAKC,MAAL,GAAc,IAAIC,uDAAJ,EAAd;AACA,eAAKC,SAAL,GAAiB,EAAjB;AACA,eAAKC,UAAL,GAAkB,uBAAlB;AACH;;;;iBACDC,qBAAY;AAAE,mBAAO,KAAKD,UAAZ;AAAyB;AACvC;AACJ;AACA;AACA;AACA;;;;iBACIE,kBAASC,QAATD,EAAmB;AACf,gBAAIC,QAAQ,CAACzD,EAATyD,IAAe,IAAnB,EAAyB;AACrBA,sBAAQ,CAACzD,EAATyD,GAAc,KAAKH,UAAnBG;AACH;;AACD,gBAAI,CAAC,KAAKJ,SAAL,CAAeI,QAAQ,CAACzD,EAAxB,CAAL,EAAkC;AAC9B,mBAAKqD,SAAL,CAAeI,QAAQ,CAACzD,EAAxB,IAA8ByD,QAA9B;AACA,qBAAO,IAAP;AAFJ,mBAIK;AACD,qBAAO,KAAKC,cAAL,CAAoBD,QAApB,CAAP;AACH;AACJ;AACD;AACJ;AACA;AACA;;;;iBACIC,wBAAeD,QAAfC,EAAyB;AACrB,gBAAIC,OAAO,GAAG,KAAd;;AACA,iBAAK,IAAIC,IAAT,IAAiB,KAAKP,SAAL,CAAeI,QAAQ,CAACzD,EAAxB,CAAjB,EAA8C;AAC1C,kBAAIyD,QAAQ,CAACG,IAAD,CAARH,KAAmB,KAAKJ,SAAL,CAAeI,QAAQ,CAACzD,EAAxB,EAA4B4D,IAA5B,CAAvB,EAA0D;AACtD,qBAAKP,SAAL,CAAeI,QAAQ,CAACzD,EAAxB,EAA4B4D,IAA5B,IAAoCH,QAAQ,CAACG,IAAD,CAA5C;AACAD,uBAAO,GAAG,IAAVA;AACH;AACJ;;AACD,mBAAOA,OAAP;AACH;AACD;AACJ;AACA;;;;iBACIE,wBAAe7D,EAAf6D,EAAmB;AACf,gBAAI,KAAKR,SAAL,CAAerD,EAAf,CAAJ,EAAwB;AACpB,qBAAO,KAAKqD,SAAL,CAAerD,EAAf,EAAmBX,WAA1B;AACH;;AACD,mBAAO,CAAP;AACH;AACD;AACJ;AACA;;;;iBACIyE,wBAAe9D,EAAf8D,EAAmBvE,IAAnBuE,EAAyB;AACrB,gBAAI,KAAKT,SAAL,CAAerD,EAAf,CAAJ,EAAwB;AACpB,kBAAIyD,QAAQ,GAAG,KAAKJ,SAAL,CAAerD,EAAf,CAAf;AACA,kBAAI+D,OAAO,GAAGC,IAAI,CAACC,IAALD,CAAUP,QAAQ,CAACnE,UAATmE,GAAsBA,QAAQ,CAACjG,YAAzCwG,CAAd;;AACA,kBAAIzE,IAAI,IAAIwE,OAARxE,IAAmB,KAAKA,IAA5B,EAAkC;AAC9B,qBAAK8D,SAAL,CAAerD,EAAf,EAAmBX,WAAnB,GAAiCE,IAAjC;AACA,qBAAK4D,MAAL,CAAYjC,IAAZ,CAAiBlB,EAAjB;AACH;AACJ;AACJ;AACD;AACJ;AACA;;;;iBACIkE,uBAAclE,EAAdkE,EAAkB5E,UAAlB4E,EAA8B;AAC1B,gBAAI,KAAKb,SAAL,CAAerD,EAAf,KAAsB,KAAKV,UAA/B,EAA2C;AACvC,mBAAK+D,SAAL,CAAerD,EAAf,EAAmBV,UAAnB,GAAgCA,UAAhC;AACA,mBAAK6D,MAAL,CAAYjC,IAAZ,CAAiBlB,EAAjB;AACH;AACJ;AACD;AACJ;AACA;;;;iBACImE,yBAAgBnE,EAAhBmE,EAAoB3G,YAApB2G,EAAkC;AAC9B,gBAAI,KAAKd,SAAL,CAAerD,EAAf,CAAJ,EAAwB;AACpB,mBAAKqD,SAAL,CAAerD,EAAf,EAAmBxC,YAAnB,GAAkCA,YAAlC;AACA,mBAAK2F,MAAL,CAAYjC,IAAZ,CAAiBlB,EAAjB;AACH;AACJ;AACD;AACJ;AACA;AACA;;;;iBACIoE,uBAAkC;AAAA,gBAAtBpE,EAAsB,uEAAjB,KAAKsD,UAAY;;AAC9B,gBAAI,KAAKD,SAAL,CAAerD,EAAf,CAAJ,EAAwB;AACpB,qBAAO,KAAKqE,KAAL,CAAW,KAAKhB,SAAL,CAAerD,EAAf,CAAX,CAAP;AACH;;AACD,mBAAO,EAAP;AACH;AACD;AACJ;AACA;;;;iBACIqE,eAAMC,GAAND,EAAW;AACP,gBAAIE,MAAM,GAAG,EAAb;;AACA,iBAAK,IAAIC,CAAT,IAAcF,GAAd,EAAmB;AACf,kBAAIA,GAAG,CAACG,cAAJH,CAAmBE,CAAnBF,CAAJ,EAA2B;AACvBC,sBAAM,CAACC,CAAD,CAAND,GAAYD,GAAG,CAACE,CAAD,CAAfD;AACH;AACJ;;AACD,mBAAOA,MAAP;AACH;;;;;;AAGL,UAAMG,YAAY,GAAGC,MAAM,CAACC,gBAA5B;;UACMC;AACF3B,+BAAY4B,OAAZ5B,EAAqB;AAAA;;AACjB,eAAK4B,OAAL,GAAeA,OAAf,CADiB,CAEjB;;AACA,eAAKC,KAAL,GAAa,EAAb;AACH;;;;iBACDC,mBAAUC,UAAVD,EAAsBE,IAAtBF,EAA4B;AACxB;AACA;AACA;AACA;AACA,gBAAI,EAAEC,UAAU,YAAYE,KAAxB,CAAJ,EAAoC;AAChC,kBAAIC,GAAG,GAAGF,IAAI,CAAClF,EAALkF,IAAW,KAAKJ,OAAL,CAAavB,SAAb,EAArB;;AACA,kBAAI,KAAKwB,KAAL,CAAWK,GAAX,CAAJ,EAAqB;AACjB,uBAAO,KAAKL,KAAL,CAAWK,GAAX,EAAgBC,KAAvB;AADJ,qBAGK;AACD,uBAAOJ,UAAP;AACH;AACJ;;AACD,gBAAIK,cAAc,GAAGJ,IAAI,CAAC5F,UAAL4F,IAAmBA,IAAI,CAAC5F,UAAL4F,KAAoBD,UAAU,CAAC9F,MAAvE;AACA,gBAAIsE,QAAQ,GAAG,KAAK8B,cAAL,CAAoBN,UAApB,EAAgCC,IAAhC,CAAf;AACA,gBAAIlF,EAAE,GAAGyD,QAAQ,CAACzD,EAAlB;AACA,gBAAIwF,KAAJ,EAAWC,GAAX;AACA,gBAAIC,OAAO,GAAGjC,QAAQ,CAACjG,YAAvB;AACA,gBAAImI,UAAU,GAAG,KAAKb,OAAL,CAAatB,QAAb,CAAsBC,QAAtB,CAAjB;;AACA,gBAAI,CAAC6B,cAAD,IAAmBL,UAAU,YAAYE,KAA7C,EAAoD;AAChDO,qBAAO,GAAG,CAACA,OAAD,IAAYhB,YAAtBgB;AACAF,mBAAK,GAAG,CAAC/B,QAAQ,CAACpE,WAAToE,GAAuB,CAAxB,IAA6BiC,OAArCF;AACAC,iBAAG,GAAGD,KAAK,GAAGE,OAAdD;AACA,kBAAIG,WAAW,GAAG,KAAKC,gBAAL,CAAsB7F,EAAtB,EAA0BiF,UAA1B,EAAsCO,KAAtC,EAA6CC,GAA7C,CAAlB;;AACA,kBAAIG,WAAJ,EAAiB;AACb,uBAAO,KAAKb,KAAL,CAAW/E,EAAX,EAAeqF,KAAtB;AADJ,qBAGK;AACD,oBAAIA,KAAK,GAAGJ,UAAU,CAACI,KAAXJ,CAAiBO,KAAjBP,EAAwBQ,GAAxBR,CAAZ;AACA,qBAAKa,SAAL,CAAe9F,EAAf,EAAmBiF,UAAnB,EAA+BI,KAA/B,EAAsCG,KAAtC,EAA6CC,GAA7C;AACA,qBAAKX,OAAL,CAAa3B,MAAb,CAAoBjC,IAApB,CAAyBlB,EAAzB;AACA,uBAAOqF,KAAP;AACH;AAbL,mBAeK;AACD,kBAAIM,UAAJ,EAAgB;AACZ,qBAAKb,OAAL,CAAa3B,MAAb,CAAoBjC,IAApB,CAAyBlB,EAAzB;AAFH,gBAID;AACA;;;AACA,mBAAK8F,SAAL,CAAe9F,EAAf,EAAmBiF,UAAnB,EAA+BA,UAA/B,EAA2CO,KAA3C,EAAkDC,GAAlD;AACA,qBAAOR,UAAP;AACH;AACJ;AACD;AACJ;AACA;;;;iBACIM,wBAAeN,UAAfM,EAA2BQ,MAA3BR,EAAmC;AAC/B,iBAAKS,WAAL,CAAiBD,MAAjB;AACA,mBAAO;AACH/F,gBAAE,EAAE+F,MAAM,CAAC/F,EAAP+F,IAAa,IAAbA,GAAoBA,MAAM,CAAC/F,EAA3B+F,GAAgC,KAAKjB,OAAL,CAAavB,SAAb,EADjC;AAEH/F,0BAAY,EAAE,CAACuI,MAAM,CAACvI,YAAR,IAAwB,CAFnC;AAGH6B,yBAAW,EAAE,CAAC0G,MAAM,CAAC1G,WAAR,IAAuB,CAHjC;AAIHC,wBAAU,EAAE,CAACyG,MAAM,CAACzG,UAAR,IAAsB2F,UAAU,CAAC9F;AAJ1C,aAAP;AAMH;AACD;AACJ;AACA;;;;iBACI6G,qBAAYD,MAAZC,EAAoB;AAChB,gBAAMC,QAAQ,GAAG,CAAC,cAAD,EAAiB,aAAjB,CAAjB;AACA,gBAAMC,OAAO,GAAGD,QAAQ,CAACE,MAATF,CAAgBrC,cAAI;AAAA,qBAAI,EAAEA,IAAI,IAAImC,MAAV,CAAJ;AAAA,aAApBE,CAAhB;;AACA,gBAAI,IAAIC,OAAO,CAAC/G,MAAhB,EAAwB;AACpB,oBAAM,IAAIiH,KAAJ,gFAAkFF,OAAO,CAACG,IAARH,CAAa,IAAbA,CAAlF,EAAN;AACH;AACJ;AACD;AACJ;AACA;AACA;AACA;AACA;;;;iBACIJ,mBAAU9F,EAAV8F,EAAcb,UAAda,EAA0BT,KAA1BS,EAAiCN,KAAjCM,EAAwCL,GAAxCK,EAA6C;AACzC,iBAAKf,KAAL,CAAW/E,EAAX,IAAiB;AACbiF,wBADa,EACbA,UADa;AAEbqB,kBAAI,EAAErB,UAAU,CAAC9F,MAFJ;AAGbkG,mBAHa,EAGbA,KAHa;AAIbG,mBAJa,EAIbA,KAJa;AAKbC;AALa,aAAjB;AAOH;AACD;AACJ;AACA;;;;iBACII,0BAAiB7F,EAAjB6F,EAAqBZ,UAArBY,EAAiCL,KAAjCK,EAAwCJ,GAAxCI,EAA6C;AACzC,gBAAId,KAAK,GAAG,KAAKA,KAAL,CAAW/E,EAAX,CAAZ;;AACA,gBAAI,CAAC+E,KAAL,EAAY;AACR,qBAAO,KAAP;AACH;;AACD,gBAAIwB,mBAAmB,GAAGxB,KAAK,CAACuB,IAANvB,KAAeE,UAAU,CAAC9F,MAA1B4F,IACtBA,KAAK,CAACS,KAANT,KAAgBS,KADMT,IAEtBA,KAAK,CAACU,GAANV,KAAcU,GAFlB;;AAGA,gBAAI,CAACc,mBAAL,EAA0B;AACtB,qBAAO,KAAP;AACH;;AACD,mBAAOxB,KAAK,CAACM,KAANN,CAAYyB,KAAZzB,CAAkB,UAAC0B,OAAD,EAAUC,KAAV;AAAA,qBAAoBD,OAAO,KAAKxB,UAAU,CAACO,KAAK,GAAGkB,KAAT,CAA1C;AAAA,aAAlB3B,CAAP;AACH;;;;;;AAELF,mBAAY,CAAC8B,IAAb9B;AAAA,yBAAyGA,aAAzG,EAA+FnD,gEAAwCuB,kBAAxCvB,EAA/F,EAA+FA,CAA/F;AAAA;;AACAmD,mBAAY,CAAC+B,KAAb/B,kBAD+FnD,2DAC/F;AAAAmF;AAAAhH,cAAuGgF,aAAvG;AAAAiC;AAAA,OAD+FpF,CAC/FmD;;AACA;AAAA,2DAF+FnD,gEAEJmD,aAFInD,EAEsB,CAAC;AAC1G7B,cAAI,EAAEkH,+CADoG;AAE1G7B,cAAI,EAAE,CAAC;AACC2B,gBAAI,EAAE,UADP;AAECC,gBAAI,EAAE;AAFP,WAAD;AAFoG,SAAD,CAFtBpF,EAQnE,YAAY;AAAE,iBAAO,CAAC;AAAE7B,gBAAI,EAAEoD;AAAR,WAAD,CAAP;AAN1C,SAF+FvB,EAE/F,IAF+FA,CAE/F;AAAA;AAQA;AACA;AACA;AACA;;;AACA,UAAMsF,gBAAgB,+lFAAtB;AAoDA,UAAMC,cAAc,k1DAApB;AAoEA;AACA;AACA;AACA;AACA;;UACMC;AACFhE,8CAAY4B,OAAZ5B,EAAqBiE,iBAArBjE,EAAwC;AAAA;;AAAA;;AACpC,eAAK4B,OAAL,GAAeA,OAAf;AACA,eAAKqC,iBAAL,GAAyBA,iBAAzB;AACA,eAAKC,OAAL,GAAe,CAAf;AACA,eAAKC,UAAL,GAAkB,IAAIjE,uDAAJ,EAAlB;AACA,eAAKkE,oBAAL,GAA4B,IAAIlE,uDAAJ,EAA5B;AACA,eAAKmE,KAAL,GAAa,EAAb;AACA,eAAKC,SAAL,GAAiB,KAAK1C,OAAL,CAAa3B,MAAb,CACZ7F,SADY,CACF0C,YAAE,EAAI;AACjB,gBAAI,OAAKA,EAAL,KAAYA,EAAhB,EAAoB;AAChB,qBAAKyH,eAAL;;AACA,qBAAKN,iBAAL,CAAuBO,YAAvB;;AACA,qBAAKP,iBAAL,CAAuBQ,aAAvB;AACH;AANY,YAAjB;AAQH;;;;iBACDC,oBAAW;AACP,gBAAI,KAAK5H,EAAL,KAAY6H,SAAhB,EAA2B;AACvB,mBAAK7H,EAAL,GAAU,KAAK8E,OAAL,CAAavB,SAAb,EAAV;AACH;;AACD,iBAAKkE,eAAL;AACH;;;iBACDK,qBAAYC,OAAZD,EAAqB;AACjB,iBAAKL,eAAL;AACH;;;iBACDO,uBAAc;AACV,iBAAKR,SAAL,CAAepH,WAAf;AACH;AACD;AACJ;AACA;;;;iBACI6H,oBAAW;AACP,iBAAKC,YAAL;AACA,iBAAKC,UAAL,CAAgB,KAAKC,UAAL,KAAoB,CAApC;AACH;AACD;AACJ;AACA;;;;iBACIC,gBAAO;AACH,iBAAKH,YAAL;AACA,iBAAKC,UAAL,CAAgB,KAAKC,UAAL,KAAoB,CAApC;AACH;AACD;AACJ;AACA;;;;iBACIE,uBAAc;AACV,mBAAO,KAAKF,UAAL,OAAsB,CAA7B;AACH;AACD;AACJ;AACA;;;;iBACIG,sBAAa;AACT,mBAAO,KAAKC,WAAL,OAAuB,KAAKJ,UAAL,EAA9B;AACH;AACD;AACJ;AACA;;;;iBACID,oBAAW5I,IAAX4I,EAAiB;AACb,iBAAKd,UAAL,CAAgBnG,IAAhB,CAAqB3B,IAArB;AACH;AACD;AACJ;AACA;;;;iBACI6I,sBAAa;AACT,mBAAO,KAAKtD,OAAL,CAAajB,cAAb,CAA4B,KAAK7D,EAAjC,CAAP;AACH;AACD;AACJ;AACA;;;;iBACIwI,uBAAc;AACV,gBAAIC,IAAI,GAAG,KAAK3D,OAAL,CAAaV,WAAb,CAAyB,KAAKpE,EAA9B,CAAX;;AACA,gBAAIyI,IAAI,CAACnJ,UAALmJ,GAAkB,CAAtB,EAAyB;AACrB;AACA;AACA,qBAAO,CAAP;AACH;;AACD,mBAAOzE,IAAI,CAACC,IAALD,CAAUyE,IAAI,CAACnJ,UAALmJ,GAAkBA,IAAI,CAACjL,YAAjCwG,CAAP;AACH;;;iBACD0E,yBAAgB;AACZ,mBAAO,KAAK5D,OAAL,CAAaV,WAAb,CAAyB,KAAKpE,EAA9B,EAAkCV,UAAzC;AACH;;;iBACD4I,wBAAe;AACX,gBAAI,KAAKpD,OAAL,CAAaV,WAAb,CAAyB,KAAKpE,EAA9B,EAAkCA,EAAlC,IAAwC,IAA5C,EAAkD;AAC9C2I,qBAAO,CAACC,IAARD,2DAA+D,KAAK3I,EAApE2I;AACH;AACJ;AACD;AACJ;AACA;AACA;AACA;;;;iBACIlB,2BAAkB;AAAA;;AACd,gBAAIgB,IAAI,GAAG,KAAK3D,OAAL,CAAaV,WAAb,CAAyB,KAAKpE,EAA9B,CAAX;AACA,gBAAM6I,oBAAoB,GAAG,KAAKC,oBAAL,CAA0BL,IAA1B,CAA7B;;AACA,gBAAII,oBAAoB,KAAKJ,IAAI,CAACpJ,WAAlC,EAA+C;AAC3C0J,wBAAU,CAAC,YAAM;AACb,uBAAKzB,oBAAL,CAA0BpG,IAA1B,CAA+B2H,oBAA/B;;AACA,uBAAKtB,KAAL,GAAa,OAAKyB,eAAL,CAAqBP,IAAI,CAACpJ,WAA1B,EAAuCoJ,IAAI,CAACjL,YAA5C,EAA0DiL,IAAI,CAACnJ,UAA/D,EAA2E,OAAK8H,OAAhF,CAAb;AAFM,gBAAV2B;AADJ,mBAMK;AACD,mBAAKxB,KAAL,GAAa,KAAKyB,eAAL,CAAqBP,IAAI,CAACpJ,WAA1B,EAAuCoJ,IAAI,CAACjL,YAA5C,EAA0DiL,IAAI,CAACnJ,UAA/D,EAA2E,KAAK8H,OAAhF,CAAb;AACH;AACJ;AACD;AACJ;AACA;AACA;;;;iBACI0B,8BAAqBrF,QAArBqF,EAA+B;AAC3B,gBAAMG,UAAU,GAAGjF,IAAI,CAACC,IAALD,CAAUP,QAAQ,CAACnE,UAATmE,GAAsBA,QAAQ,CAACjG,YAAzCwG,CAAnB;;AACA,gBAAIiF,UAAU,GAAGxF,QAAQ,CAACpE,WAAtB4J,IAAqC,IAAIA,UAA7C,EAAyD;AACrD,qBAAOA,UAAP;AADJ,mBAGK,IAAIxF,QAAQ,CAACpE,WAAToE,GAAuB,CAA3B,EAA8B;AAC/B,qBAAO,CAAP;AACH;;AACD,mBAAOA,QAAQ,CAACpE,WAAhB;AACH;AACD;AACJ;AACA;;;;iBACI2J,yBAAgB3J,WAAhB2J,EAA6BxL,YAA7BwL,EAA2C1J,UAA3C0J,EAAuDE,eAAvDF,EAAwE;AACpE;AACAE,2BAAe,GAAG,CAACA,eAAnBA;AACA,gBAAI3B,KAAK,GAAG,EAAZ,CAHoE,CAIpE;AACA;;AACA,gBAAM0B,UAAU,GAAGjF,IAAI,CAACmF,GAALnF,CAASA,IAAI,CAACC,IAALD,CAAU1E,UAAU,GAAG9B,YAAvBwG,CAATA,EAA+C,CAA/CA,CAAnB;AACA,gBAAMoF,OAAO,GAAGpF,IAAI,CAACC,IAALD,CAAUkF,eAAe,GAAG,CAA5BlF,CAAhB;AACA,gBAAMqF,OAAO,GAAGhK,WAAW,IAAI+J,OAA/B;AACA,gBAAME,KAAK,GAAGL,UAAU,GAAGG,OAAbH,GAAuB5J,WAArC;AACA,gBAAMkK,QAAQ,GAAG,CAACF,OAAD,IAAY,CAACC,KAA9B;AACA,gBAAIE,cAAc,GAAGN,eAAe,GAAGD,UAAvC;AACA,gBAAIzE,CAAC,GAAG,CAAR;;AACA,mBAAOA,CAAC,IAAIyE,UAALzE,IAAmBA,CAAC,IAAI0E,eAA/B,EAAgD;AAC5C,kBAAIO,KAAJ;AACA,kBAAIC,UAAU,GAAG,KAAKC,mBAAL,CAAyBnF,CAAzB,EAA4BnF,WAA5B,EAAyC6J,eAAzC,EAA0DD,UAA1D,CAAjB;AACA,kBAAIW,qBAAqB,GAAIpF,CAAC,KAAK,CAANA,KAAY+E,QAAQ,IAAID,KAAxB9E,CAA7B;AACA,kBAAIqF,qBAAqB,GAAIrF,CAAC,KAAK0E,eAAe,GAAG,CAAxB1E,KAA8B+E,QAAQ,IAAIF,OAA1C7E,CAA7B;;AACA,kBAAIgF,cAAc,KAAKI,qBAAqB,IAAIC,qBAA9B,CAAlB,EAAwE;AACpEJ,qBAAK,GAAG,KAARA;AADJ,qBAGK;AACDA,qBAAK,GAAGC,UAARD;AACH;;AACDlC,mBAAK,CAACuC,IAANvC,CAAW;AACPkC,qBAAK,EAAEA,KADA;AAEPM,qBAAK,EAAEL;AAFA,eAAXnC;AAIA/C,eAAC;AACJ;;AACD,mBAAO+C,KAAP;AACH;AACD;AACJ;AACA;AACA;;;;iBACIoC,6BAAoBnF,CAApBmF,EAAuBtK,WAAvBsK,EAAoCT,eAApCS,EAAqDV,UAArDU,EAAiE;AAC7D,gBAAIP,OAAO,GAAGpF,IAAI,CAACC,IAALD,CAAUkF,eAAe,GAAG,CAA5BlF,CAAd;;AACA,gBAAIQ,CAAC,KAAK0E,eAAV,EAA2B;AACvB,qBAAOD,UAAP;AADJ,mBAGK,IAAIzE,CAAC,KAAK,CAAV,EAAa;AACd,qBAAOA,CAAP;AADC,mBAGA,IAAI0E,eAAe,GAAGD,UAAtB,EAAkC;AACnC,kBAAIA,UAAU,GAAGG,OAAbH,GAAuB5J,WAA3B,EAAwC;AACpC,uBAAO4J,UAAU,GAAGC,eAAbD,GAA+BzE,CAAtC;AADJ,qBAGK,IAAI4E,OAAO,GAAG/J,WAAd,EAA2B;AAC5B,uBAAOA,WAAW,GAAG+J,OAAd/J,GAAwBmF,CAA/B;AADC,qBAGA;AACD,uBAAOA,CAAP;AACH;AATA,mBAWA;AACD,qBAAOA,CAAP;AACH;AACJ;;;;;;AAEL0C,kCAA2B,CAACP,IAA5BO;AAAA,yBAAwHA,4BAAxH,EAjU+FxF,gEAiUsEuB,kBAjUtEvB,CAiU/F,EAjU+FA,gEAiUoGA,4DAjUpGA,CAiU/F;AAAA;;AACAwF,kCAA2B,CAAC8C,IAA5B9C,kBAlU+FxF,gEAkU/F;AAAA7B,cAA4GqH,4BAA5G;AAAA+C;AAAAC;AAAAlK;AAAAoH;AAAA;AAAA+C;AAAA9C;AAAAC;AAAA;AAAA8C;AAAAC,mBAlU+F3I,kEAkU/F;AAAA,OAlU+FA,CAkU/FwF;;AACA;AAAA,2DAnU+FxF,gEAmUJwF,4BAnUIxF,EAmUqC,CAAC;AACzH7B,cAAI,EAAEyK,oDADmH;AAEzHpF,cAAI,EAAE,CAAC;AACCxE,oBAAQ,EAAE,2CADX;AAEC0J,oBAAQ,EAAE;AAFX,WAAD;AAFmH,SAAD,CAnUrC1I,EAyUnE,YAAY;AAAE,iBAAO,CAAC;AAAE7B,gBAAI,EAAEoD;AAAR,WAAD,EAA8B;AAAEpD,gBAAI,EAAE6B;AAAR,WAA9B,CAAP;AAN1C,SAnU+FA,EAyUoC;AAAE1B,YAAE,EAAE,CAAC;AAC1HH,gBAAI,EAAE0K;AADoH,WAAD,CAAN;AAEnHnD,iBAAO,EAAE,CAAC;AACVvH,gBAAI,EAAE0K;AADI,WAAD,CAF0G;AAInHlD,oBAAU,EAAE,CAAC;AACbxH,gBAAI,EAAE2K;AADO,WAAD,CAJuG;AAMnHlD,8BAAoB,EAAE,CAAC;AACvBzH,gBAAI,EAAE2K;AADiB,WAAD;AAN6F,SAzUpC9I,CAmU/F;AAAA;;AAgBA,eAAS+I,eAAT,CAAyBC,KAAzB,EAAgC;AAC5B,eAAO,CAAC,CAACA,KAAF,IAAWA,KAAK,KAAK,OAA5B;AACH;AACD;AACA;AACA;;;UACMC;AACFzH,gDAAc;AAAA;;AACV,eAAKkE,OAAL,GAAe,CAAf;AACA,eAAKwD,aAAL,GAAqB,UAArB;AACA,eAAKC,SAAL,GAAiB,MAAjB;AACA,eAAKC,2BAAL,GAAmC,YAAnC;AACA,eAAKC,qBAAL,GAA6B,MAA7B;AACA,eAAKC,wBAAL;AACA,eAAK3D,UAAL,GAAkB,IAAIjE,uDAAJ,EAAlB;AACA,eAAKkE,oBAAL,GAA4B,IAAIlE,uDAAJ,EAA5B;AACA,eAAK6H,eAAL,GAAuB,IAAvB;AACA,eAAKC,SAAL,GAAiB,KAAjB;AACA,eAAKC,WAAL,GAAmB,KAAnB;AACH;;;;eACiB,eAAG;AACjB,mBAAO,KAAKF,eAAZ;AACH;eACiB,aAAClB,KAAD,EAAQ;AACtB,iBAAKkB,eAAL,GAAuBR,eAAe,CAACV,KAAD,CAAtC;AACH;;;eACW,eAAG;AACX,mBAAO,KAAKmB,SAAZ;AACH;eACW,aAACnB,KAAD,EAAQ;AAChB,iBAAKmB,SAAL,GAAiBT,eAAe,CAACV,KAAD,CAAhC;AACH;;;eACa,eAAG;AACb,mBAAO,KAAKoB,WAAZ;AACH;eACa,aAACpB,KAAD,EAAQ;AAClB,iBAAKoB,WAAL,GAAmBV,eAAe,CAACV,KAAD,CAAlC;AACH;;;iBACDqB,sBAAa1E,KAAb0E,EAAoB;AAChB,mBAAO1E,KAAP;AACH;;;;;;AAELiE,kCAA2B,CAAChE,IAA5BgE;AAAA,yBAAwHA,4BAAxH;AAAA;;AACAA,kCAA2B,CAACU,IAA5BV,kBA9X+FjJ,gEA8X/F;AAAA7B,cAA4G8K,4BAA5G;AAAAV;AAAAC;AAAAlK;AAAAoH;AAAAkE;AAAAC;AAAAC;AAAAZ;AAAAC;AAAAC;AAAAC;AAAAC;AAAA;AAAAb;AAAA9C;AAAAC;AAAA;AAAAmE;AAAAC;AAAAC;AAAAhL;AAAA;AA9X+Fe,yEA8XqhB,CA9XrhBA,EA8XqhB,qBA9XrhBA,EA8XqhB,CA9XrhBA,EA8XqhB,CA9XrhBA;;AAAAA,qEA8XgrB,YA9XhrBA,EA8XgrB;AAAA,qBAAekK,2BAAf;AAAA,aA9XhrBlK,EA8XgrB,sBA9XhrBA,EA8XgrB;AAAA,qBAA4FkK,qCAA5F;AAAA,aA9XhrBlK;;AAAAA,yEA8XszB,CA9XtzBA,EA8XszB,KA9XtzBA,EA8XszB,CA9XtzBA;;AAAAA,qEA8Xu4B,CA9Xv4BA,EA8Xu4BmK,yCA9Xv4BnK,EA8Xu4B,CA9Xv4BA,EA8Xu4B,CA9Xv4BA,EA8Xu4B,IA9Xv4BA,EA8Xu4B,CA9Xv4BA;;AAAAA;;AAAAA;AA8X/F;;AAAA;AAAA,sBA9X+FA,0DA8X/F,CA9X+FA,CA8X/F;;AA9X+FA,qEA8X0lB,IA9X1lBA,EA8X0lBkK,MA9X1lBlK,EA8X0lB,SA9X1lBA,EA8X0lBkK,WA9X1lBlK;;AAAAA,oEA8X+0B,CA9X/0BA;;AAAAA,sEA8X+0B,YA9X/0BA,EA8X+0BkK,+BA9X/0BlK;;AAAAA,oEA8X09B,CA9X19BA;;AAAAA,qEA8X09B,MA9X19BA,EA8X09B,wCA9X19BA;AA8X/F;AAAA;AAAAoK,qBAAkrJ5E,4BAAlrJ,EAAy3J6E,iDAAz3J,EAA08JA,oDAA18J;AAAAC,gBAAgkKD,wDAAhkK;AAAAE;AAAAC;AAAAC;AAAA,OA9X+FzK,CA8X/FiJ;;AACA;AAAA,2DA/X+FjJ,gEA+XJiJ,4BA/XIjJ,EA+XqC,CAAC;AACzH7B,cAAI,EAAEuM,oDADmH;AAEzHlH,cAAI,EAAE,CAAC;AACCxE,oBAAQ,EAAE,qBADX;AAECC,oBAAQ,EAAEqG,gBAFX;AAGCiF,kBAAM,EAAE,CAAChF,cAAD,CAHT;AAICkF,2BAAe,EAAEE,yEAJlB;AAKCH,yBAAa,EAAEI;AALhB,WAAD;AAFmH,SAAD,CA/XrC5K,EA+X/F,IA/X+FA,EAwYnE;AAAE1B,YAAE,EAAE,CAAC;AACnBH,gBAAI,EAAE0K;AADa,WAAD,CAAN;AAEZnD,iBAAO,EAAE,CAAC;AACVvH,gBAAI,EAAE0K;AADI,WAAD,CAFG;AAIZe,wBAAc,EAAE,CAAC;AACjBzL,gBAAI,EAAE0K;AADW,WAAD,CAJJ;AAMZgB,kBAAQ,EAAE,CAAC;AACX1L,gBAAI,EAAE0K;AADK,WAAD,CANE;AAQZiB,oBAAU,EAAE,CAAC;AACb3L,gBAAI,EAAE0K;AADO,WAAD,CARA;AAUZK,uBAAa,EAAE,CAAC;AAChB/K,gBAAI,EAAE0K;AADU,WAAD,CAVH;AAYZM,mBAAS,EAAE,CAAC;AACZhL,gBAAI,EAAE0K;AADM,WAAD,CAZC;AAcZO,qCAA2B,EAAE,CAAC;AAC9BjL,gBAAI,EAAE0K;AADwB,WAAD,CAdjB;AAgBZQ,+BAAqB,EAAE,CAAC;AACxBlL,gBAAI,EAAE0K;AADkB,WAAD,CAhBX;AAkBZS,kCAAwB,EAAE,CAAC;AAC3BnL,gBAAI,EAAE0K;AADqB,WAAD,CAlBd;AAoBZlD,oBAAU,EAAE,CAAC;AACbxH,gBAAI,EAAE2K;AADO,WAAD,CApBA;AAsBZlD,8BAAoB,EAAE,CAAC;AACvBzH,gBAAI,EAAE2K;AADiB,WAAD;AAtBV,SAxYmE9I,CA+X/F;AAAA;;UAmCM6K;;;;AAENA,0BAAmB,CAAC5F,IAApB4F;AAAA,yBAAgHA,oBAAhH;AAAA;;AACAA,0BAAmB,CAACC,IAApBD,kBAra+F7K,+DAqa/F;AAAA7B,cAAiH0M,oBAAjH;AAAA3P,uBAAqJiI,aAArJ,EACQ8F,4BADR,EAEQzD,4BAFR;AAAApL,kBAEgD2Q,yDAFhD;AAAAzQ,kBAEyE6I,aAFzE,EAEuF8F,4BAFvF,EAEoHzD,4BAFpH;AAAA,OAra+FxF,CAqa/F6K;AAGAA,0BAAmB,CAACG,IAApBH,kBAxa+F7K,+DAwa/F;AAAAiL,mBAAiJ,CAAC1J,kBAAD,CAAjJ;AAAAnH,kBAAgL,CAAC2Q,yDAAD,CAAhL;AAAA,OAxa+F/K,CAwa/F6K;;AACA;AAAA,2DAza+F7K,gEAyaJ6K,oBAzaI7K,EAya6B,CAAC;AACjH7B,cAAI,EAAE+M,mDAD2G;AAEjH1H,cAAI,EAAE,CAAC;AACCpJ,mBAAO,EAAE,CAAC2Q,yDAAD,CADV;AAEC7P,wBAAY,EAAE,CACViI,aADU,EAEV8F,4BAFU,EAGVzD,4BAHU,CAFf;AAOCyF,qBAAS,EAAE,CAAC1J,kBAAD,CAPZ;AAQCjH,mBAAO,EAAE,CAAC6I,aAAD,EAAe8F,4BAAf,EAA4CzD,4BAA5C;AARV,WAAD;AAF2G,SAAD,CAza7BxF,EAya/F,IAza+FA,EAya/F,IAza+FA,CAya/F;AAAA;AAcA;AACA;AACA;;AAEA;AACA;AACA;;;;;","names":["routes","path","component","_plans_page__WEBPACK_IMPORTED_MODULE_0__","PlansPageRoutingModule","imports","_angular_router__WEBPACK_IMPORTED_MODULE_3__","exports","PlansPageModule","_angular_common__WEBPACK_IMPORTED_MODULE_10__","_angular_forms__WEBPACK_IMPORTED_MODULE_11__","_ionic_angular__WEBPACK_IMPORTED_MODULE_12__","_plans_routing_module__WEBPACK_IMPORTED_MODULE_0__","_shared_lib_components_coverages_benefit_elections_no_benefits_no_benefits_module__WEBPACK_IMPORTED_MODULE_2__","_med_disclaimer_med_disclaimer_module__WEBPACK_IMPORTED_MODULE_3__","_shared_lib_components_loading_loading_module__WEBPACK_IMPORTED_MODULE_4__","_shared_lib_components_hsastore_nudge_hsastore_nudge_module__WEBPACK_IMPORTED_MODULE_5__","_shared_lib_components_pagination_pagination_module__WEBPACK_IMPORTED_MODULE_6__","_home_medical_spending_medical_spending_module__WEBPACK_IMPORTED_MODULE_7__","declarations","_plans_page__WEBPACK_IMPORTED_MODULE_1__","PlansPage","benefitsService","router","utilityService","platformService","_constants_coverage_json__WEBPACK_IMPORTED_MODULE_2__","rxjs__WEBPACK_IMPORTED_MODULE_6__","isDesktop","subscribe","data","itemsPerPage","fetchData","isWorkplaceDashboard","getBenefitContent","fetchPlanId","isWeb","getIsWeb","getNoBenefitContents","benefitContent","myHealthWealth","JSON","parse","Insights_ManageMyHealthandWealth","getGuidanceEnable","getGuidanceEnabled","guidanceEnabled","routerSubscription","fetchUrlThroughNavigation","planId","paramId","subscription","add","method_name","then","coverages","enrolled","showPagination","length","managePaginationConfig","currentPage","totalItems","page","paginationConfig","stringify","conjunction","dataSize","benefit","type","setBenefit","navigateByUrl","id","res","width","openGuidelines","unsubscribe","_shared_lib_services_benefits_benefits_service__WEBPACK_IMPORTED_MODULE_3__","_angular_router__WEBPACK_IMPORTED_MODULE_8__","_services_utility_utility_service__WEBPACK_IMPORTED_MODULE_4__","_shared_lib_services_platform_platform_service__WEBPACK_IMPORTED_MODULE_5__","_angular_core__WEBPACK_IMPORTED_MODULE_9__","selector","template","PaginationComponent","_angular_core__WEBPACK_IMPORTED_MODULE_2__","event","detail","pageIndex","paginationChange","emit","PaginationModule","_angular_common__WEBPACK_IMPORTED_MODULE_3__","_ionic_angular__WEBPACK_IMPORTED_MODULE_4__","_pagination_component__WEBPACK_IMPORTED_MODULE_0__","schemas","ngx_pagination__WEBPACK_IMPORTED_MODULE_5__","__webpack_exports__","i0","_r8","_r0","ctx_r5","ctx_r6","PaginationControlsComponent_ul_3_li_1_a_1_Template","PaginationControlsComponent_ul_3_li_1_span_2_Template","_r15","$implicit","ctx_r11","page_r10","ctx_r12","PaginationControlsComponent_ul_3_li_4_a_1_Template","PaginationControlsComponent_ul_3_li_4_ng_container_2_Template","_r23","ctx_r20","ctx_r21","PaginationControlsComponent_ul_3_li_5_a_1_Template","PaginationControlsComponent_ul_3_li_5_span_2_Template","PaginationControlsComponent_ul_3_li_1_Template","PaginationControlsComponent_ul_3_li_4_Template","PaginationControlsComponent_ul_3_li_5_Template","ctx_r1","PaginationService","constructor","change","EventEmitter","instances","DEFAULT_ID","defaultId","register","instance","updateInstance","changed","prop","getCurrentPage","setCurrentPage","maxPage","Math","ceil","setTotalItems","setItemsPerPage","getInstance","clone","obj","target","i","hasOwnProperty","LARGE_NUMBER","Number","MAX_SAFE_INTEGER","PaginatePipe","service","state","transform","collection","args","Array","_id","slice","serverSideMode","createInstance","start","end","perPage","emitChange","isIdentical","stateIsIdentical","saveState","config","checkConfig","required","missing","filter","Error","join","size","isMetaDataIdentical","every","element","index","ɵfac","ɵpipe","name","pure","Pipe","DEFAULT_TEMPLATE","DEFAULT_STYLES","PaginationControlsDirective","changeDetectorRef","maxSize","pageChange","pageBoundsCorrection","pages","changeSub","updatePageLinks","markForCheck","detectChanges","ngOnInit","undefined","ngOnChanges","changes","ngOnDestroy","previous","checkValidId","setCurrent","getCurrent","next","isFirstPage","isLastPage","getLastPage","inst","getTotalItems","console","warn","correctedCurrentPage","outOfBoundCorrection","setTimeout","createPageArray","totalPages","paginationRange","max","halfWay","isStart","isEnd","isMiddle","ellipsesNeeded","label","pageNumber","calculatePageNumber","openingEllipsesNeeded","closingEllipsesNeeded","push","value","ɵdir","selectors","inputs","outputs","exportAs","features","Directive","Input","Output","coerceToBoolean","input","PaginationControlsComponent","previousLabel","nextLabel","screenReaderPaginationLabel","screenReaderPageLabel","screenReaderCurrentLabel","_directionLinks","_autoHide","_responsive","trackByIndex","ɵcmp","directionLinks","autoHide","responsive","decls","vars","consts","ctx","PaginationControlsComponent_ul_3_Template","directives","i2","pipes","styles","encapsulation","changeDetection","Component","ChangeDetectionStrategy","ViewEncapsulation","NgxPaginationModule","ɵmod","CommonModule","ɵinj","providers","NgModule"],"sources":["webpack:///shared-lib/components/coverages/plans/plans-routing.module.ts","webpack:///shared-lib/components/coverages/plans/plans.module.ts","webpack:///shared-lib/components/coverages/plans/plans.page.ts","webpack:///shared-lib/components/pagination/pagination.component.ts","webpack:///shared-lib/components/pagination/pagination.module.ts","webpack:///shared-lib/components/coverages/plans/plans.page.html","webpack:///shared-lib/components/pagination/pagination.component.html","webpack:///node_modules/ngx-pagination/fesm2015/ngx-pagination.mjs"],"sourcesContent":["import {NgModule} from '@angular/core';\nimport {Routes, RouterModule} from '@angular/router';\nimport {PlansPage} from './plans.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: PlansPage,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class PlansPageRoutingModule {}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule} from '@angular/forms';\nimport {IonicModule} from '@ionic/angular';\nimport {PlansPageRoutingModule} from './plans-routing.module';\nimport {PlansPage} from './plans.page';\nimport {NoBenefitsComponentModule} from '@shared-lib/components/coverages/benefit-elections/no-benefits/no-benefits.module';\nimport {MedDisclaimerModule} from '../med-disclaimer/med-disclaimer.module';\nimport {LoadingComponentModule} from '@shared-lib/components/loading/loading.module';\nimport {HSAStoreNudgeComponentModule} from '@shared-lib/components/hsastore-nudge/hsastore-nudge.module';\nimport {PaginationModule} from '@shared-lib/components/pagination/pagination.module';\nimport {MedicalSpendingModule} from '../../home/medical-spending/medical-spending.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    PlansPageRoutingModule,\n    NoBenefitsComponentModule,\n    MedDisclaimerModule,\n    LoadingComponentModule,\n    HSAStoreNudgeComponentModule,\n    PaginationModule,\n    MedicalSpendingModule,\n  ],\n  declarations: [PlansPage],\n  exports: [PlansPage],\n})\nexport class PlansPageModule {}\n","import {Component, Input, OnInit} from '@angular/core';\nimport {Router} from '@angular/router';\nimport {\n  Benefit,\n  Benefits,\n  BenefitsSummaryContent,\n  MyHealthWealth,\n} from '@shared-lib/services/benefits/models/benefits.model';\nimport * as jsonText from '../../../constants/coverage.json';\nimport {Coverage} from '../../../models/coverage.model';\nimport {BenefitsService} from '@shared-lib/services/benefits/benefits.service';\nimport {SharedUtilityService} from '../../../services/utility/utility.service';\nimport {Subscription} from 'rxjs';\nimport {PlatformService} from '@shared-lib/services/platform/platform.service';\n\n@Component({\n  selector: 'app-plans',\n  templateUrl: './plans.page.html',\n  styleUrls: ['./plans.page.scss'],\n})\nexport class PlansPage implements OnInit {\n  coverages: Benefit[];\n  covText: Coverage = (jsonText as any).default;\n  benefitContent: BenefitsSummaryContent;\n  planId: string;\n  isWeb: boolean;\n  subscription: Subscription = new Subscription();\n  isDesktop: boolean;\n  guidanceEnabled: boolean;\n  myHealthWealth: MyHealthWealth;\n  @Input() isWorkplaceDashboard = true;\n  @Input() showPagination = false;\n  paginationConfig: string;\n  currentPage = 1;\n  totalItems: number;\n  itemsPerPage: number;\n\n  constructor(\n    private benefitsService: BenefitsService,\n    private router: Router,\n    private utilityService: SharedUtilityService,\n    private platformService: PlatformService\n  ) {}\n\n  async ngOnInit() {\n    this.platformService.isDesktop().subscribe(data => {\n      this.isDesktop = data;\n      this.itemsPerPage = this.isDesktop ? 5 : 3;\n      this.fetchData(\n        this.isWorkplaceDashboard ? 'getNextYearBenefits' : 'getBenefits'\n      );\n    });\n    this.getBenefitContent();\n    this.fetchPlanId();\n    this.isWeb = this.utilityService.getIsWeb();\n    const benefitContent = await this.benefitsService.getNoBenefitContents();\n    this.myHealthWealth = JSON.parse(\n      benefitContent.Insights_ManageMyHealthandWealth\n    );\n    this.getGuidanceEnable();\n  }\n\n  async getGuidanceEnable() {\n    this.guidanceEnabled = (\n      await this.benefitsService.getGuidanceEnabled()\n    ).guidanceEnabled;\n  }\n\n  fetchPlanId() {\n    const routerSubscription = this.utilityService\n      .fetchUrlThroughNavigation(3)\n      .subscribe(data => {\n        this.planId = data?.paramId;\n      });\n    this.subscription.add(routerSubscription);\n  }\n\n  fetchData(method_name: string): Promise<void> {\n    return this.benefitsService[method_name]()\n      .then((data: Benefits) => {\n        this.coverages = data && data.enrolled;\n        if (\n          this.showPagination &&\n          ((this.isDesktop && this.coverages.length > 5) ||\n            (!this.isDesktop && this.coverages.length > 3))\n        ) {\n          this.managePaginationConfig(this.currentPage);\n        } else {\n          this.currentPage = 1;\n          this.totalItems = this.coverages.length;\n          this.itemsPerPage = this.totalItems;\n        }\n      })\n      .catch(() => {\n        this.coverages = [];\n      });\n  }\n\n  managePaginationConfig(page: number) {\n    this.currentPage = page;\n    this.totalItems = this.coverages.length;\n    this.paginationConfig = JSON.stringify({\n      conjunction: '',\n      currentPage: this.currentPage,\n      itemsPerPage: this.itemsPerPage,\n      dataSize: this.totalItems,\n    });\n  }\n\n  paginationChange(currentPage: number) {\n    this.managePaginationConfig(currentPage);\n  }\n\n  viewBenefit(benefit: Benefit) {\n    if (\n      benefit.type == 'medical_plan' ||\n      benefit.type == 'dental_plan' ||\n      benefit.type == 'vision_plan'\n    ) {\n      if (!this.isWeb) {\n        this.benefitsService.setBenefit(benefit);\n        this.router.navigateByUrl('/coverages/plan-tabs/details');\n      } else {\n        this.router.navigateByUrl(`coverages/view-plans/${benefit.id}/details`);\n      }\n    } else {\n      this.benefitsService.setBenefit(benefit);\n      return false;\n    }\n  }\n\n  async getBenefitContent(): Promise<void> {\n    return this.benefitsService\n      .getBenefitContent()\n      .then((res: BenefitsSummaryContent) => {\n        this.benefitContent = res;\n      });\n  }\n\n  manageWidthOfCard(benefit: Benefit): Record<string, string> | null {\n    if (this.isWeb) {\n      if (this.planId === benefit.id) {\n        this.benefitsService.setBenefit(benefit);\n        return {width: '385px'};\n      } else {\n        return {width: 'auto'};\n      }\n    }\n    return null;\n  }\n\n  openGuidelines() {\n    this.benefitsService.openGuidelines();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import {Component, EventEmitter, Input, Output} from '@angular/core';\n\n@Component({\n  selector: 'app-pagination',\n  templateUrl: './pagination.component.html',\n  styleUrls: ['./pagination.component.scss'],\n})\nexport class PaginationComponent {\n  @Input() paginationConfig: string;\n  @Output() paginationChange = new EventEmitter<number>();\n  @Input() id: string;\n\n  paginateClick(event) {\n    const itemsPerPage = JSON.parse(this.paginationConfig).itemsPerPage;\n    const currentPage = event.detail.pageIndex[0] / itemsPerPage + 1;\n    this.paginationChange.emit(currentPage);\n  }\n}\n","import {NgModule, CUSTOM_ELEMENTS_SCHEMA} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {IonicModule} from '@ionic/angular';\nimport {PaginationComponent} from './pagination.component';\nimport {NgxPaginationModule} from 'ngx-pagination';\n\n@NgModule({\n  imports: [CommonModule, IonicModule],\n  declarations: [PaginationComponent],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n  exports: [PaginationComponent, NgxPaginationModule],\n})\nexport class PaginationModule {}\n","export default \"<app-loading [loading]=\\\"coverages == null\\\">\\n  <div [ngClass]=\\\"isWorkplaceDashboard? 'workplace-dashboard':''\\\">\\n    <div class=\\\"web-plans-card\\\" [ngClass]=\\\"isWeb ? '':'mobile'\\\">\\n      <ng-container *ngIf=\\\"(coverages?.length > 0); else noCoverages\\\">\\n        <ion-card\\n          *ngFor=\\\"let cov of coverages|paginate:{itemsPerPage:itemsPerPage,currentPage:currentPage,totalItems:totalItems}; let i = index;\\\"\\n          (click)=\\\"viewBenefit(cov)\\\"\\n          (keydown.enter)=\\\"viewBenefit(cov)\\\"\\n          tabindex=\\\"0\\\"\\n          [ngStyle]=\\\"manageWidthOfCard(cov)\\\"\\n          [ngClass]=\\\"(!isWeb)? 'coverages-plan':(cov.type != 'medical_plan' &&\\n          cov.type != 'dental_plan' &&\\n          cov.type != 'vision_plan')? 'coverages-plan-slide':'coverages-plan-slide clickable'\\\"\\n          id=\\\"{{'coverage-plan-' + i}}\\\"\\n        >\\n          <div *ngIf=\\\"cov?.benAdminFlag\\\">\\n            <ng-container\\n              *ngTemplateOutlet=\\\"planTemp;context:{cov:cov,showPlanInfo:(!isWeb || isWorkplaceDashboard )?true:false,i:i}\\\"\\n            >\\n            </ng-container>\\n          </div>\\n\\n          <div *ngIf=\\\"!cov?.benAdminFlag\\\">\\n            <ng-container\\n              *ngTemplateOutlet=\\\"planTemp;context:{cov:cov,showPlanInfo:isWorkplaceDashboard,i:i}\\\"\\n            >\\n            </ng-container>\\n          </div>\\n        </ion-card>\\n      </ng-container>\\n\\n      <ion-card\\n        *ngIf=\\\"(!isWeb || (isWeb && !isDesktop)) && guidanceEnabled && !isWorkplaceDashboard\\\"\\n        class=\\\"myHealthWealth\\\"\\n      >\\n        <ion-row class=\\\"myHealth-title\\\">\\n          <ion-col class=\\\"myHealth-content\\\">\\n            <ion-row class=\\\"myHealth-heading\\\">\\n              <ion-text class=\\\"ths-text\\\">\\n                {{ myHealthWealth?.title }}\\n              </ion-text>\\n            </ion-row>\\n\\n            <ion-row>\\n              <strong class=\\\"ths-desc\\\">\\n                {{ myHealthWealth?.description }}</strong\\n              >\\n            </ion-row>\\n            <ion-row class=\\\"ths-details\\\">\\n              <ion-col class=\\\"ion-no-padding\\\">\\n                <ion-text\\n                  class=\\\"view-details\\\"\\n                  (click)=\\\"openGuidelines()\\\"\\n                  id=\\\"myHealthWealth_link\\\"\\n                >\\n                  <u\\n                    ><a class=\\\"navlink\\\" routerLinkActive=\\\"active\\\">\\n                      {{ myHealthWealth?.link_name }}\\n                    </a></u\\n                  >\\n                </ion-text>\\n              </ion-col>\\n            </ion-row>\\n          </ion-col>\\n          <ion-col class=\\\"myHealth-img-container\\\">\\n            <img\\n              alt=\\\"{{covText.totalHealthSpendAlt}}\\\"\\n              src=\\\"assets/icon/myHandW.svg\\\"\\n              class=\\\"ths-img\\\"\\n            />\\n          </ion-col>\\n        </ion-row>\\n      </ion-card>\\n      <app-hsastore-nudge *ngIf=\\\"!isWeb\\\"></app-hsastore-nudge>\\n      <div class=\\\"padded\\\" *ngIf=\\\"!isWeb\\\">\\n        <app-medical-spending\\n          [forMobilePlansPage]=\\\"true\\\"\\n        ></app-medical-spending>\\n      </div>\\n    </div>\\n  </div>\\n\\n  <ng-template #noCoverages>\\n    <app-no-benefits\\n      [workplaceDashboard]=\\\"isWorkplaceDashboard\\\"\\n      *ngIf=\\\"!isWeb || (isWeb && !isDesktop) || (isWeb && isWorkplaceDashboard)\\\"\\n    ></app-no-benefits>\\n  </ng-template>\\n</app-loading>\\n\\n<ng-template #planTemp let-cov=\\\"cov\\\" let-showPlanInfo=\\\"showPlanInfo\\\" let-i=\\\"i\\\">\\n  <ion-row class=\\\"first-row\\\">\\n    <ion-col class=\\\"coverages-logo\\\">\\n      <img\\n        src=\\\"{{\\n  (benefitContent?.iconMapping)[cov.type] ||\\n    'assets/icon/benefits/umbrella.svg'\\n}}\\\"\\n        alt=\\\"\\\"\\n      />\\n    </ion-col>\\n    <ion-col>\\n      <ion-row>\\n        <ion-col>\\n          <ion-text\\n            class=\\\"name\\\"\\n            [class.non-clickable]=\\\"\\n  cov.type != 'medical_plan' &&\\n  cov.type != 'dental_plan' &&\\n  cov.type != 'vision_plan'\\n\\\"\\n            >{{ cov.name }}\\n          </ion-text>\\n        </ion-col>\\n      </ion-row>\\n      <ng-container *ngIf=\\\"showPlanInfo\\\">\\n        <ng-container *ngIf=\\\"!isWorkplaceDashboard\\\">\\n          <ion-row class=\\\"top-labels\\\">\\n            <ion-col class=\\\"plan-col\\\"\\n              ><ng-container *ngTemplateOutlet=\\\"coverageLabel\\\"></ng-container\\n            ></ion-col>\\n            <ion-col\\n              ><ng-container\\n                *ngTemplateOutlet=\\\"premiumLabel;context:{cov:cov}\\\"\\n              ></ng-container\\n            ></ion-col>\\n          </ion-row>\\n          <ion-row class=\\\"labels-values\\\">\\n            <ion-col class=\\\"labels-col\\\">\\n              <ng-container\\n                *ngTemplateOutlet=\\\"coverageType;context:{cov:cov}\\\"\\n              ></ng-container>\\n            </ion-col>\\n            <ion-col class=\\\"premium-col\\\">\\n              <ng-container\\n                *ngTemplateOutlet=\\\"premium;context:{cov:cov}\\\"\\n              ></ng-container\\n            ></ion-col>\\n          </ion-row>\\n        </ng-container>\\n        <ng-container *ngIf=\\\"isWorkplaceDashboard\\\">\\n          <ion-row class=\\\"top-labels\\\">\\n            <ion-col class=\\\"plan-col\\\"\\n              ><ng-container *ngTemplateOutlet=\\\"coverageLabel\\\"></ng-container\\n            ></ion-col>\\n            <ion-col>\\n              <ng-container\\n                *ngTemplateOutlet=\\\"coverageType;context:{cov:cov}\\\"\\n              ></ng-container>\\n            </ion-col>\\n          </ion-row>\\n          <ion-row class=\\\"labels-values\\\">\\n            <ion-col class=\\\"labels-col\\\">\\n              <ng-container\\n                *ngTemplateOutlet=\\\"premiumLabel;context:{cov:cov}\\\"\\n              ></ng-container>\\n            </ion-col>\\n            <ion-col class=\\\"premium-col\\\">\\n              <ng-container\\n                *ngTemplateOutlet=\\\"premium;context:{cov:cov}\\\"\\n              ></ng-container\\n            ></ion-col>\\n          </ion-row>\\n        </ng-container>\\n      </ng-container>\\n    </ion-col>\\n    <ion-col *ngIf=\\\"isWorkplaceDashboard\\\" class=\\\"rightArrow\\\">\\n      <div\\n        class=\\\"ion-text-end\\\"\\n        [class.hide-enrolled-benefit-link]=\\\"\\n        cov.type != 'medical_plan' &&\\n        cov.type != 'dental_plan' &&\\n        cov.type != 'vision_plan'\\n    \\\"\\n      >\\n        <img\\n          [id]=\\\"'enrolled-benefit-link' + i\\\"\\n          class=\\\"enrolled-benefit-link-img\\\"\\n          src=\\\"assets/icon/chevron_right.svg\\\"\\n          alt=\\\"arrow\\\"\\n        />\\n      </div>\\n    </ion-col>\\n  </ion-row>\\n</ng-template>\\n\\n<ng-template #coverageLabel>\\n  <ion-text class=\\\"label\\\">{{ benefitContent?.coverageLabel }} </ion-text>\\n</ng-template>\\n\\n<ng-template let-cov=\\\"cov\\\" #premiumLabel>\\n  <ion-text class=\\\"label\\\" *ngIf=\\\"cov?.premium || cov?.premium === 0\\\"\\n    >{{ benefitContent?.premiumLabel }}</ion-text\\n  >\\n</ng-template>\\n\\n<ng-template let-cov=\\\"cov\\\" #coverageType>\\n  <ion-text class=\\\"label covType\\\">{{ cov?.coverageType }}</ion-text>\\n</ng-template>\\n\\n<ng-template let-cov=\\\"cov\\\" #premium>\\n  <ion-text class=\\\"amt\\\"\\n    >{{ cov.premium | currency: 'USD':'symbol' }}\\n    <ng-container *ngIf=\\\"cov.premium > 0\\\">\\n      /{{ cov.premiumFrequency }}\\n    </ng-container>\\n  </ion-text>\\n</ng-template>\\n\\n<app-pagination\\n  [paginationConfig]=\\\"paginationConfig\\\"\\n  (paginationChange)=\\\"paginationChange($event)\\\"\\n  id=\\\"cov-pagination\\\"\\n></app-pagination>\\n\";","export default \"<div class=\\\"pagination-section\\\" *ngIf=\\\"paginationConfig\\\">\\n  <v-pagination\\n    [id]=\\\"id\\\"\\n    [attr.config]=\\\"paginationConfig\\\"\\n    (vpagination-change)=\\\"paginateClick($event)\\\"\\n  ></v-pagination>\\n</div>\\n\";","import * as i0 from '@angular/core';\nimport { EventEmitter, Pipe, Directive, Input, Output, Component, ChangeDetectionStrategy, ViewEncapsulation, NgModule } from '@angular/core';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\nclass PaginationService {\r\n    constructor() {\r\n        this.change = new EventEmitter();\r\n        this.instances = {};\r\n        this.DEFAULT_ID = 'DEFAULT_PAGINATION_ID';\r\n    }\r\n    defaultId() { return this.DEFAULT_ID; }\r\n    /**\r\n     * Register a PaginationInstance with this service. Returns a\r\n     * boolean value signifying whether the instance is new or\r\n     * updated (true = new or updated, false = unchanged).\r\n     */\r\n    register(instance) {\r\n        if (instance.id == null) {\r\n            instance.id = this.DEFAULT_ID;\r\n        }\r\n        if (!this.instances[instance.id]) {\r\n            this.instances[instance.id] = instance;\r\n            return true;\r\n        }\r\n        else {\r\n            return this.updateInstance(instance);\r\n        }\r\n    }\r\n    /**\r\n     * Check each property of the instance and update any that have changed. Return\r\n     * true if any changes were made, else return false.\r\n     */\r\n    updateInstance(instance) {\r\n        let changed = false;\r\n        for (let prop in this.instances[instance.id]) {\r\n            if (instance[prop] !== this.instances[instance.id][prop]) {\r\n                this.instances[instance.id][prop] = instance[prop];\r\n                changed = true;\r\n            }\r\n        }\r\n        return changed;\r\n    }\r\n    /**\r\n     * Returns the current page number.\r\n     */\r\n    getCurrentPage(id) {\r\n        if (this.instances[id]) {\r\n            return this.instances[id].currentPage;\r\n        }\r\n        return 1;\r\n    }\r\n    /**\r\n     * Sets the current page number.\r\n     */\r\n    setCurrentPage(id, page) {\r\n        if (this.instances[id]) {\r\n            let instance = this.instances[id];\r\n            let maxPage = Math.ceil(instance.totalItems / instance.itemsPerPage);\r\n            if (page <= maxPage && 1 <= page) {\r\n                this.instances[id].currentPage = page;\r\n                this.change.emit(id);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Sets the value of instance.totalItems\r\n     */\r\n    setTotalItems(id, totalItems) {\r\n        if (this.instances[id] && 0 <= totalItems) {\r\n            this.instances[id].totalItems = totalItems;\r\n            this.change.emit(id);\r\n        }\r\n    }\r\n    /**\r\n     * Sets the value of instance.itemsPerPage.\r\n     */\r\n    setItemsPerPage(id, itemsPerPage) {\r\n        if (this.instances[id]) {\r\n            this.instances[id].itemsPerPage = itemsPerPage;\r\n            this.change.emit(id);\r\n        }\r\n    }\r\n    /**\r\n     * Returns a clone of the pagination instance object matching the id. If no\r\n     * id specified, returns the instance corresponding to the default id.\r\n     */\r\n    getInstance(id = this.DEFAULT_ID) {\r\n        if (this.instances[id]) {\r\n            return this.clone(this.instances[id]);\r\n        }\r\n        return {};\r\n    }\r\n    /**\r\n     * Perform a shallow clone of an object.\r\n     */\r\n    clone(obj) {\r\n        var target = {};\r\n        for (var i in obj) {\r\n            if (obj.hasOwnProperty(i)) {\r\n                target[i] = obj[i];\r\n            }\r\n        }\r\n        return target;\r\n    }\r\n}\n\nconst LARGE_NUMBER = Number.MAX_SAFE_INTEGER;\r\nclass PaginatePipe {\r\n    constructor(service) {\r\n        this.service = service;\r\n        // store the values from the last time the pipe was invoked\r\n        this.state = {};\r\n    }\r\n    transform(collection, args) {\r\n        // When an observable is passed through the AsyncPipe, it will output\r\n        // `null` until the subscription resolves. In this case, we want to\r\n        // use the cached data from the `state` object to prevent the NgFor\r\n        // from flashing empty until the real values arrive.\r\n        if (!(collection instanceof Array)) {\r\n            let _id = args.id || this.service.defaultId();\r\n            if (this.state[_id]) {\r\n                return this.state[_id].slice;\r\n            }\r\n            else {\r\n                return collection;\r\n            }\r\n        }\r\n        let serverSideMode = args.totalItems && args.totalItems !== collection.length;\r\n        let instance = this.createInstance(collection, args);\r\n        let id = instance.id;\r\n        let start, end;\r\n        let perPage = instance.itemsPerPage;\r\n        let emitChange = this.service.register(instance);\r\n        if (!serverSideMode && collection instanceof Array) {\r\n            perPage = +perPage || LARGE_NUMBER;\r\n            start = (instance.currentPage - 1) * perPage;\r\n            end = start + perPage;\r\n            let isIdentical = this.stateIsIdentical(id, collection, start, end);\r\n            if (isIdentical) {\r\n                return this.state[id].slice;\r\n            }\r\n            else {\r\n                let slice = collection.slice(start, end);\r\n                this.saveState(id, collection, slice, start, end);\r\n                this.service.change.emit(id);\r\n                return slice;\r\n            }\r\n        }\r\n        else {\r\n            if (emitChange) {\r\n                this.service.change.emit(id);\r\n            }\r\n            // save the state for server-side collection to avoid null\r\n            // flash as new data loads.\r\n            this.saveState(id, collection, collection, start, end);\r\n            return collection;\r\n        }\r\n    }\r\n    /**\r\n     * Create an PaginationInstance object, using defaults for any optional properties not supplied.\r\n     */\r\n    createInstance(collection, config) {\r\n        this.checkConfig(config);\r\n        return {\r\n            id: config.id != null ? config.id : this.service.defaultId(),\r\n            itemsPerPage: +config.itemsPerPage || 0,\r\n            currentPage: +config.currentPage || 1,\r\n            totalItems: +config.totalItems || collection.length\r\n        };\r\n    }\r\n    /**\r\n     * Ensure the argument passed to the filter contains the required properties.\r\n     */\r\n    checkConfig(config) {\r\n        const required = ['itemsPerPage', 'currentPage'];\r\n        const missing = required.filter(prop => !(prop in config));\r\n        if (0 < missing.length) {\r\n            throw new Error(`PaginatePipe: Argument is missing the following required properties: ${missing.join(', ')}`);\r\n        }\r\n    }\r\n    /**\r\n     * To avoid returning a brand new array each time the pipe is run, we store the state of the sliced\r\n     * array for a given id. This means that the next time the pipe is run on this collection & id, we just\r\n     * need to check that the collection, start and end points are all identical, and if so, return the\r\n     * last sliced array.\r\n     */\r\n    saveState(id, collection, slice, start, end) {\r\n        this.state[id] = {\r\n            collection,\r\n            size: collection.length,\r\n            slice,\r\n            start,\r\n            end\r\n        };\r\n    }\r\n    /**\r\n     * For a given id, returns true if the collection, size, start and end values are identical.\r\n     */\r\n    stateIsIdentical(id, collection, start, end) {\r\n        let state = this.state[id];\r\n        if (!state) {\r\n            return false;\r\n        }\r\n        let isMetaDataIdentical = state.size === collection.length &&\r\n            state.start === start &&\r\n            state.end === end;\r\n        if (!isMetaDataIdentical) {\r\n            return false;\r\n        }\r\n        return state.slice.every((element, index) => element === collection[start + index]);\r\n    }\r\n}\r\nPaginatePipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: PaginatePipe, deps: [{ token: PaginationService }], target: i0.ɵɵFactoryTarget.Pipe });\r\nPaginatePipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: PaginatePipe, name: \"paginate\", pure: false });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: PaginatePipe, decorators: [{\r\n            type: Pipe,\r\n            args: [{\r\n                    name: 'paginate',\r\n                    pure: false\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: PaginationService }]; } });\n\n/**\r\n * The default template and styles for the pagination links are borrowed directly\r\n * from Zurb Foundation 6: http://foundation.zurb.com/sites/docs/pagination.html\r\n */\r\nconst DEFAULT_TEMPLATE = `\r\n    <pagination-template  #p=\"paginationApi\"\r\n                         [id]=\"id\"\r\n                         [maxSize]=\"maxSize\"\r\n                         (pageChange)=\"pageChange.emit($event)\"\r\n                         (pageBoundsCorrection)=\"pageBoundsCorrection.emit($event)\">\r\n    <nav role=\"navigation\" [attr.aria-label]=\"screenReaderPaginationLabel\">\r\n    <ul class=\"ngx-pagination\" \r\n        [class.responsive]=\"responsive\"\r\n        *ngIf=\"!(autoHide && p.pages.length <= 1)\">\r\n\r\n        <li class=\"pagination-previous\" [class.disabled]=\"p.isFirstPage()\" *ngIf=\"directionLinks\"> \r\n            <a tabindex=\"0\" *ngIf=\"1 < p.getCurrent()\" (keyup.enter)=\"p.previous()\" (click)=\"p.previous()\">\r\n                {{ previousLabel }} <span class=\"show-for-sr\">{{ screenReaderPageLabel }}</span>\r\n            </a>\r\n            <span *ngIf=\"p.isFirstPage()\" aria-disabled=\"true\">\r\n                {{ previousLabel }} <span class=\"show-for-sr\">{{ screenReaderPageLabel }}</span>\r\n            </span>\r\n        </li> \r\n\r\n        <li class=\"small-screen\">\r\n            {{ p.getCurrent() }} / {{ p.getLastPage() }}\r\n        </li>\r\n\r\n        <li [class.current]=\"p.getCurrent() === page.value\" \r\n            [class.ellipsis]=\"page.label === '...'\"\r\n            *ngFor=\"let page of p.pages; trackBy: trackByIndex\">\r\n            <a tabindex=\"0\" (keyup.enter)=\"p.setCurrent(page.value)\" (click)=\"p.setCurrent(page.value)\" *ngIf=\"p.getCurrent() !== page.value\">\r\n                <span class=\"show-for-sr\">{{ screenReaderPageLabel }} </span>\r\n                <span>{{ (page.label === '...') ? page.label : (page.label | number:'') }}</span>\r\n            </a>\r\n            <ng-container *ngIf=\"p.getCurrent() === page.value\">\r\n              <span aria-live=\"polite\">\r\n                <span class=\"show-for-sr\">{{ screenReaderCurrentLabel }} </span>\r\n                <span>{{ (page.label === '...') ? page.label : (page.label | number:'') }}</span> \r\n              </span>\r\n            </ng-container>\r\n        </li>\r\n\r\n        <li class=\"pagination-next\" [class.disabled]=\"p.isLastPage()\" *ngIf=\"directionLinks\">\r\n            <a tabindex=\"0\" *ngIf=\"!p.isLastPage()\" (keyup.enter)=\"p.next()\" (click)=\"p.next()\">\r\n                 {{ nextLabel }} <span class=\"show-for-sr\">{{ screenReaderPageLabel }}</span>\r\n            </a>\r\n            <span *ngIf=\"p.isLastPage()\" aria-disabled=\"true\">\r\n                 {{ nextLabel }} <span class=\"show-for-sr\">{{ screenReaderPageLabel }}</span>\r\n            </span>\r\n        </li>\r\n\r\n    </ul>\r\n    </nav>\r\n    </pagination-template>\r\n    `;\r\nconst DEFAULT_STYLES = `\r\n.ngx-pagination {\r\n  margin-left: 0;\r\n  margin-bottom: 1rem; }\r\n  .ngx-pagination::before, .ngx-pagination::after {\r\n    content: ' ';\r\n    display: table; }\r\n  .ngx-pagination::after {\r\n    clear: both; }\r\n  .ngx-pagination li {\r\n    -moz-user-select: none;\r\n    -webkit-user-select: none;\r\n    -ms-user-select: none;\r\n    margin-right: 0.0625rem;\r\n    border-radius: 0; }\r\n  .ngx-pagination li {\r\n    display: inline-block; }\r\n  .ngx-pagination a,\r\n  .ngx-pagination button {\r\n    color: #0a0a0a; \r\n    display: block;\r\n    padding: 0.1875rem 0.625rem;\r\n    border-radius: 0; }\r\n    .ngx-pagination a:hover,\r\n    .ngx-pagination button:hover {\r\n      background: #e6e6e6; }\r\n  .ngx-pagination .current {\r\n    padding: 0.1875rem 0.625rem;\r\n    background: #2199e8;\r\n    color: #fefefe;\r\n    cursor: default; }\r\n  .ngx-pagination .disabled {\r\n    padding: 0.1875rem 0.625rem;\r\n    color: #cacaca;\r\n    cursor: default; } \r\n    .ngx-pagination .disabled:hover {\r\n      background: transparent; }\r\n  .ngx-pagination a, .ngx-pagination button {\r\n    cursor: pointer; }\r\n\r\n.ngx-pagination .pagination-previous a::before,\r\n.ngx-pagination .pagination-previous.disabled::before { \r\n  content: '«';\r\n  display: inline-block;\r\n  margin-right: 0.5rem; }\r\n\r\n.ngx-pagination .pagination-next a::after,\r\n.ngx-pagination .pagination-next.disabled::after {\r\n  content: '»';\r\n  display: inline-block;\r\n  margin-left: 0.5rem; }\r\n\r\n.ngx-pagination .show-for-sr {\r\n  position: absolute !important;\r\n  width: 1px;\r\n  height: 1px;\r\n  overflow: hidden;\r\n  clip: rect(0, 0, 0, 0); }\r\n.ngx-pagination .small-screen {\r\n  display: none; }\r\n@media screen and (max-width: 601px) {\r\n  .ngx-pagination.responsive .small-screen {\r\n    display: inline-block; } \r\n  .ngx-pagination.responsive li:not(.small-screen):not(.pagination-previous):not(.pagination-next) {\r\n    display: none; }\r\n}\r\n  `;\n\n/**\r\n * This directive is what powers all pagination controls components, including the default one.\r\n * It exposes an API which is hooked up to the PaginationService to keep the PaginatePipe in sync\r\n * with the pagination controls.\r\n */\r\nclass PaginationControlsDirective {\r\n    constructor(service, changeDetectorRef) {\r\n        this.service = service;\r\n        this.changeDetectorRef = changeDetectorRef;\r\n        this.maxSize = 7;\r\n        this.pageChange = new EventEmitter();\r\n        this.pageBoundsCorrection = new EventEmitter();\r\n        this.pages = [];\r\n        this.changeSub = this.service.change\r\n            .subscribe(id => {\r\n            if (this.id === id) {\r\n                this.updatePageLinks();\r\n                this.changeDetectorRef.markForCheck();\r\n                this.changeDetectorRef.detectChanges();\r\n            }\r\n        });\r\n    }\r\n    ngOnInit() {\r\n        if (this.id === undefined) {\r\n            this.id = this.service.defaultId();\r\n        }\r\n        this.updatePageLinks();\r\n    }\r\n    ngOnChanges(changes) {\r\n        this.updatePageLinks();\r\n    }\r\n    ngOnDestroy() {\r\n        this.changeSub.unsubscribe();\r\n    }\r\n    /**\r\n     * Go to the previous page\r\n     */\r\n    previous() {\r\n        this.checkValidId();\r\n        this.setCurrent(this.getCurrent() - 1);\r\n    }\r\n    /**\r\n     * Go to the next page\r\n     */\r\n    next() {\r\n        this.checkValidId();\r\n        this.setCurrent(this.getCurrent() + 1);\r\n    }\r\n    /**\r\n     * Returns true if current page is first page\r\n     */\r\n    isFirstPage() {\r\n        return this.getCurrent() === 1;\r\n    }\r\n    /**\r\n     * Returns true if current page is last page\r\n     */\r\n    isLastPage() {\r\n        return this.getLastPage() === this.getCurrent();\r\n    }\r\n    /**\r\n     * Set the current page number.\r\n     */\r\n    setCurrent(page) {\r\n        this.pageChange.emit(page);\r\n    }\r\n    /**\r\n     * Get the current page number.\r\n     */\r\n    getCurrent() {\r\n        return this.service.getCurrentPage(this.id);\r\n    }\r\n    /**\r\n     * Returns the last page number\r\n     */\r\n    getLastPage() {\r\n        let inst = this.service.getInstance(this.id);\r\n        if (inst.totalItems < 1) {\r\n            // when there are 0 or fewer (an error case) items, there are no \"pages\" as such,\r\n            // but it makes sense to consider a single, empty page as the last page.\r\n            return 1;\r\n        }\r\n        return Math.ceil(inst.totalItems / inst.itemsPerPage);\r\n    }\r\n    getTotalItems() {\r\n        return this.service.getInstance(this.id).totalItems;\r\n    }\r\n    checkValidId() {\r\n        if (this.service.getInstance(this.id).id == null) {\r\n            console.warn(`PaginationControlsDirective: the specified id \"${this.id}\" does not match any registered PaginationInstance`);\r\n        }\r\n    }\r\n    /**\r\n     * Updates the page links and checks that the current page is valid. Should run whenever the\r\n     * PaginationService.change stream emits a value matching the current ID, or when any of the\r\n     * input values changes.\r\n     */\r\n    updatePageLinks() {\r\n        let inst = this.service.getInstance(this.id);\r\n        const correctedCurrentPage = this.outOfBoundCorrection(inst);\r\n        if (correctedCurrentPage !== inst.currentPage) {\r\n            setTimeout(() => {\r\n                this.pageBoundsCorrection.emit(correctedCurrentPage);\r\n                this.pages = this.createPageArray(inst.currentPage, inst.itemsPerPage, inst.totalItems, this.maxSize);\r\n            });\r\n        }\r\n        else {\r\n            this.pages = this.createPageArray(inst.currentPage, inst.itemsPerPage, inst.totalItems, this.maxSize);\r\n        }\r\n    }\r\n    /**\r\n     * Checks that the instance.currentPage property is within bounds for the current page range.\r\n     * If not, return a correct value for currentPage, or the current value if OK.\r\n     */\r\n    outOfBoundCorrection(instance) {\r\n        const totalPages = Math.ceil(instance.totalItems / instance.itemsPerPage);\r\n        if (totalPages < instance.currentPage && 0 < totalPages) {\r\n            return totalPages;\r\n        }\r\n        else if (instance.currentPage < 1) {\r\n            return 1;\r\n        }\r\n        return instance.currentPage;\r\n    }\r\n    /**\r\n     * Returns an array of Page objects to use in the pagination controls.\r\n     */\r\n    createPageArray(currentPage, itemsPerPage, totalItems, paginationRange) {\r\n        // paginationRange could be a string if passed from attribute, so cast to number.\r\n        paginationRange = +paginationRange;\r\n        let pages = [];\r\n        // Return 1 as default page number\r\n        // Make sense to show 1 instead of empty when there are no items\r\n        const totalPages = Math.max(Math.ceil(totalItems / itemsPerPage), 1);\r\n        const halfWay = Math.ceil(paginationRange / 2);\r\n        const isStart = currentPage <= halfWay;\r\n        const isEnd = totalPages - halfWay < currentPage;\r\n        const isMiddle = !isStart && !isEnd;\r\n        let ellipsesNeeded = paginationRange < totalPages;\r\n        let i = 1;\r\n        while (i <= totalPages && i <= paginationRange) {\r\n            let label;\r\n            let pageNumber = this.calculatePageNumber(i, currentPage, paginationRange, totalPages);\r\n            let openingEllipsesNeeded = (i === 2 && (isMiddle || isEnd));\r\n            let closingEllipsesNeeded = (i === paginationRange - 1 && (isMiddle || isStart));\r\n            if (ellipsesNeeded && (openingEllipsesNeeded || closingEllipsesNeeded)) {\r\n                label = '...';\r\n            }\r\n            else {\r\n                label = pageNumber;\r\n            }\r\n            pages.push({\r\n                label: label,\r\n                value: pageNumber\r\n            });\r\n            i++;\r\n        }\r\n        return pages;\r\n    }\r\n    /**\r\n     * Given the position in the sequence of pagination links [i],\r\n     * figure out what page number corresponds to that position.\r\n     */\r\n    calculatePageNumber(i, currentPage, paginationRange, totalPages) {\r\n        let halfWay = Math.ceil(paginationRange / 2);\r\n        if (i === paginationRange) {\r\n            return totalPages;\r\n        }\r\n        else if (i === 1) {\r\n            return i;\r\n        }\r\n        else if (paginationRange < totalPages) {\r\n            if (totalPages - halfWay < currentPage) {\r\n                return totalPages - paginationRange + i;\r\n            }\r\n            else if (halfWay < currentPage) {\r\n                return currentPage - halfWay + i;\r\n            }\r\n            else {\r\n                return i;\r\n            }\r\n        }\r\n        else {\r\n            return i;\r\n        }\r\n    }\r\n}\r\nPaginationControlsDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: PaginationControlsDirective, deps: [{ token: PaginationService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive });\r\nPaginationControlsDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.9\", type: PaginationControlsDirective, selector: \"pagination-template,[pagination-template]\", inputs: { id: \"id\", maxSize: \"maxSize\" }, outputs: { pageChange: \"pageChange\", pageBoundsCorrection: \"pageBoundsCorrection\" }, exportAs: [\"paginationApi\"], usesOnChanges: true, ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: PaginationControlsDirective, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: 'pagination-template,[pagination-template]',\r\n                    exportAs: 'paginationApi'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: PaginationService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { id: [{\r\n                type: Input\r\n            }], maxSize: [{\r\n                type: Input\r\n            }], pageChange: [{\r\n                type: Output\r\n            }], pageBoundsCorrection: [{\r\n                type: Output\r\n            }] } });\n\nfunction coerceToBoolean(input) {\r\n    return !!input && input !== 'false';\r\n}\r\n/**\r\n * The default pagination controls component. Actually just a default implementation of a custom template.\r\n */\r\nclass PaginationControlsComponent {\r\n    constructor() {\r\n        this.maxSize = 7;\r\n        this.previousLabel = 'Previous';\r\n        this.nextLabel = 'Next';\r\n        this.screenReaderPaginationLabel = 'Pagination';\r\n        this.screenReaderPageLabel = 'page';\r\n        this.screenReaderCurrentLabel = `You're on page`;\r\n        this.pageChange = new EventEmitter();\r\n        this.pageBoundsCorrection = new EventEmitter();\r\n        this._directionLinks = true;\r\n        this._autoHide = false;\r\n        this._responsive = false;\r\n    }\r\n    get directionLinks() {\r\n        return this._directionLinks;\r\n    }\r\n    set directionLinks(value) {\r\n        this._directionLinks = coerceToBoolean(value);\r\n    }\r\n    get autoHide() {\r\n        return this._autoHide;\r\n    }\r\n    set autoHide(value) {\r\n        this._autoHide = coerceToBoolean(value);\r\n    }\r\n    get responsive() {\r\n        return this._responsive;\r\n    }\r\n    set responsive(value) {\r\n        this._responsive = coerceToBoolean(value);\r\n    }\r\n    trackByIndex(index) {\r\n        return index;\r\n    }\r\n}\r\nPaginationControlsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: PaginationControlsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\r\nPaginationControlsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.9\", type: PaginationControlsComponent, selector: \"pagination-controls\", inputs: { id: \"id\", maxSize: \"maxSize\", directionLinks: \"directionLinks\", autoHide: \"autoHide\", responsive: \"responsive\", previousLabel: \"previousLabel\", nextLabel: \"nextLabel\", screenReaderPaginationLabel: \"screenReaderPaginationLabel\", screenReaderPageLabel: \"screenReaderPageLabel\", screenReaderCurrentLabel: \"screenReaderCurrentLabel\" }, outputs: { pageChange: \"pageChange\", pageBoundsCorrection: \"pageBoundsCorrection\" }, ngImport: i0, template: \"\\n    <pagination-template  #p=\\\"paginationApi\\\"\\n                         [id]=\\\"id\\\"\\n                         [maxSize]=\\\"maxSize\\\"\\n                         (pageChange)=\\\"pageChange.emit($event)\\\"\\n                         (pageBoundsCorrection)=\\\"pageBoundsCorrection.emit($event)\\\">\\n    <nav role=\\\"navigation\\\" [attr.aria-label]=\\\"screenReaderPaginationLabel\\\">\\n    <ul class=\\\"ngx-pagination\\\" \\n        [class.responsive]=\\\"responsive\\\"\\n        *ngIf=\\\"!(autoHide && p.pages.length <= 1)\\\">\\n\\n        <li class=\\\"pagination-previous\\\" [class.disabled]=\\\"p.isFirstPage()\\\" *ngIf=\\\"directionLinks\\\"> \\n            <a tabindex=\\\"0\\\" *ngIf=\\\"1 < p.getCurrent()\\\" (keyup.enter)=\\\"p.previous()\\\" (click)=\\\"p.previous()\\\">\\n                {{ previousLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </a>\\n            <span *ngIf=\\\"p.isFirstPage()\\\" aria-disabled=\\\"true\\\">\\n                {{ previousLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </span>\\n        </li> \\n\\n        <li class=\\\"small-screen\\\">\\n            {{ p.getCurrent() }} / {{ p.getLastPage() }}\\n        </li>\\n\\n        <li [class.current]=\\\"p.getCurrent() === page.value\\\" \\n            [class.ellipsis]=\\\"page.label === '...'\\\"\\n            *ngFor=\\\"let page of p.pages; trackBy: trackByIndex\\\">\\n            <a tabindex=\\\"0\\\" (keyup.enter)=\\\"p.setCurrent(page.value)\\\" (click)=\\\"p.setCurrent(page.value)\\\" *ngIf=\\\"p.getCurrent() !== page.value\\\">\\n                <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }} </span>\\n                <span>{{ (page.label === '...') ? page.label : (page.label | number:'') }}</span>\\n            </a>\\n            <ng-container *ngIf=\\\"p.getCurrent() === page.value\\\">\\n              <span aria-live=\\\"polite\\\">\\n                <span class=\\\"show-for-sr\\\">{{ screenReaderCurrentLabel }} </span>\\n                <span>{{ (page.label === '...') ? page.label : (page.label | number:'') }}</span> \\n              </span>\\n            </ng-container>\\n        </li>\\n\\n        <li class=\\\"pagination-next\\\" [class.disabled]=\\\"p.isLastPage()\\\" *ngIf=\\\"directionLinks\\\">\\n            <a tabindex=\\\"0\\\" *ngIf=\\\"!p.isLastPage()\\\" (keyup.enter)=\\\"p.next()\\\" (click)=\\\"p.next()\\\">\\n                 {{ nextLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </a>\\n            <span *ngIf=\\\"p.isLastPage()\\\" aria-disabled=\\\"true\\\">\\n                 {{ nextLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </span>\\n        </li>\\n\\n    </ul>\\n    </nav>\\n    </pagination-template>\\n    \", isInline: true, styles: [\".ngx-pagination{margin-left:0;margin-bottom:1rem}.ngx-pagination:before,.ngx-pagination:after{content:\\\" \\\";display:table}.ngx-pagination:after{clear:both}.ngx-pagination li{-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none;margin-right:.0625rem;border-radius:0}.ngx-pagination li{display:inline-block}.ngx-pagination a,.ngx-pagination button{color:#0a0a0a;display:block;padding:.1875rem .625rem;border-radius:0}.ngx-pagination a:hover,.ngx-pagination button:hover{background:#e6e6e6}.ngx-pagination .current{padding:.1875rem .625rem;background:#2199e8;color:#fefefe;cursor:default}.ngx-pagination .disabled{padding:.1875rem .625rem;color:#cacaca;cursor:default}.ngx-pagination .disabled:hover{background:transparent}.ngx-pagination a,.ngx-pagination button{cursor:pointer}.ngx-pagination .pagination-previous a:before,.ngx-pagination .pagination-previous.disabled:before{content:\\\"\\\\ab\\\";display:inline-block;margin-right:.5rem}.ngx-pagination .pagination-next a:after,.ngx-pagination .pagination-next.disabled:after{content:\\\"\\\\bb\\\";display:inline-block;margin-left:.5rem}.ngx-pagination .show-for-sr{position:absolute!important;width:1px;height:1px;overflow:hidden;clip:rect(0,0,0,0)}.ngx-pagination .small-screen{display:none}@media screen and (max-width: 601px){.ngx-pagination.responsive .small-screen{display:inline-block}.ngx-pagination.responsive li:not(.small-screen):not(.pagination-previous):not(.pagination-next){display:none}}\\n\"], directives: [{ type: PaginationControlsDirective, selector: \"pagination-template,[pagination-template]\", inputs: [\"id\", \"maxSize\"], outputs: [\"pageChange\", \"pageBoundsCorrection\"], exportAs: [\"paginationApi\"] }, { type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], pipes: { \"number\": i2.DecimalPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: PaginationControlsComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'pagination-controls',\r\n                    template: DEFAULT_TEMPLATE,\r\n                    styles: [DEFAULT_STYLES],\r\n                    changeDetection: ChangeDetectionStrategy.OnPush,\r\n                    encapsulation: ViewEncapsulation.None\r\n                }]\r\n        }], propDecorators: { id: [{\r\n                type: Input\r\n            }], maxSize: [{\r\n                type: Input\r\n            }], directionLinks: [{\r\n                type: Input\r\n            }], autoHide: [{\r\n                type: Input\r\n            }], responsive: [{\r\n                type: Input\r\n            }], previousLabel: [{\r\n                type: Input\r\n            }], nextLabel: [{\r\n                type: Input\r\n            }], screenReaderPaginationLabel: [{\r\n                type: Input\r\n            }], screenReaderPageLabel: [{\r\n                type: Input\r\n            }], screenReaderCurrentLabel: [{\r\n                type: Input\r\n            }], pageChange: [{\r\n                type: Output\r\n            }], pageBoundsCorrection: [{\r\n                type: Output\r\n            }] } });\n\nclass NgxPaginationModule {\r\n}\r\nNgxPaginationModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: NgxPaginationModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nNgxPaginationModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: NgxPaginationModule, declarations: [PaginatePipe,\r\n        PaginationControlsComponent,\r\n        PaginationControlsDirective], imports: [CommonModule], exports: [PaginatePipe, PaginationControlsComponent, PaginationControlsDirective] });\r\nNgxPaginationModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: NgxPaginationModule, providers: [PaginationService], imports: [[CommonModule]] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: NgxPaginationModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    imports: [CommonModule],\r\n                    declarations: [\r\n                        PaginatePipe,\r\n                        PaginationControlsComponent,\r\n                        PaginationControlsDirective\r\n                    ],\r\n                    providers: [PaginationService],\r\n                    exports: [PaginatePipe, PaginationControlsComponent, PaginationControlsDirective]\r\n                }]\r\n        }] });\n\n/*\r\n * Public API Surface of ngx-pagination\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { NgxPaginationModule, PaginatePipe, PaginationControlsComponent, PaginationControlsDirective, PaginationService };\n"]}