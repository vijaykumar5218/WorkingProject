{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAO,UAAMA,UAAS,GAAG;AACvBC,4BAAoB,EAAE,gCADC;AAEvBC,0BAAkB,EAAE;AAFG,OAAlB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCSMC,gBAAe;AAK1B,iCACUC,WADV,EAEUC,cAFV,EAE8C;AAAA;;AADpC;AACA;AAER,eAAKL,SAAL,GAAiB,KAAKK,cAAL,CAAoBC,wBAApB,CAA6CC,2DAA7C,CAAjB;AACD;;AAVyB;AAAA;AAAA,iBAYpB,mCACW;AAAA,gBAAfC,OAAe,uEAAL,KAAK;;;;;;;0BAGT,CAAC,KAAKC,WAAN,IAAqBD;;;;;;AACJ,2BAAM,KAAKJ,WAAL,CAAiBM,GAAjB,CACvB,KAAKV,SAAL,CAAeC,oBADQ,CAAN;;;AAAnB,yBAAKQ;;;;;;;;;AAKPE,2BAAO,CAACC,GAAR;AACA,yBAAKH,WAAL,GAAmB;AACjBI,wCAAkB,EAAE,KADH;AAEjBC,yCAAmB,EAAE;AAFJ,qBAAnB;;;qDAKK,KAAKL;;;;;;;;AACb;AA7ByB;AAAA;AAAA,iBA8B1B,8BAAkB;AAChB,gBAAI,CAAC,KAAKM,yBAAV,EAAqC;AACnC,mBAAKA,yBAAL,GAAiC,KAAKX,WAAL,CAAiBM,GAAjB,CAC/B,KAAKV,SAAL,CAAeE,kBADgB,CAAjC;AAGD;;AACD,mBAAO,KAAKa,yBAAZ;AACD;AArCyB;;AAAA;AAAA;;;;gBAPpBC;;gBACAC;;;;AAMKd,sBAAe,uDAH3B,2DAAW;AACVe,kBAAU,EAAE;AADF,OAAX,CAG2B,GAAff,gBAAe,CAAf;;;","names":["endpoints","settingsDisplayFlags","getPreferenceNudge","SettingsService","baseService","utilityService","appendBaseUrlToEndpoints","_constants_endpoints__WEBPACK_IMPORTED_MODULE_2__","refresh","displayFlag","get","console","log","displayContactLink","suppressAppointment","preferencesContentPromise","_shared_lib_services_base_base_factory_provider__WEBPACK_IMPORTED_MODULE_0__","_shared_lib_services_utility_utility_service__WEBPACK_IMPORTED_MODULE_1__","providedIn"],"sources":["webpack:///shared-lib/services/settings/constants/endpoints.ts","webpack:///shared-lib/services/settings/settings.service.ts"],"sourcesContent":["export const endpoints = {\n  settingsDisplayFlags: 'myvoyage/settings/displayflags',\n  getPreferenceNudge: 'myvoyage/ws/ers/content/section/myvoyage/home'\n};\n","import {Injectable} from '@angular/core';\nimport {SettingPreferences, SettingsDisplayFlags} from './models/settings.model';\nimport {BaseService} from '@shared-lib/services/base/base-factory-provider';\nimport {SharedUtilityService} from '@shared-lib/services/utility/utility.service';\nimport {endpoints} from './constants/endpoints';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SettingsService {\n  private endpoints;\n  private displayFlag: SettingsDisplayFlags;\n  private preferencesContentPromise: Promise<SettingPreferences>\n\n  constructor(\n    private baseService: BaseService,\n    private utilityService: SharedUtilityService\n  ) {\n    this.endpoints = this.utilityService.appendBaseUrlToEndpoints(endpoints);\n  }\n\n  async getSettingsDisplayFlags(\n    refresh = false\n  ): Promise<SettingsDisplayFlags> {\n    try {\n      if (!this.displayFlag || refresh) {\n        this.displayFlag = await this.baseService.get(\n          this.endpoints.settingsDisplayFlags\n        );\n      }\n    } catch (e) {\n      console.log(e);\n      this.displayFlag = {\n        displayContactLink: false,\n        suppressAppointment: false,\n      };\n    }\n    return this.displayFlag;\n  }\n  getPreferenceNudge():Promise<SettingPreferences>{\n    if (!this.preferencesContentPromise) {\n      this.preferencesContentPromise = this.baseService.get(\n        this.endpoints.getPreferenceNudge,\n      );\n    }\n    return this.preferencesContentPromise;\n  }\n}\n"]}