{"version":3,"file":"shared-lib_components_coverages_plans_plans_module_ts-es2015.js","mappings":"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","sources":["./shared-lib/components/coverages/plans/plans-routing.module.ts","./shared-lib/components/coverages/plans/plans.module.ts","./shared-lib/components/coverages/plans/plans.page.ts","./shared-lib/components/pagination/pagination.component.ts","./shared-lib/components/pagination/pagination.module.ts","./shared-lib/components/coverages/plans/plans.page.html","./shared-lib/components/pagination/pagination.component.html","./node_modules/ngx-pagination/fesm2015/ngx-pagination.mjs"],"sourcesContent":["import {NgModule} from '@angular/core';\nimport {Routes, RouterModule} from '@angular/router';\nimport {PlansPage} from './plans.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: PlansPage,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class PlansPageRoutingModule {}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule} from '@angular/forms';\nimport {IonicModule} from '@ionic/angular';\nimport {PlansPageRoutingModule} from './plans-routing.module';\nimport {PlansPage} from './plans.page';\nimport {NoBenefitsComponentModule} from '@shared-lib/components/coverages/benefit-elections/no-benefits/no-benefits.module';\nimport {MedDisclaimerModule} from '../med-disclaimer/med-disclaimer.module';\nimport {LoadingComponentModule} from '@shared-lib/components/loading/loading.module';\nimport {HSAStoreNudgeComponentModule} from '@shared-lib/components/hsastore-nudge/hsastore-nudge.module';\nimport {PaginationModule} from '@shared-lib/components/pagination/pagination.module';\nimport {MedicalSpendingModule} from '../../home/medical-spending/medical-spending.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    PlansPageRoutingModule,\n    NoBenefitsComponentModule,\n    MedDisclaimerModule,\n    LoadingComponentModule,\n    HSAStoreNudgeComponentModule,\n    PaginationModule,\n    MedicalSpendingModule,\n  ],\n  declarations: [PlansPage],\n  exports: [PlansPage],\n})\nexport class PlansPageModule {}\n","import {Component, Input, OnInit} from '@angular/core';\nimport {Router} from '@angular/router';\nimport {\n  Benefit,\n  Benefits,\n  BenefitsSummaryContent,\n  MyHealthWealth,\n} from '@shared-lib/services/benefits/models/benefits.model';\nimport * as jsonText from '../../../constants/coverage.json';\nimport {Coverage} from '../../../models/coverage.model';\nimport {BenefitsService} from '@shared-lib/services/benefits/benefits.service';\nimport {SharedUtilityService} from '../../../services/utility/utility.service';\nimport {Subscription} from 'rxjs';\nimport {PlatformService} from '@shared-lib/services/platform/platform.service';\n\n@Component({\n  selector: 'app-plans',\n  templateUrl: './plans.page.html',\n  styleUrls: ['./plans.page.scss'],\n})\nexport class PlansPage implements OnInit {\n  coverages: Benefit[];\n  covText: Coverage = (jsonText as any).default;\n  benefitContent: BenefitsSummaryContent;\n  planId: string;\n  isWeb: boolean;\n  subscription: Subscription = new Subscription();\n  isDesktop: boolean;\n  guidanceEnabled: boolean;\n  myHealthWealth: MyHealthWealth;\n  @Input() isWorkplaceDashboard = true;\n  @Input() showPagination = false;\n  paginationConfig: string;\n  currentPage = 1;\n  totalItems: number;\n  itemsPerPage: number;\n\n  constructor(\n    private benefitsService: BenefitsService,\n    private router: Router,\n    private utilityService: SharedUtilityService,\n    private platformService: PlatformService\n  ) {}\n\n  async ngOnInit() {\n    this.platformService.isDesktop().subscribe(data => {\n      this.isDesktop = data;\n      this.itemsPerPage = this.isDesktop ? 5 : 3;\n      this.fetchData(\n        this.isWorkplaceDashboard ? 'getNextYearBenefits' : 'getBenefits'\n      );\n    });\n    this.getBenefitContent();\n    this.fetchPlanId();\n    this.isWeb = this.utilityService.getIsWeb();\n    const benefitContent = await this.benefitsService.getNoBenefitContents();\n    this.myHealthWealth = JSON.parse(\n      benefitContent.Insights_ManageMyHealthandWealth\n    );\n    this.getGuidanceEnable();\n  }\n\n  async getGuidanceEnable() {\n    this.guidanceEnabled = (\n      await this.benefitsService.getGuidanceEnabled()\n    ).guidanceEnabled;\n  }\n\n  fetchPlanId() {\n    const routerSubscription = this.utilityService\n      .fetchUrlThroughNavigation(3)\n      .subscribe(data => {\n        this.planId = data?.paramId;\n      });\n    this.subscription.add(routerSubscription);\n  }\n\n  fetchData(method_name: string): Promise<void> {\n    return this.benefitsService[method_name]()\n      .then((data: Benefits) => {\n        this.coverages = data && data.enrolled;\n        if (\n          this.showPagination &&\n          ((this.isDesktop && this.coverages.length > 5) ||\n            (!this.isDesktop && this.coverages.length > 3))\n        ) {\n          this.managePaginationConfig(this.currentPage);\n        } else {\n          this.currentPage = 1;\n          this.totalItems = this.coverages.length;\n          this.itemsPerPage = this.totalItems;\n        }\n      })\n      .catch(() => {\n        this.coverages = [];\n      });\n  }\n\n  managePaginationConfig(page: number) {\n    this.currentPage = page;\n    this.totalItems = this.coverages.length;\n    this.paginationConfig = JSON.stringify({\n      conjunction: '',\n      currentPage: this.currentPage,\n      itemsPerPage: this.itemsPerPage,\n      dataSize: this.totalItems,\n    });\n  }\n\n  paginationChange(currentPage: number) {\n    this.managePaginationConfig(currentPage);\n  }\n\n  viewBenefit(benefit: Benefit) {\n    if (\n      benefit.type == 'medical_plan' ||\n      benefit.type == 'dental_plan' ||\n      benefit.type == 'vision_plan'\n    ) {\n      if (!this.isWeb) {\n        this.benefitsService.setBenefit(benefit);\n        this.router.navigateByUrl('/coverages/plan-tabs/details');\n      } else {\n        this.router.navigateByUrl(`coverages/view-plans/${benefit.id}/details`);\n      }\n    } else {\n      this.benefitsService.setBenefit(benefit);\n      return false;\n    }\n  }\n\n  async getBenefitContent(): Promise<void> {\n    return this.benefitsService\n      .getBenefitContent()\n      .then((res: BenefitsSummaryContent) => {\n        this.benefitContent = res;\n      });\n  }\n\n  manageWidthOfCard(benefit: Benefit): Record<string, string> | null {\n    if (this.isWeb) {\n      if (this.planId === benefit.id) {\n        this.benefitsService.setBenefit(benefit);\n        return {width: '385px'};\n      } else {\n        return {width: 'auto'};\n      }\n    }\n    return null;\n  }\n\n  openGuidelines() {\n    this.benefitsService.openGuidelines();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import {Component, EventEmitter, Input, Output} from '@angular/core';\n\n@Component({\n  selector: 'app-pagination',\n  templateUrl: './pagination.component.html',\n  styleUrls: ['./pagination.component.scss'],\n})\nexport class PaginationComponent {\n  @Input() paginationConfig: string;\n  @Output() paginationChange = new EventEmitter<number>();\n  @Input() id: string;\n\n  paginateClick(event) {\n    const itemsPerPage = JSON.parse(this.paginationConfig).itemsPerPage;\n    const currentPage = event.detail.pageIndex[0] / itemsPerPage + 1;\n    this.paginationChange.emit(currentPage);\n  }\n}\n","import {NgModule, CUSTOM_ELEMENTS_SCHEMA} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {IonicModule} from '@ionic/angular';\nimport {PaginationComponent} from './pagination.component';\nimport {NgxPaginationModule} from 'ngx-pagination';\n\n@NgModule({\n  imports: [CommonModule, IonicModule],\n  declarations: [PaginationComponent],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n  exports: [PaginationComponent, NgxPaginationModule],\n})\nexport class PaginationModule {}\n","export default \"<app-loading [loading]=\\\"coverages == null\\\">\\n  <div [ngClass]=\\\"isWorkplaceDashboard? 'workplace-dashboard':''\\\">\\n    <div class=\\\"web-plans-card\\\" [ngClass]=\\\"isWeb ? '':'mobile'\\\">\\n      <ng-container *ngIf=\\\"(coverages?.length > 0); else noCoverages\\\">\\n        <ion-card\\n          *ngFor=\\\"let cov of coverages|paginate:{itemsPerPage:itemsPerPage,currentPage:currentPage,totalItems:totalItems}; let i = index;\\\"\\n          (click)=\\\"viewBenefit(cov)\\\"\\n          (keydown.enter)=\\\"viewBenefit(cov)\\\"\\n          tabindex=\\\"0\\\"\\n          [ngStyle]=\\\"manageWidthOfCard(cov)\\\"\\n          [ngClass]=\\\"(!isWeb)? 'coverages-plan':(cov.type != 'medical_plan' &&\\n          cov.type != 'dental_plan' &&\\n          cov.type != 'vision_plan')? 'coverages-plan-slide':'coverages-plan-slide clickable'\\\"\\n          id=\\\"{{'coverage-plan-' + i}}\\\"\\n        >\\n          <div *ngIf=\\\"cov?.benAdminFlag\\\">\\n            <ng-container\\n              *ngTemplateOutlet=\\\"planTemp;context:{cov:cov,showPlanInfo:(!isWeb || isWorkplaceDashboard )?true:false,i:i}\\\"\\n            >\\n            </ng-container>\\n          </div>\\n\\n          <div *ngIf=\\\"!cov?.benAdminFlag\\\">\\n            <ng-container\\n              *ngTemplateOutlet=\\\"planTemp;context:{cov:cov,showPlanInfo:isWorkplaceDashboard,i:i}\\\"\\n            >\\n            </ng-container>\\n          </div>\\n        </ion-card>\\n      </ng-container>\\n\\n      <ion-card\\n        *ngIf=\\\"(!isWeb || (isWeb && !isDesktop)) && guidanceEnabled && !isWorkplaceDashboard\\\"\\n        class=\\\"myHealthWealth\\\"\\n      >\\n        <ion-row class=\\\"myHealth-title\\\">\\n          <ion-col class=\\\"myHealth-content\\\">\\n            <ion-row class=\\\"myHealth-heading\\\">\\n              <ion-text class=\\\"ths-text\\\">\\n                {{ myHealthWealth?.title }}\\n              </ion-text>\\n            </ion-row>\\n\\n            <ion-row>\\n              <strong class=\\\"ths-desc\\\">\\n                {{ myHealthWealth?.description }}</strong\\n              >\\n            </ion-row>\\n            <ion-row class=\\\"ths-details\\\">\\n              <ion-col class=\\\"ion-no-padding\\\">\\n                <ion-text\\n                  class=\\\"view-details\\\"\\n                  (click)=\\\"openGuidelines()\\\"\\n                  id=\\\"myHealthWealth_link\\\"\\n                >\\n                  <u\\n                    ><a class=\\\"navlink\\\" routerLinkActive=\\\"active\\\">\\n                      {{ myHealthWealth?.link_name }}\\n                    </a></u\\n                  >\\n                </ion-text>\\n              </ion-col>\\n            </ion-row>\\n          </ion-col>\\n          <ion-col class=\\\"myHealth-img-container\\\">\\n            <img\\n              alt=\\\"{{covText.totalHealthSpendAlt}}\\\"\\n              src=\\\"assets/icon/myHandW.svg\\\"\\n              class=\\\"ths-img\\\"\\n            />\\n          </ion-col>\\n        </ion-row>\\n      </ion-card>\\n      <app-hsastore-nudge *ngIf=\\\"!isWeb\\\"></app-hsastore-nudge>\\n      <div class=\\\"padded\\\" *ngIf=\\\"!isWeb\\\">\\n        <app-medical-spending\\n          [forMobilePlansPage]=\\\"true\\\"\\n        ></app-medical-spending>\\n      </div>\\n    </div>\\n  </div>\\n\\n  <ng-template #noCoverages>\\n    <app-no-benefits\\n      [workplaceDashboard]=\\\"isWorkplaceDashboard\\\"\\n      *ngIf=\\\"!isWeb || (isWeb && !isDesktop) || (isWeb && isWorkplaceDashboard)\\\"\\n    ></app-no-benefits>\\n  </ng-template>\\n</app-loading>\\n\\n<ng-template #planTemp let-cov=\\\"cov\\\" let-showPlanInfo=\\\"showPlanInfo\\\" let-i=\\\"i\\\">\\n  <ion-row class=\\\"first-row\\\">\\n    <ion-col class=\\\"coverages-logo\\\">\\n      <img\\n        src=\\\"{{\\n  (benefitContent?.iconMapping)[cov.type] ||\\n    'assets/icon/benefits/umbrella.svg'\\n}}\\\"\\n        alt=\\\"\\\"\\n      />\\n    </ion-col>\\n    <ion-col>\\n      <ion-row>\\n        <ion-col>\\n          <ion-text\\n            class=\\\"name\\\"\\n            [class.non-clickable]=\\\"\\n  cov.type != 'medical_plan' &&\\n  cov.type != 'dental_plan' &&\\n  cov.type != 'vision_plan'\\n\\\"\\n            >{{ cov.name }}\\n          </ion-text>\\n        </ion-col>\\n      </ion-row>\\n      <ng-container *ngIf=\\\"showPlanInfo\\\">\\n        <ng-container *ngIf=\\\"!isWorkplaceDashboard\\\">\\n          <ion-row class=\\\"top-labels\\\">\\n            <ion-col class=\\\"plan-col\\\"\\n              ><ng-container *ngTemplateOutlet=\\\"coverageLabel\\\"></ng-container\\n            ></ion-col>\\n            <ion-col\\n              ><ng-container\\n                *ngTemplateOutlet=\\\"premiumLabel;context:{cov:cov}\\\"\\n              ></ng-container\\n            ></ion-col>\\n          </ion-row>\\n          <ion-row class=\\\"labels-values\\\">\\n            <ion-col class=\\\"labels-col\\\">\\n              <ng-container\\n                *ngTemplateOutlet=\\\"coverageType;context:{cov:cov}\\\"\\n              ></ng-container>\\n            </ion-col>\\n            <ion-col class=\\\"premium-col\\\">\\n              <ng-container\\n                *ngTemplateOutlet=\\\"premium;context:{cov:cov}\\\"\\n              ></ng-container\\n            ></ion-col>\\n          </ion-row>\\n        </ng-container>\\n        <ng-container *ngIf=\\\"isWorkplaceDashboard\\\">\\n          <ion-row class=\\\"top-labels\\\">\\n            <ion-col class=\\\"plan-col\\\"\\n              ><ng-container *ngTemplateOutlet=\\\"coverageLabel\\\"></ng-container\\n            ></ion-col>\\n            <ion-col>\\n              <ng-container\\n                *ngTemplateOutlet=\\\"coverageType;context:{cov:cov}\\\"\\n              ></ng-container>\\n            </ion-col>\\n          </ion-row>\\n          <ion-row class=\\\"labels-values\\\">\\n            <ion-col class=\\\"labels-col\\\">\\n              <ng-container\\n                *ngTemplateOutlet=\\\"premiumLabel;context:{cov:cov}\\\"\\n              ></ng-container>\\n            </ion-col>\\n            <ion-col class=\\\"premium-col\\\">\\n              <ng-container\\n                *ngTemplateOutlet=\\\"premium;context:{cov:cov}\\\"\\n              ></ng-container\\n            ></ion-col>\\n          </ion-row>\\n        </ng-container>\\n      </ng-container>\\n    </ion-col>\\n    <ion-col *ngIf=\\\"isWorkplaceDashboard\\\" class=\\\"rightArrow\\\">\\n      <div\\n        class=\\\"ion-text-end\\\"\\n        [class.hide-enrolled-benefit-link]=\\\"\\n        cov.type != 'medical_plan' &&\\n        cov.type != 'dental_plan' &&\\n        cov.type != 'vision_plan'\\n    \\\"\\n      >\\n        <img\\n          [id]=\\\"'enrolled-benefit-link' + i\\\"\\n          class=\\\"enrolled-benefit-link-img\\\"\\n          src=\\\"assets/icon/chevron_right.svg\\\"\\n          alt=\\\"arrow\\\"\\n        />\\n      </div>\\n    </ion-col>\\n  </ion-row>\\n</ng-template>\\n\\n<ng-template #coverageLabel>\\n  <ion-text class=\\\"label\\\">{{ benefitContent?.coverageLabel }} </ion-text>\\n</ng-template>\\n\\n<ng-template let-cov=\\\"cov\\\" #premiumLabel>\\n  <ion-text class=\\\"label\\\" *ngIf=\\\"cov?.premium || cov?.premium === 0\\\"\\n    >{{ benefitContent?.premiumLabel }}</ion-text\\n  >\\n</ng-template>\\n\\n<ng-template let-cov=\\\"cov\\\" #coverageType>\\n  <ion-text class=\\\"label covType\\\">{{ cov?.coverageType }}</ion-text>\\n</ng-template>\\n\\n<ng-template let-cov=\\\"cov\\\" #premium>\\n  <ion-text class=\\\"amt\\\"\\n    >{{ cov.premium | currency: 'USD':'symbol' }}\\n    <ng-container *ngIf=\\\"cov.premium > 0\\\">\\n      /{{ cov.premiumFrequency }}\\n    </ng-container>\\n  </ion-text>\\n</ng-template>\\n\\n<app-pagination\\n  [paginationConfig]=\\\"paginationConfig\\\"\\n  (paginationChange)=\\\"paginationChange($event)\\\"\\n  id=\\\"cov-pagination\\\"\\n></app-pagination>\\n\";","export default \"<div class=\\\"pagination-section\\\" *ngIf=\\\"paginationConfig\\\">\\n  <v-pagination\\n    [id]=\\\"id\\\"\\n    [attr.config]=\\\"paginationConfig\\\"\\n    (vpagination-change)=\\\"paginateClick($event)\\\"\\n  ></v-pagination>\\n</div>\\n\";","import * as i0 from '@angular/core';\nimport { EventEmitter, Pipe, Directive, Input, Output, Component, ChangeDetectionStrategy, ViewEncapsulation, NgModule } from '@angular/core';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\nclass PaginationService {\r\n    constructor() {\r\n        this.change = new EventEmitter();\r\n        this.instances = {};\r\n        this.DEFAULT_ID = 'DEFAULT_PAGINATION_ID';\r\n    }\r\n    defaultId() { return this.DEFAULT_ID; }\r\n    /**\r\n     * Register a PaginationInstance with this service. Returns a\r\n     * boolean value signifying whether the instance is new or\r\n     * updated (true = new or updated, false = unchanged).\r\n     */\r\n    register(instance) {\r\n        if (instance.id == null) {\r\n            instance.id = this.DEFAULT_ID;\r\n        }\r\n        if (!this.instances[instance.id]) {\r\n            this.instances[instance.id] = instance;\r\n            return true;\r\n        }\r\n        else {\r\n            return this.updateInstance(instance);\r\n        }\r\n    }\r\n    /**\r\n     * Check each property of the instance and update any that have changed. Return\r\n     * true if any changes were made, else return false.\r\n     */\r\n    updateInstance(instance) {\r\n        let changed = false;\r\n        for (let prop in this.instances[instance.id]) {\r\n            if (instance[prop] !== this.instances[instance.id][prop]) {\r\n                this.instances[instance.id][prop] = instance[prop];\r\n                changed = true;\r\n            }\r\n        }\r\n        return changed;\r\n    }\r\n    /**\r\n     * Returns the current page number.\r\n     */\r\n    getCurrentPage(id) {\r\n        if (this.instances[id]) {\r\n            return this.instances[id].currentPage;\r\n        }\r\n        return 1;\r\n    }\r\n    /**\r\n     * Sets the current page number.\r\n     */\r\n    setCurrentPage(id, page) {\r\n        if (this.instances[id]) {\r\n            let instance = this.instances[id];\r\n            let maxPage = Math.ceil(instance.totalItems / instance.itemsPerPage);\r\n            if (page <= maxPage && 1 <= page) {\r\n                this.instances[id].currentPage = page;\r\n                this.change.emit(id);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Sets the value of instance.totalItems\r\n     */\r\n    setTotalItems(id, totalItems) {\r\n        if (this.instances[id] && 0 <= totalItems) {\r\n            this.instances[id].totalItems = totalItems;\r\n            this.change.emit(id);\r\n        }\r\n    }\r\n    /**\r\n     * Sets the value of instance.itemsPerPage.\r\n     */\r\n    setItemsPerPage(id, itemsPerPage) {\r\n        if (this.instances[id]) {\r\n            this.instances[id].itemsPerPage = itemsPerPage;\r\n            this.change.emit(id);\r\n        }\r\n    }\r\n    /**\r\n     * Returns a clone of the pagination instance object matching the id. If no\r\n     * id specified, returns the instance corresponding to the default id.\r\n     */\r\n    getInstance(id = this.DEFAULT_ID) {\r\n        if (this.instances[id]) {\r\n            return this.clone(this.instances[id]);\r\n        }\r\n        return {};\r\n    }\r\n    /**\r\n     * Perform a shallow clone of an object.\r\n     */\r\n    clone(obj) {\r\n        var target = {};\r\n        for (var i in obj) {\r\n            if (obj.hasOwnProperty(i)) {\r\n                target[i] = obj[i];\r\n            }\r\n        }\r\n        return target;\r\n    }\r\n}\n\nconst LARGE_NUMBER = Number.MAX_SAFE_INTEGER;\r\nclass PaginatePipe {\r\n    constructor(service) {\r\n        this.service = service;\r\n        // store the values from the last time the pipe was invoked\r\n        this.state = {};\r\n    }\r\n    transform(collection, args) {\r\n        // When an observable is passed through the AsyncPipe, it will output\r\n        // `null` until the subscription resolves. In this case, we want to\r\n        // use the cached data from the `state` object to prevent the NgFor\r\n        // from flashing empty until the real values arrive.\r\n        if (!(collection instanceof Array)) {\r\n            let _id = args.id || this.service.defaultId();\r\n            if (this.state[_id]) {\r\n                return this.state[_id].slice;\r\n            }\r\n            else {\r\n                return collection;\r\n            }\r\n        }\r\n        let serverSideMode = args.totalItems && args.totalItems !== collection.length;\r\n        let instance = this.createInstance(collection, args);\r\n        let id = instance.id;\r\n        let start, end;\r\n        let perPage = instance.itemsPerPage;\r\n        let emitChange = this.service.register(instance);\r\n        if (!serverSideMode && collection instanceof Array) {\r\n            perPage = +perPage || LARGE_NUMBER;\r\n            start = (instance.currentPage - 1) * perPage;\r\n            end = start + perPage;\r\n            let isIdentical = this.stateIsIdentical(id, collection, start, end);\r\n            if (isIdentical) {\r\n                return this.state[id].slice;\r\n            }\r\n            else {\r\n                let slice = collection.slice(start, end);\r\n                this.saveState(id, collection, slice, start, end);\r\n                this.service.change.emit(id);\r\n                return slice;\r\n            }\r\n        }\r\n        else {\r\n            if (emitChange) {\r\n                this.service.change.emit(id);\r\n            }\r\n            // save the state for server-side collection to avoid null\r\n            // flash as new data loads.\r\n            this.saveState(id, collection, collection, start, end);\r\n            return collection;\r\n        }\r\n    }\r\n    /**\r\n     * Create an PaginationInstance object, using defaults for any optional properties not supplied.\r\n     */\r\n    createInstance(collection, config) {\r\n        this.checkConfig(config);\r\n        return {\r\n            id: config.id != null ? config.id : this.service.defaultId(),\r\n            itemsPerPage: +config.itemsPerPage || 0,\r\n            currentPage: +config.currentPage || 1,\r\n            totalItems: +config.totalItems || collection.length\r\n        };\r\n    }\r\n    /**\r\n     * Ensure the argument passed to the filter contains the required properties.\r\n     */\r\n    checkConfig(config) {\r\n        const required = ['itemsPerPage', 'currentPage'];\r\n        const missing = required.filter(prop => !(prop in config));\r\n        if (0 < missing.length) {\r\n            throw new Error(`PaginatePipe: Argument is missing the following required properties: ${missing.join(', ')}`);\r\n        }\r\n    }\r\n    /**\r\n     * To avoid returning a brand new array each time the pipe is run, we store the state of the sliced\r\n     * array for a given id. This means that the next time the pipe is run on this collection & id, we just\r\n     * need to check that the collection, start and end points are all identical, and if so, return the\r\n     * last sliced array.\r\n     */\r\n    saveState(id, collection, slice, start, end) {\r\n        this.state[id] = {\r\n            collection,\r\n            size: collection.length,\r\n            slice,\r\n            start,\r\n            end\r\n        };\r\n    }\r\n    /**\r\n     * For a given id, returns true if the collection, size, start and end values are identical.\r\n     */\r\n    stateIsIdentical(id, collection, start, end) {\r\n        let state = this.state[id];\r\n        if (!state) {\r\n            return false;\r\n        }\r\n        let isMetaDataIdentical = state.size === collection.length &&\r\n            state.start === start &&\r\n            state.end === end;\r\n        if (!isMetaDataIdentical) {\r\n            return false;\r\n        }\r\n        return state.slice.every((element, index) => element === collection[start + index]);\r\n    }\r\n}\r\nPaginatePipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: PaginatePipe, deps: [{ token: PaginationService }], target: i0.ɵɵFactoryTarget.Pipe });\r\nPaginatePipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: PaginatePipe, name: \"paginate\", pure: false });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: PaginatePipe, decorators: [{\r\n            type: Pipe,\r\n            args: [{\r\n                    name: 'paginate',\r\n                    pure: false\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: PaginationService }]; } });\n\n/**\r\n * The default template and styles for the pagination links are borrowed directly\r\n * from Zurb Foundation 6: http://foundation.zurb.com/sites/docs/pagination.html\r\n */\r\nconst DEFAULT_TEMPLATE = `\r\n    <pagination-template  #p=\"paginationApi\"\r\n                         [id]=\"id\"\r\n                         [maxSize]=\"maxSize\"\r\n                         (pageChange)=\"pageChange.emit($event)\"\r\n                         (pageBoundsCorrection)=\"pageBoundsCorrection.emit($event)\">\r\n    <nav role=\"navigation\" [attr.aria-label]=\"screenReaderPaginationLabel\">\r\n    <ul class=\"ngx-pagination\" \r\n        [class.responsive]=\"responsive\"\r\n        *ngIf=\"!(autoHide && p.pages.length <= 1)\">\r\n\r\n        <li class=\"pagination-previous\" [class.disabled]=\"p.isFirstPage()\" *ngIf=\"directionLinks\"> \r\n            <a tabindex=\"0\" *ngIf=\"1 < p.getCurrent()\" (keyup.enter)=\"p.previous()\" (click)=\"p.previous()\">\r\n                {{ previousLabel }} <span class=\"show-for-sr\">{{ screenReaderPageLabel }}</span>\r\n            </a>\r\n            <span *ngIf=\"p.isFirstPage()\" aria-disabled=\"true\">\r\n                {{ previousLabel }} <span class=\"show-for-sr\">{{ screenReaderPageLabel }}</span>\r\n            </span>\r\n        </li> \r\n\r\n        <li class=\"small-screen\">\r\n            {{ p.getCurrent() }} / {{ p.getLastPage() }}\r\n        </li>\r\n\r\n        <li [class.current]=\"p.getCurrent() === page.value\" \r\n            [class.ellipsis]=\"page.label === '...'\"\r\n            *ngFor=\"let page of p.pages; trackBy: trackByIndex\">\r\n            <a tabindex=\"0\" (keyup.enter)=\"p.setCurrent(page.value)\" (click)=\"p.setCurrent(page.value)\" *ngIf=\"p.getCurrent() !== page.value\">\r\n                <span class=\"show-for-sr\">{{ screenReaderPageLabel }} </span>\r\n                <span>{{ (page.label === '...') ? page.label : (page.label | number:'') }}</span>\r\n            </a>\r\n            <ng-container *ngIf=\"p.getCurrent() === page.value\">\r\n              <span aria-live=\"polite\">\r\n                <span class=\"show-for-sr\">{{ screenReaderCurrentLabel }} </span>\r\n                <span>{{ (page.label === '...') ? page.label : (page.label | number:'') }}</span> \r\n              </span>\r\n            </ng-container>\r\n        </li>\r\n\r\n        <li class=\"pagination-next\" [class.disabled]=\"p.isLastPage()\" *ngIf=\"directionLinks\">\r\n            <a tabindex=\"0\" *ngIf=\"!p.isLastPage()\" (keyup.enter)=\"p.next()\" (click)=\"p.next()\">\r\n                 {{ nextLabel }} <span class=\"show-for-sr\">{{ screenReaderPageLabel }}</span>\r\n            </a>\r\n            <span *ngIf=\"p.isLastPage()\" aria-disabled=\"true\">\r\n                 {{ nextLabel }} <span class=\"show-for-sr\">{{ screenReaderPageLabel }}</span>\r\n            </span>\r\n        </li>\r\n\r\n    </ul>\r\n    </nav>\r\n    </pagination-template>\r\n    `;\r\nconst DEFAULT_STYLES = `\r\n.ngx-pagination {\r\n  margin-left: 0;\r\n  margin-bottom: 1rem; }\r\n  .ngx-pagination::before, .ngx-pagination::after {\r\n    content: ' ';\r\n    display: table; }\r\n  .ngx-pagination::after {\r\n    clear: both; }\r\n  .ngx-pagination li {\r\n    -moz-user-select: none;\r\n    -webkit-user-select: none;\r\n    -ms-user-select: none;\r\n    margin-right: 0.0625rem;\r\n    border-radius: 0; }\r\n  .ngx-pagination li {\r\n    display: inline-block; }\r\n  .ngx-pagination a,\r\n  .ngx-pagination button {\r\n    color: #0a0a0a; \r\n    display: block;\r\n    padding: 0.1875rem 0.625rem;\r\n    border-radius: 0; }\r\n    .ngx-pagination a:hover,\r\n    .ngx-pagination button:hover {\r\n      background: #e6e6e6; }\r\n  .ngx-pagination .current {\r\n    padding: 0.1875rem 0.625rem;\r\n    background: #2199e8;\r\n    color: #fefefe;\r\n    cursor: default; }\r\n  .ngx-pagination .disabled {\r\n    padding: 0.1875rem 0.625rem;\r\n    color: #cacaca;\r\n    cursor: default; } \r\n    .ngx-pagination .disabled:hover {\r\n      background: transparent; }\r\n  .ngx-pagination a, .ngx-pagination button {\r\n    cursor: pointer; }\r\n\r\n.ngx-pagination .pagination-previous a::before,\r\n.ngx-pagination .pagination-previous.disabled::before { \r\n  content: '«';\r\n  display: inline-block;\r\n  margin-right: 0.5rem; }\r\n\r\n.ngx-pagination .pagination-next a::after,\r\n.ngx-pagination .pagination-next.disabled::after {\r\n  content: '»';\r\n  display: inline-block;\r\n  margin-left: 0.5rem; }\r\n\r\n.ngx-pagination .show-for-sr {\r\n  position: absolute !important;\r\n  width: 1px;\r\n  height: 1px;\r\n  overflow: hidden;\r\n  clip: rect(0, 0, 0, 0); }\r\n.ngx-pagination .small-screen {\r\n  display: none; }\r\n@media screen and (max-width: 601px) {\r\n  .ngx-pagination.responsive .small-screen {\r\n    display: inline-block; } \r\n  .ngx-pagination.responsive li:not(.small-screen):not(.pagination-previous):not(.pagination-next) {\r\n    display: none; }\r\n}\r\n  `;\n\n/**\r\n * This directive is what powers all pagination controls components, including the default one.\r\n * It exposes an API which is hooked up to the PaginationService to keep the PaginatePipe in sync\r\n * with the pagination controls.\r\n */\r\nclass PaginationControlsDirective {\r\n    constructor(service, changeDetectorRef) {\r\n        this.service = service;\r\n        this.changeDetectorRef = changeDetectorRef;\r\n        this.maxSize = 7;\r\n        this.pageChange = new EventEmitter();\r\n        this.pageBoundsCorrection = new EventEmitter();\r\n        this.pages = [];\r\n        this.changeSub = this.service.change\r\n            .subscribe(id => {\r\n            if (this.id === id) {\r\n                this.updatePageLinks();\r\n                this.changeDetectorRef.markForCheck();\r\n                this.changeDetectorRef.detectChanges();\r\n            }\r\n        });\r\n    }\r\n    ngOnInit() {\r\n        if (this.id === undefined) {\r\n            this.id = this.service.defaultId();\r\n        }\r\n        this.updatePageLinks();\r\n    }\r\n    ngOnChanges(changes) {\r\n        this.updatePageLinks();\r\n    }\r\n    ngOnDestroy() {\r\n        this.changeSub.unsubscribe();\r\n    }\r\n    /**\r\n     * Go to the previous page\r\n     */\r\n    previous() {\r\n        this.checkValidId();\r\n        this.setCurrent(this.getCurrent() - 1);\r\n    }\r\n    /**\r\n     * Go to the next page\r\n     */\r\n    next() {\r\n        this.checkValidId();\r\n        this.setCurrent(this.getCurrent() + 1);\r\n    }\r\n    /**\r\n     * Returns true if current page is first page\r\n     */\r\n    isFirstPage() {\r\n        return this.getCurrent() === 1;\r\n    }\r\n    /**\r\n     * Returns true if current page is last page\r\n     */\r\n    isLastPage() {\r\n        return this.getLastPage() === this.getCurrent();\r\n    }\r\n    /**\r\n     * Set the current page number.\r\n     */\r\n    setCurrent(page) {\r\n        this.pageChange.emit(page);\r\n    }\r\n    /**\r\n     * Get the current page number.\r\n     */\r\n    getCurrent() {\r\n        return this.service.getCurrentPage(this.id);\r\n    }\r\n    /**\r\n     * Returns the last page number\r\n     */\r\n    getLastPage() {\r\n        let inst = this.service.getInstance(this.id);\r\n        if (inst.totalItems < 1) {\r\n            // when there are 0 or fewer (an error case) items, there are no \"pages\" as such,\r\n            // but it makes sense to consider a single, empty page as the last page.\r\n            return 1;\r\n        }\r\n        return Math.ceil(inst.totalItems / inst.itemsPerPage);\r\n    }\r\n    getTotalItems() {\r\n        return this.service.getInstance(this.id).totalItems;\r\n    }\r\n    checkValidId() {\r\n        if (this.service.getInstance(this.id).id == null) {\r\n            console.warn(`PaginationControlsDirective: the specified id \"${this.id}\" does not match any registered PaginationInstance`);\r\n        }\r\n    }\r\n    /**\r\n     * Updates the page links and checks that the current page is valid. Should run whenever the\r\n     * PaginationService.change stream emits a value matching the current ID, or when any of the\r\n     * input values changes.\r\n     */\r\n    updatePageLinks() {\r\n        let inst = this.service.getInstance(this.id);\r\n        const correctedCurrentPage = this.outOfBoundCorrection(inst);\r\n        if (correctedCurrentPage !== inst.currentPage) {\r\n            setTimeout(() => {\r\n                this.pageBoundsCorrection.emit(correctedCurrentPage);\r\n                this.pages = this.createPageArray(inst.currentPage, inst.itemsPerPage, inst.totalItems, this.maxSize);\r\n            });\r\n        }\r\n        else {\r\n            this.pages = this.createPageArray(inst.currentPage, inst.itemsPerPage, inst.totalItems, this.maxSize);\r\n        }\r\n    }\r\n    /**\r\n     * Checks that the instance.currentPage property is within bounds for the current page range.\r\n     * If not, return a correct value for currentPage, or the current value if OK.\r\n     */\r\n    outOfBoundCorrection(instance) {\r\n        const totalPages = Math.ceil(instance.totalItems / instance.itemsPerPage);\r\n        if (totalPages < instance.currentPage && 0 < totalPages) {\r\n            return totalPages;\r\n        }\r\n        else if (instance.currentPage < 1) {\r\n            return 1;\r\n        }\r\n        return instance.currentPage;\r\n    }\r\n    /**\r\n     * Returns an array of Page objects to use in the pagination controls.\r\n     */\r\n    createPageArray(currentPage, itemsPerPage, totalItems, paginationRange) {\r\n        // paginationRange could be a string if passed from attribute, so cast to number.\r\n        paginationRange = +paginationRange;\r\n        let pages = [];\r\n        // Return 1 as default page number\r\n        // Make sense to show 1 instead of empty when there are no items\r\n        const totalPages = Math.max(Math.ceil(totalItems / itemsPerPage), 1);\r\n        const halfWay = Math.ceil(paginationRange / 2);\r\n        const isStart = currentPage <= halfWay;\r\n        const isEnd = totalPages - halfWay < currentPage;\r\n        const isMiddle = !isStart && !isEnd;\r\n        let ellipsesNeeded = paginationRange < totalPages;\r\n        let i = 1;\r\n        while (i <= totalPages && i <= paginationRange) {\r\n            let label;\r\n            let pageNumber = this.calculatePageNumber(i, currentPage, paginationRange, totalPages);\r\n            let openingEllipsesNeeded = (i === 2 && (isMiddle || isEnd));\r\n            let closingEllipsesNeeded = (i === paginationRange - 1 && (isMiddle || isStart));\r\n            if (ellipsesNeeded && (openingEllipsesNeeded || closingEllipsesNeeded)) {\r\n                label = '...';\r\n            }\r\n            else {\r\n                label = pageNumber;\r\n            }\r\n            pages.push({\r\n                label: label,\r\n                value: pageNumber\r\n            });\r\n            i++;\r\n        }\r\n        return pages;\r\n    }\r\n    /**\r\n     * Given the position in the sequence of pagination links [i],\r\n     * figure out what page number corresponds to that position.\r\n     */\r\n    calculatePageNumber(i, currentPage, paginationRange, totalPages) {\r\n        let halfWay = Math.ceil(paginationRange / 2);\r\n        if (i === paginationRange) {\r\n            return totalPages;\r\n        }\r\n        else if (i === 1) {\r\n            return i;\r\n        }\r\n        else if (paginationRange < totalPages) {\r\n            if (totalPages - halfWay < currentPage) {\r\n                return totalPages - paginationRange + i;\r\n            }\r\n            else if (halfWay < currentPage) {\r\n                return currentPage - halfWay + i;\r\n            }\r\n            else {\r\n                return i;\r\n            }\r\n        }\r\n        else {\r\n            return i;\r\n        }\r\n    }\r\n}\r\nPaginationControlsDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: PaginationControlsDirective, deps: [{ token: PaginationService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive });\r\nPaginationControlsDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.9\", type: PaginationControlsDirective, selector: \"pagination-template,[pagination-template]\", inputs: { id: \"id\", maxSize: \"maxSize\" }, outputs: { pageChange: \"pageChange\", pageBoundsCorrection: \"pageBoundsCorrection\" }, exportAs: [\"paginationApi\"], usesOnChanges: true, ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: PaginationControlsDirective, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: 'pagination-template,[pagination-template]',\r\n                    exportAs: 'paginationApi'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: PaginationService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { id: [{\r\n                type: Input\r\n            }], maxSize: [{\r\n                type: Input\r\n            }], pageChange: [{\r\n                type: Output\r\n            }], pageBoundsCorrection: [{\r\n                type: Output\r\n            }] } });\n\nfunction coerceToBoolean(input) {\r\n    return !!input && input !== 'false';\r\n}\r\n/**\r\n * The default pagination controls component. Actually just a default implementation of a custom template.\r\n */\r\nclass PaginationControlsComponent {\r\n    constructor() {\r\n        this.maxSize = 7;\r\n        this.previousLabel = 'Previous';\r\n        this.nextLabel = 'Next';\r\n        this.screenReaderPaginationLabel = 'Pagination';\r\n        this.screenReaderPageLabel = 'page';\r\n        this.screenReaderCurrentLabel = `You're on page`;\r\n        this.pageChange = new EventEmitter();\r\n        this.pageBoundsCorrection = new EventEmitter();\r\n        this._directionLinks = true;\r\n        this._autoHide = false;\r\n        this._responsive = false;\r\n    }\r\n    get directionLinks() {\r\n        return this._directionLinks;\r\n    }\r\n    set directionLinks(value) {\r\n        this._directionLinks = coerceToBoolean(value);\r\n    }\r\n    get autoHide() {\r\n        return this._autoHide;\r\n    }\r\n    set autoHide(value) {\r\n        this._autoHide = coerceToBoolean(value);\r\n    }\r\n    get responsive() {\r\n        return this._responsive;\r\n    }\r\n    set responsive(value) {\r\n        this._responsive = coerceToBoolean(value);\r\n    }\r\n    trackByIndex(index) {\r\n        return index;\r\n    }\r\n}\r\nPaginationControlsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: PaginationControlsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\r\nPaginationControlsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.9\", type: PaginationControlsComponent, selector: \"pagination-controls\", inputs: { id: \"id\", maxSize: \"maxSize\", directionLinks: \"directionLinks\", autoHide: \"autoHide\", responsive: \"responsive\", previousLabel: \"previousLabel\", nextLabel: \"nextLabel\", screenReaderPaginationLabel: \"screenReaderPaginationLabel\", screenReaderPageLabel: \"screenReaderPageLabel\", screenReaderCurrentLabel: \"screenReaderCurrentLabel\" }, outputs: { pageChange: \"pageChange\", pageBoundsCorrection: \"pageBoundsCorrection\" }, ngImport: i0, template: \"\\n    <pagination-template  #p=\\\"paginationApi\\\"\\n                         [id]=\\\"id\\\"\\n                         [maxSize]=\\\"maxSize\\\"\\n                         (pageChange)=\\\"pageChange.emit($event)\\\"\\n                         (pageBoundsCorrection)=\\\"pageBoundsCorrection.emit($event)\\\">\\n    <nav role=\\\"navigation\\\" [attr.aria-label]=\\\"screenReaderPaginationLabel\\\">\\n    <ul class=\\\"ngx-pagination\\\" \\n        [class.responsive]=\\\"responsive\\\"\\n        *ngIf=\\\"!(autoHide && p.pages.length <= 1)\\\">\\n\\n        <li class=\\\"pagination-previous\\\" [class.disabled]=\\\"p.isFirstPage()\\\" *ngIf=\\\"directionLinks\\\"> \\n            <a tabindex=\\\"0\\\" *ngIf=\\\"1 < p.getCurrent()\\\" (keyup.enter)=\\\"p.previous()\\\" (click)=\\\"p.previous()\\\">\\n                {{ previousLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </a>\\n            <span *ngIf=\\\"p.isFirstPage()\\\" aria-disabled=\\\"true\\\">\\n                {{ previousLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </span>\\n        </li> \\n\\n        <li class=\\\"small-screen\\\">\\n            {{ p.getCurrent() }} / {{ p.getLastPage() }}\\n        </li>\\n\\n        <li [class.current]=\\\"p.getCurrent() === page.value\\\" \\n            [class.ellipsis]=\\\"page.label === '...'\\\"\\n            *ngFor=\\\"let page of p.pages; trackBy: trackByIndex\\\">\\n            <a tabindex=\\\"0\\\" (keyup.enter)=\\\"p.setCurrent(page.value)\\\" (click)=\\\"p.setCurrent(page.value)\\\" *ngIf=\\\"p.getCurrent() !== page.value\\\">\\n                <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }} </span>\\n                <span>{{ (page.label === '...') ? page.label : (page.label | number:'') }}</span>\\n            </a>\\n            <ng-container *ngIf=\\\"p.getCurrent() === page.value\\\">\\n              <span aria-live=\\\"polite\\\">\\n                <span class=\\\"show-for-sr\\\">{{ screenReaderCurrentLabel }} </span>\\n                <span>{{ (page.label === '...') ? page.label : (page.label | number:'') }}</span> \\n              </span>\\n            </ng-container>\\n        </li>\\n\\n        <li class=\\\"pagination-next\\\" [class.disabled]=\\\"p.isLastPage()\\\" *ngIf=\\\"directionLinks\\\">\\n            <a tabindex=\\\"0\\\" *ngIf=\\\"!p.isLastPage()\\\" (keyup.enter)=\\\"p.next()\\\" (click)=\\\"p.next()\\\">\\n                 {{ nextLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </a>\\n            <span *ngIf=\\\"p.isLastPage()\\\" aria-disabled=\\\"true\\\">\\n                 {{ nextLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </span>\\n        </li>\\n\\n    </ul>\\n    </nav>\\n    </pagination-template>\\n    \", isInline: true, styles: [\".ngx-pagination{margin-left:0;margin-bottom:1rem}.ngx-pagination:before,.ngx-pagination:after{content:\\\" \\\";display:table}.ngx-pagination:after{clear:both}.ngx-pagination li{-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none;margin-right:.0625rem;border-radius:0}.ngx-pagination li{display:inline-block}.ngx-pagination a,.ngx-pagination button{color:#0a0a0a;display:block;padding:.1875rem .625rem;border-radius:0}.ngx-pagination a:hover,.ngx-pagination button:hover{background:#e6e6e6}.ngx-pagination .current{padding:.1875rem .625rem;background:#2199e8;color:#fefefe;cursor:default}.ngx-pagination .disabled{padding:.1875rem .625rem;color:#cacaca;cursor:default}.ngx-pagination .disabled:hover{background:transparent}.ngx-pagination a,.ngx-pagination button{cursor:pointer}.ngx-pagination .pagination-previous a:before,.ngx-pagination .pagination-previous.disabled:before{content:\\\"\\\\ab\\\";display:inline-block;margin-right:.5rem}.ngx-pagination .pagination-next a:after,.ngx-pagination .pagination-next.disabled:after{content:\\\"\\\\bb\\\";display:inline-block;margin-left:.5rem}.ngx-pagination .show-for-sr{position:absolute!important;width:1px;height:1px;overflow:hidden;clip:rect(0,0,0,0)}.ngx-pagination .small-screen{display:none}@media screen and (max-width: 601px){.ngx-pagination.responsive .small-screen{display:inline-block}.ngx-pagination.responsive li:not(.small-screen):not(.pagination-previous):not(.pagination-next){display:none}}\\n\"], directives: [{ type: PaginationControlsDirective, selector: \"pagination-template,[pagination-template]\", inputs: [\"id\", \"maxSize\"], outputs: [\"pageChange\", \"pageBoundsCorrection\"], exportAs: [\"paginationApi\"] }, { type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], pipes: { \"number\": i2.DecimalPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: PaginationControlsComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'pagination-controls',\r\n                    template: DEFAULT_TEMPLATE,\r\n                    styles: [DEFAULT_STYLES],\r\n                    changeDetection: ChangeDetectionStrategy.OnPush,\r\n                    encapsulation: ViewEncapsulation.None\r\n                }]\r\n        }], propDecorators: { id: [{\r\n                type: Input\r\n            }], maxSize: [{\r\n                type: Input\r\n            }], directionLinks: [{\r\n                type: Input\r\n            }], autoHide: [{\r\n                type: Input\r\n            }], responsive: [{\r\n                type: Input\r\n            }], previousLabel: [{\r\n                type: Input\r\n            }], nextLabel: [{\r\n                type: Input\r\n            }], screenReaderPaginationLabel: [{\r\n                type: Input\r\n            }], screenReaderPageLabel: [{\r\n                type: Input\r\n            }], screenReaderCurrentLabel: [{\r\n                type: Input\r\n            }], pageChange: [{\r\n                type: Output\r\n            }], pageBoundsCorrection: [{\r\n                type: Output\r\n            }] } });\n\nclass NgxPaginationModule {\r\n}\r\nNgxPaginationModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: NgxPaginationModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nNgxPaginationModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: NgxPaginationModule, declarations: [PaginatePipe,\r\n        PaginationControlsComponent,\r\n        PaginationControlsDirective], imports: [CommonModule], exports: [PaginatePipe, PaginationControlsComponent, PaginationControlsDirective] });\r\nNgxPaginationModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: NgxPaginationModule, providers: [PaginationService], imports: [[CommonModule]] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: NgxPaginationModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    imports: [CommonModule],\r\n                    declarations: [\r\n                        PaginatePipe,\r\n                        PaginationControlsComponent,\r\n                        PaginationControlsDirective\r\n                    ],\r\n                    providers: [PaginationService],\r\n                    exports: [PaginatePipe, PaginationControlsComponent, PaginationControlsDirective]\r\n                }]\r\n        }] });\n\n/*\r\n * Public API Surface of ngx-pagination\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { NgxPaginationModule, PaginatePipe, PaginationControlsComponent, PaginationControlsDirective, PaginationService };\n"],"names":["i0","EventEmitter","Pipe","Directive","Input","Output","Component","ChangeDetectionStrategy","ViewEncapsulation","NgModule","i2","CommonModule","PaginationService","constructor","change","instances","DEFAULT_ID","defaultId","register","instance","id","updateInstance","changed","prop","getCurrentPage","currentPage","setCurrentPage","page","maxPage","Math","ceil","totalItems","itemsPerPage","emit","setTotalItems","setItemsPerPage","getInstance","clone","obj","target","i","hasOwnProperty","LARGE_NUMBER","Number","MAX_SAFE_INTEGER","PaginatePipe","service","state","transform","collection","args","Array","_id","slice","serverSideMode","length","createInstance","start","end","perPage","emitChange","isIdentical","stateIsIdentical","saveState","config","checkConfig","required","missing","filter","Error","join","size","isMetaDataIdentical","every","element","index","ɵfac","ɵpipe","type","name","pure","DEFAULT_TEMPLATE","DEFAULT_STYLES","PaginationControlsDirective","changeDetectorRef","maxSize","pageChange","pageBoundsCorrection","pages","changeSub","subscribe","updatePageLinks","markForCheck","detectChanges","ngOnInit","undefined","ngOnChanges","changes","ngOnDestroy","unsubscribe","previous","checkValidId","setCurrent","getCurrent","next","isFirstPage","isLastPage","getLastPage","inst","getTotalItems","console","warn","correctedCurrentPage","outOfBoundCorrection","setTimeout","createPageArray","totalPages","paginationRange","max","halfWay","isStart","isEnd","isMiddle","ellipsesNeeded","label","pageNumber","calculatePageNumber","openingEllipsesNeeded","closingEllipsesNeeded","push","value","ChangeDetectorRef","ɵdir","selector","exportAs","coerceToBoolean","input","PaginationControlsComponent","previousLabel","nextLabel","screenReaderPaginationLabel","screenReaderPageLabel","screenReaderCurrentLabel","_directionLinks","_autoHide","_responsive","directionLinks","autoHide","responsive","trackByIndex","ɵcmp","NgIf","NgForOf","DecimalPipe","template","styles","changeDetection","OnPush","encapsulation","None","NgxPaginationModule","ɵmod","ɵinj","imports","declarations","providers","exports"],"sourceRoot":"webpack:///"}